<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1_The_blog</title>
    <url>/2018/02/23/1-The-blog/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="The-first-blog"><a href="#The-first-blog" class="headerlink" title="The first blog"></a>The first blog</h1><h3 id="2018-2-23-22-46"><a href="#2018-2-23-22-46" class="headerlink" title="2018.2.23/22.46"></a>2018.2.23/22.46</h3><blockquote>
<p>是故当知，世皆无常，会必有离，勿怀忧恼，世相如是。</p>
<p>当勤精进，早求解脱；以智慧明，灭诸痴暗</p>
</blockquote>
<p><br></p>
<ul>
<li>哈哈，自己的第一个博客终于上线了ヽ(●´∀`●)ﾉ</li>
<li>虽然，这个博客是完全傻瓜式的按着网上各位大佬的教程一步一步做的，，，，嘿嘿(ﾉ&gt;ω&lt;)ﾉ</li>
</ul>
<span id="more"></span>
<p>放寒假前就早已定下目标，，，自己搭建一个博客，，把自己今后学习编程时想到的写下来，，，一来是为了提炼自己的所学，做个笔记，，还有就是想着记录这学习编程以来的点点滴滴，，希望能够坚持做一件事，，坚持做一件自己真正喜欢的事，，哈哈，，，(ﾉ&gt;ω&lt;)ﾉ，，也算是自己的一个小目标吧，，，，d(`･∀･)b，，，，同时，，也希望自己能够以此来锻炼一下文笔吧，，，，，(」・ω・)」うー！(／・ω・)／にゃー！</p>
<p>回想这一个多月，，花在学习上的时间几乎可以忽略不计啊，，，(≧∀≦)ゞ</p>
<p>花了两三天把崩掉的vps救好了，，，，然后又花了两三天把这个博客做好，，，现在，，又在马上开学时写这第一篇，，，（逃(๑´ㅁ`)</p>
<p>昨日，，囫囵吞枣地看了些C++的文件操作，，哎，，，这假期看来就充了这一点电啊啊啊，，，，😂(´///☁///`)<br>英语是一点都没看啊啊啊，，，<br><br><br><br>现在才感觉到上大学可真不是单纯的可以玩啊啊，，有太多的事、目标要完成了啊，，感觉时间很多，，实际上却很少啊，，尤其是对于像我这样的“重度拖延症患者”，，，，</p>
<p>希望自己能够三年后有所为吧！！！，，<br>希望自己能够三年一直保持着想现在的心态！！乐观，平静，有目标，干预追求自己所想的！！！<br>哈哈！！！，，，(灬ºωº灬)</p>
<p>来来来，，，听歌d(`･∀･)b，，，，</p>
<iframe id="b" class="b video_pc" src="https://www.bilibili.com/video/av19891003/" frameborder="0" allowfullscreen="true" width="1080px" height="768px">
</iframe> 


<p>（话说我就是边听边码的这篇，，嘿嘿(ゝ∀･)，，，，<br><img src="https://i.imgur.com/AoC8mYQ.jpg" alt=""><br>(原谅我不会提取B站视频的链接，，，，只能把整个页面弄上来了，，，，，233</p>
]]></content>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>2017icpc西安区域赛</title>
    <url>/2019/09/28/2017icpc%E8%A5%BF%E5%AE%89%E5%8C%BA%E5%9F%9F%E8%B5%9B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>线段树专场，，，emmmm</p>
<p>作完签到就自闭了，，数据出锅2333</p>
<span id="more"></span>
<h1 id="A-XOR"><a href="#A-XOR" class="headerlink" title="A. XOR"></a>A. XOR</h1><p>之前就知道看到这个线性基+线段树的板子题，，一直想补，，拖到现在</p>
<p>题意很简单，，就是问一个区间某些数的异或和与K的或的最大值，，，</p>
<p>如果没有K，，这道题显然是签到题，，，但是多了一个K，，</p>
<p>其实K也很好处理，，，</p>
<p>因为要求两个数的或的最大值，，K又是给定的，，所以我们可以贪心的选择一个二进制位是1的但是对应在K中是0的数，，，这样显然最后求得或值最大，，</p>
<p>所以这题就变成了不考虑K中是1的那几位的数，，也就是对于 $a_i$ 只考虑K对应位是0的那些数，，将1删去，，，删去的操作就是对于每一个数都和K的取反的结果相与，，这样留下的就是在K中是0的那些位，，，最后对于这个处理后的新的数组快乐的用线性基+线段树暴力合并询问就行了，，，</p>
<p>线性基的合并要使用不是高斯消元的那种，，<del>（忘记关同步T了一发</del></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">4e5</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br>ll n, q, k;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">linerbasis</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxbase = <span class="hljs-number">33</span>;<br>    <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>    ll a[maxbase + <span class="hljs-number">1</span>];<br>    linerbasis()<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> a);<br>    &#125;<br>    linerbasis(ll *x, <span class="hljs-keyword">int</span> n)<br>    &#123;<br>        linerbasis();<br>        build(x, n);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(ll *x, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            insert(x[i]);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> a);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">insert</span><span class="hljs-params">(ll t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t &amp; (<span class="hljs-number">1ll</span> &lt;&lt; i))<br>            &#123;<br>                <span class="hljs-keyword">if</span>(!a[i])<br>                &#123;<br>                    a[i] = t;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                t ^= a[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">0</span>)flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>    <span class="hljs-function">linerbasis <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">const</span> linerbasis &amp;l1, <span class="hljs-keyword">const</span> linerbasis &amp;l2)</span></span><br><span class="hljs-function">    </span>&#123;<br>        linerbasis ret = l1;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-keyword">if</span>(l2.a[i])<br>                ret.insert(l2.a[i]);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">const</span> linerbasis &amp;l)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-keyword">if</span>(l.a[i])<br>                insert(l.a[i]);<br>    &#125;<br>    <span class="hljs-function">ll <span class="hljs-title">queryMax</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        ll ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-keyword">if</span>((ret ^ a[i]) &gt; ret)<br>                ret ^= a[i];<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;lb[maxn &lt;&lt; <span class="hljs-number">2</span>];<br>ll a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt)</span></span><br><span class="hljs-function"></span>&#123;<br>    lb[rt] = lb[rt].merge(lb[rt &lt;&lt; <span class="hljs-number">1</span>], lb[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    lb[rt].clear();<br>    <span class="hljs-keyword">if</span>(l == r)<br>    &#123;<br>        lb[rt].insert(a[l]);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    build(rt &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    build(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    pushup(rt);<br>&#125;<br><span class="hljs-function">linerbasis <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)<br>    &#123;<br>        <span class="hljs-keyword">return</span> lb[rt];<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    linerbasis ret;<br>    <span class="hljs-keyword">if</span>(L &lt;= mid)ret.merge(query(rt &lt;&lt; <span class="hljs-number">1</span>, l, mid, L, R));<br>    <span class="hljs-keyword">if</span>(R &gt;  mid)ret.merge(query(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, L, R));<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">int</span> t; <span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; q &gt;&gt; k;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>        k = ~k;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)a[i] &amp;= k;<br>        k = ~k;<br>        build(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>        <span class="hljs-keyword">int</span> l, r;<br>        <span class="hljs-keyword">while</span>(q--)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; l &gt;&gt; r;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; (k | query(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r).queryMax()) &lt;&lt; <span class="hljs-built_in">endl</span>;        <br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>ACM</tag>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>2017北京区域赛</title>
    <url>/2019/10/13/2017%E5%8C%97%E4%BA%AC%E5%8C%BA%E5%9F%9F%E8%B5%9B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>模拟题场啊，，，，，</p>
<p><a href="https://vjudge.net/contest/200099">题目链接</a></p>
<span id="more"></span>
<h1 id="E-Cats-and-Fish"><a href="#E-Cats-and-Fish" class="headerlink" title="E - Cats and Fish"></a>E - Cats and Fish</h1><p>签到题吧，，读完题后感觉是模拟，，然后写完之后一测样例wa了，，这时队友说推出公式了，，于是我就放弃调去看别的题了，，，但是wa了几发后又用模拟过的，，，</p>
<p>直接模拟时间，，记录每只猫的状态，，每次判断一下就行了，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(TM(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e3</span>+ <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> a[maxn], n, m, x;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> TM[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; x)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)vis[i] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)TM[i] = <span class="hljs-number">0</span>;<br>        sort(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n);<br>        <span class="hljs-keyword">int</span> all = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t = <span class="hljs-number">1</span>; t &lt;= x; ++t)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>                <span class="hljs-keyword">if</span>(!vis[i] &amp;&amp; all &lt; m)<br>                &#123;<br>                    vis[i] = <span class="hljs-literal">true</span>;<br>                    ++all;<br>                &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-keyword">if</span>(vis[i])++TM[i];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>                <span class="hljs-keyword">if</span>(vis[i])<br>                &#123;<br>                    TM[i] %= a[i];<br>                    <span class="hljs-keyword">if</span>(TM[i] == <span class="hljs-number">0</span>)vis[i] = <span class="hljs-literal">false</span>;<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-keyword">if</span>(vis[i])++ans;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; m - all &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="F-Secret-Poems"><a href="#F-Secret-Poems" class="headerlink" title="F - Secret Poems"></a>F - Secret Poems</h1><p>小模拟</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(TM(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e3</span>+ <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">char</span> s[maxn][maxn];<br><span class="hljs-keyword">char</span> str[maxn * maxn];<br><span class="hljs-keyword">char</span> t[maxn][maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; s[i] + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; s[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">1</span>, tot = <span class="hljs-number">1</span>;<br>        str[tot++] = s[i][j];<br>        <span class="hljs-keyword">while</span>(i &lt;= n &amp;&amp; j &lt;= n)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(j == n)<br>            &#123;<br>                ++i;<br>                str[tot++] = s[i][j];<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ++j; <br>                str[tot++] = s[i][j];<br>            &#125;<br>            <br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>            &#123;<br>                ++i; --j;<br>                str[tot++] = s[i][j];<br>                <span class="hljs-keyword">if</span>(j == <span class="hljs-number">1</span> || i == n)<span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(j == <span class="hljs-number">1</span> &amp;&amp; i != n)<br>            &#123;<br>                ++i;<br>                str[tot++] = s[i][j];<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i == n)<br>            &#123;<br>                ++j;<br>                str[tot++] = s[i][j];<br>            &#125;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>            &#123;<br>                --i; ++j;<br>                str[tot++] = s[i][j];<br>                <span class="hljs-keyword">if</span>(i == <span class="hljs-number">1</span> || j == n)<span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// for(int i = 1; i &lt;= tot; ++i)cout &lt;&lt; str[i];cout &lt;&lt; endl;</span><br>        <span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>, r = n, up = <span class="hljs-number">1</span>, dn = n;<br>        tot = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(l &lt;= r &amp;&amp; up &lt;= dn)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = l; i &lt;= r; ++i)t[up][i] = str[tot++];<br>            ++up;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = up; i &lt;= dn; ++i)t[i][r] = str[tot++];<br>            --r;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = r; i &gt;= l; --i)t[dn][i] = str[tot++];<br>            --dn;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = dn; i &gt;= up; --i)t[i][l] = str[tot++];<br>            ++l;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>                <span class="hljs-built_in">cout</span> &lt;&lt; t[i][j];<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="G-Liaoning-Ship’s-Voyage"><a href="#G-Liaoning-Ship’s-Voyage" class="headerlink" title="G - Liaoning Ship’s Voyage"></a>G - Liaoning Ship’s Voyage</h1><p>啊，，，计算几何+bfs，，</p>
<p>判断一下每一个点之间合不合法，，连边bfs即可，，</p>
<p>判断就是看这两个点在不在三角形里，，三角形里的点一定是没有边的，有相交的也不行，，，但是因为边上点可以走，，所以要判断一下在边上的情况，，尤其是：</p>
<p><img src="https://img-blog.csdn.net/20180830233455689?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2MjE1MjU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p>
<p>这样的情况我以为中间判了，，但是实际没判，，，疯狂wa，，，自闭，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(TM(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-comment">// .......</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sgn</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(x) &lt; eps)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Point</span>&#123;</span><br>    <span class="hljs-keyword">double</span> x, y;<br>    Point()&#123;&#125;<br>    Point(<span class="hljs-keyword">double</span> _x, <span class="hljs-keyword">double</span> _y)&#123;<br>        x = _x; y = _y;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">input</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// scanf(&quot;%lf%lf&quot;, &amp;x, &amp;y);</span><br>        <span class="hljs-built_in">cin</span> &gt;&gt; x &gt;&gt; y;<br>    &#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>==(Point b)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> sgn(x - b.x) == <span class="hljs-number">0</span> &amp;&amp; sgn(y - b.y) == <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(Point b)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> sgn(x - b.x) == <span class="hljs-number">0</span> ? sgn(y - b.y) &lt; <span class="hljs-number">0</span> : x &lt; b.x;<br>    &#125;<br>    Point <span class="hljs-keyword">operator</span>-(<span class="hljs-keyword">const</span> Point &amp;b)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> Point(x - b.x, y - b.y);<br>    &#125;<br>    <span class="hljs-keyword">double</span> <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">const</span> Point &amp;b)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> x * b.x + y * b.y;<br>    &#125;<br>    <span class="hljs-keyword">double</span> <span class="hljs-keyword">operator</span>^(<span class="hljs-keyword">const</span> Point &amp;b)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> x * b.y - y * b.x;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">distance</span><span class="hljs-params">(Point p)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> hypot(x - p.x, y - p.y);<br>    &#125;<br>&#125;p1, p2, p3;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Line</span>&#123;</span><br>    Point s, e;<br>    Line()&#123;&#125;<br>    Line(Point _s, Point _e)&#123;<br>        s = _s;<br>        e = _e;<br>    &#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>==(Line v)&#123;<br>        <span class="hljs-keyword">return</span> (s == v.s) &amp;&amp; (e == v.e);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(Point a, Point b)</span></span>&#123;<br>        s = a;<br>        e = b;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">length</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> s.distance(e);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">dispointtoline</span><span class="hljs-params">(Point p)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">fabs</span>((p - s) ^ (e - s)) / length();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">dispointtoseg</span><span class="hljs-params">(Point p)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(sgn((p - s) * (e - s)) &lt; <span class="hljs-number">0</span> || sgn((p - e) * (s - e)) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> min(p.distance(s), p.distance(e));<br>        <span class="hljs-keyword">return</span> dispointtoline(p);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">segcrosseg</span><span class="hljs-params">(Line v)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> d1 = sgn((e - s) ^ (v.s - s));<br>        <span class="hljs-keyword">int</span> d2 = sgn((e - s) ^ (v.e - s));<br>        <span class="hljs-keyword">int</span> d3 = sgn((v.e - v.s) ^ (s - v.s));<br>        <span class="hljs-keyword">int</span> d4 = sgn((v.e - v.s) ^ (e - v.s));<br>        <span class="hljs-keyword">if</span>((d1 ^ d2) == <span class="hljs-number">-2</span> &amp;&amp; (d3 ^ d4) == <span class="hljs-number">-2</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">return</span> (d1 == <span class="hljs-number">0</span> &amp;&amp; sgn((v.s - s) * (v.s - e)) &lt;= <span class="hljs-number">0</span>) ||<br>            (d2 == <span class="hljs-number">0</span> &amp;&amp; sgn((v.e - s) * (v.e - e)) &lt;= <span class="hljs-number">0</span>) ||<br>            (d3 == <span class="hljs-number">0</span> &amp;&amp; sgn((s - v.s) * (s - v.e)) &lt;= <span class="hljs-number">0</span>) ||<br>            (d4 == <span class="hljs-number">0</span> &amp;&amp; sgn((e - v.s) * (e - v.e)) &lt;= <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">pointonseg</span><span class="hljs-params">(Point p)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> sgn((p - s) ^ (e - s)) == <span class="hljs-number">0</span> &amp;&amp; sgn((p - s) * (p - e)) &lt;= <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getarea</span><span class="hljs-params">(Point p)</span></span>&#123;<br>        <span class="hljs-keyword">double</span> area = dispointtoline(p) * length() / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">return</span> area;<br>    &#125;<br>&#125;l1, l2, l3;<br><br><span class="hljs-comment">// ........</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">egde</span>&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span>&#123;<br>    <span class="hljs-comment">// if(!(tot &amp; 1))cout &lt;&lt; u &lt;&lt; &quot;-&gt;&quot; &lt;&lt; v &lt;&lt; endl;</span><br>    edge[tot].to = v;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> dis[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-built_in">memset</span>(dis, inf, <span class="hljs-keyword">sizeof</span> dis);<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    q.push(s);<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front(); q.pop();<br>        <span class="hljs-keyword">if</span>(vis[u])<span class="hljs-keyword">continue</span>;<br>        vis[u] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(dis[v] &gt; dis[u] + <span class="hljs-number">1</span>)<br>            &#123;<br>                dis[v] = dis[u] + <span class="hljs-number">1</span>;<br>                q.push(v);<br>            &#125;<br>        &#125;<br>    &#125;   <br>&#125;<br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">char</span> mp[<span class="hljs-number">25</span>][<span class="hljs-number">25</span>];<br><span class="hljs-built_in">map</span>&lt;Point, <span class="hljs-keyword">bool</span>&gt; mp1, mp2, mp3, p;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getidx</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> x * n + y;&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(Point a, Point b)</span></span><br><span class="hljs-function"></span>&#123;<br>    Line l = Line(a, b);<br>    <span class="hljs-comment">// if(a.x == 0 &amp;&amp; a.y == 1)&#123;</span><br>    <span class="hljs-comment">//     cout &lt;&lt; a.x &lt;&lt; &quot; &quot; &lt;&lt; a.y &lt;&lt; &quot;; &quot; &lt;&lt; b.x &lt;&lt; &quot; &quot; &lt;&lt; b.y &lt;&lt; endl;</span><br>    <span class="hljs-comment">//     cout &lt;&lt; l.segcrosseg(l1) &lt;&lt; endl;</span><br>    <span class="hljs-comment">//     cout &lt;&lt; l.segcrosseg(l2) &lt;&lt; endl;</span><br>    <span class="hljs-comment">//     cout &lt;&lt; l.segcrosseg(l3) &lt;&lt; endl;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-keyword">if</span>(l.segcrosseg(l1) == <span class="hljs-number">2</span> || l.segcrosseg(l2) == <span class="hljs-number">2</span> || l.segcrosseg(l3) == <span class="hljs-number">2</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(mp1[a] &amp;&amp; mp1[b])<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(mp2[a] &amp;&amp; mp2[b])<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(mp3[a] &amp;&amp; mp3[b])<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span>(!p[a] || !p[b])<br>    &#123;<br>        <span class="hljs-keyword">if</span>((mp1[a] &amp;&amp; mp2[b]) || (mp1[a] &amp;&amp; mp3[b]) || (mp2[a] &amp;&amp; mp1[b]) || (mp2[a] &amp;&amp; mp3[b]) || (mp3[a] &amp;&amp; mp1[b]) || (mp3[a] &amp;&amp; mp2[b]))<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(l.segcrosseg(l1) == <span class="hljs-number">1</span> &amp;&amp; l.segcrosseg(l2) == <span class="hljs-number">1</span> &amp;&amp; l.segcrosseg(l3) == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(l.segcrosseg(l1) == <span class="hljs-number">1</span> || l.segcrosseg(l2) == <span class="hljs-number">1</span> || l.segcrosseg(l3) == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <br>    <span class="hljs-comment">// if(l.segcrosseg(l1) == 1 || l.segcrosseg(l2) == 1 || l.segcrosseg(l3) == 1)return false;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; n)<br>    &#123;<br>        p1.input(); p2.input(); p3.input();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i)<span class="hljs-built_in">cin</span> &gt;&gt; mp[i];<br>        mp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>        l1.init(p1, p2); l2.init(p1, p3); l3.init(p2, p3);<br>        <span class="hljs-keyword">double</span> area = l1.getarea(p3);<br>        mp1.clear(); mp2.clear(); mp3.clear(); p.clear();<br>        p[p1] = <span class="hljs-literal">true</span>; p[p2] = <span class="hljs-literal">true</span>; p[p3] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n - <span class="hljs-number">1</span>; ++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= n - <span class="hljs-number">1</span>; ++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(mp[i][j] == <span class="hljs-string">&#x27;#&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>                Point p = Point(j, i);<br>                <span class="hljs-keyword">double</span> area1 = l1.getarea(p);<br>                <span class="hljs-keyword">double</span> area2 = l2.getarea(p);<br>                <span class="hljs-keyword">double</span> area3 = l3.getarea(p);<br>                <span class="hljs-keyword">if</span>(l1.pointonseg(p))mp1[p] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">if</span>(l2.pointonseg(p))mp2[p] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">if</span>(l3.pointonseg(p))mp3[p] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">if</span>(sgn(area1 + area2 + area3 - area) == <span class="hljs-number">0</span>)mp[i][j] = <span class="hljs-string">&#x27;#&#x27;</span>;<br>                <span class="hljs-keyword">if</span>(mp1[p] || mp2[p] || mp3[p])mp[i][j] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> dx[] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;;<br>        <span class="hljs-keyword">int</span> dy[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;;<br>        Point p, q;<br>        init();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n - <span class="hljs-number">1</span>; ++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= n - <span class="hljs-number">1</span>; ++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(mp[i][j] == <span class="hljs-string">&#x27;#&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>                p = Point((<span class="hljs-keyword">double</span>)j, (<span class="hljs-keyword">double</span>)i);<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-number">7</span>; ++k)<br>                &#123;<br>                    <span class="hljs-keyword">int</span> x = j + dx[k];<br>                    <span class="hljs-keyword">int</span> y = i + dy[k];<br>                    <span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">0</span> || x &gt;= n || y &lt; <span class="hljs-number">0</span> || y &gt;= n)<span class="hljs-keyword">continue</span>;<br>                    <span class="hljs-keyword">if</span>(mp[y][x] == <span class="hljs-string">&#x27;#&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>                    q = Point((<span class="hljs-keyword">double</span>)x, (<span class="hljs-keyword">double</span>)y);<br>                    <span class="hljs-keyword">if</span>(check(p, q))<br>                        addedge(getidx(j, i), getidx(x, y)), addedge(getidx(x, y), getidx(j, i));<br>                &#125;<br>            &#125;<br>        &#125;<br>        dijkstra(n * n, <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// for(int i = 0; i &lt;= n * n; ++i)cout &lt;&lt; i &lt;&lt; &quot;: &quot; &lt;&lt; dis[i] &lt;&lt; endl;</span><br>        <span class="hljs-keyword">if</span>(dis[getidx(n - <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>)] == inf)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; dis[getidx(n - <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>)] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>(end)</p>
]]></content>
      <categories>
        <category>ACM-比赛补题</category>
        <category>ACM-题解</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>2018年总结</title>
    <url>/2019/01/01/2018%E5%B9%B4%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="02250c49e1b643edf836094fc79cef8404a1329f1b15eee037eb6193e645467a">491c96e9ca0a6acc4c49f2e7a18c2c50672f10c57c66662f1bd461b6af78057197c008771af3ff9ee21c40052b4e4f3f04d11186499baf0662768434efa4ace8f39458798400d96e46274c214a4c510efbd9a19a1da47cdf8f6a2db01fc7c0a042efeb00308ddd76235c0a6272a93ea8c07aa0865bda8ae980ad056daa7363f1239913d598e7a7dadd96e2b7000a2dbb53b323854a94ffde584becc2ae8ac2d86f27f8616a3d1094930da06e7ee7ed5ebd23f57f5b86432f001a154b9e558af5bd1d196b934254dbb6820f9db6a48dad4f964263a499d13084d68e16366d0258a5698d9e8411fdf4e90316e761b97a0805aa0dea3c8f976810f01d6d3738ecd9722d98715064a866e9c54f71b4ada91ca142d990e4b5bbb27b7994ef24b4e40a6271e78ce526b9244d798dc78fa56f5fd8334b6e709f3b137ba531da297596394549405de7857337fd9d1f9695023904c6bdc6411f617c6a9bc1bcbaad7a180e0ab005d2c48df6f19931f06edc9a14c1ab51ce23f73393ed62d5a65fb3ad1d6be0db2d7e81de93f55278c7ad74524f86aa88a0a3e634388e67b842feeabc5173ce0c453d0a6794ea220c1222842d4d640ad328ad6ef71ca940982965cb1498850f72876ee923ed2c1db9105d2b43d0edaee9069bf271748939c674e8c28aa4ebfdd8e5e35390faebed870a68e564b0a391c8ce843cb391bba399a1b9e9c7432c38b8fc9bec4808fdd90e358ffe3c8df071bcedfb8abed8ff09963df12fece710c062e8ae47ba2a883cc452e34e3f9ce181c47c3dcaac32720bc02ab2ae6a66b5aad6370c900abb8ec66355b8e043caee79b8e92874cd549aaaa9170724a646786d69c8b642e6cf4cffb399d2aafe81c1e847e898ab9dd3998d3ae023643a3aa6bdaf0b21ce4e788d40fd3549a84a37220e2a16f457ed41dccced0f01c10421e5d8189e08b3fb1925470dc6b70595510636b986765d21998e18fb41bd3193400c197b5b524cf46a1e1587c9492149d4c9d0afca34082aa60933b8076e882468a61c3e55d3121720c35b8a66afa9181cab1d7eecb677c6ba7b0ae425a8a680ea69ccc7859aa339830efe387f338045de07f8e55541b8de047356bf39c5ea4a297f500d7366b4935c765d634d805264b17aa1b5a05d216ee3459b4e4805edeebe1013f75de60362623831f60d8f49037eaafcced9b1162bdc021cc353667aaf05b089b634b16da899b90c0446afe5873ab4acf12b412b45b087ba35f9408870a6d98101cd3bd1164ef91900016e664a11fdc09bd7d41aadcf3fddd50c88f0d79e3cf6f1c95fe382041d6a28e2914e66c1ff77d9a9c6fd46499821f61f09e01409e3d8d337b105841d8b84fb070f02124ab254ea8bf3b93d52fa4198202e689807b756851cc6a7ccbd2e21fdced6dab38de7e6b60f9e477f1d2b5d39381e9cff3cba61e076ab0632413dd14985850573cc6bb65762f1554de1cf84d724e9df4156538d43102be7b07b0f790c93b9ca45d892b66f89112f34940d26b24451afa5c2d27781bd9054de3d0d290c582f9f86630e4c382959cf3e10364e643e9e6820173d7647a3f233dd06a76dc1b10f25a2ba6b0ba88237ef6ebe11de7ba2b51ba0970485c1f7868b05cc649ac2e1b05a12c4dff9e03f5dd425f279ae80da65dcbe8cf77e9c4f758ca072c0b28410bd16cf18e3a937b9de4d39827368bf0fd6f7cfd1b14d29ab83f2875acc3b9434b64a4c9deec15f50911d18135147d3cf0565a314f68a9fae0f95a586040cdc1708e7da0aef67b049631a48eed3b6a5c291858abe4225b73b96da01d2fc6c7f0a9add6741da28f8ac178f8c96cc2ccecf2fb91119cb7b23b24204d906b7e33187b779eb1813ab28e3c1d8cb252da99d1cdf4679d1deee1d5442d57d91726b2352319a10b45c0e7ecfea5e60fe68d64cb407245411a5cbefa5c9955ea4dc7452c23127c88c797c5b3cfc9fdcefe8b7c37a25e32ace478b1b39058f86d3f1e0295b277e537fbe06b7a4ff9d0896d790f9b606679726a8fcb5797c52dfcce7861f3e7f21c3b20ec0405de32820f2126743e361638380ec55875ac2bfd95ec84915384337128d448933ccb630f8b242a1e3594f9da195ffa2a6ce5bfd6fe3f9ba1e7bf84590db6f5baa41cf13aeb8aae650d35e0864a2b0fc5a5e4b6487bed790d77914cc0d36f345cc96a415874682620d04b64af16e0082add2d9cb7360fe7f09545ee928df688765fa2083e5326f73e8288f3f4d18f02f5f815e63f24c2a181577460507ab596bc2aca5bb0315d296459a597c389e196f0ee6ab38f20758aebca4e031b033624d4b020eb78d2e3f83b0665428695d4d3087681d6773365fe4a33b3e40d036ce4354762ad14047a990afd5fde98d52c84a992c7ae5075ce4c02018c4795db97adf046ce82de9a1ce21f5c146e9490c38a89dcf0b82aace6b4a0870f1b39541a399976b68347d16e3dfded1363d40a89715bf5a6e2580c79fb80322c8ed0b26f1a0240112c31ade8dff2b0701a5af7ef13e1e83f8f8609a6175bd830ff99e1ad8853dea17de6224115938c718f663686c8a1f30271d7e72d7bff0918b0fbf0acf14bf87ed787d9bc76aae6dd1c9c1d77e0e5d60e6062e261b3aa7f9f172f9e836e8c7bca08c4269ae750dea8ed45d903016e41a65263a6e06c5ed77426873c27e8b98f424629a1dab5d2e22ec822507007465ba28bda35e011ecd9c5ebfff0a2cf0d143b1edb7fd55c00c83552b89e5329d254ac108b23d8544a4e4670f7bd86ad3c68035ba5f0e0956ccb200762d92348964aef45ee0505eb166e92a6fe943884bf5e209ee2671b1875851197a8f4f48441fed99f019ac00bef6c0d778100fbe41bfd4237696069787a38a134c6469adc48c2f425a60ab417075773d5324217bb8c9d1dc7868ade8a92b40eada97779d0e09116d9b7a1092c746da3984bf3f6d513f1fb01848fbf407e4bdc880413b2c515a60062b51ac06c9fded0667776c63e1e719520995b9a28b22889fed782cbe36ce62175db27bc6ed810ae007e7c6dacf8ddf4ff6d070cbcd63bab97197e24e53ee41962f879cf73fc22a7442add10b15e34c85340fa542c3a23238a9e052ecaaac35a89924a2fb56525ea0e2ed9a17e9a850ec64941e31cddefa31f86a8ae5f191564cbaeb5011fe33aee47699ac0d8a91b4f4c67934619c53dffa6db32cdd86c9f31c8003cfce40b11543d16535e8ff0072051fc4caa82e942394ac86acc46ad83693470732feddd7cfedc92da341ce1a94905ac78c07a8ca1549ef540a9d44df01f168e05a38b20e00c2c124f9010756ecd08b6b50001a207022f6bcf87aafc90d7c9ceec7ee5b0a44269204c70049560ba5373629b999ff25ecf02d145a6f067bbdc616220d08001411ad488a350ffcdb1c2ab4ddf4e56355cc382fba22eb88bd022ed5b6760ec19772b84ef3cda9b04ef2261e3a978500c08b53bdce68f10e69c6b6a1a7d329fd2004e0e57e57c2b3f162f0bc0b3a659c419c007c37f4ce9a1bbeaf3be578e2cef326c4b5ab0b94cf7ca802a0a1ab4bb577e04caa0aff933cf55922bc4c31d0a67c10478f9266e127601b4252107f987f873b0ff380d6ec8738c00a412ccfe6b62ff64cf74585c4a047b213fdf8db694fa8b638b11a156314c353238f9d1b2657539b9fcbf7265f2e67fde88fe27ff7d775f0937d0d40080f69ff453268641e165401bded03c945779961047f8b7a8cefd4166eb01a9ce13082832707ccd6e3f07d4637f70a11f15424d21d3882832acf5df698a06f56305cb8aec54a89ac09b54ee96764b5e9d324fced736f82f12d5eb5370d390cd2bb7f677797b1d396ccdb002494d448ca58d7dd54b32fc11ed17b0d14e0c44e2d8f00cea6d785453921f59ac03ef25a0ee8cb658c24237ab7c19644dc32ec08d8a44cffb8228bc1ad1750d687765d1f567f087567e279ea37b719985efcdacd6c2703e1968db6a8739c53644d8fce93a0260aaeb2215e423551bd54dcad76255c4dbc52eb162102c076dd1375ca22a901a57cbdd2d983172e4a8eeb7205de82ab10e454a8b46dbc4d51310121f3faa2126914b739294b40dbf8a9d71fab8d54645c72e7d1ab586e23e361e5c334d14d6823841a4a1679a5321b0e845c91289e8897dab0a1981ab34b455523b8890615e11dad559d928b19b6b951772c4f5423b6f54e23c19c13e3495e44195504afd84655c805c451470c73678c41281e0fb35c06f3e391bff0f09d016b15dcf29359f2d5a0d195e14f926f84809ca9216e82097541dfcddd43a295434ec7b25f38ab1a3bbd2941c9c322ac43c1ed410fd111481d952f275d63d0073c8039cf1b06b4c1df3ecc63e6268cbd8f8cf20b0b67dd61e51c5d278b78b5442df18953ed58d3142f72111e8a2a1baba4c9e72d1ae380796b21596bcd15311741d54ec996cab671de14b85f086d0802ed1d33ee9dc260e564a400c972b9ac466252f607b999ed4bbcc59c426d6e1ace4bd21310177af0477cff10d0961253de761884fc906ce14a788e6d6dc095dcc299e2d695b83cce29c6e6ba63fbc6b4b82cea0d6e8f9ab390d78c571d8b1a8690dc131e7483276cbe6520876ac0f50e75b835163c721c347a0e8aebf88d943c7901fb725f1a385f88f670a69fa741e2800ed30376ec5bb3ddf232ac8a36a887c3dc7af18d040eae3bcaebbcd3c5de80431bda7f9597516b4cb4f376cf99972b7e92d8f16ffb0a07eeacb7d3fdb1e8b3b0e3d000f7587df82d03d69af5fa5407cf289290da3a068dfd2ccc2a47d62bf93b0ed9fe7f3725971f12778537a468958affb799740c7ce741a2c1f2be530a32e54ef11ed9f9f832c922fc7a78cb67412fb771aa79b93ca7e75644048270204cd928c3d40f1965df968dbacff544f8914b8011315ea6d504014b98392e8aa91f0926b200f3fb0e361947e76a8693b9d7dc5fd260c20a8220890f428f62c5dbc5dc97bbb3cb062a1d03bf9bed58d94d9779e3e7c7170709501c26399717d26168437f7eb325564304df53423b9b982c79bfc12bdcc35adf7ff0bb9f6504bbdd7e7163ee1609340ca490475eef901c06ce9991142df364516728101c610b28bb51a1ab63ee314aabbd667f6913bd88afa8b63ccbfca69846937e7f95e15b6ccccb8be89ecafe58efe00d134df36db1ac5c53c234e4950153a234190e182a84ea3339cd499875500ff9de3354fb22b885a36ad852528c8a2384d68d6a732996552e22fa5dc46d041719d99f8b2a1d1c8d917bdbc01fd89da490686adff03e92122a99e773bf89937304ffd303ca6bdbf9872dabc527144274df4ab2d3b71d4af1b98c01db94afb675f32de9dd96963ec5182ee1d6676d614f9a3c50fbf5cf5a6aa68df92dc9399edb828ed1c4e89de696e835ee5f2bc90d7cde55cd9ae5ef65d00690c00a13ea4b6a32bb5e43c26f34eacba4a4ea80d86a961a5adccb4ecf9566247ac97c1761ec2728335576745986e16c1c75ad974ad3ecb082a8d70580768c51dc7cd387abbe985fe4996ed8aa2f05465ed232cf1b3d8504b2fc7c526081137256cd36c68ae88c4efe27acb62b163ee63111b9bd4fc3b748ece8e142720b2a657d46c7dfd219a8fb911f82497af1829508c6e05f1a331b51ef356c216a525feace23925483a5caef15150c17310cfa7bef4d1871dad2b0214602a23e54e5899db9ba835ea9eed8a3c5faf715502523d65214ab552d6e263640dd5752af23638ca588e1663e990b058a4a6ef72b1fa1261ad85e7cd21c92e38c2d39a45fe3ca10f4612c6647275fa22e5c611a08cfe1f249fb29659cf68316032064878ae9462bb2529c98734d13176f4b5fad1a7c398e0639860800be1ab0748a76bf6b9b3ce1b016af783b1a31ffbbf5b9333bf2a4d4f443615aac4bc371fe9639b3999fe65144251942aee15734bde6278fcb394e9f1100d64447b52e6011961545b6607fd396fe1588231a40cc696e4771bdd89547567d06b475e723722f7a1b24054b2965077f1c08c6d02f63d8233be0b1901aaaf419871e37de234d7cfe41447f9d7456bf4246794868332fae48ce0f4c2967a3aa8845a0a3e0d75ee5af30b4be057e08f976357669dee6c7f66b76c90d072e38a6991a533c34500074e129692393caca46ff47a402c885cbf7f47f50ca25d71d9ae5d8db97eb9eeec4fd3e93fb8e311138b9a66e997d353a619f73b213f458d3da285fe00de09a3ed100fe4a111a4109bb115e215ad7c94feb1a123e954eec19d637f07c42ab9e0e0a194a0d1e11fa708c52cbdcf95d54c099eaa3d47bc0d7331b1614bdb61015c5c0605d84d9a188483464a9be13bad2d716470db376e23675db5c964861cdf38f9ce7a95ef9f4b5dcde5eb1030bcf5c32fc268e300dc5a2b3fa8dbcf7233398b0a64626fc5283e1047875abee11ce53be55971539183166efa0b59166a7523dba2bfeb3c627b54fccb25f5f724d464f4a4223ed976547a0573982d352f52ecf08ad4dba31092e52eff3e2a292d5fa48aca363c3464a3904670014ad4c268f739fa703a2cf6d376cf55e4748a49c273bb9784e6fdfed65523cc630019d47e2c3128b9e3c7addde41d87a74e587d566816088cb336b6c62db483d308d51ea83e607044aac851052858b1bd96ee5535b7a5f07167a908bf64f035eff31961ac7594266b8437d269881440c490ca9b1b6a7cfe310d7570cc1bad4490e4ef38909d8c10fe63696dde2622527fa653ca930fdb3aa15936fe9f0a6550818774b7cfca4ef6973c6cd598f998ac3391f2cff35ca80d0634f7710333edbcc6710f71ec7d9f8a0c2a6171d597fd4b25353b1ef0deff66c29c7a488d0c807925e45a27d649e22edfd20c158acb8a0e2c6f1b79fd0a1ba1f17f9801a8e8fd5da46e500fe13e8386ae855bdec4cc9ca407d24b02f7ef4c8f5a56a4cfa82dfb641830fddba6d44204a36ab748e40bf7eb8433673b408daab1064182dcfc4062c9104cd1aeb16ae29b289f8973d62184733659f6615ed451b2707669a0fc6f2a1d3db7bbb9a32140adf6448ae5e7a3eb0e16ca31ab4cb95a7f5e69d55ee37fac293b452577d4b032dc616d480251604403b8007138f90eb5650f8be7d2ec0296bb66d645b589254a8ab25e4861a925bb34838656c6cac0e4e3ce2ea70ec319be3519714805bf280fa0faf81b4797e9b86370be33ce8087d06b6884b7a695468663375ae7dca549b8b51ae011d43152c4c469924c606a9c572de36b2e9ec4b6805eff607816f55e39296a7dace60efc8d19b1acd1d68ec773d8a4285c23362bd6875e2488900acd20f6dc658a07a346abc5a42c25b99688c3336b49cbb30fa34b51fb600f665f48fe06bf8b233bc130008a160af0774994728756ac40d7fbfa22e2116897416e38c221d8bbf9807b24b0a8e7e9c633df3a94154b5eea9a296930e7d3600d9d5637a9d14bc69aafba78af5171f420e334fa8cc79752acbfa12ec6c05313238bb76ce70b818ea15276d4554b94156e7debe77cf71a1fb59b1d73be2c7847e2acb92d2f08bccb99aae53d8c57a8ed2c7cce9cbe3261cf639d9ffcc0ba8eec1eb281194686df064a6925d26446e8825bbbe2a68b59cb56c5220b5b524eed110d2dd9d17402739a26844864ad6f0051e4048abf461d700cb2e844a5c367d585886f7b91b84a0d74cb83cf4b44421c5ef8d15d1f5417a04e985202f9eb50bce0a7ea79f9252ce4370704bcb92be1954fc162994b93a272ee7c0c7bb45b344628a283de9639fca5033bf5b65cb340cfd305002df8994e00aa1a9f97a00de888a73ee8eeaa4837e0a3746d3574922a51aed62ffcb9825358af5f9edb1720b0fa2ee08160d1b7a26238c0bd7f06323ba796de1f207cd8a69074631ea5dcd2df665752d0ab56727d48f34403bb001f72987568e6f2d2368e06a4bd3b613f29105de1fbf0fec419ea5539b78e29f0fdd29e57558016ecf8befaf13fd3f602e2ccd5a8ab956be64dd16842914c0a4223781a20772a305145226dc94679316557a6bcaca30cfb7364e8438ec0da26a1ffe2515a2f18ddc81f810cc6762344257a5796071fe7a2efa2c830604098b4b3e2310885c1304c88bec3b238c62aedf92c6760fead2dae624878ce49c2b24716f5284012afecde76bd8a6f023b8757da20a41e1b190c00bace6e5ba355872872de006bd8f0857b01e86680a617b40d80f6e4f53cce30df1d647cf5eb2e6ac67f8e9c5db78eec030385e9905365f849fd75aa74700f14d29871c719aae179b6f64d7f4a68a8da1795c1130a976eca018d797c89cda27a36037bf4bc4c4915c000124b18aff20491a8ee71364661db1b65bfe5ca0ba8d93662ea2d0b7d4c411fdcc339d4aec444160f394af08a4c070cb076d6dc9ced3e64850f819b1e261b7542fe528b49be7be409db1dba0673c8e40001a0a8ff967b3d724047d72e35074a3ebd1f46bda3c9f0ef24971f14d26ca168666c37c1fd132bd9285882e089b58e21eb9b6a86aab0b3d2bd455629eca0963ce41951fb1831e543a9f96348abe48e38d557d051b93dc1844fe05ded5a35361b9574ce990dd099211af6dba1d1de925dd3b43e66c6bd6c6dda1046f8ce9162170a6d40fec8353e234727365caab925dab7463c05a6556e12bce7d99452c21399f19ab0fd502cf70b69730bea119ca3c7ab24d6165320f9ffd3ce72543fbb31787b330cdbec6e6bcef554a62bd2a4f5de50938d68e6eaf78f66529308ee612aac3472c97c89823cbd9d788be47ee6ddbba4962656d7b0af4349711f6afefaac34261d0583c5a7bf4f7e3912a64221e145113a06f9c754de5dc15478461041ab644bc124ac15724a501a665dc1ec4a1eeffff027c1d52216d12a8559daeefd390156d120725338d63335aa76b52d11b0ef19f3563290d6abda94149db1422ea5113704b7d2b20e85f01ebbcfdf9338d9dd49a7f2789c30b1a1e59cacf7b5c8677a67826878d916239159e4fae71f7a40e20bc93a76e01e7627a9f705773dc1e30fbe14972c052f99b4f065d90b46ecfc5fe4f7772fb716784f4c087f65db9079f016498e44812f0b44dd24be3dd41a9408d78e5e3d5fce85dee833976cb63822cc15cd60a7359fe6a8092ba0448192017b3b3deb646eb960301026a2287fe27ca3974d57147e7eaad73960d4c58d12dd41812ade011781fdeae0a2617bf44d455e43a421f380e3dd3b8a925d18e413445d9acc3f3a3f010aba010297b302f3f4a86e363a95deaf98cc48f82c38589fbcca49a7fc6995cafedb1b64f3449eb71aab17731c7131f146c22f31794e90120f6d79135ae4446b6e9516d22499126d6996885b930c47c9c5adba7d4878f583862e0b7cfc9ecca98db70d611815cdbbde3c244f837e1e3b7e4a328c1a652680910ad2a6a70d13e5c1c4ec36dc53d5321eed6e981f2151ddefd8bc167396257d8389008d3f0aa0b4f968fea87625ce80586774b4833ff96f0bbb5e2ddc31e51028d4657647de05ffebf581b25e2911a394842b008fdb0e2ace7e5dd91e1f8ea88562cde6fc54a6828801a9dc24f8e48270f471cce172e8465cb2fee26270479dc89af77e81136429c63d5a91eb62242b12b4de9d1a37e4c38a6dbc4c9c0e011e024a5eab536826abae2b234a4cbcdbdcf6f77b93d19b438a75a4e417069fcfef755dd2cdfafe55b715701d753cbf3950b23279ae48b25d55bfce0377655d18d4c8a39ba697e3c3963999d82cded7b8b28859b288874b8dfc0e1d344c0e2af40697bfa1aaacbf8bc5668db1c4de297295c648953a9f212d61a8e05ee20f4501edcd430f899df71b548ad9c735e3619a72d793e376d1b6e3362eb834c40856895f9d90c493b38ec299abedc1a2d032b3b758fb4ef86138dab6494bb3d0b99ec70f668232d876f48a54dcaff2026081aa700d4db217608117c10f94e9ddb768b396318dd260d2e5e840dfdc533d3893944a964bc18aee8042b92e5bbeb2f92f9428986b6341ef17e166ad3a0391a1c3b9cd81f949f9dfec52365cb42941eac032b81f971e2b6db87ceba9c0757bf090fe006dad01087301be569917a1c0784c32327ba8aace8972c50f7e8127c77caecc67cfdd4ba93ec5ce09d61716f83f829cfdd310f6492a1c8119411e9c615097bef9a16f26dc3ce04642a9b5c9be8898f0d3feaa3ae1d97260d72babc54aca5bd5374c3478b79c481e7a96c5f23eb5754f01bdce30999b792538d430d50f64197148f00972c7855a548dc6bfc9056c2d894c17b6613883277f72d097d6e9ae1ff2c15a474cba8f6c0cf0987b100b8a8969456c8735f26fe36695e3e024ce923e35755af4ba1f35dd2a1f13e90aa58efa668675aa4b2126991292ddbaef276d7a98e0c8210661778a4dabb92d42c3e77a7966c7b3c588f7b72c2adb87694f599bd4918b90af01d6392811e3fc0fd48936acb38d4788f23ced27aa5fadeb187bce567f605baa97bf47529053b459879d2c2e4b5983baaf0657ee31f153f28e5075ce93d6e338fc32c58b75a74a2feacb0685181aa1f4b0c8215b421ff52fdc6beb3b52d679b9f087e495a41bef9a22c938062d93680e8d0161dfc5700df054c25da33ab3e41caf15c0422bd423a244b63e0ea12e20cd591c9fb46141c8bc42d7da789ed3e2605b14e67facb38fcfe3e663b7b731816c882d919faf7084429185fbe55c74a96ddcbc2f9b27c7c5c0995ba377f6d3be3650e1d08fd0b8977d3dc20d9b71dce96fddd0ec5ab3606cba2d6843410a056f20ad52d2ff33087385753aaa5c720b4a55b4df4c3d431fded7bf3ee81672388adf81351b48c80ff13f742bcde1ac7d605a315f3ba55b909f02ab4e08f547e3ccc4188bbdcff8b50efbe49e52e0a967851eebafcac2c0c1f7a12eed8dec862063dba30e6fe4cd58fe77b0d4f8d73555ce88fa55d32002d38f095f0f75363b4ca904beaad7f65bb88709de23b605c4f0471d16310e8db99653e1bf1342381d06c75f369dabf1555b7b1d57af81e73d97add7a40acb170c9c4db19d52f09a3a099c6f78d392801048e4c850455f0b39b79565afe61ee3493e40c0381d1911c8f7bf7f30f0c163aad956af22aa3c75775ed2ffa7963f60da2c6e2570ded81a44bb83351b030b834ff58c5471b2bccbb2823da7e1595b7f44986e34db1d19e9b21305416e88248f21fc0a75d6fa20fde706fa6fd4bfff6542e5d94f5b4f513bf1dfba9c5e721ae794e0d6b9885dcc4e81afdd903968fec095b786556fd0ffebf2639a785aa9644f5e217734e54551c1eff2eeebf3ece6c13fbe32867adbdeca18d0687674c197b45e45b0d0bf8937e733fd95716675aa369e274c6dd7ca5966617198ff6c13c99972e41f2faff4ff15980cabcc038fa89ead72b20979bd66e919f83801367b3c86d86a48c72320303058b0f84b90ef4a560d68e483c136d0121da155ac895cdefc77660149ac1328509a849fe1a4cb4553f2b89baecb30f289b0b3ecb7dfe32a83a9a780e2925c19e3de134e6c956b97847b1c155e7e4625b74b0b97ad00af485a4f8d8aecc8b5ecfc448e665d4e8b3896ee2218aa21e9c95fa47b1a59aaf8b8421f085fac37002cf472f2e720a1e4ff3cbf60da33e2cdb8bd6e6281a06239471e881fb27df616bfb4d4d1993d4db7af3f8911befcc21f345ba1501e5fb0c83a8e36f33f1fef777cb366e94f1486d1f6fd3d17e216dbd8dce96ad2d6ff5115ee1e03e9a796e86d4d363442522ef881a468b225557f922d9b90ad0ace45175f1dcf3ee6532b33eae8c787f8c52feb6f0faee52c953af0ac1594702d24d768f507b1b394775015755f707e0cf8b5ea1d3e9dfcd813d64ca082e107920bcaee4f5ca9c01f57f4d0dd94e80bcc0caa38f56a98ec6556b5e1941ca34dcab01fb3190d4802d893d0c287503e3fe037d616bf4fbe55c059626f68e25a98b75d343874b713a5d90bf534c87fc488eb728d83f2a97747506709d60deba1dbc2f17f71fbf06de2dadc041aa4c9c95c46f3396c4f6944fcc2744082e0821df72a503231a2ed10fa817df015a3f85770586bd3757c2b1811a7805ba6b39e116b670bc48bd3e4c68c0a5e215077ee420d799b0bb9755248a79f21ce6b2eb09c90153d49b2c058509330ae653251ea9a38fabbda483d4281f88c9c82e7d3ca252daae2d759dd6a92634f51d390b8d0690e850952b7171789683fab34ebaeb23ec93947a2f67ead4a06652bb88e814aacc7fdc6aeb6eb1b31c4ca75a06d9c00cde831379f8e01dbf9c41b0f4973cf780249f52d87b92877514fdbde0c81a06119f27f74e365ffe4724df2d44833ac342e1bc64e81d87abb938113860e2a1a872bdb777b306de7d9a668aaa358227b08011bc48ce0d8f5ebaa3b91336d1058616492e2c888f4fc0e664650dd3458806b9470787f63364aa44835907595edad8424a9bc9b051f92669c0e533c1d852ff795f986dcee0d864e1358326a6ed4b3c899cf58e2a7ee475f0555c9ac15e9fa7a16d5b2b5c6aae726318792aa86d32fc82b1bc608c2508b7f66a377ae69b878fdf7a26cf52635246949db03464a60f5eb3a98b2fbcb27bce09c619661e60f4a78c46cf10447078ca5b085ab16980e3eb4069972e4a8684f84533dea3f125989bcf64f1142dcd6778e5e21e50ad482c0129a04f3512b773f1bd1b155f0e6f0d8ef2a4115580646677452a17badb3abf29c72efdb56a29f66a64243a369df98121184709201e5ecb96e13a43a21566834cca97358ca5757a3b9bb9bc2dce9f6fc1d3291eb28cd13e9c3f1cb5f3f03fb4dc1bb962eb3ae9211966016f873879cd20038b59056482cee83971c8512d63784b360a8feff7a5ac79da103f7943e87971b24e9224a1ee36df08f043b849fdcc79995a3dcf68d3cd373c3725f6d62a2543166750f5201978e5c39a902d3774b2213d3091e0e898735f9d640548bdc1ea680b130b1cedb98811b7d187208771742a17496b8a34287fd11ee1531e58611579235bf79259a147181aa7eb53bf2b286b90713db270c457ef4706c367a78c77493b18893ff6e6355338b53f3db9db3bb1cee6bf534a86a8f7dbf83bb9513565b74c71b229e5cbc311edbe5e2e381ac1e618470763c93ecec2d56b4266624da5176f90a144801eb867eee33fc30707bc49dc61be892b77137c84d467d9c98fccb20376bfd89fe8a9ab6ebe8979b8ce6bba08783936126f643676934cd8f495cb158d80f983210d297d123a25d9844f5b2f32a51e3f169adfb8c7b492b934140cebe2f4502d228c386aa875c89053e510c304075a4b013b7dbaa37b48dd5dbac223d28bab36b1185f2eeac52246c0779121241b55fc5186daf3c7f31206f9bacc9d8f466ad4053510bda2186ac8c584fa9a3d5ecd29bea698e8837beb5dd62cfb4502e6382caed7f37c3e5c606128e166e46537d26db7c73c43a01333d379ac3f017823ac6c112f45f72f6fc8e55e153796f61d9718a584a0fcf0114b884802fd975dea0f5536a39d45efe6baf4598802f87d2b3b987e31070360f0d4f838f98bd0d8504fe523410da4fb63f54a6eb706a835bb54211091d5485c7199329d445c1dd68847fc80b437f99a4bacd86c077862c001f3fb6a0954aad37365dd6a2faad470ffab8428211ee258cb3102c7de54f70d03c8b248f4425dba6ffe9fd114af779d0f4d84a1684d49555218b6de98f33dc1d49cf70dd3b065ca79406705ae6a20c194a1cc744e95a5539774418bc5ea1070fe5696fb589e6f24b136326d6309d86f26cd3a8a07b473af2d93e2799ebe2f156c589918d38de07bcadf67f6bd7f5d5e5b532c4f972a4a4f8abf902b7bd42c4947eced5b17df990133434cbf90ade0a79f3f44d5e83da1118aeb979c0a64d7fa747e1004aabb374836ce66ed1544d9f9494a63be5941e92f2968378f4bbed8d9ab392001e8892187d09dc3834049a7b1abe67b1eafe510f778045c1ff0375a10d58ca7d2a6c274212f2b01affe4175fba8b304e9dbf46022381afb98dab01f02162ef8e1ffe2f387fb8e91ef9f920a2c7cdba6967ef00adeb7e9f17e349de3de02ff8587fb8b42598ea9c9a83a429b111c1b9a4b6c957f85c8e84c16fafeca21f62b1ca2fe1ae6d3f88d05fbe1cf892957c9382ef1b2a1f9844a4c164853af956a830fc9d8267446cbdecf5bd3927adbf179ed004a61fa4d12267d2da32f8932ee94b958387f420d6b495103674bae6b04b0b7aeda022bfd46f1b99e044d89b3b84e3fd50c859667b674a8970a6d9a67e33bdae92e083d888e13201d005cd95517fecfb70977eab4f20c78407bc89d4f22c9b1f24608e6579b855297ea5164ded47d00524b1c8aad3b850c2ec9ea33f180e75da624bd38fe94f3f8e43a9c5725b1cc5e2a72119a2957a195f9b6352eda408ed6536f29ecb58fa8862761866fe19033d38ccffe4070588504b1a21b81c5bacb5a14753eea1d544a93aa4556301e27f56a904fab478c76bc645f6b9c0a4862f38db612d0a2813e3bdcd48e54ad0cd0baca1665ed0cdf8b8c3521d1c86ea4a8fc6806113a4649d1ba78dc9e2bdfb8471b0c71d978e3f1adeb8ab49fbe1dd1558c76a58ba482c624a36175f77084a456365fa18361b4f05db1225c2970e37d88d30ecd3dc2943be05a99f354e81b4c52856e369b5d3192aa118415e14d39bbdb637b0bbd1fdeabb35d5a37c241247331e720fcfacb3c4f17972a4bbc2e3da6c05aa7417f1c71e42e5c988207a9bf190598031387f29058dc62761b1959b6a099d826446cd5aa422da746f264c1c5ca66bca8d591a2fe4261e2c0a0794b76ef6f158185c588b83b1d68f83ccebdf4d56c328af0a12816c7bd22144ca5cc63b889b6497cedb83b41d38f8fe2fffe0d4ff8b7e1d91748b7310e52a239acda068f2dd68e0fee29530f233a36df2209f8ce5d612fd5debf3e7b00c6d0b4e46a3d1627f69bbd2c458b41113d5b6c2dadcd206868908a19a2fa030dafaaf1b68fb599fa1d74a0f256babbfa17b83057080fe2f9d40045b3b77d3bfe7021245722d79919424775a683f8e6e58038c87887a06d170d6c960f448555e9dfc1c6e15d6a307e7764771c9440564c0e1b9d1a299df137cf9f43a0d73a22df9c919b6f76128f7f355a4afe9ce9f0fa1c45b4ffa2abf070f85f5ca657fef9c1c1d0c6d30b0473786612eb4adbf3b2b807a39d617f4ea8a4ec39162ebdce362d40e55019a34e355a48be87c200a2ce2082e91c399992711a2c0e9624ea5f09d6969dea0bab211984f38cb9092dffac6a0f63231d2f24421f5a986d33b50c117e16ac0e716b475ef86669fcd8219ec21ab49500a268a2db1f327f1c8463e35dfbe50db407f5f463056cd46623c265d732d4ac706bb331f22ffd0e7fa10d803d76e98913bec5e01521fbb9af330cb5e6cf09a454632c34b92bb0eb02c7331b9399bf20531d4a1bf218a609a4f6dab835c189b45b8fdb75f14d0dc714b8549994779f621fe9aac2c732f2687506492f88e144c25552e62ca6070e011f0ea99c9464ffaacde075626d9147f5dbaac32bf6f56c1183fa8a32459a5a96965a6a2f2978c43907e17796882e7c719111f936e427551cff28cbff883c947c1ac756c311d4fb0fac41e2f9a5f7127d870b633283c291cff4b2b5710fe68442415e3317ba3e9e3c6f18c99c16db6bbb5292a45b2c6160a4e4d45e0b1440a9812e5ed5320efe6f6c0b7eb2ebf5b53df15f3d3711fec3852e525555449b2f17394f723d998cf40158ee4e7ed405ca184a00eb293ae7a314f3271770d800c804c96ac6fb46408d5512a60974201bb797cad83e9bb24f9959d62cb6d78d8075a4394876b1d7d5a5313b3b98e123d9810015b6218f797ff1376778cf18b2a05dd1add889e2371637f59de5800e96d2022b3e519f0a05d89b9c78b1f75231143f3af101cf654873667294f81d5c4cbb36a3f7e547d1aecd292525a446a32761aec634c78815d9ebcb3cf388ab3bc9b29331dfae3bdaa55f36eb600efb5430f6d21f70d1c92aee5f615ff2f74bc273bed46304cf0ad8641567f5644024c4c0827137d5e69bf3b6652326f1caf3b33345a3ef587ead4740230549df3890968ed9d3a5524e7e556d70dd2a0b5c3403e68a2db782babf195b17bdeead34286a8c4f72c6e421cc650462a986d364f10bb3dd9805f500317d25173b3c60400ab62c20a2ba7373b08da374f9f2c1860a17734b20c77d6304712cbc8bc715f22dc56dcf918760445281c4334f62e812d933a0554c8a6ff69f4792ac3be21c136ef2698ff835e40ccb7f4686f00c9ebc7787b9aa9c30e99682ce37e8976cb81ea96a799e1aac08ff0d2734b1f0334f83b386df71c7bedde6df2216442b6ae5cefe3c046d0750bb28fdff4465a6a7b244a79bcd00c1a900da8a266237996c56a612fa1084305112e070b8dc8ca85e9099e9e9c330ddda6462a3c46b3ed831b409af2e230144ecf6a00d41a2ecb466bd48fd3e50c71fbeb5ef82386ef1f7390169b63c5223358713ffb7d9310926373cc75ad9deb4a1d7346ce08324153344552d5a003583bc0f656f49a874644c7c1ff888006ebc7ddf19b82f1d9e0e778efb5d259df3e4557475d97801aa1a3f1c0bbb9b2deabdca496324469e8507aec44b4b6b8d506b78071e0295e1eb276874fe75f992eafa53cc6e10b8113896caf274029af6512b3a63ce9dd64f026180b9cead3da94397a0b55a5d9c18d8c5edbf458f77445468b3d8c509d9534d27b21d2831c939b411a8c3cbe4ce456bcbed9d8e0fe5c3ab0990ceb78aebbfeff879d4ea434afac2dc871937e7639e1a7a31a36c58dcd3102c13786202eec9b9d1a93612eaa62b1ab4ffd117c0e2a3ff3042d02203ea28c15c33f91811e6a882c2e064c783cd89ce3e8caa737df4c3439802ebf0ded6394d34901ffd532dacd9cebdc742c0cd2476b3d99cdde235ffa00bcff0f7c00be7c926fa24dc709a8d1749ada018f892f091bf7bfc1d72337db635d1c7b01e9e56a4e60a8436d855ef5e4124679a24ab4c032411b0948485dfd57903cbae15d854f49919d420e71cf39b4d2923f8a2e0a5d365a7d218b675c5eafd6f0a64a23c384c4409dc2f7dd1a8afa44aa383dbfec55d1cc31fe3d900ee7835b81c84d461c968aa555cabdc04dc89b8b04c459101165148c0806dd105feeb57d2cf6c2bcf766f6899ed53fc9bf7fdf7e58786bfc3406149458da5491ff33bd4fa919f10616a20f1a9f2fedb16fab33f3ba7c89ac44ccb17b10810e47d4439fabce360fde3397859f9c8e9c582214a970b8fdaa569751c0f0b2d450a4d988a44781bd8fbc586062922b1f4ec19600ceac5620bce45bf7ef351aaf62560c1a193d8207bc06c51e3e8664d5ca0336f549c992b3aea7c9f</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>diary</category>
      </categories>
  </entry>
  <entry>
    <title>2019 Multi-University Training Contest 2</title>
    <url>/2019/07/24/2019-Multi-University-Training-Contest-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>补题ing</p>
<span id="more"></span>
<h1 id="Harmonious-Army"><a href="#Harmonious-Army" class="headerlink" title="Harmonious Army"></a>Harmonious Army</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;iostream&gt;</span><br><span class="hljs-comment">// #include &lt;cstdio&gt;</span><br><span class="hljs-comment">// #include &lt;cstdlib&gt;</span><br><span class="hljs-comment">// #include &lt;string.h&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;algorithm&gt;</span><br><span class="hljs-comment">// #include &lt;set&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-comment">// #include &lt;ctime&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt;<br>    ll cap, flow;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> gap[maxn], dep[maxn], cur[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll w, ll rw = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v; edge[tot].cap = w; edge[tot].flow = <span class="hljs-number">0</span>;<br>    edge[tot].nxt = head[u]; head[u] = tot++;<br>    edge[tot].to = u; edge[tot].cap = rw; edge[tot].flow = <span class="hljs-number">0</span>;<br>    edge[tot].nxt = head[v]; head[v] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> q[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dep, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> dep);<br>    <span class="hljs-built_in">memset</span>(gap, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> gap);<br>    gap[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> front = <span class="hljs-number">0</span>, rear = <span class="hljs-number">0</span>;<br>    dep[t] = <span class="hljs-number">0</span>;<br>    q[rear++] = t;<br>    <span class="hljs-keyword">while</span>(front != rear)<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q[front++];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(dep[v] != <span class="hljs-number">-1</span>)<span class="hljs-keyword">continue</span>;<br>            q[rear++] = v;<br>            dep[v] = dep[u] + <span class="hljs-number">1</span>;<br>            ++gap[dep[v]];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> sta[maxn];<br><span class="hljs-function">ll <span class="hljs-title">isap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    bfs(s, t);<br>    <span class="hljs-built_in">memcpy</span>(cur, head, <span class="hljs-keyword">sizeof</span> head);<br>    <span class="hljs-keyword">int</span> top = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> u = s;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(dep[s] &lt; n)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(u == t)<br>        &#123;<br>            ll min = linf;<br>            <span class="hljs-keyword">int</span> inser;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(min &gt; edge[sta[i]].cap - edge[sta[i]].flow)<br>                &#123;<br>                    min = edge[sta[i]].cap - edge[sta[i]].flow;<br>                    inser = i;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i)<br>            &#123;<br>                edge[sta[i]].flow += min;<br>                edge[sta[i] ^ <span class="hljs-number">1</span>].flow -= min;<br>            &#125;<br>            ans += min;<br>            top = inser;<br>            u = edge[sta[top] ^ <span class="hljs-number">1</span>].to;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">int</span> v;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = cur[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dep[v] + <span class="hljs-number">1</span> == dep[u])<br>            &#123;<br>                flag = <span class="hljs-literal">true</span>;<br>                cur[u] = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)<br>        &#123;<br>            sta[top++] = cur[u];<br>            u = v;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> min = n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dep[edge[i].to] &lt; min)<br>            &#123;<br>                min = dep[edge[i].to];<br>                cur[u] = i;<br>            &#125;<br>        &#125;<br>        --gap[dep[u]];<br>        <span class="hljs-keyword">if</span>(!gap[dep[u]])<span class="hljs-keyword">return</span> ans;<br>        dep[u] = min + <span class="hljs-number">1</span>;<br>        ++gap[dep[u]];<br>        <span class="hljs-keyword">if</span>(u != s)u = edge[sta[--top] ^ <span class="hljs-number">1</span>].to;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br> <br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m)<br>    &#123;<br>        <span class="hljs-keyword">int</span> u, v;<br>        ll a, b, c;<br>        init();<br>        <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>, t = n + <span class="hljs-number">1</span>;<br>        ll sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>            addedge(s, u, a + b);<br>            addedge(s, v, a + b);<br>            addedge(u, v, a + c - <span class="hljs-number">2</span> * b);<br>            addedge(v, u, a + c - <span class="hljs-number">2</span> * b);<br>            addedge(u, t, b + c);<br>            addedge(v, t, b + c);<br>            sum += a + b + c;<br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; sum - isap(s, t, n + <span class="hljs-number">2</span>) / <span class="hljs-number">2</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>2018年国庆</title>
    <url>/2018/10/05/2018%E5%B9%B4%E5%9B%BD%E5%BA%86/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="15cc199c5422d3d4835a2907381cfb90a83daaaa94f03946028a7170386fa3ce"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>diary</category>
      </categories>
  </entry>
  <entry>
    <title>2019南京网络赛</title>
    <url>/2019/09/02/2019%E5%8D%97%E4%BA%AC%E7%BD%91%E7%BB%9C%E8%B5%9B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>这场网络赛一大半时间都在自闭，，在那道广义欧拉降幂上随着时间逐渐的 <del>降智</del> ，，，，<del>（怎么这么多的数论题啊，，，</del></p>
<p><a href="https://www.jisuanke.com/contest/3004?view=challenges">题目链接</a></p>
<p>按做题循序来：</p>
<span id="more"></span>
<h1 id="H-Holy-Grail"><a href="#H-Holy-Grail" class="headerlink" title="H. Holy Grail"></a>H. Holy Grail</h1><p>最短路签到，，按题意建图，，每次求 $v-&gt;u$ 的最短路的相反数，，然后加边即可，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> head[maxm &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> dis[maxn];<br><span class="hljs-keyword">int</span> cnt[maxn];<br><span class="hljs-keyword">int</span> tot;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to;<br>    <span class="hljs-keyword">int</span> w;<br>    <span class="hljs-keyword">int</span> last;<br>&#125;edge[maxm &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u , <span class="hljs-keyword">int</span> v , <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].w = w;<br>    edge[tot].last = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> u;<br>    <span class="hljs-keyword">int</span> w;<br>    node(<span class="hljs-keyword">int</span> _u , <span class="hljs-keyword">int</span> _w):u(_u) , w(_w)&#123;&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(head , <span class="hljs-number">-1</span> , <span class="hljs-keyword">sizeof</span> head);<br>    tot = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis , <span class="hljs-literal">false</span> , <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)dis[i] = inf;<br>    vis[s] = <span class="hljs-literal">true</span>;<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    q.push(s);<br>    <span class="hljs-built_in">memset</span>(cnt , <span class="hljs-number">0</span> , <span class="hljs-keyword">sizeof</span> cnt);<br>    cnt[s] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u =  q.front();<br>        q.pop();<br>        vis[u] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].last)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">int</span> w = edge[i].w;<br>            <span class="hljs-keyword">if</span>(dis[v] &gt; dis[u] + w)<br>            &#123;<br>                dis[v] = dis[u] + w;<br>                <span class="hljs-keyword">if</span>(!vis[v])<br>                &#123;<br>                    vis[v] = <span class="hljs-literal">true</span>;<br>                    q.push(v);<br>                    <span class="hljs-keyword">if</span>(++cnt[v] &gt; n)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>  <br>    <span class="hljs-keyword">int</span> t; <span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> n, m;<span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>        init();<br>        <span class="hljs-keyword">int</span> u, v, w;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>            ++u; ++v;<br>            addedge(u, v, w);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">6</span>; ++i)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;<br>            ++u; ++v;<br>            spfa(v, n);<br>            w = dis[u];<br>            <span class="hljs-built_in">cout</span> &lt;&lt; -w &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            addedge(u, v, -w);<br>        &#125;<br>    &#125;<br>    <br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="F-Greedy-Sequence"><a href="#F-Greedy-Sequence" class="headerlink" title="F. Greedy Sequence"></a>F. Greedy Sequence</h1><p>签到之后做的看的是这道，，，半天才理解题意，，然后旁边有人说是线段树，，还有说是主席树的，，，因为队友去搞了，，又想着这 <del>数据结构</del> 题怕不是得写半天，，算了看别的题去了，，</p>
<p>后来他们的确是线段树过的，，，今天看到一个网上的题解，，贼简单，，没那么多花里胡哨的东西，，几行就搞定，，，</p>
<p>首先题意是给你一个长为n的排列，，然后让你构造出n个序列 $s_i$ ，每一个序列要首先满足字典序最大，，然后他的开头是 i ，，并且是一个递减的序列。。除此之外，要求每选择的一个数的下标和上一个数的下标的差的绝对值不大于k，，，，然后问你这个序列的长度，，一共输出n个序列的长度，，，，</p>
<p>这个简单的解法思路是这样的：</p>
<p>首先对于第一个序列，，他的长度肯定是一，，对于第二个序列，，他的长度肯定最长是2，，也就是 <code>2 1</code> 这样的情况，，前提是1的下标与2的下标的距离不超过k，，，对于第三个序列，，如果2与3的距离不超过k，，那么答案就是 <code>1 + sum[2]</code> ，，否者就是1，，同理对于其他的序列都可以通过前面的序列求得，，，所以先得到每个数下标 <code>pos[x]</code> ，，然后从 1到n 遍历每一个序列，，对于第i个序列，他的满足条件的序列的长度就是 i - 1 到 1 这些序列的中最前面的并且距离不超过k的那个序列j的长度 <code>sum[j]</code> 加一即可，，</p>
<p>这样跑一遍就行了，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld; <br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><br><span class="hljs-keyword">int</span> sum[maxn], pos[maxn], a[maxn];<br><span class="hljs-keyword">int</span> n, k;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; k;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)pos[a[i]] = i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)sum[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">1</span>; --j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(pos[i] - pos[j]) &lt;= k)<br>                &#123;<br>                    sum[i] = sum[j] + <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; ++i)<span class="hljs-built_in">cout</span> &lt;&lt; sum[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<span class="hljs-built_in">cout</span> &lt;&lt; sum[n] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>如果是随便给的一个序列的话，这个做法可能就不行了，，，</p>
<p>早知道多想一会了这题，，说不定当时能早出，，（雾</p>
<h1 id="B-super-log"><a href="#B-super-log" class="headerlink" title="B. super_log"></a>B. super_log</h1><p>广义欧拉降智即可，，可以看我的<a href="https://www.cnblogs.com/31415926535x/p/11448002.html">这篇博客，，</a></p>
<p>剩下一堆没学的算法、数学，，，emmm</p>
]]></content>
      <tags>
        <tag>ACM</tag>
        <tag>补题</tag>
      </tags>
  </entry>
  <entry>
    <title>2019徐州网络赛-The Preliminary Contest for ICPC Asia Xuzhou 2019</title>
    <url>/2019/09/07/2019%E5%BE%90%E5%B7%9E%E7%BD%91%E7%BB%9C%E8%B5%9B-%C2%96The-Preliminary-Contest-for-ICPC-Asia-Xuzhou-2019/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>徐州网络赛，，，全程口胡+划水，，，emmmmm</p>
<p>题目感觉都不难，，看见很多人都是8题，，，</p>
<p>我们最后出了5题，，，A题我比赛临结束时写的，，然后写炸了，，</p>
<p>两道字符串的题因为没有学过字符串专题的内容，，最后放弃了，，，</p>
<span id="more"></span>
<h1 id="A-Who-is-better"><a href="#A-Who-is-better" class="headerlink" title="A. Who is better?"></a>A. Who is better?</h1><p>简单的 斐波那契博弈+中国剩余定理，，</p>
<p>中国剩余定理用来求n，，判断一下n是不是斐波那契数列的值即可，，，n无解的时候就是题目的无解，，</p>
<p>一开始别的队的提这是斐波那契博弈，，，但是好长时间每看博弈，，没看出来是斐波那契博弈，，然后因为模数不互质，，，所以要判断是否有解，，，因为斐波那契数列求少了，，然后以为是CRT板子错了，，，然后就一直哇，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-function">mt19937 <span class="hljs-title">rnd</span><span class="hljs-params">(time(<span class="hljs-number">0</span>))</span></span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-comment">// const double pi = 3.14159265358979;</span><br><span class="hljs-keyword">double</span> pi = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">5e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br>ll f[maxn];<br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a, ll b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> b ? gcd(b, a%b) : a;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ex_gcd</span><span class="hljs-params">(ll a, ll b, ll &amp;x, ll &amp;y, ll &amp;d)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (!b) &#123;d = a, x = <span class="hljs-number">1</span>, y = <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        ex_gcd(b, a % b, y, x, d);<br>        y -= x * (a / b);<br>    &#125;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">inv</span><span class="hljs-params">(ll t, ll p)</span></span>&#123;<span class="hljs-comment">//如果不存在，返回-1 </span><br>    ll d, x, y;<br>    ex_gcd(t, p, x, y, d);<br>    <span class="hljs-keyword">return</span> d == <span class="hljs-number">1</span> ? (x % p + p) % p : <span class="hljs-number">-1</span>;<br>&#125;<br>pair&lt;ll, ll&gt; chinese_remainder(ll A[], ll B[], ll M[], int n) &#123;//求解A[i]x = B[i] (mod M[i]),总共n个线性方程组 <br>    ll x = <span class="hljs-number">0</span>, m = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) &#123;<br>        ll a = A[i] * m, b = B[i] - A[i]*x, d = gcd(M[i], a);<br>        <span class="hljs-keyword">if</span>(b % d != <span class="hljs-number">0</span>)  <span class="hljs-keyword">return</span> <span class="hljs-built_in">pair</span>&lt;ll, ll&gt; (<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>);<span class="hljs-comment">//答案，不存在，返回-1 </span><br>        ll t = b/d * inv(a/d, M[i]/d)%(M[i]/d);<br>        x = x + m*t;<br>        m *= M[i]/d;<br>    &#125;<br>    x = (x % m + m ) % m;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">pair</span>&lt;ll, ll&gt;(x, m);<span class="hljs-comment">//返回的x就是答案，m是最后的lcm值 </span><br>&#125;<br><br>ll a[maxn], b[maxn], c[maxn];<br><span class="hljs-comment">// vector&lt;ll&gt; a, b;</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br><br>    f[<span class="hljs-number">0</span>] = f[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">70</span>; ++i)f[i] = f[i - <span class="hljs-number">1</span>] + f[i - <span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">int</span> k; <span class="hljs-built_in">cin</span> &gt;&gt; k;<br>    <span class="hljs-keyword">int</span> x, y;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= k - <span class="hljs-number">1</span>; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; a[i] &gt;&gt; b[i];<br>        <span class="hljs-comment">// cin &gt;&gt; x &gt;&gt; y;</span><br>        <span class="hljs-comment">// a.push_back(x);</span><br>        <span class="hljs-comment">// b.push_back(y);</span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">10</span>; ++i)c[i] = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-built_in">pair</span>&lt;ll, ll&gt; n = chinese_remainder(c, b, a, k);<br>    <span class="hljs-comment">// cout &lt;&lt; n &lt;&lt; endl;</span><br>    <span class="hljs-comment">// cout &lt;&lt; n.first &lt;&lt; endl;</span><br>    <span class="hljs-keyword">if</span>(n.first == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Tankernb!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">70</span>; ++i)<br>        <span class="hljs-keyword">if</span>(f[i] == n.first)<br>        &#123;<br>            flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    <span class="hljs-keyword">if</span>(flag)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Lbnb!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Zgxnb!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="B-so-easy"><a href="#B-so-easy" class="headerlink" title="B. so easy"></a>B. so easy</h1><p>一开始我开的题，，读完题之后想着这部直接暴力就行了，，，然后用map存每一修改的数，，然后询问就一直往下跑不就行了，，第一个没标记的就是答案啊，，，然后被卡map了，，，队友一看说是肯定T，，然后就想别的思路了，，，最后他们就用并查集+unordered_map来合并集合过的，，，</p>
<p>刚刚我又试了一下unoredred_map暴力，，发现直接过了，，，emmmmmm</p>
<h2 id="并查集区间和并"><a href="#并查集区间和并" class="headerlink" title="并查集区间和并"></a>并查集区间和并</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> p_b push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> e_b emplace_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> debug cout&lt;&lt;<span class="hljs-meta-string">&quot;!!!&quot;</span>&lt;&lt;endl;</span><br><span class="hljs-comment">//#define LOCAL</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">static</span> ll inf64 = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-built_in">unordered_map</span> &lt;ll, ll&gt; fa;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findfather</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> fa[x] == x ? x : fa[x] = findfather(fa[x]);<br>&#125;<br><br><span class="hljs-keyword">int</span> n, q;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> Local</span><br>    freopen(<span class="hljs-string">&quot;1.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>);<br>    freopen(<span class="hljs-string">&quot;1.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-built_in">stdout</span>);<br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;q);<br>    <span class="hljs-keyword">while</span>(q--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> cmd;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;cmd);<br>        <span class="hljs-keyword">if</span>(cmd == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> pos;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;pos);<br>            <span class="hljs-keyword">if</span>(fa.count(pos+<span class="hljs-number">1</span>) == <span class="hljs-number">0</span>)<br>            &#123;<br>                fa[pos] = pos;<br>                <span class="hljs-keyword">if</span>(fa.count(pos<span class="hljs-number">-1</span>) != <span class="hljs-number">0</span>)<br>                    fa[pos<span class="hljs-number">-1</span>] = findfather(pos);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                fa[pos] = findfather(pos+<span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span>(fa.count(pos<span class="hljs-number">-1</span>) != <span class="hljs-number">0</span>)<br>                    fa[pos<span class="hljs-number">-1</span>] = findfather(pos);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">int</span> pos;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;pos);<br>            <span class="hljs-keyword">if</span>(fa.count(pos) == <span class="hljs-number">0</span>)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, pos);<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, findfather(pos)+<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">10 11</span><br><span class="hljs-comment">1 2</span><br><span class="hljs-comment">1 3</span><br><span class="hljs-comment">1 4</span><br><span class="hljs-comment">1 6</span><br><span class="hljs-comment">1 7</span><br><span class="hljs-comment">1 9</span><br><span class="hljs-comment">2 2</span><br><span class="hljs-comment">2 8</span><br><span class="hljs-comment">1 5</span><br><span class="hljs-comment">1 8</span><br><span class="hljs-comment">2 1</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>
<h2 id="我的暴力"><a href="#我的暴力" class="headerlink" title="我的暴力"></a>我的暴力</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-function">mt19937 <span class="hljs-title">rnd</span><span class="hljs-params">(time(<span class="hljs-number">0</span>))</span></span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-comment">// const double pi = 3.14159265358979;</span><br><span class="hljs-keyword">double</span> pi = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">bool</span>&gt; mp;<br><span class="hljs-keyword">int</span> n, q;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; q;<br>    <span class="hljs-keyword">int</span> o, x;<br>    <span class="hljs-keyword">while</span>(q--)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; o &gt;&gt; x;<br>        <span class="hljs-keyword">if</span>(o == <span class="hljs-number">1</span>)<br>        &#123;<br>            mp[x] = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">int</span> ans = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = x; i &lt;= n; ++i)<br>            &#123;<br>                <span class="hljs-comment">// cout &lt;&lt; mp[i] &lt;&lt; endl;</span><br>                <span class="hljs-keyword">if</span>(mp[i] == <span class="hljs-literal">true</span>)<span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    ans = i;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        &#125;<br>        <br>    &#125;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="D-Carneginon"><a href="#D-Carneginon" class="headerlink" title="D. Carneginon"></a>D. Carneginon</h1><p>kmp板子题，，队友过的，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">kmp</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a,<span class="hljs-built_in">string</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> next[b.size()];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;b.size();i++) next[i]=<span class="hljs-number">0</span>;<br>    next[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;<br>    next[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;b.size();i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> k=next[i<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">if</span>(b[k]==b[i<span class="hljs-number">-1</span>]) next[i]=k+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">while</span>(k!=<span class="hljs-number">-1</span>)<br>            &#123;<br>                k=next[k];<br>                <span class="hljs-keyword">if</span>(b[k]==b[i<span class="hljs-number">-1</span>]) <span class="hljs-keyword">break</span>;<br>            &#125;<br>            next[i]=k+<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;i&lt;a.size();)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i]==b[j])<br>        &#123;<br>            i++;<br>            j++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(j==<span class="hljs-number">-1</span>)<br>            &#123;<br>                i++;<br>                j++;<br>            &#125;<br>            <span class="hljs-keyword">else</span> j=next[j];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(j==b.size()) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<br>    <span class="hljs-built_in">string</span> a,b;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;a;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;b;<br>        <span class="hljs-keyword">if</span>(a.size()&gt;b.size())<br>        &#123;<br>            <span class="hljs-keyword">if</span>(kmp(a,b))<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;my child!&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;oh, child!&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a.size()==b.size())<br>        &#123;<br>            <span class="hljs-keyword">if</span>(a==b)<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;jntm!&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;friend!&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(kmp(b,a)) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;my teacher!&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;senior!&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="E-XKC’s-basketball-team"><a href="#E-XKC’s-basketball-team" class="headerlink" title="E. XKC’s basketball team"></a>E. XKC’s basketball team</h1><p>这题我一开始的想法是倒着想，，并且在每求出第i个位置的值后，，维护的一个东西进行更新，，这一趟下来就可以找到所有的解，，，但是就是想不到怎么处理，，但感觉直觉是对的，，，</p>
<p>后来队友想着类似线段树维护一个区间最大值，，并且尽可能的寻找i的右边的点，，，</p>
<p>官方的题解就是倒着求，，用一个单调递增的队列维护最大值，，队列中靠近队首的一定是数组中靠右的一个较大值，，</p>
<p>如果当前这点的值大于队尾，，入队，，并且说明这个点是这个点向右的最大值，，所以它的答案就是-1</p>
<p>如果小于队尾的值，，说明右边有一个位置的值可能大于它的值+m，，，直接线性找肯定会T，，，但是因为队列中是单调递增的，，，所以可以二分找到这个值，，，记录一个下标就可以了，，，</p>
<h2 id="队友赛场上的解法"><a href="#队友赛场上的解法" class="headerlink" title="队友赛场上的解法"></a>队友赛场上的解法</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> p_b push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> e_b emplace_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> debug cout&lt;&lt;<span class="hljs-meta-string">&quot;!!!&quot;</span>&lt;&lt;endl;</span><br><span class="hljs-comment">//#define LOCAL</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">static</span> ll inf64 = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">5e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> n, m;<br>ll st[maxn&lt;&lt;<span class="hljs-number">2</span>];<br>ll a[maxn];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt)</span></span><br><span class="hljs-function"></span>&#123;<br>    st[rt] = max(st[rt&lt;&lt;<span class="hljs-number">1</span>], st[rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildtree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> rt)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l == r)<br>    &#123;<br>        st[rt] = a[l];<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    buildtree(l, mid, rt&lt;&lt;<span class="hljs-number">1</span>);<br>    buildtree(mid+<span class="hljs-number">1</span>, r, rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>);<br>    pushup(rt);<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _l, <span class="hljs-keyword">int</span> _r, <span class="hljs-keyword">int</span> val, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> rt)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//cout&lt;&lt;l&lt;&lt;&quot;---&quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;val&lt;&lt;endl;</span><br>    <span class="hljs-keyword">if</span>(l == r)<br>        <span class="hljs-keyword">return</span> l;<br>    <span class="hljs-keyword">int</span> ret = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(mid &lt; _r &amp;&amp; st[rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>] &gt;= val)<br>        ret = query(_l, _r, val, mid+<span class="hljs-number">1</span>, r, rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(ret != <span class="hljs-number">-1</span>)<br>        <span class="hljs-keyword">return</span> ret;<br>    <span class="hljs-keyword">if</span>(mid &gt;= _l &amp;&amp; st[rt&lt;&lt;<span class="hljs-number">1</span>] &gt;= val)<br>        ret = query(_l, _r, val, l, mid, rt&lt;&lt;<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> Local</span><br>    freopen(<span class="hljs-string">&quot;1.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>);<br>    freopen(<span class="hljs-string">&quot;1.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-built_in">stdout</span>);<br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    buildtree(<span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n<span class="hljs-number">-1</span>; i++)<br>    &#123;<br>        ll q = a[i] + m;<br>        ll ans = query(i, n, q, <span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//cout&lt;&lt;ans&lt;&lt;endl;</span><br>        <span class="hljs-keyword">if</span>(ans == <span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1 &quot;</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, ans-i<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="赛后的官方解法"><a href="#赛后的官方解法" class="headerlink" title="赛后的官方解法"></a>赛后的官方解法</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-function">mt19937 <span class="hljs-title">rnd</span><span class="hljs-params">(time(<span class="hljs-number">0</span>))</span></span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-comment">// const double pi = 3.14159265358979;</span><br><span class="hljs-keyword">double</span> pi = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">5e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br>ll n, m;<br>ll w[maxn], ans[maxn];<br><span class="hljs-built_in">pair</span>&lt;ll, <span class="hljs-keyword">int</span>&gt; que[maxn];<br><span class="hljs-keyword">int</span> front, tail;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    front = tail = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; w[i];<br>    que[tail].first = w[n];que[tail].second = n;ans[n] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; --i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(w[i] &gt; que[tail].first)<br>        &#123;<br>            ans[i] = <span class="hljs-number">-1</span>;<br>            <span class="hljs-comment">// que[++tail] = make_pair(w[i], i);</span><br>            que[++tail].first = w[i];<br>            que[tail].second = i;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">int</span> l = front, r = tail;<br>            <span class="hljs-keyword">int</span> anss = i;<br>            <span class="hljs-keyword">while</span>(l &lt;= r)<br>            &#123;<br>                <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(que[mid].first &gt;= w[i] + m)<br>                &#123;<br>                    r = mid - <span class="hljs-number">1</span>;<br>                    anss = que[mid].second;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    l = mid + <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>            ans[i] = anss - i - <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// for(int i = 1; i &lt;= tail; ++i)cout &lt;&lt; que[i].second &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; ++i)<span class="hljs-built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<span class="hljs-built_in">cout</span> &lt;&lt; ans[n];<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="K-Center"><a href="#K-Center" class="headerlink" title="K. Center"></a>K. Center</h1><p>简单计算几何题，，队友搞得，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1e3</span>+<span class="hljs-number">5</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">point</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> x,y,hash_;<br>    point(<span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>,<span class="hljs-keyword">int</span> y=<span class="hljs-number">0</span>):x(x),y(y)&#123;hash_=x*<span class="hljs-number">1000000</span>+y;&#125;<br>&#125; po[maxn];<span class="hljs-comment">//,mid[1000005];</span><br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">com</span><span class="hljs-params">(point p1,point p2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(p1.x&gt;p2.x) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span>(p1.x==p2.x&amp;&amp;p1.y&gt;p2.y) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-comment">//int nmid=0;</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">5</span><br><span class="hljs-comment">1 1</span><br><span class="hljs-comment">2 2</span><br><span class="hljs-comment">2 3</span><br><span class="hljs-comment">2 1</span><br><span class="hljs-comment">2 2</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-built_in">map</span> &lt;ll,<span class="hljs-keyword">int</span>&gt; mid;<br><span class="hljs-built_in">set</span> &lt;ll&gt; p;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll n0=<span class="hljs-number">0</span>,temx,temy;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;temx&gt;&gt;temy;<br>        <span class="hljs-keyword">if</span>(p.count(temx*<span class="hljs-number">1000000</span>+temy)) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            po[n0].x = temx;<br>            po[n0++].y = temy;<br>            p.insert(temx*<span class="hljs-number">1000000</span>+temy);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n0;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n0;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(i==j) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-function">point <span class="hljs-title">tem</span><span class="hljs-params">(po[i].x+po[j].x,po[i].y+po[j].y)</span></span>;<br><br>            mid[tem.hash_]++;<br>        &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n0;i++)<br>    &#123;<br>        ll tem=po[i].x*<span class="hljs-number">1000000</span>*<span class="hljs-number">2</span>+po[i].y*<span class="hljs-number">2</span>;<br>        ++mid[tem];<br>    &#125;<br>    <span class="hljs-keyword">int</span> ma=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">map</span>&lt;ll, <span class="hljs-keyword">int</span>&gt;:: iterator i=mid.begin();i!=mid.end();i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> tem=i-&gt;second;<br>        ma= ma&gt;tem?ma:tem;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;n0-ma&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>字符串啊，，，，</p>
]]></content>
      <categories>
        <category>ACM-比赛补题</category>
        <category>ACM-题解</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>刷题</tag>
        <tag>网络赛</tag>
      </tags>
  </entry>
  <entry>
    <title>2019沈阳网络赛B.Dudu&#39;s maze</title>
    <url>/2019/09/14/2019%E6%B2%88%E9%98%B3%E7%BD%91%E7%BB%9C%E8%B5%9BB-Dudu-s-maze/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>啊，，不在状态啊，，自闭一下午，，读错题，，然后背锅，，，明明这个简单的题，，，</p>
<span id="more"></span>
<p><a href="https://nanti.jisuanke.com/t/41402">这题</a>题面不容易看懂，，大致意思是给你一张图，，然后从1节点开始可以任意的走，，</p>
<p>有些节点是 monster 节点，，这样的节点总共只能走一次，，其他的点有一个糖果，问最大的取得糖果的期望</p>
<p>解法很简单，，先求出从1可以不经过 monster 的点的个数，，也就是1的联通块，，</p>
<p>然后对于每一个和1联通块的 monster 的下的联通块求他的点的个数，，点权就是个数与其所有从这点出发的路径数的商，，取这样 monster 的点权最大加前面的1联通块的点数就行了，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> n, m, k;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt;<br>&#125;edge[maxm &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxm &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> monster[maxn];<br><span class="hljs-keyword">bool</span> vismonster[maxn];<br><span class="hljs-keyword">int</span> fa[maxn];<br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> _find(<span class="hljs-keyword">int</span> x)<br>&#123;<br>    <span class="hljs-keyword">if</span>(fa[x] == x)<span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">return</span> fa[x] = _find(fa[x]);<br>&#125;<br><span class="hljs-keyword">void</span> _union(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)<br>&#123;<br>    <span class="hljs-keyword">int</span> f1 = _find(x);<br>    <span class="hljs-keyword">int</span> f2 = _find(y);<br>    <span class="hljs-keyword">if</span>(f1 != f2)fa[f2] = f1;<br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> ans[maxn];<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    q.push(s);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)vis[i] = <span class="hljs-literal">false</span>;<br>    vis[s] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front(); q.pop();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(vis[v] || _find(v) == _find(<span class="hljs-number">1</span>))<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(vismonster[v])<br>            &#123;<br>                _union(s, v);<br>                vis[v] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            vis[v] = <span class="hljs-literal">true</span>;<br>            q.push(v);<br>            _union(s, v);<br>            ++ans[s];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br><br>    <span class="hljs-comment">// int t; cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">int</span> t; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-comment">// cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);<br>        <span class="hljs-keyword">int</span> u, v;<br>        init();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)vismonster[i] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        &#123;<br>            <span class="hljs-comment">// cin &gt;&gt; u &gt;&gt; v;</span><br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>            addedge(u, v);<br>            addedge(v, u);<br>        &#125;<br>        <span class="hljs-comment">// for(int i = 1; i &lt;= k; ++i)cin &gt;&gt; monster[i], vismonster[monster[i]] = true;</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;monster[i]);<br>            vismonster[monster[i]] = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)fa[i] = i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)ans[i] = <span class="hljs-number">0</span>;<br>        ans[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        bfs(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">double</span> ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= k; ++j)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(_find(monster[j]) == _find(<span class="hljs-number">1</span>))<br>            &#123;<br>                <span class="hljs-keyword">int</span> sz = <span class="hljs-number">0</span>, sum = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[monster[j]]; ~i; i = edge[i].nxt)<br>                &#123;<br>                    ++sz;<br>                    <span class="hljs-keyword">if</span>(vismonster[edge[i].to] || _find(edge[i].to) == _find(<span class="hljs-number">1</span>))<span class="hljs-keyword">continue</span>;<br>                    ans[edge[i].to] = <span class="hljs-number">0</span>;<br>                    bfs(edge[i].to);<br>                    sum += ans[edge[i].to] + <span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-comment">// for(int l = 1; l &lt;= n; ++l)cout &lt;&lt; ans[l] &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;</span><br>                ret = max(ret, (<span class="hljs-keyword">double</span>)sum / (<span class="hljs-keyword">double</span>)sz);<br>                <span class="hljs-comment">// cout &lt;&lt; sum &lt;&lt; &quot;-&quot; &lt;&lt; sz &lt;&lt; &quot;-&quot; &lt;&lt; ret &lt;&lt; endl;</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// cout &lt;&lt; ret + (double)ans[1] &lt;&lt; endl;</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.6f\n&quot;</span>, ret + (<span class="hljs-keyword">double</span>)ans[<span class="hljs-number">1</span>]);<br>        <br>    &#125;<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>今天不适合写代码，，，，</p>
]]></content>
      <tags>
        <tag>ACM</tag>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客暑期多校训练营（第二场）</title>
    <url>/2019/07/21/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>菜的真实，，，</p>
<p><a href="https://ac.nowcoder.com/acm/contest/882#question">题目</a></p>
<span id="more"></span>
<h1 id="F-Partition-problem"><a href="#F-Partition-problem" class="headerlink" title="F - Partition problem"></a>F - Partition problem</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;iostream&gt;</span><br><span class="hljs-comment">// #include &lt;cstdio&gt;</span><br><span class="hljs-comment">// #include &lt;cstdlib&gt;</span><br><span class="hljs-comment">// #include &lt;string.h&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;algorithm&gt;</span><br><span class="hljs-comment">// #include &lt;set&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-comment">// #include &lt;ctime&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br> <br>ll a[<span class="hljs-number">20</span>], b[<span class="hljs-number">20</span>], v[<span class="hljs-number">30</span>][<span class="hljs-number">30</span>], n, n2, ans;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> ai, <span class="hljs-keyword">int</span> bi, ll cnt)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(cnt &lt; ans)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(ai &gt; n || bi &gt; n)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> now = ai + bi + <span class="hljs-number">1</span>;  <span class="hljs-comment">//every people</span><br>    <span class="hljs-keyword">if</span>(now &gt; n2)&#123;ans = max(ans, cnt); <span class="hljs-keyword">return</span>;&#125;<br>    ll va = cnt, vb = cnt;<br> <br>    <span class="hljs-comment">//pull this man to B</span><br>    b[bi] = now;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; bi; ++i)vb -= v[b[i]][now];<br>    dfs(ai, bi + <span class="hljs-number">1</span>, vb);<br> <br>    <span class="hljs-comment">//another</span><br>    a[ai] = now;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ai; ++i)va -= v[now][a[i]];<br>    dfs(ai + <span class="hljs-number">1</span>, bi, va);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot; , &quot;r&quot;   , stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br> <br>    <span class="hljs-comment">//有一个外面的集合，总的价值是所有值的和，</span><br>    <span class="hljs-comment">//每次把一个人放到一个队伍里，</span><br>    <span class="hljs-comment">//这个人和这个队伍所有人的价值就没了，所以就减去就行了</span><br>    <span class="hljs-comment">//每个人有两种选择，所以遍历都枚举就行了</span><br>    <span class="hljs-built_in">cin</span> &gt;&gt; n; n2 = n &lt;&lt; <span class="hljs-number">1</span>;<br>    ll sum = <span class="hljs-number">0</span>;ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n2; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n2; ++j)<br>            <span class="hljs-built_in">cin</span> &gt;&gt; v[i][j];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n2; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; i; ++j)<br>            sum += v[i][j];<br>    dfs(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, sum);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM-题解</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>多校</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>2019西安邀请赛总结</title>
    <url>/2019/05/31/2019%E8%A5%BF%E5%AE%89%E9%82%80%E8%AF%B7%E8%B5%9B%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script>]]></content>
  </entry>
  <entry>
    <title>2019西安邀请赛补题</title>
    <url>/2019/05/31/2019%E8%A5%BF%E5%AE%89%E9%82%80%E8%AF%B7%E8%B5%9B%E8%A1%A5%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>鸽了半个月，，终于有些时间可以来补题了，，，T^T</p>
<p><a href="https://www.jisuanke.com/contest/2625?view=challenges">题目在计蒜客上</a></p>
<span id="more"></span>
<h1 id="A-Tasks"><a href="#A-Tasks" class="headerlink" title="A. Tasks"></a>A. Tasks</h1><p>签到题，，当时看完题就写，，然后以为比赛没开始，，，拖了1分钟在交的题emmm，，，（本来可以在0分钟交的，，，</p>
<p>贪心直接搞，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;iostream&gt;</span><br><span class="hljs-comment">// #include &lt;cstdio&gt;</span><br><span class="hljs-comment">// #include &lt;cstdlib&gt;</span><br><span class="hljs-comment">// #include &lt;string.h&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;algorithm&gt;</span><br><span class="hljs-comment">// #include &lt;set&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-comment">// #include &lt;ctime&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e10</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> n, t, a[maxn];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br>    <br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; t;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>    sort(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n);<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        sum += a[i];<br>        <span class="hljs-keyword">if</span>(sum &lt;= t)<br>            ++ans;<br>        <span class="hljs-keyword">else</span> <br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;       <br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="C-Angel’s-Journey"><a href="#C-Angel’s-Journey" class="headerlink" title="C. Angel’s Journey"></a>C. Angel’s Journey</h1><p>很是遗憾的一道题，，几乎从来没写过计算几何的题，，然后碰到了这道题，，思路很简单，，但是因为不熟悉板子和数据出错的锅，，最后写了一堆，但是离ac就差一点，，，T^T</p>
<p>题意是给你一个圆c，和一个点p，，然后问你p点到c上的正下方的那个点的最短距离，，其中最短的路径不能越过下半圆所在的直线的下方区域，，也就是说 y &lt;= c.y 的地方要沿着圆周走，，</p>
<p>思路就是分两种情况：</p>
<ul>
<li>当点p在圆c所在的竖直区域内的时候，，显然最短路就是 <strong>切线长+某个切点到最下面点的弧长</strong></li>
<li>否则的话，最短路就是 <strong>四分之一圆+点p到 直线 $y=cy$ 与圆的两个交点中最近的那个点的距离</strong></li>
</ul>
<p>板子熟悉了之后很容易就出来了，，qaq，，，（都是遗憾的泪水，，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;iostream&gt;</span><br><span class="hljs-comment">// #include &lt;cstdio&gt;</span><br><span class="hljs-comment">// #include &lt;cstdlib&gt;</span><br><span class="hljs-comment">// #include &lt;string.h&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;algorithm&gt;</span><br><span class="hljs-comment">// #include &lt;set&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-comment">// #include &lt;ctime&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><br><span class="hljs-comment">//判断一个实数和0的关系</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sgn</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(x) &lt; eps)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">point</span>&#123;</span><br>    <span class="hljs-keyword">double</span> x, y;<br>    point()&#123;&#125;<br>    point(<span class="hljs-keyword">double</span> _x, <span class="hljs-keyword">double</span> _y)&#123;<br>        x = _x;<br>        y = _y;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">input</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf%lf&quot;</span>, &amp;x, &amp;y);<br>    &#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> == (point b)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> sgn(x - b.x) == <span class="hljs-number">0</span> &amp;&amp; sgn(y - b.y) == <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (point b)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> sgn(x - b.x) == <span class="hljs-number">0</span> ? sgn(y - b.y) &lt; <span class="hljs-number">0</span> : x &lt; b.x;<br>    &#125;<br>    point <span class="hljs-keyword">operator</span> - (<span class="hljs-keyword">const</span> point &amp;b)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> point(x - b.x, y - b.y);<br>    &#125;<br>    <span class="hljs-keyword">double</span> <span class="hljs-keyword">operator</span> ^ (<span class="hljs-keyword">const</span> point &amp;b)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> x * b.y - y * b.x;<br>    &#125;<br>    <span class="hljs-keyword">double</span> <span class="hljs-keyword">operator</span> * (<span class="hljs-keyword">const</span> point &amp;b)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> x * b.x + y * b.y;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">len</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> hypot(x, y);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">len2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> x * x + y * y;<br>    &#125;<br>    <span class="hljs-comment">//两点距离</span><br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">distance</span><span class="hljs-params">(point p)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> hypot(x - p.x, y - p.y);<br>    &#125;<br>    point <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> point &amp;b)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> point(x + b.x, y + b.y);<br>    &#125;<br>    point <span class="hljs-keyword">operator</span> * (<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> &amp;k)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> point(x * k, y * k);<br>    &#125;<br>    point <span class="hljs-keyword">operator</span> /(<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> &amp;k)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> point(x / k, y / k);<br>    &#125;<br>    <span class="hljs-comment">//计算当前点p到点a, b所成角的大小</span><br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">rad</span><span class="hljs-params">(point a, point b)</span></span>&#123;<br>        point p = *<span class="hljs-keyword">this</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">fabs</span>(<span class="hljs-built_in">atan2</span>( <span class="hljs-built_in">fabs</span>((a - p) ^ (b - p)), (a - p) * (b - p) ));<br>    &#125;<br>    <span class="hljs-comment">//化为长度为r的向量</span><br>    <span class="hljs-function">point <span class="hljs-title">trunc</span><span class="hljs-params">(<span class="hljs-keyword">double</span> r)</span></span>&#123;<br>        <span class="hljs-keyword">double</span> l = len();<br>        <span class="hljs-keyword">if</span>(!sgn(l))<span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>        r /= l;<br>        <span class="hljs-keyword">return</span> point(x * r, y * r);<br>    &#125;<br>    <span class="hljs-comment">//逆时针旋转pi/2</span><br>    <span class="hljs-function">point <span class="hljs-title">rotleft</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> point(-y, x);<br>    &#125;<br>    <span class="hljs-comment">//顺时针旋转pi/2</span><br>    <span class="hljs-function">point <span class="hljs-title">rotright</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> point(y, -x);<br>    &#125;<br>    <span class="hljs-comment">//绕p逆时针旋转angle</span><br>    <span class="hljs-function">point <span class="hljs-title">rotate</span><span class="hljs-params">(point p, <span class="hljs-keyword">double</span> angle)</span></span>&#123;<br>        point v = (*<span class="hljs-keyword">this</span>) - p;<br>        <span class="hljs-keyword">double</span> c =- <span class="hljs-built_in">cos</span>(angle), s = <span class="hljs-built_in">sin</span>(angle);<br>        <span class="hljs-keyword">return</span> point(p.x + v.x * c - v.y * s, p.y + v.x * s + v.y * c);<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">line</span>&#123;</span><br>    point s, e;<br>    line()&#123;&#125;<br>    <span class="hljs-comment">//两点确定一条直线</span><br>    line(point _s, point _e)&#123;<br>        s = _s;<br>        e = _e;<br>    &#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> == (line v)&#123;<br>        <span class="hljs-keyword">return</span> (s == v.s) &amp;&amp; (e == v.e);<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">circle</span>&#123;</span><br>    point p;<br>    <span class="hljs-keyword">double</span> r;<br>    circle()&#123;&#125;<br>    circle(point _p, <span class="hljs-keyword">double</span> _r)&#123;<br>        p = _p;<br>        r = _r;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">input</span><span class="hljs-params">()</span></span>&#123;<br>        p.input();<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>, &amp;r);<br>    &#125;<br>    <span class="hljs-comment">//点和圆的关系</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">relation</span><span class="hljs-params">(point b)</span></span>&#123;<br>        <span class="hljs-keyword">double</span> dst = b.distance(p);<br>        <span class="hljs-keyword">if</span>(sgn(dst - r) &lt; <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sgn(dst - r) == <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">//过一点求圆的切线，返回的切线的第二个点便是切点</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">tangentline</span><span class="hljs-params">(point q, line &amp;u, line &amp;v)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> x = relation(q);<br>        <span class="hljs-keyword">if</span>(x == <span class="hljs-number">2</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(x == <span class="hljs-number">1</span>)&#123;<br>            u = line(q, q + (q - p).rotleft());<br>            v = u;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">double</span> d = p.distance(q);<br>        <span class="hljs-keyword">double</span> l = r * r / d;<br>        <span class="hljs-keyword">double</span> h = <span class="hljs-built_in">sqrt</span>(r * r - l * l);<br>        u = line(q, p + ((q - p).trunc(l) + (q - p).rotleft().trunc(h)));<br>        v = line(q, p + ((q - p).trunc(l) + (q - p).rotright().trunc(h)));<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    circle c;<br>    c.input();<br>    point p;<br>    p.input();<br>    <br><br>    <span class="hljs-comment">//点在圆所在的竖直区域内时，最短就离为切线长+最小的圆弧</span><br>    <span class="hljs-keyword">if</span>(sgn(p.x - c.p.x + c.r) &gt;= <span class="hljs-number">0</span> &amp;&amp; sgn(p.x - c.p.x - c.r) &lt;= <span class="hljs-number">0</span>)&#123;<br>        line u, v;<br>        c.tangentline(p, u, v);     <span class="hljs-comment">//得到两条切线</span><br>        <span class="hljs-keyword">double</span> ans = <span class="hljs-built_in">sqrt</span>(c.p.distance(p) * c.p.distance(p) - c.r * c.r);   <span class="hljs-comment">//根据rt三角形算出切线长</span><br><br>        <span class="hljs-comment">// cout &lt;&lt; u.e.x &lt;&lt; &quot; &quot; &lt;&lt; u.e.y &lt;&lt; endl;</span><br>        <span class="hljs-comment">// cout &lt;&lt; v.e.x &lt;&lt; &quot; &quot; &lt;&lt; v.e.y &lt;&lt; endl;</span><br><br>        <span class="hljs-comment">//根据切线的第二个点确定纵坐标最小的切点，这样的点所形成的圆弧是最短的</span><br>        p = sgn(u.e.y - v.e.y) &lt;= <span class="hljs-number">0</span> ? u.e : v.e;<br><br>        <span class="hljs-comment">// cout &lt;&lt; p.x &lt;&lt; &quot; &quot; &lt;&lt; p.y &lt;&lt; endl;</span><br>        <br>        <span class="hljs-comment">//由圆心确定的扇形角度确定弧长</span><br>        ans += c.r * c.p.rad(p, point(c.p.x, c.p.y - c.r));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.4lf\n&quot;</span>, ans);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;                           <span class="hljs-comment">//四分之一圆+两点的距离</span><br>        <span class="hljs-keyword">double</span> ans = pi * c.r / <span class="hljs-number">2.0</span>;<br>        <span class="hljs-keyword">if</span>(sgn(p.x - c.p.x - c.r) &gt;= <span class="hljs-number">0</span>) ans += p.distance(point(c.p.x + c.r, c.p.y));<br>        <span class="hljs-keyword">else</span> ans += p.distance(point(c.p.x - c.r, c.p.y));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.4lf\n&quot;</span>, ans);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br>    <br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        solve();<br>    &#125;<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;       <br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="L-Swap"><a href="#L-Swap" class="headerlink" title="L. Swap"></a>L. Swap</h1><p>这题当时用了好久才搞出来，，感觉主要的问题是当时静不下心来认认真真的和队友推一下规律，，</p>
<p>题意是给你n个数，然后又两个操作，一种是前一半和后一半交换，，另一个是每两个数交换，，然后问你有多少种不同的序列种数，，，</p>
<p>当时我想着这该不会是暴力模拟吧，，然后想了一会写了暴力模拟的代码，，然后测试的时候懵逼了，，我是按照字符串存的每一种序列，，然后放到set中保证每一种只出现一次，，然后求一下最后map的大小即为答案，，，但是字符串就不能得到大于128的情况，，，（这时我应该去打表找规律的，，，然后就懵了半个多小时，，浪费时间啊，，，</p>
<p>后来队友打表得出了前20多的结果，，分奇偶找到规律就过了，，</p>
<p>这种暴力打表找规律的题练的太少了啊，，总是比别人慢许多T^T，，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;iostream&gt;</span><br><span class="hljs-comment">// #include &lt;cstdio&gt;</span><br><span class="hljs-comment">// #include &lt;cstdlib&gt;</span><br><span class="hljs-comment">// #include &lt;string.h&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;algorithm&gt;</span><br><span class="hljs-comment">// #include &lt;set&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-comment">// #include &lt;ctime&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e10</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> n, t, a[maxn];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br>    <br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>    <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n &amp; <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">3</span>)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">6</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((n - <span class="hljs-number">1</span>) % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>)<span class="hljs-built_in">cout</span> &lt;&lt; n * <span class="hljs-number">2</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">12</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(n % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">4</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;       <br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>2021-4-7随笔</title>
    <url>/2021/04/07/2021-4-7%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e4bb7f40ee5bbf20c21909b80fd08cbebfe9d55ba0d8530548817f9de0c1df99">2e9241384d7b9b2d36f03890934de87316fec14f6a90ee876796047dced2c8ce81932b1f9ab2c812a42cefad6751b69557c0b5a57b545cffa684ee16e74fadd9c3398c4953863c15213df155ef97321c5945d7dd089e7c2630d76b0ea324b08c1c2f7f5a848a15210d1050124aff1030c1dbc12c6343780007c92da642928a760921b60b8ffe07d16b01f29498ab739cfc8d923adf3b9354230c75251034521fc4357e8513d9d37280e7f499df3208b8c6629206932ea1234a9159b4fc07faba07a38311263aeb02f8e2b31e0324b1173a2a15962ba2fe6be5a2a9b4b614e5f8eaaa300fe176e1bbe5b3bfa2b1397eb99c03b43e5dbcc7600c95081a76f892db774ccf45b52413ea678f6d90b980fe9a0d8f06526e7edd7eb68c771a0acf3f47ef68387fb4279fdabe5717c2277406e40b4b7cbfe1d9b6773ecf7fa6a89040f631e2951f438a8e1afb827bf06998b4d405d55ba7f12a8526de837432032ce8723ae95d8b4688e472faddabd3e51fb7bd476d6d9ad0cc0dfa0bcfb1aca255128a41493e6deea805a0e4a470ab481c6768577321e1a186fff95ebfb96402b3d7b65a6db748faf170c52c02d8ef8f25c7c2d6eeb661318055c3324c36ae56540db65aa9da600b2026cbc73e98e8a49efcbb2e22d4a68b7c41833100baf38168ffffa5b199896899dcb6f9d385b13c65f35b964e3af39851bb8b5ed3ccb75eb7424317133254936f761d5d09d4d08bd661fcb33dff93fe0143fa25db06ddea3d81d202cf941cc62d1219ec3605a702f65664c0f159a0dc88d407072dda291a7f94cea5e8583175707069e34e68632b25958b4248816216bfd93f9c6d5292fadbed8f94bb24c0d632c371c71b44c9c5d5e7ea92362c7a61a87a9926d7cab58156b29bc4275526e7dc49e2002304c3f33766041d4ff65b3458fa04252b3905bfc096cbb03676edd0bcad70d4b68b290262a7919f206e4815ed5f8a14cc101beba217f54af4b7f727fcf79098fb8bd168cc822764db1aa5eac3dfed6b8a81a4adeff9f912725a00b177433433ba6f8fbc8dd98b54f30cc63914f93786c4639a17d839fb7b2b25ade0634be3f52f01afffd6a01b96f1300f959ca55751acb3d895ade26ca624414687f1f6792ec7435826793063d0029246321d9b6a336d15a9196638088a033b7e93c86a947dbd75e29c640fd6169ab71f30e5b2c703fe2deed233e4efc7506fe0ef91cce55c5e6e2a5582c76a2cfe7a49174c630afe5fd9b01c94abba940330bb719076320426c7a7ebbc4e1bd6f71724f35f5db93cf23b185ae2d3a33ef219ad606f6cd11f1d70d3ada4f93b9ca4dd72b3108dba7bd89c678b5bd2585cf3bcb91efb4b2cc61e132fe3a5ffd8fe947de00b23631d3132beb3e9bffd53437af247bf3813017ba0d691254e85573abe31534452663534aaf679fbeea65f0722bd16c41544c1a93b098a25bd6784151b0a6b0d49b34848e1ac31953a3d89ef7dba3802bc8df22e10d0820fdcede59cd241a61871d0601c43b6ea8984ac18a3cd0615a3220b84ded505ec65e87b549fa07f65feea120dc0d224a59a1cb0078b2847a54ddd96e89e21eb336750d4191bf42549aa06a87171eb9fdb8fd79480ab14e3734788283d43baaf3ffd8c1be32d8ab207c791ff52e527182f17774abb1283bf42407ca984ac57a2d285a4dd28b94aef1a9eaaa686c50b1bf819cb53bf269d7677f3cba0152b5523dd184e20e4676ff8d396bd40cd808a013279fd2fd75791c1a6b8114c3455b611f809b88c49318e71b9c84e3bd1f9298357943d82d999600651117596fb950f5af8bc10f1d06e08a7ab6a0338c8be5fec991a1e63455027c376b57a8b0991448c956697e9718baf2e55b89aa95c29a6272334cc6b97a8164e2365f50c21013fc2a6a925f88d2494bc9bb5639f8217557f2a9e5ea436c77e1ffca5afc3f50b9361cf4271daf10e49e7e6f93fe8b87ecd1e553cd7355189994d03dbcc317b7e7e6dc20a8806d60fef63b5563aaf1a1fe80683d50439b8518fc160dc101116b0fdafb0f8940913aa0c972080393da5455bd0b77f17056024040c6b3d7b6733ba57a282ac1f630b7f2bbe4c78ba998589e29ec12cad011c5e61aa8c18d9af34549a8bc3fefe83840a9b0aeb40d27d5a661565ea634a2adbd99c7950f2b5908a4b1c25c802edf086d21f073e2fef9e30063bdb4cc6a34f4262ad70fc8ea98eeb512de88be4c0e93fd72aa8ff748fa7fd91bca9becbd6dd212777e1ae166ccb2d84ebda557a0dc525821a20a825caedb91cc691e52995285cdce8d64ff4e99f3d7340c0ffc2c6cd1ea033ecd345d6fb103d2dbaa18ef722093e070cb055a70127c8ae7dcd0f3a4ab4589dcf50482025cf64ae102437e7c6c958dd5eecdeb9f5e63ea621a05e7e7a0b8fac7752769b9666f1df9d2e94c0138552b0db284a4201e834860fa86e1c5bd93884ab6c5018e2e73434957d903a39935b96a17b27e08fc2b92b1cc853d8e97e139c85e2c0fc10bb40a09d6f32db3a8c198dae5885e569de12b47a1d8fdaec5cdb7a99c979e55bd37911f2cb8274ed21688518a37aaf765ef5289efd01de1fcbf89caaa8a536bf24eb44ad530054cec4fda1c9fc86da0ac467719715fef5c81d5e9fdc7d2f2ef02cc4c8a7064d729f593aba6f9be775e87d8fbbbf5e3d28e401a590e0835826e5fc382345762274650f559352ea7eccf3b7bf3fa35a994dbcba3fe60f05b30f62e49c693aa1ba3f25b9265a1bcc0b9aa3eb6a592aa69a62fc0638bad44a4392fcdb4295a2f7c3126becae61e4db1851fe88e8f79f3d86ae2ce3b28ed657139117ad75962732e9d70ef3f85110750a231a2e4941a00a56ea8b2b0be33372a50fc0ead7763d1611710280cf4e73a49f3b0c4f91a42b3b06d4c63973ebd880259becdd2713b6b8a5658b4d54b6053455f2d80a21bd3351ee706e18cb50c454448838fe6d04e051c360508aa9b9d66267b0cd28ac6593d72a29628877f4487fc4e7eff1c9f2291acec84f2cce17372f060f847e0466b655240d0987b6d40f3e883d89542959cefafaedde94f2e855817705cbd9d1b5bd932c834e48cc2f35983f7e3b1f628ddde51d0f6a07682147ce02f559b1c629633327acfb6ba64058f3a41f39d8092ed2406aec6f4fc329f4f41870fb5d2e44ac0f83c98f9790fd9f776ccb106166a0ffea4c14b459b33650ed2d7a82311f4f452cdcf4e18d916d665337677dfaaa81461b5d1be190c2ffeaf2d332d5399911a16515d65ba927903ab526c4bcb74a2d145261223a26ef74aeff39bae7b0806981677c4a267dc5313ff1e6b1a7ace0ea9d16b6a1cfa196c952e621efb3c0245a1a5c68dc2c964042fbe738bea21262dc7815f645a5ad7dee659c3cdfc2eea3028c854cffde560852700dd457075d3d6fd1ac9ef306fe59e2ce6d0fa426238a4374454c1e43d32d3625788eabbd6e667d991b7d11bbcf12d6568c2a9693f1d8e0d3daba2f7864c9b1fb2c7603fceaf4caff6d317dac5c06d69f69a0d57bbe8249fb8a3972422828ef9b20a292eea82693029d06d9f19914a0a1915a8c00724cbfa7dfe48b55063163ab6be61765c2a71af451a2410edf25e067c116d877c0e6cf973078585acd8ce624766f0817ecc733410e34c80b43616c37415d018a4f4e593ccfc91e1a1ceec1c4dce64694e3d5b8542306f1e30df20fbb7a84c2d043af122ca545594688013803e249645d3f023bdd00269932eeccecfa2e8462d4715a4cc60e1fd2a2370aec65a8188f8bd7af710c38632daae030c258bfa98d5e5a72aa9773a260b17332cadbad0506ad0628ac0dc483bc56f5260d67382d95d9eda90a11fe55fb4b2793d0f5ddb479360a76b785606b6382087f0bbf755834a5fd773a440dedb0171cef974bdcf64bb212fcbf0a1860d57be0ae293d437d5a6b0c4d9a4df485429894b30992e1a2b535611701c117c06720d8b2d3772e8ae79745db1732bdccb248861876e987075d30ec6b1956996c6e1e9bbd06ffcf7e7393dd88cb0534f144208b5fe478d16b5956d944e61c2adc4fb29c64343270a85412c8d050abe3a87a73543baa9fd428514e3eb104b1de149fef972d057e2cdaa2e9e1369bffef9d948442851216f268073dbce0e63b0b3d68888d4c2fd40dab9c1f364449970700662653e083c416f084aee061ce37c6f7404fbe4984fa1406a72339d26afcf3502d487cdab2cd6dbc26460273e1fef13e2e40c590f8b93a031138c2df852d16ec9b469a47614dd53bde130d0cec4a81fd1d5b35d76bc6ea4a557633bd5e6efabd45e242824a4e07a3766dbb03516371aecbcf974ab30086b5eaa0668072b5d42f69633dc5bfbf8bcd4c940722989de3267d505450fe128c0395e643547905d4ec29780263e0e5bd71db95fa07b3493b9f061824806f4cadafea27239d9780aa98883af6d7d5f260a99353946500ee13d54ac0cee3dce44081f29eb399011d0c179f85fa7db7240983367a83585d2a3dfe6aa98f45f55124bc2887cc3d326fa9b2be28842d368996d4d8ccec57a147c91b124bb7fbdc34a7f15640866becd36c54263944133bd423576afd7e142cc49ca1d4e9d6875dc4a986edaa980221df0ee8e3c9bf912e5793c86aff10bdb4e7d7ae3dc2fec49745e478ab37fc5d57384732cd1320c8d3ace8eceb7e8a3c525cce3e168f4f3ee964ea976e5731568228e30f964bf86dbc7f62f54816c4d3ccce8e8ca4494aafb89927547cda80e3b80149e329921c8b036cc92f751357ac8b41e06a146c6228afd8929966a21e687655195034322c2437c943f032ecf9c1b3470c9edc56c0dad11ed052319dd69806062ebf749d9087c2ab96c2a58ae0d37a7e571f9fb28be4fba7779eb5924f5ce2d9109fd6296616980c085a640d2a8e20b7929389aeeb2489ec48ab637fc163b3c6fa53776231c8c1919b6ca95bd38323e322df900f4f6693cd7823fee21121efc0035cc3a97587971d966b459f98816499587a773c79fc69c17dd86ec9dd52e02ac1b0a63d7500895ea964a3a6a7e377eee90ea290aae3952e0dfb5b791637d008da7880564aacdf5520c1387ebeda4509c89aca45d64f8580c0a370b2c6cce24f5a4c77b80dbf3859bd0c55b6a6dcf3cd7969c5dd1ad4240972d4373ac4b8d712e9faa182e0877dcb1e9ebbf046f4d30a468722bf46c41f800ed0e915dd2034b69b090ed6b10ae642111abdced996ebc9dfedb2eb872736f27c891359f203693f4ae46c4738a54c869b36fff37c0769b7732c040c052e32a0b53773865e041623b2b8f971625c2215667f4f613149085c279c2ff5cca2c7adfaa74cb1f8d6526755f55fd86b67b2885974d691f66c81c24705f43f747932147e35f71ec0d8cffa494ea5005fe5814b21e20edc0fc70a4d4ae8e2d9631b67b3c1ace2f6bc6330ae0634d1fc0326d6bb36126e7b1f7da6a9f0bb1d77695e8183f918e85a19e473f933c20b33a1f7fa3a1c4eddc9877ae2853ba7b29d1455e3e983e0a1804ac27252ab5e8d3e08d0f358bde325fde4173e99a3e4d5efc73d940ea81eb1b7410138a66a074199bca4f1a9a32202ad50842ba8f4a8716758fac7a2bf827853d282998a9f6c931fd88b7650837bc93696ad807f17c8f03c1936e37d5c3f6ac2cd26884150b27ef8ea6e241d390fd12058cda028eff580750e96feee83b079436795ee8a8af2304cd8381c39ff522a6df4437b27db720e6b5ff75ab49af865827b630509e3fa5c8c0e4e706bfeb8bcb451295fe6704dd44e85a19881603f54a659fba4598322d05183c2002b015632e985ec78f6aab6bd09f27b6413f238cdf5f28d6524038fb3c63a47466d57623b81703bfba6af05a6a931b89e89087076032a2b1d30985d0107dad06d5330a9409d8f518328a4d6ca96dd8d654ed69db8aeadcb38871e4d172a8b82448f72aff1a93f2fc32653f889f235d38524358f45fe3536187fffe1f5d90eecefae5dd70d1045d604695f3754820400e587813d793a267169528692165674f793cc2831f97895b97a37d8f4c25af79d37f0cba8f7d2705cb69264b963d6c957de86a009f1e68391af9f6dc828f04ca19f831f1947c1a6b102d14bdfc14198e52c87fa9dc072a8fdd8493daa104cf32de81c14e89b02a0cd5f98b7d530502f9b8df85e4d46821605f9691a0d992040b67c6973e245cdd7e86a6f2ecc2b009dfb088c4d3d69f45154cbc21c35561e155cdcf0a6107961dd9383759f3809eed8727c8dd00f27ce528ce171f2ccebceb0ac313c655e0a97764e6a6d46d21f800c2399b1c2c7727703a4a4912632e70f595ecb2d18e79c0bcec6b953821e639c505980919b7a1993dc824726fcb7b02d41f47e1d7aaf2b27b4d6bb3bff22a2cac58ea5c4a967537ce796c5bc947d53cab7b08d9a608db75d23aee1b2c95f0245ebaacd58d2406479b8a5c9de031b4510a961b7ab74cc414ca4d0b207e0ffb9b284d5e651f0e054d6b83e535b6af28ab03ae6638abc430f8dd376dfdbd9d41d152f87bdf1fdaefff8220bf02b9d8d39cf4a4e7b149b18a521e91854d6328cc00c68f9e3fa4d7fdae0e502c2608c8cc0e6382e351607001d540b93595740d3676566c772fc694e267ee0a1edd47afb23e4181ca86b7e30cbdc2297f677d7fcf65fdd6d6777a77c54bfd9f65598469b15e27adcfcbe7b45a7f6f1fd8fa0e30fd6994ee7649bb0f9c18d43fa407a511af6770cb252695bee61b5dd61db27082a554d6592e8cecef83ca7b0cb30f22aa925adf5cd2d5d100007edd8339a72418f82cfa7cd89463cc9b2d88f19eeff0ffe6b49c9f37084efaba843f0129812fdceb40970e4fe51b26815fda85105aace58a964163b3f1c2b196d3814770edf686f10b490832c417b1fa2647cd32570d488314fed84e5e6b7432b0545460c50df5705d6d5adbce1f52664a2845c232f86aed442adc5b993d6c2285d966b099023fce69a91ab94ed4206248daa4183280ca84d07c1171e50da3df6158502290523b36f8107f5393609ff8521dffaadad1686b1eeeed2956f7affc3e9fdd98d8cb5a8a9fb5169804b35f163efb5683263cf41217ca8618ccc01e2320cfddd89526ced845da8970e88b66dee75714149a08a19d62293cd270ba1c444a5970f3e4c5b6d5f8c72139c207419bd7b2f978e332404fb8c0613dab11d1dd8dd2fa48a2a61454941d297c92156d87ccea6ebdc2527eb9fbbf05ebc1929a03952b80ccab341421adcc9203b9f54eecc39fca45ffc82553264c685bcf0eabbdbf169419f4abeb08f998b7b147a77f6d23bd614e90220462a56016e85a708a16998dfc868af9ca860937b85ae32f257eff4b9b71c8e6326c5363fa42fe7b525150c9133e0f91a3d4e501215fc750dc0c33b82578234e6edf40f35f2a88f9bafed6a9905870c26c416b4dd9f49ebe62c2ec5f72f314420598759bcbbcbfe473af79b1409231277d1ffd84ca1f2dfeaa96682737fe3b5dca12cd17ca041ae381286f092a0e265c29376b025b7682a99e9c2ee6e3dd50dd935674b602d81945f6a2a282ddf9bd6afba602733ff7f6d7aed04f0b53cc00b0ea5c0a20c4a95c845d3115d5ca751c90d39f85dd982afbc47de36d00e4ca871980112ee547693439f1e9eba8ab185950e03c0e60b506ee0ada7567bcf7ee2606800a90352f4876bb12428143586a128566f7831c070fe06766fa3dec1ef3fc1a73281af3a10500b99caa0544da21d423cf599c54e60a77d49a321e80c13f80c95523eae2a58039623b59f1a1444a4ccae793982eaffec2ca742709597c4c1a5f2ad09eba224c1261e5bf34af54a8b1f85cc91c13645301eea7d458efd0b2b6225a8632fbba02d6bcee216dbf1b055278bc89285fdec32313f712127fe4acfac885131d89137f3b0f2bfa9d763bfe0c87d92537158ce9e99db4beebebc03cb721144090e2617d7bb7acc819624b803f867457917c364e0ec477aa903ff0a11c0477a73375916e53653d42fd37a83d706459eb18dbab6df773f126818ccc898944de47ce37fe887a885df22151bea730d8d8aeec0ee900d8d822324cf16667fabcc80bfd630e4e349f6ec0b23a3f11f5003ea9660c188b3f0a175de3d29c016709da30130beb48ee5e422c57e8055198dbefd1039fbbb30c6f02d8ab48827bbd1efe99708603d41fba1a20deb0faa7f9ad2df7313599825a562fed2a64edec06c5c11690c1fc6e56770a5837273184607e7e8016967ad032405f56cebd9be323309060b97309adf169a7e7458322479b79de711be6d5586afbb64a65877e2ab237e388a8906b1ae8b472f1669685993ff0495a33ea272c4e1649c55800ffb14513c3c8bd83ceba20459ff1d29cce32afca9eba62bf22463686c8e41e028f01f21d046754f0cb18739d683c699b2a88b9340bd49baf8bbb1d7d7049958678a181330d69a8c1530b3136e71999db31314915936315f8ebca78fb18bd7e92073a1d76950cc13405cb01181998906a9079dc120ec84359fc15fcae95effc6693fdec6a7fff2962f71abc54507e03de9e032d5ed5ad3018ab736486919b376e0c6d35132a73d4776</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>diary</category>
      </categories>
  </entry>
  <entry>
    <title>ACM-图论-同余最短路</title>
    <url>/2019/10/15/ACM-%E5%9B%BE%E8%AE%BA-%E5%90%8C%E4%BD%99%E6%9C%80%E7%9F%AD%E8%B7%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>一种没见过的处理模型，，记录一下，，主要是用来处理一个多元一次方程的解的数量的问题，，数据量小时可以用看成背包处理，，数据很大时可以转换成最短路模型+一点数学来处理，，（体积模域下的最短路的问题，，求的一个最简的表示形式有模数来得到所有解</p>
<span id="more"></span>
<h1 id="墨墨的等式"><a href="#墨墨的等式" class="headerlink" title="墨墨的等式"></a>墨墨的等式</h1><p><a href="https://www.luogu.org/problem/P2371">题目</a></p>
<p>因为只是求满足的解的数量，，所以可以将方程转换成一个模方程组，，这样的方程组的解显然也是原来的解的子集，，同时可以利用模数来得到所有解，，</p>
<p>模数的选择是最小的那个系数，，因为如果任意选择，，会出现一些多考虑的情况</p>
<p>弄 mi 个点，表示从0到mi-1的所有数，，建边的方法是 <code>i-&gt;(i+a[j])%mi</code> 边权为 a[j] ，，表示从i这个点变成后面一个数的费用，，（因为两边都是取模的，，所以每一个数取几次后的和的余数就是那些经过的点，，也就是说一条路径就是得到一个右边为 i(mod mi) 的一个最小解，，这个最小的解就是费用和，，也就是一条最短路dis[i]</p>
<p>这样我们对于每一个取模的右边的B都计算一下区间里的数量，，，<del>（计算这玩意推错了一次，，emmm</del></p>
<p><a href="https://www.luogu.org/blog/0-00-0/solution-p2371">参考</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(TM(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">3e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br>ll n, l, r, a[maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt; ll w;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].w = w;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v; ll w;<br>    node()&#123;&#125;<br>    node(<span class="hljs-keyword">int</span> _v, ll _w):v(_v), w(_w)&#123;&#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;r)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> w &gt; r.w;<br>    &#125;<br>&#125;tmp;<br>ll dis[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, inf, <span class="hljs-keyword">sizeof</span> dis);<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-built_in">priority_queue</span>&lt;node&gt; q;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    q.push(node(s, <span class="hljs-number">0</span>));<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        tmp = q.top(); q.pop();<br>        <span class="hljs-keyword">if</span>(vis[tmp.v])<span class="hljs-keyword">continue</span>;<br>        vis[tmp.v] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[tmp.v]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(dis[v] &gt; dis[tmp.v] + edge[i].w)<br>            &#123;<br>                dis[v] = dis[tmp.v] + edge[i].w;<br>                q.push(node(v, dis[v]));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; l &gt;&gt; r;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>    sort(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n);<br>    <span class="hljs-keyword">int</span> mi = a[<span class="hljs-number">1</span>];<br>    init();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= mi - <span class="hljs-number">1</span>; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>            addedge(i, (i + a[j]) % mi, a[j]);<br>    dijkstra(<span class="hljs-number">0</span>);<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= mi - <span class="hljs-number">1</span>; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(dis[i] &lt;= r)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(dis[i] == <span class="hljs-number">0</span>)dis[i] = mi;<br>            ans += (r - dis[i]) / mi + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(l &gt; dis[i])ans -= (l - dis[i] - <span class="hljs-number">1</span>) / mi + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="P3403-跳楼机"><a href="#P3403-跳楼机" class="headerlink" title="P3403 跳楼机"></a>P3403 跳楼机</h1><p><a href="https://www.luogu.org/problem/P3403">题目</a></p>
<p>比上面那个简单些，，就是注意细节，，从1开始，，有一个是1那么值一定是h，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(TM(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">3e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br>ll n, l, r, a[maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt; ll w;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].w = w;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v; ll w;<br>    node()&#123;&#125;<br>    node(<span class="hljs-keyword">int</span> _v, ll _w):v(_v), w(_w)&#123;&#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;r)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> w &gt; r.w;<br>    &#125;<br>&#125;tmp;<br>ll dis[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, inf, <span class="hljs-keyword">sizeof</span> dis);<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-built_in">priority_queue</span>&lt;node&gt; q;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    q.push(node(s, <span class="hljs-number">0</span>));<br>    dis[s] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        tmp = q.top(); q.pop();<br>        <span class="hljs-keyword">if</span>(vis[tmp.v])<span class="hljs-keyword">continue</span>;<br>        vis[tmp.v] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[tmp.v]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(dis[v] &gt; dis[tmp.v] + edge[i].w)<br>            &#123;<br>                dis[v] = dis[tmp.v] + edge[i].w;<br>                q.push(node(v, dis[v]));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>    sort(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + <span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">1</span>] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    ll mi = a[<span class="hljs-number">1</span>];<br>    init();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= mi - <span class="hljs-number">1</span>; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>; j &lt;= <span class="hljs-number">3</span>; ++j) <br>            addedge(i, (i + a[j]) % mi, a[j]);<br>    dijkstra(<span class="hljs-number">1</span>);<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= mi - <span class="hljs-number">1</span>; ++i)<br>        <span class="hljs-keyword">if</span>(dis[i] &lt;= n)<br>            ans += (n - dis[i]) / mi + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="遥远的旅途"><a href="#遥远的旅途" class="headerlink" title="遥远的旅途"></a>遥远的旅途</h1><p><a href="http://www.51nod.com/Challenge/Problem.html#problemId=1326">题目</a></p>
<p>这题的大致思路是将dp问题用最短路来优化，，</p>
<p>设 <code>dp[i][j]</code> 表示从起点走到i时的长度为j的一条路是否存在，，但是空间都会爆掉，，</p>
<p>考虑第二维，假设是通过经过若干个环来达到T，，也就是 <code>len+kw==T</code> ，，这里的w即为环的长度的两倍，，如果取模w就是 <code>len%w==T%w</code> ，，这样子dp方程就变成了到达 i 点时路径长度取模等于j的一条路径的长度，，利用spfa来转移，，只要最后 <code>dp[n][T%w] &lt;= T</code> 就表示存在解，这样子利用模数来压缩了状态，，找等同的就行了，，，<a href="https://blog.csdn.net/crybymyself/article/details/54974562">参考</a> <a href="https://www.cnblogs.com/renjianshige/p/7588125.html">参考</a> </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(TM(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e2</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br>ll n, m, T, a[maxn], ww;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt; ll w;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].w = w;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br>ll dp[maxn][<span class="hljs-number">20005</span>];<br><span class="hljs-keyword">bool</span> vis[maxn][<span class="hljs-number">20005</span>];<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, ll&gt; &gt; q;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dp, inf, <span class="hljs-keyword">sizeof</span> dp);<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; vis[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;<br>    q.push(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front().first; ll w = q.front().second; q.pop(); <br>        vis[u][w] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to; ll vw = edge[i].w;<br>            <span class="hljs-keyword">if</span>(dp[v][(w + vw) % ww] &gt; dp[u][w] + vw)<br>            &#123;<br>                dp[v][(w + vw) % ww] = dp[u][w] + vw;<br>                <span class="hljs-keyword">if</span>(!vis[v][(w + vw) % ww])<br>                &#123;<br>                    vis[v][(w + vw) % ww] = <span class="hljs-literal">true</span>;<br>                    q.push(<span class="hljs-built_in">make_pair</span>(v, (w + vw) % ww));<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-keyword">int</span> t; <span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; T;<br>        <span class="hljs-keyword">int</span> u, v, w;<br>        init();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>            ++u, ++v;<br>            addedge(u, v, w);<br>            addedge(v, u, w);<br>        &#125;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[n]; ~i; i = edge[i].nxt)<br>        &#123;<br>            ww = edge[i].w &lt;&lt; <span class="hljs-number">1</span>;<br>            spfa();<br>            <span class="hljs-keyword">if</span>(dp[n][T % ww] &lt;= T)<br>            &#123;<br>                flag = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Possible&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Impossible&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>(end)</p>
]]></content>
      <categories>
        <category>ACM-最短路</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM-数据结构-树链剖分</title>
    <url>/2019/03/24/ACM-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>据学长说，树链剖分在acm比赛上不怎么看到过，我搜到的博客也都是几年前的东西，不过已经看过了，，还是记录一下把，，</p>
<span id="more"></span>
<p>我是从<a href="http://blog.sina.com.cn/s/blog_6974c8b20100zc61.html">这里看的树链剖分</a>的内容，，<a href="https://blog.csdn.net/dyx404514/article/details/8718249">还有这个</a></p>
<p>看了几遍，大致知道树链剖分大致是为了解决树上的修改和询问操作的一个工具，，当然一般来说还要一个数据结构例如线段树什么的维护一下，，</p>
<p>以后忘了的话就再看那篇博客吧，，，反正知道这是个啥，怎么用就行了，，</p>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3966">杭电3966</a></p>
<p>这个是修改点权的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;iostream&gt;</span><br><span class="hljs-comment">// #include &lt;cstdio&gt;</span><br><span class="hljs-comment">// #include &lt;cstdlib&gt;</span><br><span class="hljs-comment">// #include &lt;string.h&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, next;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> tot, head[maxn];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].next = head[u];<br>    head[u] = tot++;<br>&#125;<br><br><span class="hljs-keyword">int</span> fa[maxn];   <span class="hljs-comment">//fa[v] 表示v的父亲节点</span><br><span class="hljs-keyword">int</span> dep[maxn];  <span class="hljs-comment">//dep[v] 表示v的深度</span><br><span class="hljs-keyword">int</span> son[maxn];  <span class="hljs-comment">//son[v] 表示与v同一条重链上的儿子节点</span><br><span class="hljs-keyword">int</span> num[maxn];  <span class="hljs-comment">//num[v] 表示以v为根的子树的节点数</span><br><span class="hljs-keyword">int</span> p[maxn];    <span class="hljs-comment">//p[v] 表示v在树状数组中的位置</span><br><span class="hljs-keyword">int</span> fp[maxn];   <span class="hljs-comment">//fp[v] 与p[v]相反，即v == fp[p[v]]</span><br><span class="hljs-keyword">int</span> top[maxn];  <span class="hljs-comment">//top[v] 表示v所在重链的顶端节点</span><br><span class="hljs-keyword">int</span> pos;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>    pos = <span class="hljs-number">1</span>;    <span class="hljs-comment">//树状数组</span><br>    <span class="hljs-built_in">memset</span>(son, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> son);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> pre)</span></span><br><span class="hljs-function"></span>&#123;<br>    dep[u] = dep[pre] + <span class="hljs-number">1</span>;<br>    fa[u] = pre;<br>    num[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)  <span class="hljs-comment">//遍历所有与u相连的节点</span><br>    &#123;<br>        <span class="hljs-keyword">int</span> v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(v != pre)                            <span class="hljs-comment">//对于u的父亲节点不处理</span><br>        &#123;<br>            dfs1(v, u);<br>            num[u] += num[v];<br>            <span class="hljs-keyword">if</span>(son[u] == <span class="hljs-number">-1</span> || num[v] &gt; num[son[u]])<br>                son[u] = v;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> sp)</span></span><br><span class="hljs-function"></span>&#123;<br>    top[u] = sp;            <span class="hljs-comment">//设置u所在重链的顶端节点</span><br>    p[u] = pos++;           <span class="hljs-comment">//确定u在线段树等数据结构中所维护的数组的位置</span><br>    fp[p[u]] = u;           <span class="hljs-comment">//确定上面那个数组中每个位置所代表的节点</span><br>    <span class="hljs-keyword">if</span>(!~son[u])<span class="hljs-keyword">return</span>;<br>    dfs2(son[u], sp);       <span class="hljs-comment">//将在一条重链的节点放在那个数组相邻的位置，连续分布</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(v != son[u] &amp;&amp; v != fa[u])   <span class="hljs-comment">//对于u除了父亲节点和它所在重链上的儿子的点，一定是旁边轻链上的起始点，所以那条以v开头的轻链的top[v]=v</span><br>            dfs2(v, v);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x &amp; (-x);<br>&#125;<br><br><span class="hljs-keyword">int</span> c[maxn];<br><span class="hljs-keyword">int</span> n, m, pp;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        s += c[i];<br>        i -= lowbit(i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(i &lt;= n)<br>    &#123;<br>        c[i] += val;<br>        i += lowbit(i);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//改变u-&gt;v路径上的点值</span><br>    <span class="hljs-keyword">int</span> f1 = top[u];    <br>    <span class="hljs-keyword">int</span> f2 = top[v];<br>    <span class="hljs-keyword">int</span> tmp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(f1 != f2)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(dep[f1] &lt; dep[f2])<br>        &#123;<br>            swap(f1, f2);<br>            swap(u, v);<br>        &#125;<br>        add(p[f1], val);<br>        add(p[u] + <span class="hljs-number">1</span>, -val);<br>        u = fa[f1];<br>        f1 = top[u];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(dep[u] &gt; dep[v])swap(u, v);<br>    add(p[u], val);<br>    add(p[v] + <span class="hljs-number">1</span>, -val);<br>&#125;<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;pp))<br>    &#123;<br>        init();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        <span class="hljs-keyword">int</span> u, v;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>            addedge(u, v);<br>            addedge(v, u);<br>        &#125;<br>        dfs1(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        dfs2(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">memset</span>(c, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> c);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            add(p[i], a[i]);<br>            add(p[i] + <span class="hljs-number">1</span>, -a[i]);<br>        &#125;<br>        <span class="hljs-keyword">char</span> op;<br>        <span class="hljs-keyword">int</span> c1, c2, k;<br>        <span class="hljs-keyword">while</span>(pp--)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot; %c&quot;</span>, &amp;op);<br>            <span class="hljs-keyword">if</span>(op == <span class="hljs-string">&#x27;Q&#x27;</span>)<br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;u);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, sum(p[u]));<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;c1, &amp;c2, &amp;k);<br>                <span class="hljs-keyword">if</span>(op == <span class="hljs-string">&#x27;D&#x27;</span>)k = -k;<br>                change(c1, c2, k);<br>            &#125;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    <br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM-数据结构-树链剖分</category>
      </categories>
      <tags>
        <tag>acm</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM-数论-广义欧拉降幂</title>
    <url>/2019/09/02/ACM-%E6%95%B0%E8%AE%BA-%E5%B9%BF%E4%B9%89%E6%AC%A7%E6%8B%89%E9%99%8D%E5%B9%82/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><blockquote>
<p>曾今一时的懒，造就今日的泪</p>
</blockquote>
<p>记得半年前去武大参加的省赛，当时的A题就是一个广义欧拉降幂的板子题，后来回来补了一下，因为没有交的地方，于是就测了数据就把代码扔了，，，然后，，昨天的南京网络赛就炸了，，，一样的广义欧拉降幂的板子题，，然后因为忘记了当初自己想出来的那中写法，，一直想着回想起之前的写法，，然后到结束都没弄出来，，，emmmm，，</p>
<p>赛后看了一下别人的解法，，别人的处理方法很巧妙，，当然另一个种返回两个值的（pair）的解法就是武大的标程，，，，（到最后之前想出的写法还是每能推出来，，都开始怀疑自己当时有没有真的推出来，，，，，</p>
<span id="more"></span>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>广义欧拉降幂没啥好说的，，就是那个公式：</p>
<p>对于求 $a^b(mod \ p)$ 可以转换为：</p>
<script type="math/tex; mode=display">
    a^b = 
    \begin{cases}
    a^{b \%  \phi (p)}   &gcd(a, p)=1 \\
    a^b &gcd(a, p) \neq 1, b < \phi (p) \\
    a^{b \% \phi (p) + \phi (p)} &gcd(a, p) \neq 1, b \ge \phi (p)\\
    \end{cases}</script><p>公式很简单，，但是如果是求 $a_1^{a_2^{a_3^{…}}} (mod \ p)$ 类似这样的值的话，显然要递归从上往下求（刚开始弄成了从下往上求，，口胡了一段时间，，，，），，但是再递归求的时候要考虑每一次 $b$ 和 $\phi (p)$ 的关系，，然后选择哪一个等式，，，这样就麻烦了，，可以用一个 <code>pair</code> 什么的来保存一个标志变量来决定递归的上一层要不要 $+ \phi (p)$ ，，另一种巧妙地方式是修改一下 <strong>取模</strong> 的过程，，这样就不用考虑了，，，<a href="https://www.cnblogs.com/ACMLCZH/p/8117161.html">具体的推导过程在这里</a></p>
<p>所有的取模的步骤改成这样：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">modulo</span><span class="hljs-params">(ll x, ll mod)</span></span>&#123;<span class="hljs-keyword">return</span> x &lt; mod ? x : x % mod + mod;&#125;<br></code></pre></td></tr></table></figure>
<p>这样保证 $b \ge \phi (p)$ ，，然后就少了判断的情况</p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="南京网络赛B-supper-log"><a href="#南京网络赛B-supper-log" class="headerlink" title="南京网络赛B supper_log"></a><a href="https://nanti.jisuanke.com/t/41299">南京网络赛B supper_log</a></h2><p><a href="https://nanti.jisuanke.com/t/41299">南京网络赛B supper_log</a></p>
<p>这道题按题目的意思推几项样例就能看出是要求一个 $a^{a^{a^{a^{…}}}} mod \ m （一共有b个a）$ 的值，，直接降幂求就可以了，， 记得特判 b=0 的情况</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="群里很多大佬用的方法，重置取模的流程"><a href="#群里很多大佬用的方法，重置取模的流程" class="headerlink" title="群里很多大佬用的方法，重置取模的流程"></a>群里很多大佬用的方法，重置取模的流程</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld; <br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-function">ll <span class="hljs-title">f</span><span class="hljs-params">(ll x, ll a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + f((ll)(<span class="hljs-built_in">log</span>(x) / <span class="hljs-built_in">log</span>(a)), a);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">modulo</span><span class="hljs-params">(ll x, ll mod)</span></span>&#123;<span class="hljs-keyword">return</span> x &lt; mod ? x : x % mod + mod;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">pow_</span><span class="hljs-params">(ll a, ll b, ll p)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ret = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b &amp; <span class="hljs-number">1</span>)ret = modulo(ret * a, p);<br>        a = modulo(a * a, p);<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">phi</span><span class="hljs-params">(ll x)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans = x;<br>    <span class="hljs-keyword">for</span>(ll i = <span class="hljs-number">2</span>; i * i &lt;= x; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(x % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            ans = ans / i * (i - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">while</span>(x % i == <span class="hljs-number">0</span>)x /= i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(x &gt; <span class="hljs-number">1</span>)ans = ans / x * (x - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a, ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(b == <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">return</span> gcd(b, a % b);<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">f</span><span class="hljs-params">(ll a, ll b, ll k, ll p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(k == <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> pow_(a, f(a, a, k - <span class="hljs-number">1</span>, phi(p)), p);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br><br>    <span class="hljs-keyword">int</span> t; <span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        ll a, b, m;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; m;<br>        <span class="hljs-comment">// cout &lt;&lt; a &lt;&lt; b &lt;&lt; m &lt;&lt; endl;</span><br>        <span class="hljs-keyword">if</span>(b == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">1</span> % m &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        ll ans = f(a, a, b, m) % m;<br>        <span class="hljs-comment">// if(a == 1)ans = 1 % m;</span><br>        <span class="hljs-comment">// cout &lt;&lt; ans &lt;&lt; &quot; &quot; &lt;&lt; ans % m &lt;&lt; endl;</span><br>        <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="pair记录上一层"><a href="#pair记录上一层" class="headerlink" title="pair记录上一层"></a>pair记录上一层</h4><p>武大那场的标程，，直接改了下输入，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1000010</span>;<br><span class="hljs-keyword">int</span> prime[N + <span class="hljs-number">1</span>], isprime[N + <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, phi[N + <span class="hljs-number">1</span>];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span></span><br><span class="hljs-class">&#123;</span><br>    ll ans;<br>    <span class="hljs-keyword">bool</span> v;<br>    P(ll _ans, <span class="hljs-keyword">bool</span> _v)<br>    &#123;<br>        ans = _ans;<br>        v = _v;<br>    &#125;<br>&#125;;<br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a, ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> b ? gcd(b, a % b) : a;<br>&#125;<br><span class="hljs-function">P <span class="hljs-title">qpow</span><span class="hljs-params">(ll A, ll B, ll C)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll re = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">bool</span> flag = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (B)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (B &amp; <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> ((re *= A) &gt;= C)<br>                flag = <span class="hljs-number">0</span>;<br>            re = re % C;<br>        &#125;<br>        B = B &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (B)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (A &gt;= C)<br>                flag = <span class="hljs-number">0</span>;<br>            A %= C;<br>            <span class="hljs-keyword">if</span> ((A *= A) &gt;= C)<br>                flag = <span class="hljs-number">0</span>;<br>            A %= C;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> P(re, flag);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getphi</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    phi[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    isprime[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= N; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!isprime[i])<br>        &#123;<br>            prime[++tot] = i;<br>            phi[i] = i - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= tot &amp;&amp; i * prime[j] &lt;= N; j++)<br>        &#123;<br>            isprime[i * prime[j]] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (i % prime[j] == <span class="hljs-number">0</span>)<br>            &#123;<br>                phi[i * prime[j]] = phi[i] * prime[j];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                phi[i * prime[j]] = phi[i] * phi[prime[j]];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">Euler</span><span class="hljs-params">(ll x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> phi[x];<br>    <span class="hljs-comment">//题目可以再复杂一点模数可以到longlong</span><br>    <span class="hljs-comment">// ll ans = x;</span><br>    <span class="hljs-comment">// for (int i = 1; i &lt;= tot &amp;&amp; prime[i] * prime[i] &lt;= x; i++)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     if (x % prime[i] == 0)</span><br>    <span class="hljs-comment">//     &#123;</span><br>    <span class="hljs-comment">//         ans = ans / prime[i] * (prime[i] - 1);</span><br>    <span class="hljs-comment">//         while (x % prime[i] == 0)</span><br>    <span class="hljs-comment">//             x /= prime[i];</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// if (x &gt; 1)</span><br>    <span class="hljs-comment">//     ans = ans / x * (x - 1);</span><br>    <span class="hljs-comment">// return ans;</span><br>&#125;<br><span class="hljs-function">P <span class="hljs-title">f</span><span class="hljs-params">(ll a, ll b, ll k, ll p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> P(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> P(a % p, a &lt; p);<br>    ll ep = Euler(p);<br>    P tmp = f(b, b, k - <span class="hljs-number">1</span>, ep);<br>    <span class="hljs-keyword">if</span> (gcd(a, p) == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> qpow(a, tmp.ans, p);<br>    <span class="hljs-keyword">if</span> (tmp.v == <span class="hljs-literal">false</span>)<br>    &#123;<br>        tmp.ans += ep;<br>    &#125;<br>    <span class="hljs-keyword">return</span> qpow(a, tmp.ans, p);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ll a, b, k, p;<br>    getphi();<br>    <span class="hljs-keyword">int</span> t;<br>    <span class="hljs-keyword">while</span> (~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t))<br>    &#123;<br>        <span class="hljs-keyword">while</span> (t--)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld %lld %lld&quot;</span>, &amp;a, &amp;k, &amp;p);<br>            b = a;<br>            <span class="hljs-keyword">if</span>(k == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-number">1</span> % p);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, f(a, b, k - <span class="hljs-number">1</span>, p).ans);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//cout&lt;&lt;(clock()-pp)/CLOCKS_PER_SEC;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="cf-906-D-Power-Tower"><a href="#cf-906-D-Power-Tower" class="headerlink" title="cf-906 D. Power Tower"></a><a href="https://codeforces.com/contest/906/problem/D">cf-906 D. Power Tower</a></h2><p><a href="https://codeforces.com/contest/906/problem/D">cf-906 D. Power Tower</a></p>
<p>突然很多人交这道两年前的题啊，，hhhhh</p>
<p>这题也是降幂，他是求的一个指数序列的一个区间的幂的值，，，套路一样，，就是这个模数很大，，不能每次都算他的 phi ，，不然会超时，，所以要记忆化一下 <code>unordered_map</code> 一下，，或者 <strong>预处理一下模数的所有phi</strong> 因为对一个数一直求 phi 下去，，其实个数不多，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld; <br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br>ll a[maxn];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">modulo</span><span class="hljs-params">(ll x, ll mod)</span></span>&#123;<span class="hljs-keyword">return</span> x &lt; mod ? x : x % mod + mod;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">pow_</span><span class="hljs-params">(ll a, ll b, ll p)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ret = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b &amp; <span class="hljs-number">1</span>)ret = modulo(ret * a, p);<br>        a = modulo(a * a, p);<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-built_in">unordered_map</span>&lt;ll, ll&gt; phi_;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">phi</span><span class="hljs-params">(ll x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(phi_[x])<span class="hljs-keyword">return</span> phi_[x];<br>    ll ans = x;<br>    ll t = x;<br>    <span class="hljs-keyword">for</span>(ll i = <span class="hljs-number">2</span>; i * i &lt;= x; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(x % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            ans = ans / i * (i - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">while</span>(x % i == <span class="hljs-number">0</span>)x /= i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(x &gt; <span class="hljs-number">1</span>)ans = ans / x * (x - <span class="hljs-number">1</span>);<br>    phi_[t] = ans;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-comment">//这里根据题意来更改，k表示共有k个指数</span><br><span class="hljs-function">ll <span class="hljs-title">f</span><span class="hljs-params">(ll a, ll b, ll k, ll p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(k == <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> pow_(a, f(a, a, k - <span class="hljs-number">1</span>, phi(p)), p);<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">f</span><span class="hljs-params">(ll l, ll r, ll p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(l == r + <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> pow_(a[l], f(l + <span class="hljs-number">1</span>, r, phi(p)), p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    ll n, m;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>    <span class="hljs-keyword">int</span> q; <span class="hljs-built_in">cin</span> &gt;&gt; q;<br>    <span class="hljs-keyword">while</span>(q--)<br>    &#123;<br>        ll l, r; <span class="hljs-built_in">cin</span> &gt;&gt; l &gt;&gt; r;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; f(l, r, m) % m &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="cf-gym-101550-E-Exponial"><a href="#cf-gym-101550-E-Exponial" class="headerlink" title="cf-gym-101550 E Exponial"></a><a href="https://codeforces.com/gym/101550/attachments">cf-gym-101550 E Exponial</a></h2><p><a href="https://codeforces.com/gym/101550/attachments">cf-gym-101550 E Exponial</a></p>
<p>这题是求一个  $n^{{n-1}^{{n-2}^{{n-3}^{{...}^{1}}}}} mod \ p$  ，，，用上面的板子改一改就可以了，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld; <br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">modulo</span><span class="hljs-params">(ll x, ll mod)</span></span>&#123;<span class="hljs-keyword">return</span> x &lt; mod ? x : x % mod + mod;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">pow_</span><span class="hljs-params">(ll a, ll b, ll p)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ret = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b &amp; <span class="hljs-number">1</span>)ret = modulo(ret * a, p);<br>        a = modulo(a * a, p);<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-built_in">unordered_map</span>&lt;ll, ll&gt; phi_;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">phi</span><span class="hljs-params">(ll x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(phi_[x])<span class="hljs-keyword">return</span> phi_[x];<br>    ll ans = x;<br>    ll t = x;<br>    <span class="hljs-keyword">for</span>(ll i = <span class="hljs-number">2</span>; i * i &lt;= x; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(x % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            ans = ans / i * (i - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">while</span>(x % i == <span class="hljs-number">0</span>)x /= i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(x &gt; <span class="hljs-number">1</span>)ans = ans / x * (x - <span class="hljs-number">1</span>);<br>    phi_[t] = ans;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-comment">// ll f(ll l, ll r, ll p)</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//     if(p == 1)return 1;</span><br><span class="hljs-comment">//     if(l == r + 1)return 1;</span><br><span class="hljs-comment">//     return pow_(a[l], f(l + 1, r, phi(p)), p);</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-function">ll <span class="hljs-title">f</span><span class="hljs-params">(ll a, ll p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(a == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> pow_(a, f(a - <span class="hljs-number">1</span>, phi(p)), p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    ll n, m;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m)<span class="hljs-built_in">cout</span> &lt;&lt; f(n, m) % m &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>貌似够了，，，数论是最不想碰的东西，，emmmm，，，但又时不得不稍稍掌握的东西，，，，</p>
<p>(end….)</p>
]]></content>
      <categories>
        <category>ACM-数论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>数论</tag>
        <tag>广义欧拉降幂</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM--笔记</title>
    <url>/2018/05/19/ACM-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>//这一篇主要是记录一些做acm题时常用到的一些技巧、方法，比如说时大佬们常用的一些 <strong>头文件</strong>、<strong>模板</strong>、<strong>函数</strong>什么的;</p>
<h1 id="头文件之类的"><a href="#头文件之类的" class="headerlink" title="头文件之类的:"></a>头文件之类的:</h1><ul>
<li><strong>万能头文件</strong>：#include <bits/stdc++.h>;</li>
</ul>
<h1 id="函数方面"><a href="#函数方面" class="headerlink" title="函数方面:"></a>函数方面:</h1><h2 id="字符串的处理"><a href="#字符串的处理" class="headerlink" title="字符串的处理:"></a>字符串的处理:</h2><ul>
<li>截取从 pos 开始 len 长度的字串，，std::string::substr(size_t pos = 0, size_t len = npos);</li>
</ul>
<h1 id="效率方面"><a href="#效率方面" class="headerlink" title="效率方面:"></a>效率方面:</h1><ul>
<li>scanf()输入要比cin输入快一些;</li>
</ul>
]]></content>
      <tags>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM-简单图论刷题</title>
    <url>/2019/10/07/ACM-%E7%AE%80%E5%8D%95%E5%9B%BE%E8%AE%BA%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>做一些简单图论题，， <a href="https://codeforces.com/problemset?order=BY_RATING_ASC&amp;tags=graphs%2C2000-">list</a></p>
<span id="more"></span>
<h1 id="463D-Gargari-and-Permutations-多个串的LCS"><a href="#463D-Gargari-and-Permutations-多个串的LCS" class="headerlink" title="463D    Gargari and Permutations 多个串的LCS"></a>463D    Gargari and Permutations 多个串的LCS</h1><p>对于每一对数： <code>&lt;i, j&gt;</code> ，，如果每一个串的j都在i前面的话连一条边 <code>i-&gt;j</code> ，，然后跑找一个最长路，，<a href="https://codeforces.com/problemset/submission/463/62052575">code</a></p>
<h1 id="449B-Jzzhu-and-Cities-最短路判必经边"><a href="#449B-Jzzhu-and-Cities-最短路判必经边" class="headerlink" title="449B    Jzzhu and Cities 最短路判必经边"></a>449B    Jzzhu and Cities 最短路判必经边</h1><p>直接跑最短路并记录每个点的路径数，最后可删边对的点v如果路径数大于1或者是这条边的权值小于最短路的值就说明这边可删 （路径数很多以单模），，，记得前面去重就行了，，或者跑完最短路抠出的新图判这个点的入度大于1否，，</p>
<p>本来是道乱搞题，，最开始的想法错了些就全否了，，不断的写假算法，，，<del>（失去理智</del> <a href="https://codeforces.com/contest/449/submission/62090227">code</a></p>
<h1 id="558C-Amr-and-Chemistry-暴力？？"><a href="#558C-Amr-and-Chemistry-暴力？？" class="headerlink" title="558C    Amr and Chemistry 暴力？？"></a>558C    Amr and Chemistry 暴力？？</h1><p>一开始看到tag有一个shortest path 以为是根据一些关系来建张图，，然后跑最短路得到答案，，，但是发现不管怎么建边，，最短路都是求得的，，，和最短路没啥关系，，妥妥的暴力，，最后看了官方题解，，才发现将求每个数的情况的搜索看成了最短路，，我,,,emmmmmmm <a href="https://codeforces.com/contest/558/submission/62109249">code</a></p>
<h1 id="739B-Alyona-and-a-tree-dfs-路径二分"><a href="#739B-Alyona-and-a-tree-dfs-路径二分" class="headerlink" title="739B    Alyona and a tree dfs+路径二分"></a>739B    Alyona and a tree dfs+路径二分</h1><p>这题不错，，</p>
<p>假定 $dep[u]$ 表示从根节点到点 <code>u</code> 的一条链的前缀路径长度，，这样这条链上的任意一条路径长度就知道了，，然后对于当前访问的一个点 <code>v</code> ，先考虑这个点对上面的某些满足条件的点的贡献：上面的点中存在这样的点 <code>u</code> ，使得 $dep[v] - dep[u] &lt;= a[v]$ 也就是说 <code>v</code> 在 <code>u</code> 的子树中并且路径长度是不大于点权的，，这样的话 <code>u</code> 的个数加一，，</p>
<p>同样，，这段路径间的点的也满足这样的条件，，因为路径长度是单调的，，所以，，我们只要找到一个满足条件的最远的一个点 <code>u</code> 的上一个，</p>
<p>（寻找的方法是：将上面的条件转换以下，， $dep[v] - a[v] &lt;= dep[u]$ 又因为dep是单调递增的，，所以找这个 <code>u</code> 就是找一个刚好 $dep[u]$ 是大于等于 $dep[v] - a[v]$ 的点即可），，，，</p>
<p>将其的答案减一，，然后利用他更新他的上面的点（看成都不算这个点的贡献，，而 <code>u</code> 到 <code>v</code> 的点都会加上一个1），，，对于每一个点考虑dfs中的所有儿子节点的贡献和即可，，<a href="https://codeforces.com/contest/739/submission/62394729">code</a></p>
<h1 id="1217D-Coloring-Edges-判环-染色"><a href="#1217D-Coloring-Edges-判环-染色" class="headerlink" title="1217D    Coloring Edges 判环+染色"></a>1217D    Coloring Edges 判环+染色</h1><p><a href="https://codeforces.com/contest/1217/submission/61395907">直接拓扑排序判环染色</a>，，<a href="https://codeforces.com/contest/1217/submission/61365723">或者利用dfs的性质来染色判环</a></p>
<h1 id="842C-Ilya-And-The-Tree-dfs-优化"><a href="#842C-Ilya-And-The-Tree-dfs-优化" class="headerlink" title="842C    Ilya And The Tree dfs+优化"></a>842C    Ilya And The Tree dfs+优化</h1><p>一道搜索题，，刚开始我直接将搜索到的每一条路径的所有数的因数扔到了map中，，然后遍历尝试找一个最大的因数并且其数量是大于等于n-1的，，，但是这样会随着路径的长度map的大小不断地增加，，即使控制反向遍历也会爆栈等等，，可以先假设每一条路径都去掉根节点，这样每一个点的答案就是 $ans[v]=__gcd(ans[u], a[v])$ ，，，然后如果一定加上根节点的话，答案一定是根节点的一个因数，，所以map直接保存的就是根节点的因数，，再像上面那样遍历一遍和第一次得到的答案取最大就行了，，<a href="https://codeforces.com/contest/842/submission/62238501">code</a></p>
<h1 id="1213G-Path-Queries-并查集"><a href="#1213G-Path-Queries-并查集" class="headerlink" title="1213G    Path Queries 并查集"></a>1213G    Path Queries 并查集</h1><p>离线询问，然后利用并查集将符合当前询问的所有两个点放到一堆集合中，，此时的答案就是每一个集合的边数 $m$ 的 $m(m + 1)/2$ ，，，询问排序后之前加的边也是满足条件的，，，这样就可以利用前一个答案来获得当前的询问的答案，，更新的方式是，，，将这条边的两个点所在的集合的大小 $a, b$ 清空，，然后答案 $ans = ans - (a <em> (a + 1) / 2) - (b </em> (b + 1) / 2) + ((a + b + 1) * (a + b + 2) / 2))$  ，，最后合并集合即可，，刚开始我是用并查集维护边，，，因为要建图，，一直T，，，emmm <a href="https://codeforces.com/contest/1213/submission/62347660">code</a></p>
<h1 id="776D-The-Door-Problem-2sat"><a href="#776D-The-Door-Problem-2sat" class="headerlink" title="776D    The Door Problem 2sat"></a>776D    The Door Problem 2sat</h1><p>2sat板子题吧，，直接按题意找出限制关系建图判以下就行了，，之前写过，，<a href="https://codeforces.com/contest/776/submission/52218310">code</a></p>
<h1 id="767C-Garland-dfs-贪心"><a href="#767C-Garland-dfs-贪心" class="headerlink" title="767C    Garland dfs+贪心"></a>767C    Garland dfs+贪心</h1><p>dfs搜出所有的 $sum/3$ 和 $2*sum/3$ 的子树，，记前者为1，后面的为2，，</p>
<p>记录搜的过程中的1的出现位置，如果出现一个2，并且它的子树中有一个1，那么这就是一个答案，，直接输出后退出程序就行了，，没有跳过</p>
<p>如果找到一个1的同时他的子树中有一个1，，那么这个1不要，，继续搜，，，最后如果搜到的1超过两个输出就行了，，没有的话就是无解，，，<a href="https://codeforces.com/contest/767/submission/62419845">code</a></p>
<p><del>（很简单的一道题，，思路很早就通了，，就是实现的时候因为一些细节疯狂wa，，emmmmm</del></p>
<h1 id=""><a href="#" class="headerlink" title=" "></a> </h1>]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM-树形dp</title>
    <url>/2019/07/19/ACM-%E6%A0%91%E5%BD%A2dp/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="Anniversary-party"><a href="#Anniversary-party" class="headerlink" title="Anniversary party"></a><a href="http://poj.org/problem?id=2342">Anniversary party</a></h1><span id="more"></span>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-comment">// #include &lt;set&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-comment">// #include &lt;ctime&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> n, a[maxn], dp[maxn][<span class="hljs-number">2</span>];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>    <span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> dp);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> sta, <span class="hljs-keyword">int</span> fa)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(~dp[u][sta])<span class="hljs-keyword">return</span> dp[u][sta];<br>    dp[u][sta] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(v == fa)<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span>(sta)dp[u][sta] += dfs(v, <span class="hljs-number">0</span>, u);<br>        <span class="hljs-keyword">else</span> dp[u][sta] += max(dfs(v, <span class="hljs-number">0</span>, u), dfs(v, <span class="hljs-number">1</span>, u));<br>    &#125;<br>    <span class="hljs-keyword">if</span>(sta)dp[u][sta] += a[u];<br>    <span class="hljs-keyword">return</span> dp[u][sta];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot; , &quot;r&quot;   , stdin); </span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br><br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n))<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        <span class="hljs-keyword">int</span> u, v;init();<br>        <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v) &amp;&amp; u + v)<br>            addedge(u, v), addedge(v, u);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, max(dfs(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>), dfs(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>)));<br>    &#125;<br>   <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;       <br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="Strategic-game"><a href="#Strategic-game" class="headerlink" title="Strategic game"></a><a href="http://poj.org/problem?id=1463">Strategic game</a></h1><h2 id="树形dp"><a href="#树形dp" class="headerlink" title="树形dp"></a>树形dp</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-comment">// #include &lt;set&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-comment">// #include &lt;ctime&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> n, dp[maxn][<span class="hljs-number">2</span>];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>    <span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> dp);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> sta, <span class="hljs-keyword">int</span> fa)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(~dp[u][sta])<span class="hljs-keyword">return</span> dp[u][sta];<br>    dp[u][sta] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(v == fa)<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span>(sta) dp[u][sta] += min(dfs(v, <span class="hljs-number">1</span>, u), dfs(v, <span class="hljs-number">0</span>, u));<br>        <span class="hljs-keyword">else</span> dp[u][sta] += dfs(v, <span class="hljs-number">1</span>, u);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(sta)++dp[u][sta];<br>    <span class="hljs-keyword">return</span> dp[u][sta];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot; , &quot;r&quot;   , stdin); </span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br><br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n))<br>    &#123;<br>        init();<br>        <span class="hljs-keyword">int</span> u, v, num;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d:(%d) &quot;</span>, &amp;u, &amp;num);<br>            <span class="hljs-keyword">while</span>(num--)<br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v);<br>                addedge(u + <span class="hljs-number">1</span>, v + <span class="hljs-number">1</span>);<br>                addedge(v + <span class="hljs-number">1</span>, u + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, min(dfs(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>), dfs(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>)));<br>    &#125;<br>   <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;       <br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="二分图最小点覆盖"><a href="#二分图最小点覆盖" class="headerlink" title="二分图最小点覆盖"></a>二分图最小点覆盖</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-comment">// #include &lt;set&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-comment">// #include &lt;ctime&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> linker[maxn];<br><span class="hljs-keyword">bool</span> used[maxn];<br><span class="hljs-keyword">int</span> uN;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(!used[v])<br>        &#123;<br>            used[v] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(linker[v] == <span class="hljs-number">-1</span> || dfs(linker[v]))<br>            &#123;<br>                linker[v] = u;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">hungary</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(linker, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> linker);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> u = <span class="hljs-number">0</span>; u &lt; uN; ++u)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(used, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> used);<br>        <span class="hljs-keyword">if</span>(dfs(u))++res;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot; , &quot;r&quot;   , stdin); </span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br><br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n))<br>    &#123;<br>        uN = n;<br>        init();<br>        <span class="hljs-keyword">int</span> u, v, num;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d:(%d) &quot;</span>, &amp;u, &amp;num);<br>            <span class="hljs-keyword">while</span>(num--)<br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v);<br>                addedge(u, v);<br>                addedge(v, u);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, hungary() / <span class="hljs-number">2</span>);<br>    &#125;<br>   <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;       <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM-树形dp</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM-网络流-费用流</title>
    <url>/2019/08/03/ACM-%E7%BD%91%E7%BB%9C%E6%B5%81-%E8%B4%B9%E7%94%A8%E6%B5%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>费用流就是网络流的一个变形，，，平常的网络流就是一个只有流量的网络，，如果限制每一个边的流量有一个单位的费用，，要求一个最大流的同时保证费用的最小（大）就是费用流的解法，，，除了kaungbin板子上的两个费用流的解法，，uestc在多校的一道题的标程使用 dijkstra 实现的，，貌似时效性不错，，记录一下，，</p>
<span id="more"></span>
<h1 id="spfa"><a href="#spfa" class="headerlink" title="spfa"></a>spfa</h1><p>巨慢，，，（也不一定，，，反正网络流的题板子的复杂度都是 $O(玄学)$ ，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt;<br>    ll cap, flow, cost;<br>&#125;edge[maxm &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxm &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll cap, ll cost)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v; edge[tot].cap = cap; edge[tot].cost = cost; edge[tot].flow = <span class="hljs-number">0</span>;<br>    edge[tot].nxt = head[u]; head[u] = tot++;<br>    edge[tot].to = u; edge[tot].cap = <span class="hljs-number">0</span>; edge[tot].cost = -cost; edge[tot].flow = <span class="hljs-number">0</span>;<br>    edge[tot].nxt = head[v]; head[v] = tot++;<br>&#125;<br>ll dis[maxn];<span class="hljs-keyword">int</span> pre[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)<br>    &#123;<br>        dis[i] = linf;<br>        vis[i] = <span class="hljs-literal">false</span>;<br>        pre[i] = <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    dis[s] = <span class="hljs-number">0</span>;<br>    vis[s] = <span class="hljs-literal">true</span>;<br>    q.push(s);<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front(); q.pop();<br>        vis[u] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(edge[i].cap &gt; edge[i].flow &amp;&amp; dis[u] + edge[i].cost &lt; dis[v])<br>            &#123;<br>                dis[v] = dis[u] + edge[i].cost;<br>                pre[v] = i;<br>                <span class="hljs-keyword">if</span>(!vis[v])<br>                &#123;<br>                    vis[v] = <span class="hljs-literal">true</span>;<br>                    q.push(v);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(pre[t] == <span class="hljs-number">-1</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MinCostMaxFlow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> n, ll &amp;cost, ll &amp;flow)</span></span><br><span class="hljs-function"></span>&#123;<br>    cost = flow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(spfa(s, t, n))<br>    &#123;<br>        ll min = linf;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = pre[t]; ~i; i = pre[edge[i ^ <span class="hljs-number">1</span>].to])<br>            <span class="hljs-keyword">if</span>(min &gt; edge[i].cap - edge[i].flow)<br>                min =  edge[i].cap - edge[i].flow;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = pre[t]; ~i; i = pre[edge[i ^ <span class="hljs-number">1</span>].to])<br>        &#123;<br>            edge[i].flow += min;<br>            edge[i ^ <span class="hljs-number">1</span>].flow -= min;<br>            cost += edge[i].cost * min;<br>        &#125;<br>        flow += min;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="zkw"><a href="#zkw" class="headerlink" title="zkw"></a>zkw</h1><p>还好，，比spfa快多了</p>
<p>建图的点减一，从零开始</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt;<br>    ll cap, flow, cost;<br>    Edge()&#123;&#125;<br>    Edge(<span class="hljs-keyword">int</span> _to, <span class="hljs-keyword">int</span> _nxt, ll _cap, ll _flow, ll _cost):to(_to), nxt(_nxt), cap(_cap), flow(_flow), cost(_cost)&#123;&#125;<br>&#125;edge[maxm];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ZkwMinCostMaxFlow</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> tot, head[maxn];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        tot = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> c, <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function">    </span>&#123;<br>        edge[tot] = Edge(v, head[u], c, <span class="hljs-number">0</span>, w);<br>        head[u] = tot++;<br>        edge[tot] = Edge(u, head[v], <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, -w);<br>        head[v] = tot++;<br>    &#125;<br>    <span class="hljs-keyword">int</span> s, t; ll dis[maxn], cur[maxn];<br>    <span class="hljs-keyword">int</span> n; ll MaxFlow, MinCost;<br>    <span class="hljs-keyword">bool</span> vis[maxn];<br>    <span class="hljs-function">ll <span class="hljs-title">aug</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, ll flow)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(u == t)<span class="hljs-keyword">return</span> flow;<br>        vis[u] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = cur[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(edge[i].cap &gt; edge[i].flow &amp;&amp; !vis[v] &amp;&amp; dis[u] == dis[v] + edge[i].cost)<br>            &#123;<br>                ll tmp = aug(v, min(flow, edge[i].cap - edge[i].flow));<br>                edge[i].flow += tmp;<br>                edge[i ^ <span class="hljs-number">1</span>].flow -= tmp;<br>                cur[u] = i;<br>                <span class="hljs-keyword">if</span>(tmp)<span class="hljs-keyword">return</span> tmp;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ModifyLabel</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        ll d = linf;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> u = <span class="hljs-number">0</span>; u &lt; n; ++u)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(vis[u])<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>                &#123;<br>                    <span class="hljs-keyword">int</span> v = edge[i].to;<br>                    <span class="hljs-keyword">if</span>(edge[i].cap &gt; edge[i].flow &amp;&amp; !vis[v])<br>                    &#123;<br>                        d = min(d, dis[v] + edge[i].cost - dis[u]);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(d == linf)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(vis[i])<br>            &#123;<br>                vis[i] = <span class="hljs-literal">false</span>;<br>                dis[i] += d;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MinCostMaxFlow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _s, <span class="hljs-keyword">int</span> <span class="hljs-keyword">_t</span>, <span class="hljs-keyword">int</span> _n, ll &amp;flow, ll &amp;cost)</span></span><br><span class="hljs-function">    </span>&#123;<br>        s = _s; t = <span class="hljs-keyword">_t</span>; n = _n;<br>        MinCost = MaxFlow = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dis[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)cur[i] = head[i];<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)vis[i] = <span class="hljs-literal">false</span>;<br>                ll tmp = aug(s, linf);<br>                <span class="hljs-keyword">if</span>(tmp == <span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>                MaxFlow += tmp;<br>                MinCost += tmp * dis[s];<br>            &#125;<br>            <span class="hljs-keyword">if</span>(!ModifyLabel())<span class="hljs-keyword">break</span>;<br>        &#125;<br>        flow = MaxFlow; cost = MinCost;<br>    &#125;  <br>&#125;;<br></code></pre></td></tr></table></figure>
<h1 id="dijkstra"><a href="#dijkstra" class="headerlink" title="dijkstra"></a>dijkstra</h1><p>效率较好，，不一定</p>
<p>还有最大费用最小流的求法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">MinCostMaxFlow</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> n, h[maxn], dis[maxn], prev[maxn], pree[maxn];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">    &#123;</span><br>        <span class="hljs-keyword">int</span> to, nxt, cap, cost;<br>        edge()&#123;&#125;<br>        edge(<span class="hljs-keyword">int</span> _to, <span class="hljs-keyword">int</span> _nxt, <span class="hljs-keyword">int</span> _cap, <span class="hljs-keyword">int</span> _cost):to(_to), nxt(_nxt), cap(_cap), cost(_cost)&#123;&#125;<br>    &#125;;<br>    <span class="hljs-built_in">vector</span>&lt;edge&gt; g[maxn];<br>    MinCostMaxFlow(<span class="hljs-keyword">int</span> _n)<br>    &#123;<br>        n = _n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)g[i].clear();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; u &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; v &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; w &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; c &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        g[u].push_back(edge(v, g[v].size(), w, c));<br>        g[v].push_back(edge(u, g[u].size() - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -c));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mincostmaxflow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t, ll f, ll &amp;flow, ll &amp;cost)</span></span><br><span class="hljs-function">    </span>&#123;<br>        flow = cost = <span class="hljs-number">0</span>;fill(h, h + n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">while</span>(f)<br>        &#123;<br>            <span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt;, greater&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt; &gt; q;<br>            fill(dis, dis + n + <span class="hljs-number">1</span>, inf);<br>            dis[s] = <span class="hljs-number">0</span>;<br>            q.push(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">0</span>, s));<br>            <span class="hljs-keyword">while</span>(!q.empty())<br>            &#123;<br>                <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; u = q.top(); q.pop();<br>                <span class="hljs-keyword">int</span> v = u.second;<br>                <span class="hljs-keyword">if</span>(dis[v] &lt; u.first)<span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; g[v].size(); ++i)<br>                &#123;<br>                    edge &amp;e = g[v][i];<br>                    <span class="hljs-keyword">if</span>(e.cap &gt; <span class="hljs-number">0</span> &amp;&amp; dis[e.to] &gt; dis[v] + e.cost + h[v] - h[e.to])<br>                    &#123;<br>                        dis[e.to] = dis[v] + e.cost + h[v] - h[e.to];<br>                        prev[e.to] = v;<br>                        pree[e.to] = i;<br>                        q.push(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(dis[e.to], e.to));<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(dis[t] == inf)<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)h[i] += dis[i];<br>            <span class="hljs-keyword">int</span> d = f;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> v = t; v != s; v = prev[v])d = min(d, g[prev[v]][pree[v]].cap);<br>            f -= d; flow += d; cost += d * h[t];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> v = t; v != s; v = prev[v])<br>            &#123;<br>                edge &amp;e = g[prev[v]][pree[v]];<br>                e.cap -= d;<br>                g[v][e.nxt].cap += d;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">maxcostmaxflow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> f, <span class="hljs-keyword">int</span> &amp;flow, <span class="hljs-keyword">int</span> &amp;cost)</span></span><br><span class="hljs-function">    </span>&#123;<br>        flow = cost = <span class="hljs-number">0</span>;<br>        fill(h, h + n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">while</span>(f)<br>        &#123;<br>            <span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt;, greater&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt; &gt;q;<br>            fill(dis, dis + n + <span class="hljs-number">1</span>, -inf);<br>            dis[s] = <span class="hljs-number">0</span>;<br>            q.push(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">0</span>, s));<br>            <span class="hljs-keyword">while</span>(!q.empty())<br>            &#123;<br>                <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; u = q.top(); q.pop();<br>                <span class="hljs-keyword">int</span> v = u.second;<br>                <span class="hljs-keyword">if</span>(dis[v] &gt; u.first)<span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; g[v].size(); ++i)<br>                &#123;<br>                    edge &amp;e = g[v][i];<br>                    <span class="hljs-keyword">if</span>(e.cap &gt; <span class="hljs-number">0</span> &amp;&amp; dis[e.to] &lt; dis[v] + e.cost + h[v] - h[e.to])<br>                    &#123;<br>                        dis[e.to] = dis[v] + e.cost + h[v] - h[e.to];<br>                        prev[e.to] = v;<br>                        pree[e.to] = i;<br>                        q.push(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(dis[e.to], e.to));<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(dis[t] == -inf)<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)h[i] += dis[i];<br>            <span class="hljs-keyword">int</span> d = f;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> v = t; v != s; v = prev[v])d = min(d, g[prev[v]][pree[v]].cap);<br>            f -= d; flow += d; cost += d * h[t];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> v = t; v != s; v = prev[v])<br>            &#123;<br>                edge &amp;e = g[prev[v]][pree[v]];<br>                e.cap -= d;<br>                g[v][e.nxt].cap += d;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>这道题是杭电多校的一道网络流签到题，，没有写过网络流24题和费用流，，，当时没有看出来，，即使知道是费用流也不知道怎么搞，，，</p>
<p>题意是给你一个数组，，然后可以最多选出k个上升子序列，，每个数只能选择一次，，然后问你最大的选择的和是多少，，，</p>
<p>这题的模型来自网络流中的一个 <strong>最长上升子序列</strong> 的模型，，这个模型可以解决一个数组中长度为最长的lis的个数，，当不限制某些数的选择次数也可以得到其答案，，</p>
<p>这题借用了这个建图的思想，，首先要保证每个数只用一次，，所以肯定要拆点，，，容量为1，对于两个点 $i, j$ 满足 $a[i] &lt;= a[j] \ \&amp;\&amp; \ i &lt; j$ 的两点可以建一条边，，容量为1，这样一条路径就是一个上升子序列，，，，但是因为我们要选择尽可能大的和，，所以可以看成选择这个点的一个费用，，这样选择一些点的权值和就是费用和，，，因为要取最大的权值和，，，可以反着想：取费用的相反数，，使费用最小即可，，，这样就可以用费用流解决，，</p>
<p>最后，题目要保证最多取k个，，只要保证最大流是k即可，，，也就是源点拆点，，容量为k，，，汇点也这样处理一下就行了，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e6</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">MinCostMaxFlow</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> n, h[maxn], dis[maxn], prev[maxn], pree[maxn];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">    &#123;</span><br>        <span class="hljs-keyword">int</span> to, nxt, cap, cost;<br>        edge()&#123;&#125;<br>        edge(<span class="hljs-keyword">int</span> _to, <span class="hljs-keyword">int</span> _nxt, <span class="hljs-keyword">int</span> _cap, <span class="hljs-keyword">int</span> _cost):to(_to), nxt(_nxt), cap(_cap), cost(_cost)&#123;&#125;<br>    &#125;;<br>    <span class="hljs-built_in">vector</span>&lt;edge&gt; g[maxn];<br>    MinCostMaxFlow(<span class="hljs-keyword">int</span> _n)<br>    &#123;<br>        n = _n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)g[i].clear();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function">    </span>&#123;<br>        g[u].push_back(edge(v, g[v].size(), w, c));<br>        g[v].push_back(edge(u, g[u].size() - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -c));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mcmf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t, ll f, ll &amp;flow, ll &amp;cost)</span></span><br><span class="hljs-function">    </span>&#123;<br>        flow = cost = <span class="hljs-number">0</span>;fill(h, h + n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">while</span>(f)<br>        &#123;<br>            <span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt;, greater&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt; &gt; q;<br>            fill(dis, dis + n + <span class="hljs-number">1</span>, inf);<br>            dis[s] = <span class="hljs-number">0</span>;<br>            q.push(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">0</span>, s));<br>            <span class="hljs-keyword">while</span>(!q.empty())<br>            &#123;<br>                <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; u = q.top(); q.pop();<br>                <span class="hljs-keyword">int</span> v = u.second;<br>                <span class="hljs-keyword">if</span>(dis[v] &lt; u.first)<span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; g[v].size(); ++i)<br>                &#123;<br>                    edge &amp;e = g[v][i];<br>                    <span class="hljs-keyword">if</span>(e.cap &gt; <span class="hljs-number">0</span> &amp;&amp; dis[e.to] &gt; dis[v] + e.cost + h[v] - h[e.to])<br>                    &#123;<br>                        dis[e.to] = dis[v] + e.cost + h[v] - h[e.to];<br>                        prev[e.to] = v;<br>                        pree[e.to] = i;<br>                        q.push(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(dis[e.to], e.to));<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(dis[t] == inf)<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)h[i] += dis[i];<br>            <span class="hljs-keyword">int</span> d = f;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> v = t; v != s; v = prev[v])d = min(d, g[prev[v]][pree[v]].cap);<br>            f -= d; flow += d; cost += d * h[t];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> v = t; v != s; v = prev[v])<br>            &#123;<br>                edge &amp;e = g[prev[v]][pree[v]];<br>                e.cap -= d;<br>                g[v][e.nxt].cap += d;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">int</span> n, a[maxn], k, t;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; k;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>        <span class="hljs-comment">// MinCostMaxFlow mcmf((n + 1) &lt;&lt; 1);</span><br>        <span class="hljs-comment">// int s = 0, ss = (n &lt;&lt; 1) + 3;</span><br>        <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>, ss = (n + <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> t = (n + <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>;<br>        <span class="hljs-function">MinCostMaxFlow <span class="hljs-title">mcmf</span><span class="hljs-params">(t + <span class="hljs-number">1</span>)</span></span>;<br>        mcmf.addedge(s, ss, k, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)mcmf.addedge(ss, i, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>                <span class="hljs-keyword">if</span>(a[i] &lt;= a[j])<br>                    mcmf.addedge(i + n, j, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)mcmf.addedge(i, i + n, <span class="hljs-number">1</span>, -a[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)mcmf.addedge(i + n, t, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        mcmf.addedge(t, t + <span class="hljs-number">1</span>, k, <span class="hljs-number">0</span>);<br>        ll flow, cost;<br>        flow = cost = <span class="hljs-number">0</span>;<br>        mcmf.mcmf(s, t + <span class="hljs-number">1</span>, inf, flow, cost);<br>        <span class="hljs-built_in">cout</span> &lt;&lt; cost * <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Codeforces-1077C</title>
    <url>/2018/11/24/Codeforces-1077C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p><a href="https://codeforces.com/problemset/problem/1077/C"><strong>题目链接</strong></a></p>
<p>给你一个数组，如果存在一个数等于剩余的数的和的话，，，就称这样array是good array，，</p>
<p>然后题目问你对于给定的数组去掉一个数之后时候是一个good array，，，输出所有的去掉的数的位置pos</p>
<span id="more"></span>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>一开始我想这直接暴力去求，，，外循环遍历整个数组枚举可能是去掉的数，，，内循环遍历去掉那个数之后的数列寻找时候存在一个使得剩余数的和等于内循环遍历的那个数，，，</p>
<p>复杂度应该是$O(n^2)$，，，果不其然的tle了，，，，</p>
<p>然后去看标程题解，，，看不懂QAQ，，，</p>
<p>看了别人的思路后才弄出来，，，</p>
<p>对于这样一个good array，，，数$a_i = sum - a_i$，，那么$a_i$一定是这个数组的最大值，，，</p>
<p>所以先可以对整个数组排序一下，，，然后看最大$max$值是否等于$sum - max$，，，</p>
<p>注意如果要是去掉第一个数，，最大值就为第二大的数了，，，，</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    ll num;<br>    <span class="hljs-keyword">int</span> pos;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> node &amp;r) <span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> r.num &lt; num;<br>    &#125;<br>&#125;node[maxn];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">int</span> n;<span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    ll sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; node[i].num;<br>        node[i].pos = i;<br>        sum += node[i].num;<br>    &#125;<br><br>    sort(node , node + n);<br><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ans;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">int</span> max = (i == <span class="hljs-number">0</span>) ? node[<span class="hljs-number">1</span>].num : node[<span class="hljs-number">0</span>].num;<br>        <span class="hljs-keyword">if</span>(sum - node[i].num - max == max)<br>            ans.push_back(node[i].pos);<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = ans.begin(); it != ans.end(); ++it)<br>        <span class="hljs-built_in">cout</span> &lt;&lt; *it + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>(end)</p>
]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM-题集</title>
    <url>/2019/03/26/ACM-%E9%A2%98%E9%9B%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>按用到的算法分类保存一下自己做的题</p>
<span id="more"></span>
<h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><p><a href="https://vjudge.net/problem/HihoCoder-1828">Saving Tang Monk II</a> bfs+三维vis+优先队列</p>
<h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><p><a href="https://hihocoder.com/problemset/problem/1870">HihoCoder-1870</a> 二分建图判断是否有环</p>
<h2 id="2-sat"><a href="#2-sat" class="headerlink" title="2-sat"></a>2-sat</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1814">hdu-1814</a>: 2sat板子题</p>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3062">hdu-3062</a>: 也算是板子题吧</p>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1824">Let’s go home</a>: 按题意建图就行了，啥限制条件建啥边，，不要多余就行了，，，</p>
<p><a href="https://cn.vjudge.net/problem/UVALive-3211">UVALive-3211</a>: 二分枚举限制条件建图跑2sat求最值</p>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3622">HDU-3622-Bomb Game</a>: 也是二分枚举+建图求最值的问题</p>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4115">HDU-4115</a>: 不是单纯的全为矛盾项的2sat，其中还有一些必选项，例如选a就必须选b的情况（可以转化成矛盾项做，也可以直接利用这个条件建图（麻烦一点））</p>
<p><a href="http://poj.org/problem?id=3678">poj-3678-Katu Puzzle</a>: 加必选边建图跑2sat判断是否有解（这题很好）</p>
<p><a href="https://ac.nowcoder.com/acm/contest/327/F">处女座与宝藏</a>: 2sat判断是否有解，建图的思想很不错，没有像前面那几道题那么直白的告诉你限制条件</p>
<p><a href="https://codeforces.com/contest/776/problem/D">D. The Door Problem</a>： 和宝藏那题一样，，</p>
<h2 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2063">hdu-2063过山车</a>: 二分图简单的模板题</p>
]]></content>
      <categories>
        <category>ACM-整理</category>
      </categories>
      <tags>
        <tag>acm</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces-1084C</title>
    <url>/2018/12/13/Codeforces-1084C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>好久没写博客了，，，最近的事太多了，，几乎没有专门看一个知识点，，，一直在做各种的简单题QAQ。。。</p>
<span id="more"></span>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p><a href="https://codeforces.com/contest/1084/problem/C">这道题大概的题意就是</a>给你一个串，，，然后找出所有开头结尾都是a的并且中间有b的子串的个数，，，单一的a也算，，，</p>
<p>一开始看了好几遍都没看懂题意，，，不知道在求啥，，，</p>
<p><a href="https://www.cnblogs.com/wa007/p/10103272.html">然后看了一个人的题解</a>，，然后没看懂QAQ,,,,,</p>
<p>看了官方题解下的一个评论看懂了，，，，，emmmm</p>
<blockquote>
<p>It doesn’t depend at all if there exists any letter other than a or b in the given string. You can for sure ignore those letters, so the editorial says to erase them. Now, what you have is a string consisting only of a and b’s. Also two consecutive b’s can be merged as one. So your final string will look something like (a…a)b(a…a)b(a…)…</p>
<p>You can now consider this problem as sum of all possible product of subsets of a given set, where each element in the set is the number of a’s delimited by b.</p>
<p>For example: In the string “aaabaabaaab”, set formed will be {3,2,3,0} (0 can be ignored). Now if you have a set {a1,a2,…,aN}, then sum of all possible products of this set is equal to (1+a1)<em>(1+a2)</em>…*(1+aN)-1.</p>
<p>Proof:<br>Write the required answer as follows:<br>S = Sum of products of subset with (size=1)+(size=2)+…(size=N)<br>$S = (a<em>1+a_2+…a_N)+(a_1<em>a_2+a_1</em>a_3……+a</em>{N-1}<em>a_N)+…+(a_1</em>a_2…..a_N)$<br>After factorization,<br>S = (1+a1)(1+a2)…(1+aN)-1</p>
</blockquote>
<p>大致意思就是处理所给的字符串，，，就变成了一堆a一个b一堆a一个b….这样的，，，<br>也就是一堆a的集合<br>题目所要的就是调两个个a的集合里调一个a作为子串的首尾，，，这样的就是所要的串，，，<br>于是总共的个数就是$a<em>1<em>a_2</em>a_3…..a</em>{n-1}*a_{n}$,,,对了每个集合还要加一，，表示这个集合选一个或者都不选，，，最后的答案再减一就行了（全不选的情况不符合题意），，，</p>
<p>他上面那段话的思路是在计算所有的子川的情况时，，长度为1+长度为2+。。。长度为m。。。<br>这样的话 $sum = (a<em>1 + a_2+….+a</em>{n-1} + a<em>n) + (a_1 <em> a_2 + a_1 </em> a_3 + …+ a_1 <em> a_m + a_2 </em> a_3 + ……+ a</em>{n-1} <em> a_n) + (a_1 </em> a_2 <em> a_3 + ….) + …$<br>然后这个求和可以转化成$sum = (1 + a_1) </em> (a_2 + 1) <em> (a_3 + 1) + (a_4 + 1) </em> …. * (a_n + 1) - 1$</p>
<blockquote>
<p>因为：</p>
<p>$a + b + ab = (a + 1) * (b + 1) - 1$</p>
<p>$a + b + c + ab + ac + bc + abc = (a + 1) <em> (b + 1) </em> (c + 1) - 1$</p>
</blockquote>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br>ll a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.txt&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">string</span> s;<span class="hljs-built_in">cin</span> &gt;&gt; s;<br>    <span class="hljs-keyword">int</span> a[maxn];<br>    <span class="hljs-keyword">int</span> tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> len = s.length();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;a&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i; j &lt; len; ++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(s[j] == <span class="hljs-string">&#x27;a&#x27;</span>)<br>                    ++cnt;<br>                <span class="hljs-keyword">if</span>(s[j] == <span class="hljs-string">&#x27;b&#x27;</span> || j == len - <span class="hljs-number">1</span>)<br>                &#123;<br>                    a[tot++] = cnt + <span class="hljs-number">1</span>;<br>                    i = j;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>            &#125;<br>        &#125;<br>    &#125;<br>    ll ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; tot; ++i)<br>        ans = (ans * a[i]) % mod;<br>    --ans;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>太水了，，，，QAQ</p>
]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces-542div2</title>
    <url>/2019/03/03/Codeforces-542div2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>codeforces-1130A~G</p>
<p>和队友做了一套题，，</p>
<span id="more"></span>
<h1 id="A-Be-Positive"><a href="#A-Be-Positive" class="headerlink" title="A. Be Positive"></a>A. Be Positive</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>题意是给你一串整数，，要找到一个除数使得每一个数被除后正数的个数大于等于 $\lceil \frac{n}{2} \rceil$，，，</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>统计出所有正数，负数的个数，，正数多那个除数就是1，负数多就是-1</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//cf</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-comment">//#include &lt;cstdio&gt;</span><br><span class="hljs-comment">//#include &lt;cstdlib&gt;</span><br><span class="hljs-comment">//#include &lt;string.h&gt;</span><br><span class="hljs-comment">//#include &lt;algorithm&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">int</span> n; <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>    sort(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n);<br>    <span class="hljs-keyword">int</span> nump = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> numn = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span>(a[i] &gt; <span class="hljs-number">0</span>)<br>            ++nump;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i] &lt; <span class="hljs-number">0</span>)<br>            ++numn;<br>    <span class="hljs-keyword">if</span>(nump &gt;= (n + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>)<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(numn &gt;= (n + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>)<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="B-Two-Cakes"><a href="#B-Two-Cakes" class="headerlink" title="B. Two Cakes"></a>B. Two Cakes</h1><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>题意是由两组1~n的数组成的序列，，每一个人选择一组，，费用是两个树之间的距离，，然后问你总距离最小是多少，，</p>
<h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>我一开始想着先贪心处理一个人的选择出最少的，，再加上剩下的那个人的，，然后就wa了，，因为这样并不保证这一次选的和下一次选的距离和是最小的，，解决方法是两个一起处理，，考虑每一种选择的情况，，这样取最小的就行了，，，</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//cf</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-comment">//#include &lt;cstdio&gt;</span><br><span class="hljs-comment">//#include &lt;cstdlib&gt;</span><br><span class="hljs-comment">//#include &lt;string.h&gt;</span><br><span class="hljs-comment">//#include &lt;algorithm&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> a[maxn][<span class="hljs-number">2</span>];<br><span class="hljs-keyword">bool</span> flag[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">int</span> n;<span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">int</span> t;<br>    <span class="hljs-built_in">memset</span>(flag, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> flag);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; t;<br>        <span class="hljs-keyword">if</span>(!flag[t])<br>        &#123;<br>            a[t][<span class="hljs-number">0</span>] = i;<br>            flag[t] = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            a[t][<span class="hljs-number">1</span>] = i;<br>    &#125;<br>    ll ans = a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] - <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; ++i)<br>    &#123;<br>        <span class="hljs-keyword">int</span> p = <span class="hljs-built_in">abs</span>(a[i + <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] - a[i][<span class="hljs-number">0</span>]) + <span class="hljs-built_in">abs</span>(a[i + <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] - a[i][<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">int</span> q = <span class="hljs-built_in">abs</span>(a[i + <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] - a[i][<span class="hljs-number">1</span>]) + <span class="hljs-built_in">abs</span>(a[i + <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] - a[i][<span class="hljs-number">0</span>]);<br>        ans += min(p, q);<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="C-Connect"><a href="#C-Connect" class="headerlink" title="C. Connect"></a>C. Connect</h1><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><p>给你一个地图，，其中陆地是0，水则是1，，然后给你一个起点一个终点，，你可以在任意两块陆地上建 <strong>一条</strong> 隧道使这两片陆地相通，，然后问你起点到终点需要的隧道的最小长度，，，</p>
<h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><p>因为只能建一条隧道，，所以如果起点所在的陆地与终点所在的陆地不相通的话，，那么这条隧道一定在这两片陆地之间，，数据量不大，，直接枚举这两片陆地上的点，，取最小的距离就行了，，，</p>
<p>判断一个点是否在起点或终点所在的陆地可以现用并查集把地图 “染色”，，，这样就可以枚举了，，，</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//cf</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-comment">//#include &lt;cstdio&gt;</span><br><span class="hljs-comment">//#include &lt;cstdlib&gt;</span><br><span class="hljs-comment">//#include &lt;string.h&gt;</span><br><span class="hljs-comment">//#include &lt;algorithm&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> fa[maxn];<br><span class="hljs-keyword">int</span> _find(<span class="hljs-keyword">int</span> x)<br>&#123;<br>    <span class="hljs-keyword">if</span>(fa[x] == x)<span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">return</span> fa[x] = _find(fa[x]);<br>&#125;<br><span class="hljs-keyword">void</span> _union(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)<br>&#123;<br>    <span class="hljs-keyword">int</span> f1 = _find(x);<br>    <span class="hljs-keyword">int</span> f2 = _find(y);<br>    <span class="hljs-keyword">if</span>(f1 != f2)fa[f1] = f2;<br>    <span class="hljs-keyword">else</span>        fa[f2] = f1;<br>&#125;<br><span class="hljs-keyword">int</span> mp[<span class="hljs-number">60</span>][<span class="hljs-number">60</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> x1 = i / n;<br>    <span class="hljs-keyword">int</span> y1 = i - x1 * n;<br>    <span class="hljs-keyword">int</span> x2 = j / n;<br>    <span class="hljs-keyword">int</span> y2 = j - x2 * n;<br>    <span class="hljs-keyword">if</span>(y1 == <span class="hljs-number">0</span>)<br>    &#123;<br>        y1 = n;<br>        --x1;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(y2 == <span class="hljs-number">0</span>)<br>    &#123;<br>        y2 = n;<br>        --x2;<br>    &#125;<br><span class="hljs-comment">//    cout &lt;&lt; x1 &lt;&lt; y1 &lt;&lt; x2 &lt;&lt; y2 &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">int</span> x1, x2, y1, y2;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        getchar();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>            mp[i][j] = (<span class="hljs-keyword">int</span>)(getchar() - <span class="hljs-string">&#x27;0&#x27;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n + <span class="hljs-number">1</span>; i &lt;= n + <span class="hljs-number">1</span> + n * n; ++i)fa[i] = i;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(mp[i - <span class="hljs-number">1</span>][j] == mp[i][j] &amp;&amp; i - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">1</span>)<br>                _union(i * n + j, (i - <span class="hljs-number">1</span>) * n + j);<br>            <span class="hljs-keyword">if</span>(mp[i + <span class="hljs-number">1</span>][j] == mp[i][j] &amp;&amp; i + <span class="hljs-number">1</span> &lt;= n)<br>                _union(i * n + j, (i + <span class="hljs-number">1</span>) * n + j);<br>            <span class="hljs-keyword">if</span>(mp[i][j + <span class="hljs-number">1</span>] == mp[i][j] &amp;&amp; j + <span class="hljs-number">1</span> &lt;= n)<br>                _union(i * n + j, i * n + j + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(mp[i][j - <span class="hljs-number">1</span>] == mp[i][j] &amp;&amp; j - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">1</span>)<br>                _union(i * n + j, i * n + j - <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//    for(int i = 1; i &lt;=n; ++i)</span><br><span class="hljs-comment">//    &#123;</span><br><span class="hljs-comment">//        for(int j = 1; j &lt;= n; ++j)</span><br><span class="hljs-comment">//            cout &lt;&lt; _find(i * n + j) &lt;&lt; &quot; &quot;;</span><br><span class="hljs-comment">//        cout &lt;&lt; endl;</span><br><span class="hljs-comment">//    &#125;</span><br>    <span class="hljs-keyword">int</span> s = _find(x1 * n + y1);<br>    <span class="hljs-keyword">int</span> t = _find(x2 * n + y2);<br><span class="hljs-comment">//    cout &lt;&lt; s &lt;&lt; t &lt;&lt; endl;</span><br>    <span class="hljs-keyword">int</span> ans = inf;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n + <span class="hljs-number">1</span>; i &lt;= n + <span class="hljs-number">1</span> + n * n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span> + n; j &lt;= n + <span class="hljs-number">1</span> + n * n; ++j)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(_find(i) == s &amp;&amp; _find(j) == t)<br>            &#123;<br>                ans = min(ans, solve(i, j, n));<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="D1-Toy-Train"><a href="#D1-Toy-Train" class="headerlink" title="D1. Toy Train"></a>D1. Toy Train</h1><h2 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h2><p>由一个环形的铁路，，上面有n个车站，，每个车站有一些糖果，，这些糖果要运到 $b_i$ 那个车站，，，火车只能在一个车站拉上一个糖果，，但是可以放下任意块糖果，，，问你从这n个车站出发送完所有的糖果所需的最少的时间，，</p>
<h2 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h2><p>每次只能上一个糖果，，最后下的糖果就是糖果数量最多的车站的，，找一个从这个车站出发花费最多的另一个车站，，这样把那个车站所有的糖果送完时其他车站的糖果顺带也就送完了，，，</p>
<p>枚举每一个车站i，，对于车站i枚举所有的其他的车站，，求出所有的时间里的最大值就是这个车站所用的时间了，，，</p>
<p><a href="https://www.cnblogs.com/luowentao/p/10434582.html">参考</a></p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//cf</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-comment">//#include &lt;cstdio&gt;</span><br><span class="hljs-comment">//#include &lt;cstdlib&gt;</span><br><span class="hljs-comment">//#include &lt;string.h&gt;</span><br><span class="hljs-comment">//#include &lt;algorithm&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> num;<br>    <span class="hljs-keyword">int</span> mi;<br>&#125;node[maxm];<br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getdis</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//get the dis of i -&gt; j</span><br>    <span class="hljs-keyword">if</span>(i &lt;= j)<span class="hljs-keyword">return</span> j - i;<br>    <span class="hljs-keyword">else</span>      <span class="hljs-keyword">return</span> n - i + j;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> loc)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//find the furthest and the most candies node</span><br>    <span class="hljs-keyword">int</span> fur = loc;<br>    <span class="hljs-keyword">int</span> num = node[loc].num;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> dis;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = loc; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(node[i].mi == inf)<span class="hljs-keyword">continue</span>;<br>        dis = getdis(loc, i) + (node[i].num - <span class="hljs-number">1</span>) * n + node[i].mi;<br>        ans = max(ans, dis);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= loc - <span class="hljs-number">1</span>; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(node[i].mi == inf)<span class="hljs-keyword">continue</span>;<br>        dis = getdis(loc, i) + (node[i].num - <span class="hljs-number">1</span>) * n + node[i].mi;<br>        ans = max(ans, dis);<br>    &#125;<br><span class="hljs-comment">//    for(int i = loc; i &lt;= n; ++i)</span><br><span class="hljs-comment">//    &#123;</span><br><span class="hljs-comment">//        if(node[i].num &gt;= num)</span><br><span class="hljs-comment">//        &#123;</span><br><span class="hljs-comment">//            fur = i;</span><br><span class="hljs-comment">//            num = node[i].num;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//    for(int i = 1; i &lt;= loc - 1; ++i)</span><br><span class="hljs-comment">//    &#123;</span><br><span class="hljs-comment">//        if(node[i].num &gt;= num)</span><br><span class="hljs-comment">//        &#123;</span><br><span class="hljs-comment">//            fur = i;</span><br><span class="hljs-comment">//            num = node[i].num;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//    cout &lt;&lt; fur &lt;&lt; &quot; &quot;;</span><br><span class="hljs-comment">//    int ans = n * (node[fur].num - 1);</span><br><span class="hljs-comment">//    ans += getdis(loc, fur);</span><br><span class="hljs-comment">//    ans += getdis(fur, node[fur].mi);</span><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">int</span> a, b;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)node[i].mi = inf;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)node[i].num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b;<br>        ++node[a].num;<br>        <span class="hljs-keyword">if</span>(getdis(a, b) &lt;= node[a].mi)<br>            node[a].mi = getdis(a, b);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-built_in">cout</span> &lt;&lt; solve(i) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-comment">//    for(int i = 1; i &lt;= n; ++i)</span><br><span class="hljs-comment">//    &#123;</span><br><span class="hljs-comment">//        cout &lt;&lt; i &lt;&lt; &quot; &quot;;</span><br><span class="hljs-comment">//        cout &lt;&lt; solve(i) &lt;&lt; endl;</span><br><span class="hljs-comment">//    &#125;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="E-Wrong-Answer"><a href="#E-Wrong-Answer" class="headerlink" title="E. Wrong Answer"></a>E. Wrong Answer</h1><h2 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h2><p>一个数列求出最大的 区间和乘以区间长度，，</p>
<p>他给的算法当前面一段区间和出现负数就舍弃了，，没有考虑长度对最后答案的影响，，，</p>
<p>题目要我们构造一个数列，，使得这个数列的正确答案比它的做法算出的结果大k</p>
<h2 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h2><p>可以构造一个前面1998个都是0，，后面一个数是-p，一个时p + q,,,</p>
<p>这样正确的答案就是 $2000q$，，，他算出的答案就是 $p + q$，，，</p>
<p>要大k，，就是 $2000q - (p+q)=k$，，也就是 $q= \frac{p+k}{1999}$ ，，，为了保证p,q都是整数，，，那么就设 $p=1999-k\%1999$，，这样算出的q就是整数，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//cf</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-comment">//#include &lt;cstdio&gt;</span><br><span class="hljs-comment">//#include &lt;cstdlib&gt;</span><br><span class="hljs-comment">//#include &lt;string.h&gt;</span><br><span class="hljs-comment">//#include &lt;algorithm&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">int</span> k; <span class="hljs-built_in">cin</span> &gt;&gt; k;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">2000</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2000</span> - <span class="hljs-number">2</span>; ++i)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-keyword">int</span> p = <span class="hljs-number">1999</span> - k % <span class="hljs-number">1999</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; -p &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ((k + p) / <span class="hljs-number">1999</span> + p) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>(end)</p>
]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>Diary-第四周周记</title>
    <url>/2019/03/21/Diary-%E7%AC%AC%E5%9B%9B%E5%91%A8%E5%91%A8%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>2019-3-11~2019-3-17</p>
<p>这一周发生了许许多多的事情，原本是打算在这周周末记录一下的，，然后就一直拖，，拖到了今天，，已经是下一周的周四了。。</p>
<span id="more"></span>
<p>首先是上周的体育课，因为之前没有自己联系过网球，基础班的网球又因为上学期一直在下雨只上了一半的课，，所以现在的我完全不怎么会网球的对打，，甚至连接别人的求都不怎么会，，对面和我打球的同学曾经又练习过，感觉因为我的菜已经连累到了别人了，，，所以不仅为了对面不嫌弃我，也为了自己最后的的体育课能够顺利的对打下来，还有我是真的想找到一个自己喜欢的同时又擅长的运动，所以上个星期的我在晚上自己练习了一会，可能换成以前的我根本就不可能做出这样的事吧，曾今的我是不可能去独自的去运动，就这样过了20多年，，在上了大学之后，这样的日子貌似越来越多了，当然，虽然练习了几次，，但是我也不可能一下子就达到非常熟练的地步，至少在这周一的体育课上我开始能够接到对面的球了，，这至少是一个好的开端。</p>
<p>第二天的周二是一次团生会，同时也是一次推优班会，这时我的第二次站在推优的演讲台上，自我感觉与去年的那一次演讲相比，我已经很镇定了，如果和曾经的我相比的话，可能我已经不再是我了，曾经的我从来不敢站在讲台上说一句话，更别说是演讲了，本来可以锻炼我的高中也因为在众多强有力的人的环境下，自信心早已变成了那深深的自卑，那时的我早已陷入了 无论自己怎么努力也终将是班中的后几名 的深涡中，人是很容易根据以往的映像形成一个固有的认识的，除非那个事物真的发生了超出自己曾经的认识时，否则事物即使在变化，也会默认为一成不变的。上了大学的我就想着这3年里至少要锻炼出能够在别人面前讲话的能力，能够和自己想分享想法的人说出自己的感受，现在看来虽然做的没有大多数人做的好，但是对于我自己来说，已经是迈出了很大的一步，甚至是好几步。</p>
<p>中间的那几天很平凡，每天都是晴天，我也像往常那样穿梭在教学楼、寝室和逸夫楼之间的小路上。享受着到来的春天的气息。每一天都很舒服，很轻松。</p>
<p>最后的星期日，我再一次去参加了csp的认证考试，这一次的试题内容与上一次相比甚是简单，所以我也很有思路，精神去做那些题，但是，虽然那时的我认为自己这一个学期已经有所长进，这一次已经很稳了，，但是昨天出来的成绩还是让我大跌眼镜，215，，，很有把握的题没有全过，太过高估自己的实力，导致难题没有看，简单的题没有认真的分析而丢分，，尤其是在知道有几个没有怎么练过学弟都和我一样的分时，真的有再一次回到那个高中时的感觉，一种自己无论怎么练都不能追到别人的脚步，甚至看不到对方的身影，自己就像是隐身一样站在远处，注视着那些强者们的一举一动，而自己越来越远，越来越远。</p>
<p>从今天开始的我要真正的认真了，，不能再浪费每一天了，任务很多，但是时间却越来越少，自己不能再去逃避每一个遇到的困难，也不能再出现 没有目标去过一天 的情况了，就这一年，或者说完全没有一年的时间里，我要学习很多很多的东西，提升自己所有对自己目前来说有用的重要的技能了，不能再出现努力了一把所得到的连那些没有努力的人都不如的结果了！</p>
<p><strong>有些路注定要孤身一人走的，想要到达繁华，必经一段荒凉</strong></p>
]]></content>
      <categories>
        <category>diary</category>
      </categories>
  </entry>
  <entry>
    <title>Codeforces Round #585 (Div. 2)</title>
    <url>/2019/09/19/Codeforces-Round-585-Div-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>感觉很硬核啊这场，，越往后越做不动，，，emmmm，，，（这场是奔着最后一题 2sat 来的，，，上次学这玩意是在今年的3、4月份把，，，早忘得差不多了，，，</p>
<span id="more"></span>
<h1 id="A-Yellow-Cards"><a href="#A-Yellow-Cards" class="headerlink" title="A. Yellow Cards"></a>A. Yellow Cards</h1><p>A题较简单，，贪心就行了，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br> <br><span class="hljs-keyword">int</span> a[maxn], n;<br> <br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br> <br>    <span class="hljs-keyword">int</span> n, a1, a2, k1, k2;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; a1 &gt;&gt; a2 &gt;&gt; k1 &gt;&gt; k2 &gt;&gt; n;<br>    <span class="hljs-keyword">int</span> mi = <span class="hljs-number">0</span>, mx = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(a1 * (k1 - <span class="hljs-number">1</span>) + a2 * (k2 - <span class="hljs-number">1</span>) &gt;= n)mi = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> mi = n - a1 * (k1 - <span class="hljs-number">1</span>) - a2 * (k2 - <span class="hljs-number">1</span>);<br> <br>    <span class="hljs-keyword">if</span>(k1 &lt;= k2)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(n &gt;= k1 &amp;&amp; a1)<br>        &#123;<br>            --a1;<br>            n -= k1;<br>            ++mx;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(n &gt;= k2 &amp;&amp; a2)<br>        &#123;<br>            --a2;<br>            n -= k2;<br>            ++mx;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">while</span>(n &gt;= k2 &amp;&amp; a2)<br>        &#123;<br>            --a2;<br>            n -= k2;<br>            ++mx;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(n &gt;= k1 &amp;&amp; a1)<br>        &#123;<br>            --a1;<br>            n -= k1;<br>            ++mx;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; mi &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; mx &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="B-The-Number-of-Products"><a href="#B-The-Number-of-Products" class="headerlink" title="B. The Number of Products"></a>B. The Number of Products</h1><p>A掉A题，，感觉还行，，以为后面的都很简单，，然后就在B、C题卡了半天，，</p>
<p>题意就是一个序列中，正区间和负区间的个数有多少，，这里的区间指的是区间积，，，</p>
<p>刚开始以为暴力可过，，<del>（口胡</del> ，，然后交了一发果断T了，，，</p>
<p>又推了一会发现可以枚举左端点所在的区间，，然后他的贡献就是后面的+2,,+4,,+6等等区间的和的积，，所以只要预处理一下每一个用负点分割的左闭右开的区间的长度，，然后处理成隔一个的后缀和就行了，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br> <br><span class="hljs-keyword">int</span> a[maxn], n;<br><span class="hljs-keyword">int</span> p[maxn], tot;<br>ll pp[maxn];<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br> <br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span>(a[i] &lt; <span class="hljs-number">0</span>)<br>            p[++tot] = i;<br>    p[tot + <span class="hljs-number">1</span>] = n + <span class="hljs-number">1</span>; p[tot + <span class="hljs-number">2</span>] = n + <span class="hljs-number">1</span>;<br>    ll ans1 = <span class="hljs-number">0</span>, ans2 = <span class="hljs-number">0</span>;<br>    ++tot;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = tot; i &gt;= <span class="hljs-number">1</span>; --i)pp[i] = p[i] - p[i - <span class="hljs-number">1</span>];<span class="hljs-comment">//--pp[1];</span><br>    <span class="hljs-comment">// for(int i = 1; i &lt;= tot; ++i)cout &lt;&lt; pp[i] &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;</span><br>    <br> <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = tot - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">1</span>; --i)pp[i] += pp[i + <span class="hljs-number">2</span>];<br>    <span class="hljs-comment">// for(int i = 1; i &lt;= tot; ++i)cout &lt;&lt; pp[i] &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= tot; ++i)<br>    &#123;<br>        <span class="hljs-comment">// int x = p[i] - p[i - 1] - 1;</span><br>        ll x = pp[i] - pp[i + <span class="hljs-number">2</span>];<br>        ll y = pp[i + <span class="hljs-number">1</span>];<br>        <span class="hljs-comment">// cout &lt;&lt; x &lt;&lt; &quot;-&quot; &lt;&lt; y &lt;&lt; endl;</span><br>        ans1 += x * y; <br>        y = pp[i + <span class="hljs-number">2</span>];<br>        ans2 += x * y;<br>        --x;<br>        <span class="hljs-keyword">while</span>(x)ans2 += x--;<br>    &#125;<br> <br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans1 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ans2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="C-Swap-Letters"><a href="#C-Swap-Letters" class="headerlink" title="C. Swap Letters"></a>C. Swap Letters</h1><p>题意就是两个串，，只含有ab，，然后每一次的操作是挑第一个串中的一个和第二个串中的一个交换，，然后问题最少的操作次数下使得两串一样，，</p>
<p>我当时的思路是用一个 r 表示右端已经修改的位置，，然后遍历一遍，，当第i个位置的不同时，，利用r向后找一个可以交换的，，口胡了一下就直接敲了，，，然后不断的发现逻辑上的bug，，，emmmm，，一直改到成了N方的解法，，，，</p>
<p>看了一下别人的思路，，显然优先考虑相同的两个进行操作，，剩下的也只能操作偶数个，，使用的操作次数就是两次，，一次是反转其中一个，，然后像前面的就行了，，，，奇数个就是无解，，，（会爆ll</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br> <br><span class="hljs-keyword">char</span> s[maxn], t[maxn];<br><span class="hljs-keyword">int</span> n;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br> <br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; s &gt;&gt; t;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; &gt; ans;<br>    <span class="hljs-keyword">int</span> r = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(s[i] != t[i])<br>        &#123;<br>            <span class="hljs-comment">// r = min(r, i + 1);</span><br>            r = i + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(!(t[r] == t[i] &amp;&amp; t[r] != s[r]) &amp;&amp; r &lt; n)++r;<br>            <span class="hljs-keyword">if</span>(r &gt;= n)<br>            &#123;<br>                r = i + <span class="hljs-number">1</span>;<br>                swap(s[i], t[i]);<br>                ans.push_back(<span class="hljs-built_in">make_pair</span>(i + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>));<br>                <span class="hljs-comment">// cout &lt;&lt; &quot;----&quot; &lt;&lt; endl &lt;&lt; s &lt;&lt; endl &lt;&lt; t &lt;&lt; endl;</span><br>                <span class="hljs-keyword">while</span>(!(t[r] == t[i] &amp;&amp; t[r] != s[r]) &amp;&amp; r &lt; n)++r;<br>                <span class="hljs-keyword">if</span>(r &gt;= n)<br>                &#123;<br>                    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// cout &lt;&lt; i + 1 &lt;&lt; r + 1 &lt;&lt; endl;</span><br>            ans.push_back(<span class="hljs-built_in">make_pair</span>(i + <span class="hljs-number">1</span>, r + <span class="hljs-number">1</span>));<br>            swap(s[i], t[r]);<br>        <span class="hljs-comment">// cout &lt;&lt; s &lt;&lt; endl &lt;&lt; t &lt;&lt; endl;</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;i: ans)<span class="hljs-built_in">cout</span> &lt;&lt; i.first &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; i.second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="D-Ticket-Game"><a href="#D-Ticket-Game" class="headerlink" title="D. Ticket Game"></a>D. Ticket Game</h1><p>博弈？？ 先弃了</p>
<p>感觉是一个好多情况的分类讨论题，，，</p>
<h1 id="E-Marbles"><a href="#E-Marbles" class="headerlink" title="E. Marbles"></a>E. Marbles</h1><p>状压dp，，，emmmm，，扔了，，</p>
<h1 id="F-Radio-Stations"><a href="#F-Radio-Stations" class="headerlink" title="F. Radio Stations"></a>F. Radio Stations</h1><p>重点来了，，，</p>
<p>这题的题干是真的长，，长篇阅读理解，，，emmmmmm</p>
<p>题目的大意是这样的：一个城市要弄一个发射塔，，它的功率是 $f (1\le f \le M)$ ，</p>
<p>有 $p$ 个节目，，对于每一个都有一个需要发射的功率范围： $(L_i, R_i)$ ，，也就是说当 $f$ 在这个范围时用户才能收到这个节目，，，</p>
<p>然后有一些需求，，数量是n，，，这些需求这样描述： $(a_i, b_i)$ ，，表示对于第 $i$ 个需求 <strong>至少</strong> 需要满足一个，，简单说就是至少要挑一个，，，</p>
<p>还有一些节目间的限制条件： $(u, v)$ ，，表示选了 $u$ 就不能选 $v$ ，，，反之亦然，，</p>
<p>然后问你这个发射塔的频率 $f$ 选择多少时使得 $n$ 个需求都可以满足</p>
<p>如果这题没有 $f$ 这个限制条件，这题2sat可直接过，，但是不行，，</p>
<p>当然可以枚举 $f$ ，，从1到M，，但是这样时间复杂度就是n方，，，T穿，，，</p>
<p>只能将 $f$ 放在我们建立的限制图中，，但是怎么建呢，，，</p>
<p>以前做的2sat题目都是固定的n对物品中每对中选择一个，，其中一些物品有限制条件，，这样做了很多题之后潜移默化的形成了一个固定的模型，，只有这n个物品可以进行操作，，这样的思想也使得我在刚读懂题时即使出现过将 p 个节目分成选或不选这样建图，，但是因为这样不会处理f，，于是放弃这种思路，，，向着将n个需求作为图中的点，，然后有限制的条件间连边，，这样的思考就不得不去枚举f，，，于是只能过小数据，，</p>
<p>这题的解决方法是 <strong>在n个节目的后面再加M个可以选择的f的情况</strong> ，，，这样一层点表示选这个情况，，第二层的点表示不选这个点，，建立相应的限制关系，，这样就可以跑一遍2sat得到两个想得到的东西，，，</p>
<p>前面的点的限制条件很好处理，，，按题意搞就行了</p>
<p>接下来处理后面的这M个点的情况，，，如果我们直接枚举每一个f可行解，，，那么和前面的暴力没啥区别，，，一样会T，，，</p>
<p><a href="https://blog.csdn.net/weixin_44231553/article/details/100927625">参考了一个博主的思路</a></p>
<p>这里我的理解是对于这些可行解都向前连边，，也就是 <code>选f&gt;=l+1必须选f&gt;=l</code> 这样就可以将区间的一个表示的限制条件转化成一个端点的表示，，（感觉有点类似差分的思想，，区间的操作改成端点的操作，，，</p>
<p>这样建图，，跑一边就行了，，，，最后输出答案，，</p>
<p>用tarjan的话判断的条件是两个点间是否不在一个scc中，，然后取最小就行了，，，</p>
<p>用染色法的话需要跑的点只是前半段p个，，，</p>
<h2 id="染色法"><a href="#染色法" class="headerlink" title="染色法"></a>染色法</h2><p>栈写反了，，，wa了好几发，，，，（丢人，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">4e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">4e5</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br> <br> <br><span class="hljs-keyword">int</span> n, p, M, m, all;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> sta[maxn], top;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(vis[u &gt; all ? u - all : u + all])<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(vis[u])<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    vis[u] = <span class="hljs-literal">true</span>;<br>    sta[++top] = u;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        <span class="hljs-keyword">if</span>(!dfs(edge[i].to))    <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">twosat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(vis[i] || vis[i + all])<span class="hljs-keyword">continue</span>;<br>        top = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(!dfs(i))<br>        &#123;<br>            <span class="hljs-keyword">while</span>(~top)vis[sta[top--]] = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span>(!dfs(i + all))<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br> <br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; p &gt;&gt; M &gt;&gt; m;<br>    all = p + M;<br>    <span class="hljs-keyword">int</span> u, v;<br>    init();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;<br>        addedge(u + all, v);<br>        addedge(v + all, u);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= p; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;<br>        addedge(i, u + p); addedge(u + p + all, i + all);<br>        <span class="hljs-keyword">if</span>(v &lt; M)addedge(v + p + <span class="hljs-number">1</span>, i + all), addedge(i, v + p + all + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;<br>        addedge(u, v + all);<br>        addedge(v, u + all);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; M; ++i)<br>    &#123;<br>        addedge(i + p + <span class="hljs-number">1</span>, i + p);<br>        addedge(i + p + all, i + p + <span class="hljs-number">1</span> + all);<br>        <span class="hljs-comment">// addedge(i + p, i + p + 1);</span><br>        <span class="hljs-comment">// addedge(i + p + 1 + all, i + p + all);</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(twosat(p))<br>    &#123;<br>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ans;<br>        <span class="hljs-keyword">int</span> f = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= p; ++i)<br>            <span class="hljs-keyword">if</span>(vis[i])<br>                ans.push_back(i);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = p + <span class="hljs-number">1</span>; i &lt;= p + M; ++i)<br>            <span class="hljs-keyword">if</span>(vis[i])<br>            &#123;<br>                f = i - p;<br>            &#125;<br>        <span class="hljs-keyword">if</span>(!f)<br>        &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; f &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i: ans)<span class="hljs-built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <br> <br> <br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="tarjan"><a href="#tarjan" class="headerlink" title="tarjan"></a>tarjan</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">4e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">4e5</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br> <br> <br><span class="hljs-keyword">int</span> n, p, M, m, all;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> low[maxn], dfn[maxn], sta[maxn], belong[maxn];<br><span class="hljs-keyword">int</span> idx, top;<br><span class="hljs-keyword">int</span> scc;<br><span class="hljs-keyword">bool</span> insta[maxn];<br><span class="hljs-keyword">int</span> num[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> v;<br>    low[u] = dfn[u] = ++idx;<br>    sta[top++] = u;<br>    insta[u] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>    &#123;<br>        v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(!dfn[v])<br>        &#123;<br>            tarjan(v);<br>            <span class="hljs-keyword">if</span>(low[u] &gt; low[v])low[u] = low[v];<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(insta[v] &amp;&amp; low[u] &gt; dfn[v])<br>            low[u] = dfn[v];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(low[u] == dfn[u])<br>    &#123;<br>        ++scc;<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>            v = sta[--top];<br>            insta[v] = <span class="hljs-literal">false</span>;<br>            belong[v] = scc;<br>            ++num[scc];<br>        &#125;<br>        <span class="hljs-keyword">while</span>(v != u);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">twosat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dfn, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dfn);<br>    <span class="hljs-built_in">memset</span>(insta, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> insta);<br>    <span class="hljs-built_in">memset</span>(num, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> num);<br>    idx = scc = top = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span>(!dfn[i])<br>            tarjan(i);<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ans;<br>    <span class="hljs-keyword">int</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// for(int i = 1; i &lt;= p; ++i)cout &lt;&lt; belong[i] &lt;&lt; &quot; &quot;;cout &lt;&lt; &quot; &quot;;</span><br>    <span class="hljs-comment">// for(int i = 1; i &lt;= M; ++i)cout &lt;&lt; belong[i + p] &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;</span><br>    <span class="hljs-comment">// for(int i = 1; i &lt;= p; ++i)cout &lt;&lt; belong[i + all] &lt;&lt; &quot; &quot;;cout &lt;&lt; &quot; &quot;;</span><br>    <span class="hljs-comment">// for(int i = 1; i &lt;= M; ++i)cout &lt;&lt; belong[i + p + all] &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= p; ++i)<br>        <span class="hljs-keyword">if</span>(belong[i] &lt; belong[i + all])<br>            ans.push_back(i);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(belong[i] == belong[i + all])<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= M; ++i)<br>        <span class="hljs-keyword">if</span>(belong[i + p] &lt; belong[i + p + all])<br>            f = i;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(belong[i + p] == belong[i + p + all])<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; f &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i: ans)<span class="hljs-built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br> <br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; p &gt;&gt; M &gt;&gt; m;<br>    all = p + M;<br>    <span class="hljs-keyword">int</span> u, v;<br>    init();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;<br>        addedge(u + all, v);<br>        addedge(v + all, u);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= p; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;<br>        addedge(i, u + p); addedge(u + p + all, i + all);<br>        <span class="hljs-keyword">if</span>(v &lt; M)addedge(v + p + <span class="hljs-number">1</span>, i + all), addedge(i, v + p + all + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;<br>        addedge(u, v + all);<br>        addedge(v, u + all);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; M; ++i)<br>    &#123;<br>        addedge(i + p + <span class="hljs-number">1</span>, i + p);<br>        addedge(i + p + all, i + p + <span class="hljs-number">1</span> + all);<br>        <span class="hljs-comment">// addedge(i + p, i + p + 1);</span><br>        <span class="hljs-comment">// addedge(i + p + 1 + all, i + p + all);</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(!twosat(all &lt;&lt; <span class="hljs-number">1</span>))<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br> <br> <br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>这道题的启发很大，，，2sat不一定就是解决一种选择下的解，，，只要这些不同种类的物品间有限制条件就可以放在一起，，，</p>
<p>（end)</p>
]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>Disqus使得博客空白</title>
    <url>/2019/03/11/Disqus%E4%BD%BF%E5%BE%97%E5%8D%9A%E5%AE%A2%E7%A9%BA%E7%99%BD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>昨天更新了一篇博文之后，随手一看发现博客全是白的，，但是实际上是有字的，，可以选择出来但是就是不显示（透明一样），，，</p>
<span id="more"></span>
<p>然后我以为是我更新的时候中断导致的（这个的确使得CNAME变空了，然后就解析不到自己的域名上了），，，就重新安装了一遍NEXT主题，，但是还是不行，，，试着换了其他的主题却可以正常显示，，，后来甚至只是chrome上不正确显示，，其他的浏览器没有问题，，，</p>
<p>chrome的开发者模式下会报 <code>Uncaught TypeError: $(...).find(...).lazyload is not a function</code> 这么一个错误，，，</p>
<p>一直到晚上（现在）才在next_theme下的<a href="https://github.com/theme-next/hexo-theme-next/issues/673">issues</a>看到有很多翻车的，，，是Disqus评论的锅，，现在的解决方法是把他关了就行了，，，</p>
]]></content>
      <tags>
        <tag>hexo_blog</tag>
        <tag>next_theme</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 71</title>
    <url>/2019/09/04/Educational-Codeforces-Round-71/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>上午没课，做一套题，，练一下手感和思维，，<a href="https://codeforces.com/contest/1207">教育场的71</a> ，，前两到没啥，，后面就做的磕磕巴巴的，，，有想法但是不敢实现，，自我否定，，没了思路就只能官方题解，，发现其实都很简单，，，思维场把，，，，</p>
<span id="more"></span>
<h1 id="A-There-Are-Two-Types-Of-Burgers"><a href="#A-There-Are-Two-Types-Of-Burgers" class="headerlink" title="A    There Are Two Types Of Burgers"></a>A    There Are Two Types Of Burgers</h1><p>贪心就完事了，，推出公式不知道怎么证明是最优的，，，（敲错变量还wale一发emmm</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld; <br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br> <br> <br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br> <br>    <span class="hljs-keyword">int</span> t; <span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> b, p, f;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; b &gt;&gt; p &gt;&gt; f;<br>        <span class="hljs-keyword">int</span> h, c;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; h &gt;&gt; c;<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(h &lt; c)<br>        &#123;<br>            ans = c * (min(f, b / <span class="hljs-number">2</span>));<br>            b -= <span class="hljs-number">2</span> * min(f, b / <span class="hljs-number">2</span>);<br>            ans += h * (min(p, b / <span class="hljs-number">2</span>));<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            ans = h * min(p, b / <span class="hljs-number">2</span>);<br>            b -= <span class="hljs-number">2</span> * min(p, b / <span class="hljs-number">2</span>);<br>            ans += c * min(f, b / <span class="hljs-number">2</span>);<br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <br>    &#125;<br> <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="B-Square-Filling"><a href="#B-Square-Filling" class="headerlink" title="B    Square Filling"></a>B    Square Filling</h1><p>题意就是给你一个矩形，，由0，1组成，然后一次可以进行一个操作：把 $(x, y), (x, y + 1), (x + 1, y), (x + 1, y + 1)$ 这几个点变成1，，然后问你从一个全零的矩阵变成这个矩阵的操作方法，，没限制操作次数，，那就乱搞就行了，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld; <br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br> <br> <br><span class="hljs-keyword">int</span> a[maxn][maxn];<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; &gt; ans;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(a[x][y] &amp;&amp; a[x][y + <span class="hljs-number">1</span>] &amp;&amp; a[x + <span class="hljs-number">1</span>][y] &amp;&amp; a[x + <span class="hljs-number">1</span>][y + <span class="hljs-number">1</span>])<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br> <br>    <span class="hljs-keyword">int</span> n, m;<span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>            <span class="hljs-built_in">cin</span> &gt;&gt; a[i][j];<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!a[i][j])<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(check(i, j))ans.push_back(<span class="hljs-built_in">make_pair</span>(i, j));<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(check(i, j - <span class="hljs-number">1</span>))ans.push_back(<span class="hljs-built_in">make_pair</span>(i, j - <span class="hljs-number">1</span>));<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(check(i - <span class="hljs-number">1</span>, j))ans.push_back(<span class="hljs-built_in">make_pair</span>(i - <span class="hljs-number">1</span>, j));<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(check(i - <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span>))ans.push_back(<span class="hljs-built_in">make_pair</span>(i - <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span>));<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    sort(ans.begin(), ans.end());<br>    <span class="hljs-keyword">int</span> size = unique(ans.begin(), ans.end()) - ans.begin();<br>    <span class="hljs-built_in">cout</span> &lt;&lt; size &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i)<span class="hljs-built_in">cout</span> &lt;&lt; ans[i].first &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ans[i].second &lt;&lt; <span class="hljs-built_in">endl</span>;<br> <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="C-Gas-Pipeline"><a href="#C-Gas-Pipeline" class="headerlink" title="C    Gas Pipeline"></a>C    Gas Pipeline</h1><p>dp?! 没怎么训练过dp，，暂时扔了，，</p>
<h1 id="D-Number-Of-Permutations"><a href="#D-Number-Of-Permutations" class="headerlink" title="D    Number Of Permutations"></a>D    Number Of Permutations</h1><p>感觉这道题不错，，</p>
<p>题意就是对于给你的一个二元对 序列s，，他的排列中任意一维满足不递减的排列就是 坏的排列，问你所有的排列中好的共有几种，，</p>
<p>一开始被tag的组合吓懵了，，以为是什么推公式的排列组合题，，</p>
<p>其实解法很简单，，考虑反面就行了，，，总的排列的情况一共有 $fac[n]$ 种，，然后对于第一维不递减的排列的个数记为 $cnt<em>1$ ，同理第二维的就是 $cnt_2$ ，，根据容斥的思想，，还有它俩的交集 $cnt</em>{12}$ ，，最后他们的答案就是 $fac[n] - cnt<em>1 - cnt_2 + cnt</em>{12}$ ，，，</p>
<p>前两种的求法就是排序后，，如果没有重复的元素，那就就是一种情况，，如果有重复的元素，，那么就是重复元素的阶乘的积，，</p>
<p>对于最后这种交集的情况，首先要按第一维排序，如果第一维相等，按第二维排序，，，然后判断第二维是不是不递减的，，如果不是不递减的，，那么这种情况就是0种，，否者的话，，对于那些相同的二元对就可以互换位置，，那么答案就是他们的阶乘的积，，</p>
<p>最后统计答案就行了，，记得多加几个模，，因为前两种的情况可能很多，，，emmmm，，，wa了好几发，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld; <br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">3e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-comment">// const int mod = 1e9 + 7;</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">998244353</span>;<br><br><span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmpab</span><span class="hljs-params">(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; i, <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(i.first == j.first)<span class="hljs-keyword">return</span> i.second &lt; j.second;<br>    <span class="hljs-keyword">return</span> i.first &lt; j.first;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmpb</span><span class="hljs-params">(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; i, <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> i.second &lt; j.second;<br>&#125;<br>ll fac[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    fac[<span class="hljs-number">0</span>] = fac[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; maxn; ++i)fac[i] = fac[i - <span class="hljs-number">1</span>] * i % mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">int</span> n; <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; a[i].first &gt;&gt; a[i].second;<br>    sort(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n, cmpab);<br>    ll cnt1, cnt2, cnt12;<br>    cnt1 = cnt2 = cnt12 = <span class="hljs-number">1</span>;<br>    init();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">int</span> l = i, r = n; <br>        <span class="hljs-keyword">int</span> k = i;<br>        <span class="hljs-keyword">while</span>(l &lt;= r)<br>        &#123;<br>            <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(a[mid].first == a[i].first)<br>            &#123;<br>                l = mid + <span class="hljs-number">1</span>;<br>                k = mid;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                r = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        cnt1 = cnt1 * fac[k - i + <span class="hljs-number">1</span>] % mod;<br>        i = k;<br>    &#125;<br>    <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-keyword">if</span>(a[i].second &lt; a[i - <span class="hljs-number">1</span>].second)flag = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(flag)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            <span class="hljs-keyword">int</span> l = i, r = n;<br>            <span class="hljs-keyword">int</span> k = i;<br>            <span class="hljs-keyword">while</span>(l &lt;= r)<br>            &#123;<br>                <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(a[mid].first == a[i].first &amp;&amp; a[mid].second == a[i].second)<br>                &#123;<br>                    l = mid + <span class="hljs-number">1</span>;<br>                    k = mid;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    r = mid - <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>            cnt12 = cnt12 * fac[k - i + <span class="hljs-number">1</span>] % mod;<br>            i = k;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cnt12 = <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    sort(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n, cmpb);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">int</span> l = i, r = n;<br>        <span class="hljs-keyword">int</span> k = i;<br>        <span class="hljs-keyword">while</span>(l &lt;= r)<br>        &#123;<br>            <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(a[mid].second == a[i].second)<br>            &#123;<br>                l = mid + <span class="hljs-number">1</span>;<br>                k = mid;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                r = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        cnt2 = cnt2 * fac[k - i + <span class="hljs-number">1</span>] % mod;<br>        i = k;<br>    &#125;<br>    <span class="hljs-comment">// cout &lt;&lt; fac[n] &lt;&lt; &quot; &quot; &lt;&lt; cnt1 &lt;&lt; &quot; &quot; &lt;&lt; cnt2 &lt;&lt; &quot; &quot; &lt;&lt; cnt12 &lt;&lt; endl;</span><br>    <span class="hljs-keyword">if</span>(n != <span class="hljs-number">1</span>)<span class="hljs-built_in">cout</span> &lt;&lt; (fac[n] - cnt1 - cnt2 + cnt12 + mod * <span class="hljs-number">2</span>) % mod &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="E-XOR-Guessing"><a href="#E-XOR-Guessing" class="headerlink" title="E    XOR Guessing"></a>E    XOR Guessing</h1><p>一道简单的交互题，，，</p>
<p>题意就是你有两次询问机会，，每次询问是100 个数，，然后交互器会选择一个数和答案 $x$ 的异或作为输入给你，，最后你要得出答案那个数，，，</p>
<p>看到异或，第一反应就是位运算相关的，，，往上靠就行了，，只有两次机会的话，，而且书的范围是14位内的正整数，，，所以考虑第一次询问 $x$ 的高7位，，后一次询问低7位，，，然后将得到的值掐掉前面的低7位，，“并” 上后面掐掉高7位的值就行了，，，</p>
<p>忘记将 <code>#define &#39;\n&#39; endl</code> 注释ile了一发，，，emmmmm</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-comment">// #define endl &#x27;\n&#x27;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld; <br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br> <br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br> <br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;? &quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; ++i)<span class="hljs-built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;fflush(<span class="hljs-built_in">stdout</span>);<br>    ll a; <span class="hljs-built_in">cin</span> &gt;&gt; a;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;? &quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; ++i)<span class="hljs-built_in">cout</span> &lt;&lt; (i &lt;&lt; <span class="hljs-number">7</span>) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>; <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;fflush(<span class="hljs-built_in">stdout</span>);<br>    ll b; <span class="hljs-built_in">cin</span> &gt;&gt; b;<br>    <span class="hljs-comment">// cout &lt;&lt; a &lt;&lt; b &lt;&lt; endl;</span><br>    a = a &amp; (<span class="hljs-number">0b11111110000000</span>);<br>    b = b &amp; (<span class="hljs-number">0b00000001111111</span>);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;! &quot;</span> &lt;&lt; (a | b) &lt;&lt; <span class="hljs-built_in">endl</span>;fflush(<span class="hljs-built_in">stdout</span>);<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="F-Remainder-Problem"><a href="#F-Remainder-Problem" class="headerlink" title="F    Remainder Problem"></a>F    Remainder Problem</h1><p>这题也不错，，</p>
<p>题意就是一个长为500000的数组，，一个操作是对 第x位 a[x] += y；另一种操作是询问所有 模x余数为y位置处的数的和，，，</p>
<p>自己想的做法T了，，，因为没有想到 修改一个数他所会影响的可能询问该怎么表示，，，，</p>
<p>这题的解法是： 用一个数组 $sum[x][y]$ 保存模为x时余数时y的答案，，因为当模数很大时，，我们即使时暴力找，，因为这时的数很少，，，所以询问不怎么费时间，，，但是数小时，，，寻找的数就很多，，，这样就会T，，，所以我们只保存前750个模数的答案，，，</p>
<p>每次修改一个数 $a[x] += y$ 后，，，对于所有 $sum[i][x \% i]$ 都会产生影响，，，这里的i就是模数，，，$x \% i$ 相当于是这个模数下的余数，，当询问 $(2, i, x \% i)$ 时，，，这个答案就可以直接得到，，，</p>
<p>比如说我修改 a[7] 的值，，那么对于一个询问 $(x, y)={(3, 1), (4, 3), (5, 2)……}$ 这些询问的值一定会改变，，，也就是对 $sum[3][1], sum[4][7 \% 4], sum[5][7 \% 5]$ 进行了修改，，</p>
<p>思路理清代码就简单了，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld; <br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">5e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br> <br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> k = <span class="hljs-number">750</span>;<br><span class="hljs-keyword">int</span> sum[k][k];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br> <br>    <span class="hljs-keyword">int</span> q; <span class="hljs-built_in">cin</span> &gt;&gt; q;<br>    <span class="hljs-keyword">int</span> o, x, y;<br>    <span class="hljs-keyword">while</span>(q--)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; o &gt;&gt; x &gt;&gt; y;<br>        <span class="hljs-keyword">if</span>(o == <span class="hljs-number">1</span>)<br>        &#123;<br>            a[x] += y;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; k; ++i)sum[i][x % i] += y;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(x &gt;= k)<br>            &#123;<br>                <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = y; i &lt;= <span class="hljs-number">500000</span>; i += x)ans += a[i];<br>                <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">cout</span> &lt;&lt; sum[x][y] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            &#125;<br>            <br>        &#125;<br>        <br>    &#125;<br> <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="G-Indie-Album"><a href="#G-Indie-Album" class="headerlink" title="G    Indie Album"></a>G    Indie Album</h1><p>貌似是AC自动机的题，，，没开字符串的专题，，先扔了，，，</p>
<p>(end…)</p>
]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>Codefoces</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 72 (Rated for Div. 2)</title>
    <url>/2019/09/28/Educational-Codeforces-Round-72-Rated-for-Div-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p><a href="https://codeforces.com/contest/1217">这场只做了前四道</a>，，感觉学到的东西也很多，，最后两道数据结构的题没有补。。。</p>
<span id="more"></span>
<h1 id="A-Creating-a-Character"><a href="#A-Creating-a-Character" class="headerlink" title="A. Creating a Character"></a>A. Creating a Character</h1><p>贪心加一堆判断就行了，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">15e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">4e5</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br> <br><span class="hljs-keyword">int</span> a[maxn], n;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-keyword">int</span> t; <span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        ll s, i, e;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; s &gt;&gt; i &gt;&gt; e;<br>        <span class="hljs-keyword">if</span>(s + e &lt;= i)<br>        &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        ll x = i - s + e;<br>        x = x / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(s + x &lt;= i + e - x)++x;<br>        <span class="hljs-keyword">if</span>(e == <span class="hljs-number">0</span> &amp;&amp; s &gt; i)x = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(e == <span class="hljs-number">0</span> &amp;&amp; s &lt;= i)x = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(x &lt;= <span class="hljs-number">0</span>)x = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; e - x + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="B-Zmei-Gorynich"><a href="#B-Zmei-Gorynich" class="headerlink" title="B. Zmei Gorynich"></a>B. Zmei Gorynich</h1><p>贪心++</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">15e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">4e5</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br> <br><span class="hljs-keyword">int</span> a[maxn], n;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-keyword">int</span> t; <span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        ll n, x; <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; x;<br>        ll mx = -inf, mxd = <span class="hljs-number">0</span>;<br>        ll d, h;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; d &gt;&gt; h;<br>            mx = max(mx, d - h);<br>            mxd = max(mxd, d);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(mx &lt;= <span class="hljs-number">0</span> &amp;&amp; mxd &lt; x)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <br>        &#123;<br>            ll ans = (x - mxd + mx - <span class="hljs-number">1</span>) / mx;<br>            ++ans;<br>            <span class="hljs-keyword">if</span>(mxd &gt;= x)ans = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="C-The-Number-Of-Good-Substrings"><a href="#C-The-Number-Of-Good-Substrings" class="headerlink" title="C. The Number Of Good Substrings"></a>C. The Number Of Good Substrings</h1><p>貌似满足条件的串不多？？？</p>
<p>直接枚举每一个1的位置，，然后对于以他为最高位的串表示的十进制如果小于串的长度以及他前面的前导零长度的和就是一个满足条件的，，这样跑一遍就行了，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">4e5</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br> <br><span class="hljs-keyword">char</span> s[maxn];<br> <br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-keyword">int</span> t; <span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; s;<br>        ll ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> lst = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(s);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= len - <span class="hljs-number">1</span>; ++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;0&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ll base = <span class="hljs-number">1</span>;<br>                ++ans;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= len - <span class="hljs-number">1</span>; ++j)<br>                &#123;<br>                    base &lt;&lt;= <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">if</span>(s[j] == <span class="hljs-string">&#x27;1&#x27;</span>)base |= <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">if</span>(j - lst &gt;= base)++ans;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>                &#125;<br>                lst = i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 010010001000</span><br></code></pre></td></tr></table></figure>
<h1 id="D-Coloring-Edges"><a href="#D-Coloring-Edges" class="headerlink" title="D. Coloring Edges"></a>D. Coloring Edges</h1><p>感觉这题很不错，，有向图判环之前只知道用拓扑排序，，现在才知道有好几种方法，，，</p>
<p>题意是给一张图，然后对边染色，用最少的颜色染出的图中相同颜色的边没有成环就行</p>
<p>显然没有环的时候答案就是1，，，有环的时候答案就是2，，</p>
<p>所以可以先判环，，然后染色</p>
<p>这样做的话染色的一个技巧就是对于 <code>u-&gt;v</code> 边， $u \ge v$ 直接染2，，其他的染1</p>
<h2 id="dfs判环"><a href="#dfs判环" class="headerlink" title="dfs判环"></a>dfs判环</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">4e5</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br> <br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt, col;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].nxt = head[u];<br>    edge[tot].col = <span class="hljs-number">0</span>;<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(v == s)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(vis[v])<span class="hljs-keyword">continue</span>;<br>        vis[v] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(dfs(v, s))<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <br> <br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">int</span> u, v;<br>    init();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;<br>        addedge(u, v);<br>    &#125;<br>    <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>        vis[i] = <span class="hljs-literal">true</span>;<br>        flag = dfs(i, i);<br>        <span class="hljs-keyword">if</span>(flag)<span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!flag)<br>    &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">2</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = head[i]; ~j; j = edge[j].nxt)<br>                <span class="hljs-keyword">if</span>(i &gt; edge[j].to)edge[j].col = <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">else</span> edge[j].col = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= tot - <span class="hljs-number">1</span>; ++i)<br>            <span class="hljs-built_in">cout</span> &lt;&lt; edge[i].col &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="topo排序判环"><a href="#topo排序判环" class="headerlink" title="topo排序判环"></a>topo排序判环</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">4e5</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br> <br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt, col;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].nxt = head[u];<br>    edge[tot].col = <span class="hljs-number">0</span>;<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> du[maxn];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">topo</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span>(!du[i])<br>            q.push(i);<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front(); q.pop();<br>        ++cnt;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>            <span class="hljs-keyword">if</span>(--du[edge[i].to] == <span class="hljs-number">0</span>)<br>                q.push(edge[i].to);<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt == n;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <br> <br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">int</span> u, v;<br>    init();<br>    <span class="hljs-built_in">memset</span>(du, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> du);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;<br>        ++du[v];<br>        addedge(u, v);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(topo())<br>    &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">2</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = head[i]; ~j; j = edge[j].nxt)<br>                <span class="hljs-keyword">if</span>(i &gt; edge[j].to)edge[j].col = <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">else</span> edge[j].col = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= tot - <span class="hljs-number">1</span>; ++i)<br>            <span class="hljs-built_in">cout</span> &lt;&lt; edge[i].col &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="dfs染回边"><a href="#dfs染回边" class="headerlink" title="dfs染回边"></a>dfs染回边</h2><p>另一种做法需要知道dfs的一些性质：</p>
<p>dfs跑图会产生四种边，，（算法导论上有（看过都忘了，，，）<a href="https://blog.csdn.net/c_zhangsir/article/details/98238664">这些是参考这个的</a></p>
<ul>
<li><strong>树边(Tree Edge)</strong> ： 就是 <code>u-&gt;v</code> v是第一次访问的边</li>
<li><strong>前向边(Forward Edge)</strong> ： 就是 <code>u-&gt;v</code> v是访问过的，并且不是v的直接的孩子</li>
<li><strong>回边(Back Edge)</strong> ： 就是 <code>u-&gt;v</code> v是指向他的一个祖先的边，，（显然这样的边可能是环的一部分</li>
<li><strong>跨越边(Cross Edge)</strong> ： 就是 <code>u-&gt;v</code> v是指向一个访问过的点，但 u , v 之间没关系，，（可能是两棵子树中的点等等</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190802211019465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NfWmhhbmdTaXI=,size_16,color_FFFFFF,t_70" alt=""></p>
<p>所以对于这题，，我们只要跑一边dfs，，然后将所有的回边染2，，其他的边染1即可，，，这样子就不用判环什么的，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">4e5</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt, col;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].nxt = head[u];<br>    edge[tot].col = <span class="hljs-number">0</span>;<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">bool</span> flag;<br><span class="hljs-keyword">int</span> vis[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 先将子树标记为1</span><br>    <span class="hljs-comment">// 如果子树中有到子树中的某个点时，表示有环</span><br>    <span class="hljs-comment">// 最后将子树标记为2</span><br><br>    <span class="hljs-comment">// 对于染色，树边染1（vis[v] == 0）、回边（vis[v] == 1）染2，前边（就是连到其他树的边）和跨越边（连着已经走过的点的边）染1</span><br>    vis[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(vis[v] == <span class="hljs-number">0</span>)<br>        &#123;<br>            dfs(v);<br>            edge[i].col = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(vis[v] == <span class="hljs-number">1</span>)<br>        &#123;<br>            flag = <span class="hljs-literal">true</span>;<br>            edge[i].col = <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            edge[i].col = <span class="hljs-number">1</span>;<br>    &#125;<br>    vis[u] = <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <br><br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">int</span> u, v;<br>    init();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;<br>        addedge(u, v);<br>    &#125;<br>    flag = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span>(vis[i] == <span class="hljs-number">0</span>)<br>            dfs(i);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; (flag ? <span class="hljs-number">2</span> : <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= tot - <span class="hljs-number">1</span>; ++i)<br>        <span class="hljs-built_in">cout</span> &lt;&lt; edge[i].col &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>(end)</p>
]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>刷题</tag>
        <tag>cf</tag>
      </tags>
  </entry>
  <entry>
    <title>The Preliminary Contest for ICPC China Nanchang National Invitational</title>
    <url>/2019/04/21/The-Preliminary-Contest-for-ICPC-China-Nanchang-National-Invitational/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这次南昌邀请赛的网络赛打的心累啊，，发现自己啥都不会，智商受限，，，</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Solved</th>
<th>A</th>
<th>B</th>
<th>C</th>
<th>D</th>
<th>E</th>
<th>F</th>
<th>G</th>
<th>H</th>
<th>I</th>
<th>J</th>
<th>K</th>
<th>L</th>
<th>M</th>
</tr>
</thead>
<tbody>
<tr>
<td>3/13</td>
<td>O</td>
<td>.</td>
<td>.</td>
<td>.</td>
<td>.</td>
<td>.</td>
<td>.</td>
<td>O</td>
<td>.</td>
<td>.</td>
<td>.</td>
<td>.</td>
<td>O</td>
</tr>
</tbody>
</table>
</div>
<p>O for passing during the contest\<br>Ø for passing after the contest\<br>! for attempted but failed\<br>· for having not attempted yet</p>
<span id="more"></span>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="A-PERFECT-NUMBER-PROBLEM"><a href="#A-PERFECT-NUMBER-PROBLEM" class="headerlink" title="A. PERFECT NUMBER PROBLEM"></a>A. PERFECT NUMBER PROBLEM</h2><p>输出完美数，，直接百度输出就行了，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">6</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">28</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">496</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">8128</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">33550336</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;       <br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="H-Coloring-Game"><a href="#H-Coloring-Game" class="headerlink" title="H. Coloring Game"></a>H. Coloring Game</h2><p>$3^{n-2}*4\%mod$</p>
<p>当时怎么都推不出来那个公式，，然后没办法爆搜前几个n来找规律，，搞了一个消失貌似，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">pow_</span><span class="hljs-params">(ll a, ll b, ll p)</span>    <span class="hljs-comment">//快速幂</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ret = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b &amp; <span class="hljs-number">1</span>) ret = (ret * a) % p;<br>        a = (a * a) % p;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br>    ll n;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">if</span>(!n)<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	<span class="hljs-keyword">else</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; (pow_(<span class="hljs-number">3</span>, n - <span class="hljs-number">2</span>, mod) * <span class="hljs-number">4</span>) % mod &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;       <br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="M-Subsequence"><a href="#M-Subsequence" class="headerlink" title="M. Subsequence"></a>M. Subsequence</h2><p>询问一堆串是不是原串的一个子序列，，，</p>
<p>序列自动机板子题，，，（貌似</p>
<p>读完题发现，哎？！这不就是以前在牛客做的一道题吗？？？直接找原来的代码，，然后因为中间一个输出忘记改，wa了一发，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> nxt[maxn][<span class="hljs-number">200</span>];<br><span class="hljs-keyword">int</span> now[<span class="hljs-number">200</span>];<br><span class="hljs-keyword">char</span> s[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//序列自动机预处理</span><br>    <span class="hljs-built_in">memset</span>(now, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> now);            <span class="hljs-comment">//mow_i表示第i个字母在原串中从后向前最晚出现的位置</span><br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(s);<br>    --len;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = len; ~i; --i)               <span class="hljs-comment">//处理每一个字符</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">128</span>; ++j)        <span class="hljs-comment">//找出第i个字符后面的26个字母最早出现的字符的位置</span><br>            nxt[i][j] = now[j];<br>        now[s[i]] = i;                <span class="hljs-comment">//用当前字符更新当前字符在原串中从后向前最晚出现的位置</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">char</span> ss[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>    <span class="hljs-keyword">int</span> n; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    init();<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, ss);<br>        <span class="hljs-keyword">int</span> loc = now[ss[<span class="hljs-number">0</span>]];             <span class="hljs-comment">//没有以子串第一个字符出现的子序列时</span><br>        <span class="hljs-keyword">if</span>(!~loc)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(ss);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; len; ++i)<br>            &#123;<br>                loc = nxt[loc][ss[i]];    <span class="hljs-comment">//寻找母串中子串第i个字符下一次出现的位置</span><br>                <span class="hljs-keyword">if</span>(!~loc)                       <span class="hljs-comment">//没有就退出</span><br>                &#123;<br>                    flag = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<br>            <span class="hljs-keyword">else</span>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM-比赛补题</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>RMQ_第一弹_Sparse Table</title>
    <url>/2018/09/21/RMQ-%E7%AC%AC%E4%B8%80%E5%BC%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><strong>RMQ (Range Minimum/Maximum Query)</strong></p>
<p>从英文便可以看出这个算法的主要是询问一个区间内的最值问题，，，</p>
<p>暑假集训的时候学习了 <strong>线段树</strong> ，，，</p>
<p>也可以对给定数组查询任意区间的最值问题，，，，</p>
<p>这两个主要的区别就是 线段树 可以进行单点的修改操作，，，而 <strong>Sparse Table</strong> 算法不能进行点修改，，</p>
<p>或者说这样修改一次重预处理一次不划算，，，</p>
<p>所以说，，要是题目只是单纯的多次查询任意区间的最值，，，Sparse Table 首选，，毕竟，，毕竟写起来比线段树简单得多了，，，</p>
<span id="more"></span>
<h1 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h1><h2 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h2><p>基本思想是dp,,,,</p>
<p><strong>dp的状态</strong> : 对于数组 $a[1-n]$ , $F[i , j]$表示从第 $i$ 个位置开始 ， <strong>长度</strong> 为$2^j$ 个数这个区间中的最值，，，;</p>
<p><strong>dp的初始值</strong> : $F[i , 0] = a[i]$;</p>
<p><strong>状态转移方程</strong> : $F[i , j] = max (F[i , j - 1] , F[i + 2^{j - 1}  , j - 1])$;</p>
<p><strong>思想</strong> : $F[i , j]$ 就是不断取他的左右这两段的最值，，这两段的长度相等，都为 $2^{j - 1}$ 个元素，，</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">5e4</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> n , q;<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-keyword">int</span> mx[maxn][<span class="hljs-number">20</span>];<br><span class="hljs-keyword">int</span> mi[maxn][<span class="hljs-number">20</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rmq</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>		mx[i][<span class="hljs-number">0</span>] = mi[i][<span class="hljs-number">0</span>] = a[i];<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; (<span class="hljs-number">1</span> &lt;&lt; j) &lt;= n; ++j)<br>	&#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i + (<span class="hljs-number">1</span> &lt;&lt; j) - <span class="hljs-number">1</span> &lt;= n; ++i)<br>		&#123;<br>			mx[i][j] = max(mx[i][j - <span class="hljs-number">1</span>] , mx[i + (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>))][j - <span class="hljs-number">1</span>]);<br>			mi[i][j] = min(mi[i][j - <span class="hljs-number">1</span>] , mi[i + (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>))][j - <span class="hljs-number">1</span>]);<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>这里我们需要注意的是循环的顺序，我们发现外层是j，内层所i，这是为什么呢？可以是i在外，j在内吗？<br>答案是不可以。因为我们需要理解这个状态转移方程的意义。</p>
<p>状态转移方程的含义是：先更新所有长度为F[i,0]即1个元素，然后通过2个1个元素的最值，获得所有长度为F[i,1]即2个元素的最值，然后再通过2个2个元素的最值，获得所有长度为F[i,2]即4个元素的最值，以此类推更新所有长度的最值。</p>
<p>而如果是i在外，j在内的话，我们更新的顺序就是F[1,0],F[1,1],F[1,2],F[1,3],表示更新从1开始1个元素，2个元素，4个元素，8个元素（A[0],A[1],….A[7]）的最值，这里F[1,3] = max(max(A[0],A[1],A[2],A[3]),max(A[4],A[5],A[6],A[7]))的值，但是我们根本没有计算max(A[0],A[1],A[2],A[3])和max(A[4],A[5],A[6],A[7])，所以这样的方法肯定是错误的。</p>
<p><a href="https://blog.csdn.net/niushuai666/article/details/6624672?utm_source=copy">本段来自某大佬博客</a></p>
<hr>
<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>假如我们需要查询的区间为(i,j)，那么我们需要找到覆盖这个闭区间(左边界取i，右边界取j)的最小幂（可以重复，比如查询5，6，7，8，9，我们可以查询5678和6789）。</p>
<p>因为这个区间的长度为 $j - i + 1$ ,所以我们可以取 $k=log2( j - i + 1)$ ，则有：$RMQ(A, i, j)=max(F[i , k], F[ j - 2 ^ k + 1, k])$。</p>
<p>举例说明，要求区间[2，8]的最大值，$k = log_2（8 - 2 + 1）= 2$，即求 $max(F[2, 2]，F[8 - 2 ^ 2 + 1, 2]) = max(F[2, 2]，F[5, 2])$；</p>
<h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ans</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l , <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">int</span> len = r - l + <span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">while</span> ((<span class="hljs-number">1</span> &lt;&lt; (k + <span class="hljs-number">1</span>)) &lt;= len)<br>		++k;<br><br>	<span class="hljs-keyword">return</span> max (mx[l][k] , mx[r - (<span class="hljs-number">1</span> &lt;&lt; k) + <span class="hljs-number">1</span>][k]) - min (mi[l][k] , mi[r - (<span class="hljs-number">1</span> &lt;&lt; k) + <span class="hljs-number">1</span>][k]);<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><p><a href="http://poj.org/problem?id=3264">题目链接</a></p>
<p>题目大意: 给定的数列a[1 - n] , 求出[l , r]这个区间内的极差 ， 即最大值与最小值的差</p>
<p>直接套板子，，，，</p>
<p>ac代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">5e4</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> n , q;<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-keyword">int</span> mx[maxn][<span class="hljs-number">20</span>];<br><span class="hljs-keyword">int</span> mi[maxn][<span class="hljs-number">20</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rmq</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>		mx[i][<span class="hljs-number">0</span>] = mi[i][<span class="hljs-number">0</span>] = a[i];<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; (<span class="hljs-number">1</span> &lt;&lt; j) &lt;= n; ++j)<br>	&#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i + (<span class="hljs-number">1</span> &lt;&lt; j) - <span class="hljs-number">1</span> &lt;= n; ++i)<br>		&#123;<br>			mx[i][j] = max(mx[i][j - <span class="hljs-number">1</span>] , mx[i + (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>))][j - <span class="hljs-number">1</span>]);<br>			mi[i][j] = min(mi[i][j - <span class="hljs-number">1</span>] , mi[i + (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>))][j - <span class="hljs-number">1</span>]);<br>		&#125;<br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ans</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l , <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">int</span> len = r - l + <span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">while</span> ((<span class="hljs-number">1</span> &lt;&lt; (k + <span class="hljs-number">1</span>)) &lt;= len)<br>		++k;<br><br>	<span class="hljs-keyword">return</span> max (mx[l][k] , mx[r - (<span class="hljs-number">1</span> &lt;&lt; k) + <span class="hljs-number">1</span>][k]) - min (mi[l][k] , mi[r - (<span class="hljs-number">1</span> &lt;&lt; k) + <span class="hljs-number">1</span>][k]);<br>&#125;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123; <br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span> , &amp;n , &amp;q) != EOF)<br>	&#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>			<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;a[i]);<br><br>		rmq();<br>		<br>		<span class="hljs-keyword">while</span> (q--)<br>		&#123;<br>			<span class="hljs-keyword">int</span> l , r;<br>			<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span> , &amp;l , &amp;r);<br>			<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span> , ans(l , r));<br>		&#125;<br>	&#125;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="kuangbin的板子"><a href="#kuangbin的板子" class="headerlink" title="kuangbin的板子:"></a>kuangbin的板子:</h1><p>一维:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">50010</span>;<br><span class="hljs-keyword">int</span> dp[MAXN][<span class="hljs-number">20</span>];<br><span class="hljs-keyword">int</span> mm[MAXN];<br><span class="hljs-comment">//初始化 RMQ, b 数组下标从 1 开始，从 0 开始简单修改</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initRMQ</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> b[])</span></span><br><span class="hljs-function"></span>&#123;<br>    mm[<span class="hljs-number">0</span>] = −<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        mm[i] = ((i&amp;(i−<span class="hljs-number">1</span>)) == <span class="hljs-number">0</span>)?mm[i−<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>:mm[i−<span class="hljs-number">1</span>];<br>        dp[i][<span class="hljs-number">0</span>] = b[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= mm[n]; j++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i + (<span class="hljs-number">1</span>&lt;&lt;j) −<span class="hljs-number">1</span> &lt;= n; i++)<br>            dp[i][j] = max(dp[i][j−<span class="hljs-number">1</span>],dp[i+(<span class="hljs-number">1</span>&lt;&lt;(j−<span class="hljs-number">1</span>))][j−<span class="hljs-number">1</span>]);<br>&#125;<br> <span class="hljs-comment">//查询最大值</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rmq</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> k = mm[y−x+<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> max(dp[x][k],dp[y−(<span class="hljs-number">1</span>&lt;&lt;k)+<span class="hljs-number">1</span>][k]);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM-RMQ</category>
      </categories>
      <tags>
        <tag>acm</tag>
        <tag>dp</tag>
        <tag>RMQ</tag>
        <tag>ST</tag>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>[工具使用]-利用latex管理创建自己的ACM模板</title>
    <url>/2019/08/31/%5B%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%5D-%E5%88%A9%E7%94%A8latex%E7%AE%A1%E7%90%86%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84ACM%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>从很早入坑ACM开始，便和各种算法的模板打着交道，虽然kaungbin的模板已经足够强大，但是自己在平常做题中也逐渐有着自己的一些模板，也有一些kuangbin模板中没有的更快的板子，虽然不确定时候以后会用到，但是能够记录下来形成自己的模板是最好的，，这样也对自己所学有个大致的总结，所以在搜寻网络上各种解决思路后，选择一位博主的解决方法： 利用python管理文件夹形式的模板库，生成 <code>latex</code> 的 <code>.tex</code> 文件，然后通过两次编译后得到 <code>.pdf</code> 的模板文件，，这样的好处是显而易见的，首先是代码的管理十分的方便，只需将整理的板子扔到对应的分类文件夹下，然后在需要打印 <code>.pdf</code> 的板子时运行一下py脚本就行了，同时用 <code>latex</code> 生成的文件的样式也很个性化，可以根据自己的喜好来改变，，我也从中加深了对 <code>latex</code> 语言的了解。</p>
<span id="more"></span>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>为了能够最后能正常的生成板子，，首先要保证一些软件能够正常的使用： <code>python3</code>, <code>tex</code> 等等</p>
<p>这个 <code>Tex Live</code> 我很早之前就安装了，所以也忘记具体的安装过程了，，只记得这玩意的下载文件多而大，，安装也费事，，不过具体的安装步骤网上有很多教程（注意要保证xecjk使用，，支持中文的包</p>
<p>最后的板子的管理文件夹大致是这样的：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><code class="hljs txt">卷 文件 的文件夹 PATH 列表<br>卷序列号为 D0B1-CFE7<br>G:.<br>│  1.pdf                //生成的pdf文件<br>│  1.tex                //生成的tex文件<br>│  logo.jpg             //板子的封面<br>│  README.md            <br>│  setting.dat          //保存的配置，名字啊等等<br>│  template.py          //我们的脚本<br>│  tree.txt             //这个目录的大致结构<br>│  <br>├─dp<br>│      线性dp.cpp<br>│      <br>├─_MyTemplate<br>│      init.cpp<br>│      <br>├─博弈论<br>│      sg函数.cpp<br>│      <br>├─图论<br>│  ├─2-sat<br>│  │      输出字典序最小的解.cpp<br>│  │      <br>│  ├─二分图<br>│  │      匈牙利算法_邻接矩阵实现.cpp<br>│  │      <br>│  ├─割点、桥、连通分支<br>│  │      基本内容.cpp<br>│  │      <br>│  ├─差分约束<br>│  │      差分约束.cpp<br>│  │      <br>│  ├─强连通分量<br>│  │      Kosaraju.cpp<br>│  │      Tarjan_kuangbin.cpp<br>│  │      Tarjan_red_bool.cpp<br>│  │      <br>│  ├─拓扑排序<br>│  │      拓扑排序.cpp<br>│  │      <br>│  ├─最短路<br>│  │  └─spfa<br>│  │          spfa_1_前向星.cpp<br>│  │          spfa_2_邻接表_good.cpp<br>│  │          spfa_栈优化.cpp<br>│  │          <br>│  └─网络流<br>│      └─最大流<br>│              dinic.cpp<br>│              hlpp.cpp<br>│              <br>├─字符串<br>│      hash.cpp<br>│      序列自动机.cpp<br>│      <br>├─数据结构<br>│  └─并查集<br>│          并查集.cpp<br>│          <br>├─数论<br>│  │  常用数论板子.cpp<br>│  │  <br>│  ├─中国剩余定理<br>│  │      中国剩余定理_扩展欧几里得.cpp<br>│  │      中国剩余定理_模数不保证互质.cpp<br>│  │      中国剩余定理_逆元.cpp<br>│  │      <br>│  ├─大整数_java<br>│  │      java.cpp<br>│  │      <br>│  └─快速幂<br>│          杜教板子.cpp<br>│          矩阵快速幂.cpp<br>│          <br>├─树<br>│      线段树.cpp<br>│      <br>└─线性基<br>        线性基.cpp<br>        <br></code></pre></td></tr></table></figure>
<p>可以看到我们需要在一个文件夹下放置脚本程序，板子的封面，以及最重要的就是我们的板子，每一个板子都是 <code>.cpp</code> 文件，直接将板子扔进去就行了，，</p>
<h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><p>总的脚本是这样的，直接运行就行了，，<a href="https://blog.csdn.net/Gipsy_Danger/article/details/83311815">原博主</a> 的这个程序貌似只能在 Linux下的python2使用，，所以我做了一些更改，在我的环境下（win10+python3.7）是可以正常使用的，，具体的内容可以看注释</p>
<p>有一个小bug：目录貌似不能显示很多，，，emmmm有时间再改吧，，，</p>
<p>还有编译中间会有一些warning 得手动按回车才能进行下一步</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># tex的头文件，lstset就是板子的样式</span><br>TexHead = <span class="hljs-string">r&quot;&quot;&quot;</span><br><span class="hljs-string">\documentclass[twocolumn, a4]&#123;article&#125;</span><br><span class="hljs-string">\usepackage[colorlinks,linkcolor=black]&#123;hyperref&#125;</span><br><span class="hljs-string">\usepackage&#123;xeCJK&#125;</span><br><span class="hljs-string">\usepackage&#123;fancyhdr&#125;</span><br><span class="hljs-string">\usepackage&#123;amsmath, amsthm&#125;</span><br><span class="hljs-string">\usepackage&#123;listings,xcolor&#125;</span><br><span class="hljs-string">\usepackage&#123;geometry&#125;</span><br><span class="hljs-string">\usepackage&#123;fontspec&#125; </span><br><span class="hljs-string">\usepackage&#123;graphicx&#125;</span><br><span class="hljs-string">\setsansfont&#123;Consolas&#125;</span><br><span class="hljs-string">\setmonofont[Mapping=&#123;&#125;]&#123;Consolas&#125;</span><br><span class="hljs-string">\newcommand&#123;\HRule&#125;&#123;\rule&#123;\linewidth&#125;&#123;0.5mm&#125;&#125;</span><br><span class="hljs-string">\geometry&#123;left=2.5cm,right=2.5cm,top=1cm,bottom=1cm&#125;</span><br><span class="hljs-string">\lstset&#123;</span><br><span class="hljs-string">    language    = c++,</span><br><span class="hljs-string">    numbers     = left,</span><br><span class="hljs-string">    numberstyle = \tiny,</span><br><span class="hljs-string">    breaklines  = true,</span><br><span class="hljs-string">    captionpos  = b,</span><br><span class="hljs-string">    tabsize     = 4,</span><br><span class="hljs-string">    frame       = shadowbox,</span><br><span class="hljs-string">    columns     = fullflexible,</span><br><span class="hljs-string">    commentstyle = \color[RGB]&#123;0,128,0&#125;,</span><br><span class="hljs-string">    keywordstyle = \color[RGB]&#123;0,0,255&#125;,</span><br><span class="hljs-string">    basicstyle   = \normalsize\ttfamily,</span><br><span class="hljs-string">    stringstyle  = \color[RGB]&#123;148,0,209&#125;\ttfamily,</span><br><span class="hljs-string">    rulesepcolor = \color&#123;red!20!green!20!blue!20&#125;,</span><br><span class="hljs-string">    showstringspaces = true,</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br> <br><span class="hljs-comment"># 初始化设置，主要是板子的名字等等</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">InitSetting</span>():</span><br>    <span class="hljs-keyword">try</span>:<br>        SettingFile = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;setting.dat&#x27;</span>)<br>        SettingData = json.load(SettingFile)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">u&#x27;读取到保存的设置: &#x27;</span>)<br>        <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> SettingData:<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;[%s] %s&#x27;</span> % (key, SettingData[key]))<br>        op = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;是否使用已保存的设置？[Y/n]&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> op <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;no&#x27;</span>, <span class="hljs-string">&#x27;No&#x27;</span>, <span class="hljs-string">&#x27;NO&#x27;</span>]:<br>            <span class="hljs-keyword">global</span> TITLE, SCHOOL, TEAM, FILE<br>            <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;TITLE&#x27;</span>, <span class="hljs-string">&#x27;SCHOOL&#x27;</span>, <span class="hljs-string">&#x27;TEAM&#x27;</span>, <span class="hljs-string">&#x27;FILE&#x27;</span>]:<br>                <span class="hljs-built_in">globals</span>()[key] = SettingData[key]<br>        <span class="hljs-keyword">else</span>:<br>            NewSetting()<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">u&#x27;读取设置失败&#x27;</span>)<br>        NewSetting()<br> <br> <br><span class="hljs-comment"># 输入信息，保存到本地</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">NewSetting</span>():</span><br>    <span class="hljs-keyword">global</span> TITLE, SCHOOL, TEAM, FILE<br>    TITLE = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入标题: &#x27;</span>)<br>    SCHOOL = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入学校: &#x27;</span>)<br>    TEAM = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入队名: &#x27;</span>)<br>    FILE = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入文件名: &#x27;</span>)<br>    Data = <span class="hljs-built_in">dict</span>()<br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;TITLE&#x27;</span>, <span class="hljs-string">&#x27;SCHOOL&#x27;</span>, <span class="hljs-string">&#x27;TEAM&#x27;</span>, <span class="hljs-string">&#x27;FILE&#x27;</span>]:<br>        Data[key] = <span class="hljs-built_in">globals</span>()[key]<br>    json.dump(Data, <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;setting.dat&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>))<br> <br><span class="hljs-comment"># 删除当前目录下的所有中间临时文件</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Clear</span>():</span><br>    <span class="hljs-keyword">for</span> suffix <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;aux&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;toc&#x27;</span>, <span class="hljs-string">&#x27;out&#x27;</span>]:<br>        filename = <span class="hljs-string">&#x27;%s.%s&#x27;</span> % (FILE, suffix)<br>        <span class="hljs-keyword">if</span> os.path.exists(filename):<br>            os.remove(filename)<br> <br><span class="hljs-comment"># 调用两次生成模板来使 .tex 转为 .pdf</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Generate</span>():</span><br>    Clear()<br>    os.system(<span class="hljs-string">&#x27;xelatex %s.tex -quiet&#x27;</span> % FILE)<br>    os.system(<span class="hljs-string">&#x27;xelatex %s.tex -quiet&#x27;</span> % FILE)			<span class="hljs-comment"># 两到三次的生成才能生成目录https://zhidao.baidu.com/question/1541025230634017307.html</span><br>    Clear()<br>    os.system(<span class="hljs-string">&#x27;open %s.pdf&#x27;</span> % FILE)<br> <br><span class="hljs-comment"># 对每个板子文件进行读取写入</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ReadCpp</span>(<span class="hljs-params">file</span>):</span><br>    f = <span class="hljs-built_in">open</span>(file, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>)<br>    <span class="hljs-built_in">print</span> (file + <span class="hljs-string">&#x27; 2333333333333333333333333333&#x27;</span>)<br>    Tex = <span class="hljs-number">0</span><br>    TargetFile.write(<span class="hljs-string">&#x27;\\begin&#123;lstlisting&#125;\n&#x27;</span>)<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>        <span class="hljs-keyword">if</span> line[:-<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;// ---&#x27;</span>:<br>            Tex = <span class="hljs-keyword">not</span> Tex<br>            ToWrite = <span class="hljs-string">&#x27;\\%s&#123;lstlisting&#125;\n&#x27;</span> % (<span class="hljs-string">&#x27;begin&#x27;</span>, <span class="hljs-string">&#x27;end&#x27;</span>)[Tex]<br>            TargetFile.write(ToWrite)<br>            <span class="hljs-keyword">continue</span><br>        TargetFile.write(line[(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>)[Tex]:])<br>    TargetFile.write(<span class="hljs-string">&#x27;\\end&#123;lstlisting&#125;\n&#x27;</span>)<br>    f.close()<br> <br><span class="hljs-comment"># 读入tex文件</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ReadTex</span>(<span class="hljs-params">file</span>):</span><br>    f = <span class="hljs-built_in">open</span>(file, <span class="hljs-string">&#x27;r&#x27;</span>)<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>        TargetFile.write(line)<br>    f.close()<br> <br><span class="hljs-comment"># 递归遍历当前文件夹下的所有文件</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Search</span>(<span class="hljs-params">level, pwd, folder=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>    ls = os.popen(<span class="hljs-string">&#x27;dir /b &quot;%s&quot;&#x27;</span> % pwd).read().split(<span class="hljs-string">&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> ls:<br>        <span class="hljs-built_in">print</span> (item)<br>    <span class="hljs-keyword">if</span> folder:<br>        <span class="hljs-built_in">print</span> (level)<br>        TargetFile.write(SECTION[level] % folder[<span class="hljs-number">0</span>:])<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> ls:<br>        <span class="hljs-built_in">print</span> (item + <span class="hljs-string">&#x27;2333&#x27;</span> + item[:-<span class="hljs-number">3</span>])<br>        item.replace(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\\ &#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;.cpp&#x27;</span> <span class="hljs-keyword">in</span> item:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> item[:<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;00&#x27;</span>:<br>                TargetFile.write(SECTION[level + <span class="hljs-number">1</span>] % item[:-<span class="hljs-number">4</span>])<br>            ReadCpp(pwd + item)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;.tex&#x27;</span> <span class="hljs-keyword">in</span> item:<br>            <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> item[:<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;00&#x27;</span>:<br>                TargetFile.write(SECTION[level + <span class="hljs-number">1</span>] % item[:-<span class="hljs-number">4</span>])<br>            ReadTex(pwd + item)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;jpg&#x27;</span> <span class="hljs-keyword">in</span> item:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;md&#x27;</span> <span class="hljs-keyword">in</span> item:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;dat&#x27;</span> <span class="hljs-keyword">in</span> item:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;py&#x27;</span> <span class="hljs-keyword">in</span> item:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;txt&#x27;</span> <span class="hljs-keyword">in</span> item:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;pdf&#x27;</span> <span class="hljs-keyword">in</span> item:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">else</span>:<br>            cd = os.popen(<span class="hljs-string">&#x27;cd &quot;%s%s/&quot;&#x27;</span> % (pwd, item)).read()<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Not a directory&#x27;</span> <span class="hljs-keyword">in</span> cd <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;No such file or directory&#x27;</span> <span class="hljs-keyword">in</span> cd:<br>                <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;[Unknown File] %s/%s&#x27;</span> % (pwd, item))<br>            <span class="hljs-keyword">else</span>:<br>                Search(level + <span class="hljs-number">1</span>, pwd + item + <span class="hljs-string">&#x27;/&#x27;</span>, item)<br> <br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 全局设置</span><br>    TITLE, SCHOOL, TEAM, FILE = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span><br>    SECTION = [<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;\\clearpage\\section&#123;%s&#125;\n&#x27;</span>,<br>               <span class="hljs-string">&#x27;\\subsection&#123;%s&#125;\n&#x27;</span>, <span class="hljs-string">&#x27;\\subsubsection&#123;%s&#125;\n&#x27;</span>, <span class="hljs-string">&#x27;\\paragraph&#123;%s&#125;\n&#x27;</span>, <span class="hljs-string">&#x27;\\subparagraph&#123;%s&#125;\n&#x27;</span>]<br> <br>    InitSetting()<br>    Clear()<br><br>    TargetFile = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;%s.tex&#x27;</span> % FILE, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br> <br>    <span class="hljs-comment"># Output Head File</span><br>    TargetFile.write(TexHead)<br>    TargetFile.write(<span class="hljs-string">&#x27;\\title&#123;%s&#125;\n&#x27;</span> % TITLE)<br>    TargetFile.write(<span class="hljs-string">&#x27;\\author&#123;%s&#125;\n&#x27;</span> % TEAM)<br>    TargetFile.write(<span class="hljs-string">&#x27;\\pagestyle&#123;fancy&#125;\n\\fancyhf&#123;&#125;\n\\fancyhead[C]&#123;%s&#125;\n&#x27;</span> % (TITLE))<br>    TargetFile.write(<span class="hljs-string">&#x27;\\begin&#123;document&#125;\\small\n&#x27;</span>)<br>    TargetFile.write(<span class="hljs-string">&#x27;\\begin&#123;titlepage&#125;\n\\begin&#123;center&#125;\n\\vspace*&#123;0.5cm&#125;\\includegraphics[width=0.75\\textwidth]&#123;logo.jpg&#125; \\\\ [2cm]\n&#x27;</span>)<br>    TargetFile.write(<span class="hljs-string">&#x27;\\HRule \\\\ [1cm]\n&#x27;</span>)<br>    TargetFile.write(<span class="hljs-string">&#x27;\\textbf&#123;\\Huge&#123;%s&#125;&#125; \\\\ [0.5cm]\n&#x27;</span> % TITLE)<br>    TargetFile.write(<span class="hljs-string">&#x27;\\HRule \\\\ [4cm]\n&#x27;</span>)<br>    TargetFile.write(<span class="hljs-string">&#x27;\\textbf&#123;\\Huge&#123;%s&#125;&#125; \\\\ [1cm]\n\\LARGE&#123;%s&#125;\n&#x27;</span> % (SCHOOL, TEAM))<br>    TargetFile.write(<span class="hljs-string">&#x27;\\vfill\n\\Large&#123;\\today&#125;\n\\end&#123;center&#125;\n&#x27;</span>)<br>    TargetFile.write(<span class="hljs-string">&#x27;\\clearpage\n\end&#123;titlepage&#125;\n&#x27;</span>)<br>    TargetFile.write(<span class="hljs-string">&#x27;\\tableofcontents\\clearpage\n&#x27;</span>)<br>    TargetFile.write(<span class="hljs-string">&#x27;\\pagestyle&#123;fancy&#125;\n\\lfoot&#123;&#125;\n\\cfoot&#123;\\thepage&#125;\\rfoot&#123;&#125;\n&#x27;</span>)<br>    TargetFile.write(<span class="hljs-string">&#x27;\\setcounter&#123;section&#125;&#123;-1&#125;\n\\setcounter&#123;page&#125;&#123;1&#125;\n&#x27;</span>)<br> <br>    <span class="hljs-comment"># Search Files</span><br>    Search(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;./&#x27;</span>)<br> <br>    <span class="hljs-comment"># End Output</span><br>    TargetFile.write(<span class="hljs-string">&#x27;\n\\end&#123;document&#125;\n&#x27;</span>)<br>    TargetFile.close()<br> <br>    <span class="hljs-comment"># Gen</span><br>    Generate()<br></code></pre></td></tr></table></figure>
<p>最后的效果如下；</p>
<p><img src="https://img2018.cnblogs.com/blog/1028485/201908/1028485-20190831213235111-1169445063.png" alt=""></p>
<p>参考的博客：</p>
<p><a href="https://blog.csdn.net/Gipsy_Danger/article/details/83311815">主程序</a></p>
<p><a href="https://www.jianshu.com/p/28552706e811">latex语法的介绍</a></p>
<p><a href="https://www.overleaf.com/learn/latex/Code_listing#">latex官网</a></p>
<p><a href="http://dralpha.altervista.org/zh/tech/tech.htm">latex的某个大佬的笔记</a></p>
<p>（应该没了吧，，，，end</p>
]]></content>
      <categories>
        <category>ACM-整理</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>工具使用</tag>
        <tag>latex</tag>
      </tags>
  </entry>
  <entry>
    <title>acm-STL</title>
    <url>/2018/09/18/acm-STL/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>c++中有很多stl模板，，在解决一些问题时使用它们可以在较小的时间复杂度里完成题目，，，</p>
<p>本篇博客主要是对一些常用的stl的总结，，，</p>
<p>大部分内容来自大佬的<br><a href="https://blog.csdn.net/f_zyj/article/details/51594851">博客</a>;</p>
<p>主要内容有: <strong>pair</strong> , <strong>set</strong> , <strong>vector</strong> , <strong>string</strong> , <strong>stack</strong> , <strong>queue</strong> , <strong>map</strong> , <strong>bitset</strong> , <strong>iterator</strong> , <strong>algorithm</strong>.</p>
<span id="more"></span>
<h1 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h1><p><strong>头文件</strong>: <code>#include &lt;utility&gt;</code></p>
<p><strong>作用</strong>: 用来表示一个 <strong>二元组</strong> 或 <strong>元素对</strong> ， （相当于平面里的一个点） ， 并提供了按照字典序对元素进行大小比较运算符模板函数，，，</p>
<p><strong>使用</strong>: </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span> , <span class="hljs-keyword">int</span>&gt; p;<br><span class="hljs-built_in">cin</span> &gt;&gt; p.first &gt;&gt; p.second;<br><span class="hljs-built_in">cout</span> &lt;&lt; p.first &lt;&lt; p.second;<br></code></pre></td></tr></table></figure>
<p>pair需要两个参数，首尾元素的数据类型。</p>
<p>pair有两个对象成员，<strong>first</strong> , <strong>second</strong>;</p>
<p>在\<utility>中已经定义了pair上的六个比较运算符：&lt;、&gt;、&lt;=、&gt;=、==、!=，其规则是先比较first，first相等时再比较second，这符合大多数应用的逻辑。当然，也可以通过重载这几个运算符来重新指定自己的比较逻辑。<br>除了直接定义一个pair对象外，如果需要即时生成一个pair对象，也可以调用在\<utility>中定义的一个模版函数：make_pair。make_pair需要两个参数，分别为元素对的首元素和尾元素。</p>
<h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><h2 id="set-1"><a href="#set-1" class="headerlink" title="set"></a>set</h2><p><strong>头文件</strong>: <code>#include &lt;set&gt;</code></p>
<p><strong>作用</strong>: set是与 <strong>集合</strong> 相关的容器，STL为我们提供了set的实现，在编程题中遇见集合问题直接调用是十分方便的。</p>
<p><strong>使用</strong>: </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s;<br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">double</span>&gt; ss;<br></code></pre></td></tr></table></figure>
<p><strong>基本操作</strong>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">s.begin()       <span class="hljs-comment">//  返回指向第一个元素的迭代器</span><br>s.clear()       <span class="hljs-comment">//  清除所有元素</span><br>s.count()       <span class="hljs-comment">//  返回某个值元素的个数</span><br>s.empty()       <span class="hljs-comment">//  如果集合为空，返回true(真）</span><br>s.end()         <span class="hljs-comment">//  返回指向最后一个元素之后的迭代器，不是最后一个元素</span><br>s.equal_range() <span class="hljs-comment">//  返回集合中与给定值相等的上下限的两个迭代器</span><br>s.erase()       <span class="hljs-comment">//  删除集合中的元素</span><br>s.find()        <span class="hljs-comment">//  返回一个指向被查找到元素的迭代器</span><br>s.get_allocator()   <span class="hljs-comment">//  返回集合的分配器</span><br>s.insert()      <span class="hljs-comment">//  在集合中插入元素</span><br>s.lower_bound() <span class="hljs-comment">//  返回指向大于（或等于）某值的第一个元素的迭代器</span><br>s.key_comp()    <span class="hljs-comment">//  返回一个用于元素间值比较的函数</span><br>s.max_size()    <span class="hljs-comment">//  返回集合能容纳的元素的最大限值</span><br>s.rbegin()      <span class="hljs-comment">//  返回指向集合中最后一个元素的反向迭代器</span><br>s.rend()        <span class="hljs-comment">//  返回指向集合中第一个元素的反向迭代器</span><br>s.size()        <span class="hljs-comment">//  集合中元素的数目</span><br>s.swap()        <span class="hljs-comment">//  交换两个集合变量</span><br>s.upper_bound() <span class="hljs-comment">//  返回大于某个值元素的迭代器</span><br>s.value_comp()  <span class="hljs-comment">//  返回一个用于比较元素间的值的函数</span><br></code></pre></td></tr></table></figure>
<h2 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h2><p>multiset（多重集合）</p>
<p><strong>与set的区别</strong>: </p>
<ul>
<li>多重集合与集合的区别在于集合中 <strong>不能</strong> 存在相同元素，而多重集合中可以存在。</li>
<li>multiset和set的基本操作相似，需要注意的是，集合的count()能返回0（无）或者1（有），而多重集合是有多少个返回多少个。</li>
</ul>
<p><strong>使用</strong>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">multiset</span>&lt;<span class="hljs-keyword">int</span>&gt; s;<br><span class="hljs-built_in">multiset</span>&lt;<span class="hljs-keyword">double</span>&gt; ss;<br></code></pre></td></tr></table></figure>
<h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><p><strong>头文件</strong>:  <code>#include &lt;vector&gt;</code></p>
<p><strong>作用</strong>: vector(向量容器模板类) ， 以连续数组的方式储存元素序列 ， 一般作为动态数组来用，，动态增长储存空间，</p>
<p><strong>使用</strong>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; s;      <br><span class="hljs-comment">//  定义一个空的vector对象，存储的是int类型的元素</span><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">s</span><span class="hljs-params">(n)</span></span>;   <br><span class="hljs-comment">//  定义一个含有n个int元素的vector对象</span><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">s</span><span class="hljs-params">(first, last)</span></span>; <br><span class="hljs-comment">//  定义一个vector对象，并从由迭代器first和last定义的序列[first, last)中复制初值</span><br></code></pre></td></tr></table></figure>
<p>vector模版类需要两个模版参数，第一个参数是存储元素的数据类型，第二个参数是存储分配器的类型，其中第二个参数是可选的，如果不给出第二个参数，将使用默认的分配器。</p>
<p><strong>vector的基本操作</strong>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">s[i]                <span class="hljs-comment">//  直接以下标方式访问容器中的元素</span><br>s.front()           <span class="hljs-comment">//  返回首元素</span><br>s.back()            <span class="hljs-comment">//  返回尾元素</span><br>s.push_back(x)      <span class="hljs-comment">//  向表尾插入元素x</span><br>s.size()            <span class="hljs-comment">//  返回表长</span><br>s.empty()           <span class="hljs-comment">//  表为空时，返回真，否则返回假</span><br>s.pop_back()        <span class="hljs-comment">//  删除表尾元素</span><br>s.begin()           <span class="hljs-comment">//  返回指向首元素的随机存取迭代器</span><br>s.end()             <span class="hljs-comment">//  返回指向尾元素的下一个位置的随机存取迭代器</span><br>s.insert(it, val)   <span class="hljs-comment">//  向迭代器it指向的元素前插入新元素val</span><br>s.insert(it, n, val)<span class="hljs-comment">//  向迭代器it指向的元素前插入n个新元素val</span><br>s.insert(it, first, last)   <br><span class="hljs-comment">//  将由迭代器first和last所指定的序列[first, last)插入到迭代器it指向的元素前面</span><br>s.erase(it)         <span class="hljs-comment">//  删除由迭代器it所指向的元素</span><br>s.erase(first, last)<span class="hljs-comment">//  删除由迭代器first和last所指定的序列[first, last)</span><br>s.reserve(n)        <span class="hljs-comment">//  预分配缓冲空间，使存储空间至少可容纳n个元素</span><br>s.resize(n)         <span class="hljs-comment">//  改变序列长度，超出的元素将会全部被删除，如果序列需要扩展（原空间小于n），元素默认值将填满扩展出的空间</span><br>s.resize(n, val)    <span class="hljs-comment">//  改变序列长度，超出的元素将会全部被删除，如果序列需要扩展（原空间小于n），val将填满扩展出的空间</span><br>s.clear()           <span class="hljs-comment">//  删除容器中的所有元素</span><br>s.swap(v)           <span class="hljs-comment">//  将s与另一个vector对象进行交换</span><br>s.assign(first, last)<br><span class="hljs-comment">//  将序列替换成由迭代器first和last所指定的序列[first, last)，[first, last)不能是原序列中的一部分</span><br><br><span class="hljs-comment">//  要注意的是，resize操作和clear操作都是对表的有效元素进行的操作，但并不一定会改变缓冲空间的大小</span><br><span class="hljs-comment">//  另外，vector还有其他的一些操作，如反转、取反等，不再一一列举</span><br><span class="hljs-comment">//  vector上还定义了序列之间的比较操作运算符（&gt;、&lt;、&gt;=、&lt;=、==、!=），可以按照字典序比较两个序列。</span><br></code></pre></td></tr></table></figure>
<h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1>]]></content>
      <categories>
        <category>acm</category>
      </categories>
      <tags>
        <tag>acm</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>acm_java</title>
    <url>/2019/02/27/acm-java/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>有时会碰到一些大数的题，，python不怎么会，，用c++模板的话有太长了，，所以蹭着选修的Java，正好记录一下java在做题中的基本的使用，，</p>
<span id="more"></span>
<h1 id="基本的输入输出"><a href="#基本的输入输出" class="headerlink" title="基本的输入输出"></a>基本的输入输出</h1><h2 id="多组数据读到文件末"><a href="#多组数据读到文件末" class="headerlink" title="多组数据读到文件末"></a>多组数据读到文件末</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner input = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> a, b;<br>        <span class="hljs-keyword">while</span>(input.hasNextInt()) &#123;<br>            a = input.nextInt();<br>            b = input.nextInt();<br>            System.out.println(a+b);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="t组数据"><a href="#t组数据" class="headerlink" title="t组数据"></a>t组数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.math.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		Scanner input = <span class="hljs-keyword">new</span> Scanner(System.in);<br>		<span class="hljs-keyword">int</span> t, a, b;<br>		t = input.nextInt();<br>		<span class="hljs-keyword">while</span>(t &gt; <span class="hljs-number">0</span>) &#123;<br>			--t;<br>			a = input.nextInt();<br>			b = input.nextInt();<br>			System.out.println(a + b);<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="读到输入的数字都为零时"><a href="#读到输入的数字都为零时" class="headerlink" title="读到输入的数字都为零时"></a>读到输入的数字都为零时</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.math.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		Scanner input = <span class="hljs-keyword">new</span> Scanner(System.in);<br>		<span class="hljs-keyword">int</span> a, b;<br>		<span class="hljs-keyword">while</span>(input.hasNextInt()) &#123;<br>			a = input.nextInt();<br>			b = input.nextInt();<br>			<span class="hljs-keyword">if</span>(a == <span class="hljs-number">0</span> &amp;&amp; b == <span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>			System.out.println(a + b);<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="输入n个数，n为零结束"><a href="#输入n个数，n为零结束" class="headerlink" title="输入n个数，n为零结束"></a>输入n个数，n为零结束</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.math.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		Scanner input = <span class="hljs-keyword">new</span> Scanner(System.in);<br>		<span class="hljs-keyword">while</span>(input.hasNextInt()) &#123;<br>			<span class="hljs-keyword">int</span> n = input.nextInt();<br>			<span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>			<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>				<span class="hljs-keyword">int</span> t = input.nextInt();<br>				sum += t;<br>			&#125;<br>			System.out.println(sum);<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="字符的读入"><a href="#字符的读入" class="headerlink" title="字符的读入"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2000">字符的读入</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.math.*;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 31415926535x</span><br><span class="hljs-comment"> * acm_java</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		Scanner input = <span class="hljs-keyword">new</span> Scanner(System.in);<br>		String s;<br>		<span class="hljs-keyword">while</span>(input.hasNext()) &#123;<br>			s = input.nextLine();<br>			<span class="hljs-keyword">char</span>[]w = s.toCharArray();<br>			Arrays.sort(w);<br>			System.out.println(w[<span class="hljs-number">0</span>]+ <span class="hljs-string">&quot; &quot;</span> + w[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot; &quot;</span> + w[<span class="hljs-number">2</span>]);<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="大整数的使用"><a href="#大整数的使用" class="headerlink" title="大整数的使用"></a>大整数的使用</h1><p>用java 的一个重要原因应该就是使用它的大数类了吧，，，<br>基本的输入输出使用：</p>
<h2 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.math.*;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 31415926535x</span><br><span class="hljs-comment"> * acm_java</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		Scanner input = <span class="hljs-keyword">new</span> Scanner(System.in);<br>		<span class="hljs-keyword">int</span> t = input.nextInt();<br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= t; ++i)&#123;<br>			BigInteger a = input.nextBigInteger();<br>			BigInteger b = input.nextBigInteger();<br>			System.out.println(<span class="hljs-string">&quot;Case &quot;</span> + i + <span class="hljs-string">&quot;:&quot;</span>);<br>			System.out.println(a + <span class="hljs-string">&quot; + &quot;</span> + b + <span class="hljs-string">&quot; = &quot;</span> + a.add(b));<br>			<span class="hljs-keyword">if</span>(i &lt; t)System.out.println();<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.math.*;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 31415926535x</span><br><span class="hljs-comment"> * acm_java</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		Scanner input = <span class="hljs-keyword">new</span> Scanner(System.in);<br>		<span class="hljs-keyword">while</span>(input.hasNext()) &#123;<br>			BigInteger a = input.nextBigInteger();<br>			BigInteger b = input.nextBigInteger();<br>			System.out.println(a.multiply(b));<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="实数"><a href="#实数" class="headerlink" title="实数"></a>实数</h1><p>整数结果去除小数点后的零，然后转成字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.math.*;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 31415926535x</span><br><span class="hljs-comment"> * acm_java</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		Scanner input = <span class="hljs-keyword">new</span> Scanner(System.in);<br>		<span class="hljs-keyword">while</span>(input.hasNext()) &#123;<br>			BigDecimal a = input.nextBigDecimal();<br>			BigDecimal b = input.nextBigDecimal();<br>			System.out.println(a.add(b).stripTrailingZeros().toPlainString());<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/nickwong_/article/details/48035317">剩下的一些东西</a></p>
]]></content>
      <tags>
        <tag>acm</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>acm总结</title>
    <url>/2018/12/15/acm%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>入的坑久了，，接触到的算法就多了起来，，做的题也多了，，但是记性却一点一不好</p>
<p>渐渐发现好多题当时弄懂了，，代码也写好了，，博客上做了笔记，，可是最后随着时间的推移，，再熟悉的算法，模型，套路也忘记了，，再去翻之前的文章有太费事，，</p>
<p>所以这篇文章主要是记录一下见到的每种算法以及解法思路，，为了以后忘记了能够快速想起来，，同时也是其一个记录的功能吧(っ・Д・)っ</p>
<p>大致的格式就是“算法-&gt;题目-&gt;思路”,,,,</p>
<p>貌似是一个大坑Σ(*ﾟдﾟﾉ)ﾉ</p>
<span id="more"></span>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="各种树"><a href="#各种树" class="headerlink" title="各种树"></a>各种树</h2><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><h4 id="一般的线段树"><a href="#一般的线段树" class="headerlink" title="一般的线段树"></a>一般的线段树</h4><h4 id="带区间延迟更新的线段树"><a href="#带区间延迟更新的线段树" class="headerlink" title="带区间延迟更新的线段树"></a>带区间延迟更新的线段树</h4><h4 id="非递归的线段树"><a href="#非递归的线段树" class="headerlink" title="非递归的线段树"></a>非递归的线段树</h4><h4 id="可持久化线段树（这个还没看QAQ"><a href="#可持久化线段树（这个还没看QAQ" class="headerlink" title="可持久化线段树（这个还没看QAQ)"></a>可持久化线段树（这个还没看QAQ)</h4><h4 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h4><ul>
<li>貌似树状数组的常数比线段树的常数小，，有些卡常数的题可能换树状数组好一些（区间更新没看）QAQ</li>
</ul>
<h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><h3 id="存图的方法"><a href="#存图的方法" class="headerlink" title="存图的方法"></a>存图的方法</h3><h4 id="邻接矩阵："><a href="#邻接矩阵：" class="headerlink" title="邻接矩阵："></a>邻接矩阵：</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//直接一个二维矩阵，edge[u][v]表示边u-&gt;v的权值</span><br><span class="hljs-keyword">int</span> edge[maxn][maxn];<br></code></pre></td></tr></table></figure>
<h4 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//这种用的很多</span><br><span class="hljs-comment">//1.</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v;<br>    <span class="hljs-keyword">int</span> c;<br>    edge(<span class="hljs-keyword">int</span> _v, <span class="hljs-keyword">int</span> _c = <span class="hljs-number">0</span>):v(_v), c(_c)&#123;&#125;<br>&#125;;<br><span class="hljs-built_in">vector</span>&lt;edge&gt; e[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, itn w)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[u].push_back(edge(v, w));<br>&#125;<br><br><span class="hljs-comment">//2.</span><br><span class="hljs-comment">//适合无权的图</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; &gt; edge;<br><span class="hljs-comment">//addedge:</span><br>edge.push_back(<span class="hljs-built_in">make_pair</span>(u, v));<br><span class="hljs-comment">//遍历</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; edge.size(); ++i)<br>&#123;<br>    <span class="hljs-keyword">int</span> u = edge[i].first;<br>    <span class="hljs-keyword">int</span> v = edge[i].second;<br>    ...<br>&#125;<br><br><span class="hljs-comment">//3.</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; edge[maxn];<br></code></pre></td></tr></table></figure>
<h4 id="链式前向星"><a href="#链式前向星" class="headerlink" title="链式前向星"></a>链式前向星</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//这种很多的板子都是用这个是实现的</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, next, cap, flow;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> tol;<br><span class="hljs-keyword">int</span> head[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tol = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> rw = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tol].to = v; edge[tol].cap = w; edge[tol].flow = <span class="hljs-number">0</span>;<br>    edge[tol].next = head[u]; head[u] = tol++;<br>    ...<br>&#125;<br><span class="hljs-comment">//遍历</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; ++i)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = edge[i].to;<br>        ...<br>    &#125;<br></code></pre></td></tr></table></figure>
<h3 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h3><ul>
<li>主要算法有dijkstra , bellmon , spfa , floyd</li>
<li>spfa据说会退化到$O(n^2)$(有待求证)</li>
<li>floyd可以求矩阵、图的传递闭包<a href="https://vjudge.net/contest/261463#status/31415926535x/I/0/">here</a></li>
<li>前面那三个算法都是求得单源最短路，，也就是一个点到一堆点的最短路,，，而要求一堆点到一个点的最短路可以将路径反向后跑一边单源最短路，，也就是求逆图的最短路，，，存图的方法选择邻接矩阵好一些，，，<a href="https://blog.csdn.net/zwj1452267376/article/details/50518209">here</a></li>
</ul>
<h3 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h3><h4 id="最大流最小割"><a href="#最大流最小割" class="headerlink" title="最大流最小割"></a>最大流最小割</h4><ul>
<li>解决最大流的常用算法：dinic , sap , isap,,,记得敲板子认真，，，异或取边，，遍历边等等</li>
<li>最大流最小割定理：一个网络的最大流也等于其最小割；</li>
</ul>
<h4 id="最大权闭合子图"><a href="#最大权闭合子图" class="headerlink" title="最大权闭合子图"></a>最大权闭合子图</h4><ul>
<li>一般是求n选一可以得到一些利益而在一些特殊情况下可以得到更多的利益的问题就可能使用网络流求解，，对于冲突情况的处理是添加一条inf的边，，如果正向不好求那么反向求，，总收益渐去最小代价，，也就是最大权闭合子图的问题，，<a href="https://www.luogu.org/problemnew/solution/P4313">例题1</a>,,<a href="https://codeforces.com/contest/1082/submission/47022828">例题2</a>,,,</li>
</ul>
<h3 id="强连通分量"><a href="#强连通分量" class="headerlink" title="强连通分量"></a>强连通分量</h3><ul>
<li>解决强连通分量的通常算法为Tarjan，Kosaraju不怎么用</li>
<li>使用强连通分量的主要用途除了求图的强连通分量（将同一分量的点染色为同一个编号的点）外，可以先求图的强连通分量后“缩点”（编号相同的看作一点），将原图转化为DAG图（有向无环图）；</li>
<li><a href="http://poj.org/problem?id=2186">例题1</a>，，</li>
</ul>
<h2 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h2><h2 id="特殊的算法"><a href="#特殊的算法" class="headerlink" title="特殊的算法"></a>特殊的算法</h2><h2 id="codeforces上的"><a href="#codeforces上的" class="headerlink" title="codeforces上的"></a>codeforces上的</h2><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><ul>
<li>二进制甚至是n进制的思想，很重要啊，，bitmarks<a href="https://codeforces.com/contest/1117/problem/E">就比如说这个</a></li>
<li>线性递推方程可以使用 <strong>矩阵快速幂加速</strong> 或者直接上 <strong>杜教筛</strong>,,<a href="https://codeforces.com/contest/1117/problem/D">例如</a></li>
</ul>
<h2 id="奇技淫巧"><a href="#奇技淫巧" class="headerlink" title="奇技淫巧"></a>奇技淫巧</h2><h3 id="stl"><a href="#stl" class="headerlink" title="stl"></a>stl</h3><h4 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h4><p>vector<int> a;</p>
<ul>
<li>sort(a.begin(), a.end()); //升序排序</li>
<li>sort(a.rbegin(), a.rend()); //降序排序</li>
</ul>
<h4 id="lower-bound-upper-bound-，，"><a href="#lower-bound-upper-bound-，，" class="headerlink" title="lower_bound(), upper_bound()，，"></a>lower_bound(), upper_bound()，，</h4><p>二分查找值的上下界，，</p>
<h3 id="读入问题上"><a href="#读入问题上" class="headerlink" title="读入问题上"></a>读入问题上</h3><h4 id="快读"><a href="#快读" class="headerlink" title="快读"></a>快读</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span>   <span class="hljs-comment">//快读</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))<br>        ch=getchar();<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))<br>        ans=(ans&lt;&lt;<span class="hljs-number">3</span>)+(ans&lt;&lt;<span class="hljs-number">1</span>)+(ch^<span class="hljs-number">48</span>),ch=getchar();<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="标准读入"><a href="#标准读入" class="headerlink" title="标准读入"></a>标准读入</h4><ul>
<li>要么就只用 <code>scanf()</code> 和 <code>printf()</code></li>
<li>要么就用关闭同步的 <code>cin</code> 和 <code>cout</code></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>acm</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>c++调试在容器释放内存时报Unknown Signal 或 Trace/breakpoint trap异常</title>
    <url>/2019/09/11/c++%E8%B0%83%E8%AF%95%E5%9C%A8%E5%AE%B9%E5%99%A8%E9%87%8A%E6%94%BE%E5%86%85%E5%AD%98%E6%97%B6%E6%8A%A5Unknown-Signal-%E6%88%96-Trace-breakpoint-trap%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>在做一道题时，用到的板子中出现了很多的容器的使用，，一开始都是开MAXN大小的容器，，但是有几率出现程序运行完后不正常退出，，</p>
<p>在多次尝试断点调试后，发现主要的异常是程序在结束时，要进行资源的释放，，但是可能空间开的MAXN和使用的不匹配，就会出现未知错误，，或者是 Trace/breakpoint trap 异常，，把申请时的 <code>vector&lt;edge&gt; g[MAXN]</code> 改为 <code>vector&lt;edge&gt; g[MAXN + 10]</code> 就行了，，</p>
<p><a href="https://bbs.csdn.net/topics/392565423">参考</a></p>
]]></content>
      <tags>
        <tag>报错</tag>
        <tag>解决方法</tag>
      </tags>
  </entry>
  <entry>
    <title>chrome PC 自定义字体作死改变之后的恢复方法</title>
    <url>/2018/09/06/chrome-PC-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93%E4%BD%9C%E6%AD%BB%E6%94%B9%E5%8F%98%E4%B9%8B%E5%90%8E%E7%9A%84%E6%81%A2%E5%A4%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>2018.9.6</p>
<p>今天一不小心把chrome的自定义字体改变了，，，</p>
<p>然后发现原来的自定义设置没了！！！！没了，，，</p>
<p><img src="https://i.imgur.com/4quDbHM.png" alt=""></p>
<span id="more"></span>
<p>一脸懵逼，，，各种百度谷歌，，发现没有一个有用，，，</p>
<p>而且重装的话还要把所有的插件清掉，，，</p>
<p>及其懒得我选择放弃这种方法，，，，</p>
<p>然后我试着把chrome默认数据的配置文件删掉，，，</p>
<p>发现还是没有用，，，当把另一个Secure Preferences文件删掉，，，</p>
<p><img src="https://i.imgur.com/LOzRCHG.png" alt=""></p>
<p>再打开chrome就是第一次用的时候那样了，，，</p>
<p>自定义字体也是默认的，，，嘿嘿嘿，，，</p>
]]></content>
      <categories>
        <category>chrome大法</category>
      </categories>
      <tags>
        <tag>chrome</tag>
        <tag>报错解决方法</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforces-1080C</title>
    <url>/2018/11/25/codeforces-1080C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><a href="https://codeforces.com/problemset/problem/1080/C">昨天正好有时间，做了自己第一场的cf</a></p>
<p>做完AB之后被C卡到最后，，，从来没做过坐标平面上两个矩形的面积和，，，因为存在相交的可能，，，所以要单独的处理矩形面积交，，然后自己就写懵了，，，当时写了几十行的if判断，，，，到最后都没弄完，，QAQ</p>
<span id="more"></span>
<h1 id="题意与分析"><a href="#题意与分析" class="headerlink" title="题意与分析"></a>题意与分析</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>这道题的题意就是给你一个n <em> m大的方格板子，，类似国际象棋那样，，黑白相间，，然后再给你两个矩形，，第一个矩形内的所有格子涂为白色，，第二个涂为黑色，，，问你最后白格子和黑格子的数量，，棋盘的大小可能是1e9 </em> 1e9的，，，</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="我的思路"><a href="#我的思路" class="headerlink" title="我的思路"></a>我的思路</h3><ul>
<li>一开始我的思路是算出所有的白格子，黑格子的数量(wsum ,bsum)，，，然后wsum加上第一个矩形里的所有黑格子数量，，之后wsum减去第二个矩形里白格子的数量，，，最后再考虑是有面积的相交，，，有的话再计算相交矩形内的，，但是中间的一些细节，，，比如说如何计算不同左下角坐标的矩形内格子数，，如何判是否有相交的矩形，，如何计算相交的矩形内的格子数量以及怎么调整等等，，，以前从来没写过没考虑过，，，只能硬头皮的去一路if下去，，，到最后自己的写懵了，，，</li>
<li>中途想着直接模拟算了，，，维护一个大矩阵，，1表示白色0表示黑色，，然后对相应的矩形全部置一置零，，，最后求01的数量，，，然后发现根本开不了那么大的数组，，，，QAQ</li>
</ul>
<h3 id="最后今天看了出题人的题解，，，"><a href="#最后今天看了出题人的题解，，，" class="headerlink" title="最后今天看了出题人的题解，，，"></a><a href="https://codeforces.com/blog/entry/63436#comment-473595">最后今天看了出题人的题解，，，</a></h3><h4 id="矩形-1-1-x-y-内白格子的数量的计算"><a href="#矩形-1-1-x-y-内白格子的数量的计算" class="headerlink" title="矩形(1 , 1 , x , y)内白格子的数量的计算"></a><strong>矩形(1 , 1 , x , y)内白格子的数量的计算</strong></h4><p>  $设函数w(x , y)返回值为左下角(1 , 1)与(x , y)的矩形内的白格子的数量$</p>
<h4 id="矩形内白格子数量的计算："><a href="#矩形内白格子数量的计算：" class="headerlink" title="矩形内白格子数量的计算："></a><strong>矩形内白格子数量的计算</strong>：</h4><p>  $任意一个矩形(x_1 , y_1 , x_2 , y_2)内的白格子数量=矩形(1 , 1 , x_2 , y_2)内白格子的数量-矩形(1 , 1 , x_1 , y_2)内白格子的数量-矩形(1 , 1 , x_2 , y_1)内白格子的数量+矩形(1 , 1 , x_1 - 1 , y_1 - 1)内白格子的数量，所以：$</p>
<script type="math/tex; mode=display">W(x_1 , y_1 , x_2 , y_2) = w(x_1 , y_1) - w(x_1 - 1 , y_2) - w(x_2 , y_1 - 1) + w(x_1 - 1 , y_1 - 1)</script><h4 id="矩形内黑格子数量的计算"><a href="#矩形内黑格子数量的计算" class="headerlink" title="矩形内黑格子数量的计算"></a><strong>矩形内黑格子数量的计算</strong></h4><script type="math/tex; mode=display">B(x_1 , y_1 , x_2 , y_2) = (x_2 - x_1 + 1) * (y_2 - y_1 + 1) - W(x_1 , y_1 , x_2 , y_2)</script><h4 id="相交部分的判断和处理"><a href="#相交部分的判断和处理" class="headerlink" title="相交部分的判断和处理"></a><strong>相交部分的判断和处理</strong></h4><p>  出题人说<strong>显然</strong>（我(／‵Д′)／~ ╧╧）如果不存在相交矩形，，那么一定满足</p>
<script type="math/tex; mode=display">max(x_1 , x_3)>min(x_2 , x_4) \ \ or\ \  max(y_1,y_3)>min(y_2,y_4)</script><p>  所以反命题就是如果存在相交举证即使上面那个判断取反，，同时相交矩形的坐标是</p>
<script type="math/tex; mode=display">(max(x_1 , x_3) \ , \ max(y_1 , y_3)\ ,\ min(x_2,x_4)\ ,\ min(y2 , y_4))</script><p>  有了这些，，我们就可以算出相交矩形内原来的白色、黑色的格子了（就是不考虑第一个第二个矩形影响时的数量），，</p>
<p>  因为在第一个矩形里将相交矩形内的黑格子变成了白色，，现在又要变成黑色，，所以wsum（白色格子的数量）要减去黑色的数量（白色的数量已经在计算第二个矩形时减去了，，所以对于wsum是减去了相交矩形的所有格子数量），，同时黑色格子的数量bsum要加上黑色的数量，，而计算第二个矩形时相交矩形里的白色已经加上了，，，相当于加上了整个相交矩形的格子数量，，（拿笔画一下这个步骤就更清楚了）</p>
<h4 id="w-x-y-的实现"><a href="#w-x-y-的实现" class="headerlink" title="w(x , y)的实现"></a><strong>w(x , y)的实现</strong></h4><p>  首先我们定义这样排列的黑白格子为<strong>类型1</strong></p>
<p>  <img src="https://codeforces.com/predownloaded/d8/6e/d86e87a66d47ec694dd7dfe9b27c72c68ce27d9d.png" alt=""><br>  而这样的是<strong>类型2</strong><br>  <img src="https://codeforces.com/predownloaded/5e/f8/5ef88f2dba40d4f7f22774404f8c502bd950a68e.png" alt=""></p>
<ul>
<li><p>行数n为<strong>偶数</strong>时，类型1类型2的数量是对半的，即$\frac n2$,</p>
</li>
<li><p>行数n为<strong>奇数</strong>时，<strong>类型1</strong>的数量是$\lfloor{\frac n2}\rfloor$ （向下取整，直接除就行），，<strong>类型2</strong>的数量是$\lceil{\frac n2}\rceil$（向上取整，有余数时加一个）</p>
<p>因为行数n为偶数时类型1的数量和类型2数量相等，也就是说$\lfloor{\frac n2}\rfloor$=$\lceil{\frac n2}\rceil$，，所以，，我们就不管行数是不是偶数奇数了，，，直接<strong>类型1</strong>数量=$\lfloor{\frac n2}\rfloor$，<strong>类型2</strong>数量=$\lceil{\frac n2}\rceil$，，，（数学真好玩.jpg，，，想想我当时为了判断行数的奇偶分情况讨论，，写吐ed，，(#`Д´)ﾉ）</p>
<p>按照这个思路，，，同样列数m也就可以这样计算了，，，<br>即<strong>类型1</strong>的数量=$\lfloor{\frac m2}\rfloor$，，<strong>类型2</strong>的数量=$\lceil{\frac m2}\rceil$..</p>
<p>有了这两个，，我们就可以计算矩形(x , y)内了白色格子的数量了，，，</p>
<script type="math/tex; mode=display">w(x , y) = \lceil{\frac n2}\rceil \cdot \lceil{\frac m2}\rceil + \lfloor{\frac n2}\rfloor \cdot \lfloor{\frac m2}\rfloor</script></li>
</ul>
<h4 id="向上取整的实现"><a href="#向上取整的实现" class="headerlink" title="向上取整的实现"></a><strong>向上取整的实现</strong></h4><p>  这道题除了让我知道矩形交的处理，，，还有一个从好几个大佬的代码中我看到了几个好的求向上取整的代码，，，不像我那样傻傻的if判断(╬☉д⊙)</p>
  <figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">ll <span class="hljs-title">cdiv</span><span class="hljs-params">(ll a , llb)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a / b + (a % b &gt; <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-comment">//or</span><br><span class="hljs-function">ll <span class="hljs-title">cdiv</span><span class="hljs-params">(ll a , ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (a + b - <span class="hljs-number">1</span>) / b;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-comment">//ceiling div</span><br><span class="hljs-function">ll <span class="hljs-title">cdiv</span><span class="hljs-params">(ll a , ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a / b + (a % b &gt; <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">ccdiv</span><span class="hljs-params">(ll a , ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (a + b - <span class="hljs-number">1</span>) / b;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">w</span><span class="hljs-params">(ll x , ll y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> cdiv(x , <span class="hljs-number">2</span>) * cdiv(y , <span class="hljs-number">2</span>) + (x / <span class="hljs-number">2</span>) * (y / <span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">wsum</span><span class="hljs-params">(ll x1 , ll y1 , ll x2 , ll y2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> w(x2 , y2) - w(x1 - <span class="hljs-number">1</span> , y2) - w(x2 , y1 - <span class="hljs-number">1</span>) + w(x1 - <span class="hljs-number">1</span> , y1 - <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">bsum</span><span class="hljs-params">(ll x1 , ll y1 , ll x2 , ll y2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (x2 - x1 + <span class="hljs-number">1</span>) * (y2 - y1 + <span class="hljs-number">1</span>) - wsum(x1 , y1 , x2 , y2);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//freopen(&quot;233.txt&quot; , &quot;r&quot; , stdin);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        ll n , m;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>        ll x1 , x2 , x3 , x4 , y1 , y2 , y3 , y4;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; x3 &gt;&gt; y3 &gt;&gt; x4 &gt;&gt; y4;<br>        ll w = wsum(<span class="hljs-number">1</span> , <span class="hljs-number">1</span> , m , n);<br>        ll b = bsum(<span class="hljs-number">1</span> , <span class="hljs-number">1</span> , m , n);<br>        <span class="hljs-comment">//first rec</span><br>        w = w + bsum(x1 , y1 , x2 , y2);<br>        b = b - bsum(x1 , y1 , x2 , y2);<br>        <span class="hljs-comment">//second rec(dont consider the itersection</span><br>        w = w - wsum(x3 , y3 , x4 , y4);<br>        b = b + wsum(x3 , y3 , x4 , y4);<br>        <span class="hljs-comment">//consider the itersection</span><br>        <span class="hljs-keyword">if</span>(max(x1 , x3) &lt;= min(x2 , x4) &amp;&amp; max(y1 , y3) &lt;= min(y2 , y4))<br>        &#123;<br>            w = w - bsum(max(x1 , x3) , max(y1 , y3) , min(x2 , x4) , min(y2 , y4));<br>            b = b + bsum(max(x1 , x3) , max(y1 , y3) , min(x2 , x4) , min(y2 , y4));<br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; w &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li>一直不怎么会的向上取整、矩形面积交等等问题算是了解了，，，至少不会在出现的时候啥都不知道，，只能从头分析，，，一个劲的堆if了(-`ェ´-╬)</li>
<li>cf真好玩.jpg，，，以为会第一发只能灰名，，没想到青了，，，就是深夜场太多，，，不然能天天打，，，，</li>
<li>这种代码不多的题锻炼锻炼思维很不错啊，，，毕竟现在纯套板子的题在各种比赛中是越来越少了，，，，</li>
</ul>
<p>(end)</p>
]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforces_1092c</title>
    <url>/2018/12/24/codeforces-1092c/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><a href="https://codeforces.com/contest/1092/problem/C">一道有关字符串前缀后缀的题</a>，，，自己迟早要坑在这字符串的题上，，，一看到这样的题，，不管简单还是难一些的心里就发怵，， 明明思路是对的，，总是莫名其妙的wa,,wa,,,wa,,,,,,</p>
<span id="more"></span>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>题意很简单，，就是给你一个串的所有前缀串和它的后缀串，，，然后让你判断这些串可能是那种串，，，</p>
<p>首先肯定是要求出原串嘛，，，不然怎么判断，，，因为有两个长度为n-1的串和两个长度为1的串，，所以可以由此来得出原串，，，但是就是这里，，，我寻找原串写崩了，，，一直wa，，，，QAQ，，，，最后还是看了别人的思路，，，直接不寻找原串，，，对于每一种可能可原串都求一下答案，，，要是某个子串既不是前缀串又不是后缀串，，，那么就说明这个可能的原串不对，，换下一个，，直到碰到符合的原串，，输出之后终止程序，，，</p>
<ul>
<li>string 里的 <code>find()</code> 函数可以寻找第一与子串匹配的坐标(从零开始)，，<code>rfing()</code>可以寻找最后一个与子串匹配的坐标。。。</li>
</ul>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-comment">//#include &lt;cstdio&gt;</span><br><span class="hljs-comment">//#include &lt;cstdlib&gt;</span><br><span class="hljs-comment">//#include &lt;string.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">strings</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-built_in">string</span> s;<br>    <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> strings &amp;r)<span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> s.size() &lt; r.s.size();<br>    &#125;<br>&#125;str[<span class="hljs-number">300</span>];<br><span class="hljs-keyword">char</span> ans[<span class="hljs-number">300</span>];<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n - <span class="hljs-number">2</span>; i += <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(s.find(str[i].s) == <span class="hljs-number">0</span> &amp;&amp; s.rfind(str[i + <span class="hljs-number">1</span>].s) == n - str[i + <span class="hljs-number">1</span>].s.length())<br>        &#123;<br>            ans[str[i].id] = <span class="hljs-string">&#x27;P&#x27;</span>;<br>            ans[str[i + <span class="hljs-number">1</span>].id] = <span class="hljs-string">&#x27;S&#x27;</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(s.rfind(str[i].s) == n - str[i].s.length() &amp;&amp; s.find(str[i + <span class="hljs-number">1</span>].s) == <span class="hljs-number">0</span>)<br>        &#123;<br>            ans[str[i].id] = <span class="hljs-string">&#x27;S&#x27;</span>;<br>            ans[str[i + <span class="hljs-number">1</span>].id] = <span class="hljs-string">&#x27;P&#x27;</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n - <span class="hljs-number">2</span>; ++i)<br>        <span class="hljs-built_in">cout</span> &lt;&lt; ans[i];<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.txt&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-built_in">string</span> pre , suf , t[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n - <span class="hljs-number">2</span>; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; str[i].s;<br>        str[i].id = i;<br>    &#125;<br><br>    sort(str + <span class="hljs-number">1</span> , str + <span class="hljs-number">1</span> + <span class="hljs-number">2</span> * n - <span class="hljs-number">2</span>);<br><br>    get(str[<span class="hljs-number">1</span>].s + str[<span class="hljs-number">2</span> * n - <span class="hljs-number">2</span>].s);<br>    get(str[<span class="hljs-number">1</span>].s + str[<span class="hljs-number">2</span> * n - <span class="hljs-number">3</span>].s);<br>    get(str[<span class="hljs-number">2</span>].s + str[<span class="hljs-number">2</span> * n - <span class="hljs-number">2</span>].s);<br>    get(str[<span class="hljs-number">2</span>].s + str[<span class="hljs-number">2</span> * n - <span class="hljs-number">3</span>].s);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>菜到哭😭QAQ</p>
<p><img src="https://img2018.cnblogs.com/blog/1028485/201812/1028485-20181224195910236-1750263669.png" alt=""></p>
]]></content>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforces-1102e</title>
    <url>/2019/02/26/codeforces-1102e/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p><a href="https://codeforces.com/problemset/problem/1102/E">这道题很锻炼思维</a>，，是到好题，，就是我不在状态，，没看出来线段间的关系，，学会了求一个区间里相同元素看作一个线段的总的线段的数量的方法，，用map保存最远的元素，遍历寻找判断就行了。。。</p>
<span id="more"></span>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>题意是给你一个数组a，，让你构造一个数组b，，数组b满足的条件是：</p>
<ul>
<li>$b_1=0$，</li>
<li>数组b是一个不下降的序列，，</li>
<li>对于 $a[i]=a[j]$ 的情况要使得 $b[i]=b[j]$，，，</li>
</ul>
<p>求b的可能的种类数</p>
<p>一开始我把它当成纯数学题，，然后想要找出一个可能的公式，，最后情况太多，判断麻烦放弃了，，，</p>
<p>官方的题解也没看进去，，，（主要是第一看到这个思路时没明白那个线段是干啥的，，）</p>
<p>后来看了<a href="https://zhanghuimeng.github.io/post/codeforces-1102e-monotonic-renumeration/">这个人的思路</a>，，</p>
<p>大概思路如下：</p>
<p>因为最后的b是一个不下降序列，，所以当 $a[i]=a[j]$ 时，，必然有 $b[i]=b[i+1]=,,,,=b[j]$，，，</p>
<p>也就是说对于a中相等的两个元素对应的b之间都是一段相等的元素，，，</p>
<p>通过这个思路，我们可以求a中可以用两个相同的元素划分成多少个线段（有重叠的线段要合并为一个，，这一段的元素都相同）</p>
<p>为啥要求线段的数量 $ans$ 呢，，因为b要满足的第三个条件中可以看出两个相邻的且 $a[i] \ne a[j]$ 的 $b[i],b[j]$ 只有两种取值，，又因为线段内的取值相同，，所以b的情况就是 $2^{ans-1}$了，，，</p>
<p>eg：$a={1,2,1,2,3}$ 中1对应的线段是{1,2,1}, 2对应的线段是 {2,1,2} 还有 {3}，，因为有重叠，，合并后的就是{1,2,1,2},{3}，，种类数就是 $2^{2-1}$个</p>
<p>那么怎么求线段数呢，，</p>
<p>我们可以先假设每个数都自成一个线段，那么就一共有ans=n个，，然后对于每一个大的线段的合并就是 $ans-=(线段的左端点-线段的右端点)当a[i]=a[j]时，也就是ans-=(j-i)$</p>
<p>左端点可以遍历整个数组，，右端点就用map保存每个数最右的位置，，从左向右遍历一下就可以保证每个数的最右边的位置，，，这样当我们与当前遍历的点相同的点可能有一个右端点的时候，，说明现在遍历的位置和那个点之间可以构成一个线段，，减去中间的线段的数量就行了，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//cf</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-comment">//#include &lt;cstdio&gt;</span><br><span class="hljs-comment">//#include &lt;cstdlib&gt;</span><br><span class="hljs-comment">//#include &lt;string.h&gt;</span><br><span class="hljs-comment">//#include &lt;algorithm&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-keyword">inline</span> ll _pow(ll a, ll b, ll p = <span class="hljs-number">998244353</span>)<br>&#123;<br>    ll ret = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b &amp; <span class="hljs-number">1</span>)ret = (ret * a) % p;<br>        a = (a * a) % p;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">int</span> n; <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; mp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)mp[a[i]] = i;<br>    <span class="hljs-keyword">int</span> index = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> ans = n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        index = max(index, i);<br>        <span class="hljs-keyword">if</span>(mp[a[i]] &gt; index)<br>        &#123;<br>            ans -= (mp[a[i]] - index);<br>            index = mp[a[i]];<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; _pow(<span class="hljs-number">2</span>, ans - <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>溜了溜了，，贼困今天，，，<br>(end)</p>
]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>class</title>
    <url>/2018/03/10/class/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h3 id="2018-3-22-19-22-完"><a href="#2018-3-22-19-22-完" class="headerlink" title="2018.3.22/19.22(完)"></a>2018.3.22/19.22(完)</h3><blockquote>
<p>不愤不启 ，不悱不发 ， 举一隅 ， 不以三隅反 ， 则不复也</p>
</blockquote>
<h1 id="面向对象的特点："><a href="#面向对象的特点：" class="headerlink" title="面向对象的特点："></a>面向对象的特点：</h1><ul>
<li>抽象：指对具体问题（对象）进行概括，抽出一类对象的公共性质并加以描述的过程；包括<strong>数据抽象</strong>与<strong>行为抽象</strong>（或称功能抽象、代码抽象）；</li>
<li>封装：指将抽象得到的 数据 和 行为（功能）相结合，形成一个有机的整体，也就是将<strong>数据</strong>与<strong>操作数据的函数代码</strong>进行有机的结合，形成”类”，其中的数据和函数都是类的成员；</li>
<li>继承：（将特殊与一般的关系描述清楚，使得特殊概念之间既能共享一般的属性和行为，又能具有特殊的属性和行为）可以在保持原有 类 特性的基础上，进行更具体、更详尽的说明；</li>
<li>多态:指一段程序能够处理多种类型对象的能力，可以通过<strong>强制多态</strong>、<strong>重载多态</strong>、<strong>类型参数化多态</strong>、<strong>包含多态</strong>实现；</li>
</ul>
<p><br/></p>
<span id="more"></span>
<h1 id="类和对象："><a href="#类和对象：" class="headerlink" title="类和对象："></a><em>类和对象</em>：</h1><h2 id="类的定义："><a href="#类的定义：" class="headerlink" title="类的定义："></a>类的定义：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> 类名称 </span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>：<br>	外部接口<br><span class="hljs-keyword">protected</span>：<br>	保护型成员<br><span class="hljs-keyword">private</span>：<br>	私有成员<br>&#125;；<br></code></pre></td></tr></table></figure>
<h2 id="类成员的访问控制"><a href="#类成员的访问控制" class="headerlink" title="类成员的访问控制"></a>类成员的访问控制</h2><ul>
<li>对类成员的访问权限的控制，是通过<strong>设置成员的访问控制属性</strong>而实现的；</li>
<li>访问控制属性有: <strong>公有属性（public）</strong>、<strong>私有属性（private）</strong>、<strong>保护类型（protected）</strong>；</li>
<li><strong>公有属性</strong>定义了类的外部接口；</li>
<li><strong>私有成员</strong>只能被本类的成员函数访问，来自外部的任何访问都是非法的；</li>
<li><strong>保护类型成员</strong>的性质和私有成员的性质相似，其差别在于<strong>继承</strong>过程中对产生的新类影响不同；<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2></li>
<li>类实际上是一种抽象机制，他描述了一类事物的<strong>共同属性</strong>和<strong>行为</strong>；</li>
<li>类的对象就是该类的某一特定实体（实例）；</li>
<li>声明一个对象和声明一个一般变量相同：  <figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">类名 对象名；<br></code></pre></td></tr></table></figure></li>
<li><strong>对象所占据的内存空间只是用于存放数据成员，函数成员不在每个对象中储存副本，每个函数的代码在内存中只占据一份空间；</strong></li>
<li>数据成员的访问：  <figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">对象名.数据成员名<br></code></pre></td></tr></table></figure></li>
<li>函数成员的调用：  <figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">对象名.函数成员名(参数表)<br></code></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="类的成员函数"><a href="#类的成员函数" class="headerlink" title="类的成员函数"></a>类的成员函数</h2><ul>
<li>类的成员函数描述的是<strong>类的行为</strong>；<h3 id="成员函数的实现"><a href="#成员函数的实现" class="headerlink" title="成员函数的实现"></a>成员函数的实现</h3></li>
<li>函数的原型声明要写在类体中，原型说明了函数的<strong>参数表</strong>和<strong>返回值类型</strong>；</li>
<li>函数的具体实现是在类定义之外的；</li>
<li>实现成员函数是要指明类的名称:  <figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">返回值类型 类名::函数成员名 （参数表）<br>&#123;<br>	函数体<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="成员函数调用中的目的对象"><a href="#成员函数调用中的目的对象" class="headerlink" title="成员函数调用中的目的对象"></a>成员函数调用中的目的对象</h3></li>
<li>需使用” . “操作符指出调用所针对的对象，这一对象在本次调用中称为<strong>目的对象</strong>；</li>
<li>在<strong>成员函数</strong>中可以不使用” . “操作符直接引用目的对象的数据成员；</li>
<li>在成员函数中调用当前类的成员函数时，如果不使用” . “操作符，那么这一次调用所针对的仍是目的对象；</li>
<li>在成员函数中<strong>引用其他对象的属性和调用其它对象的方法时</strong>，都需要使用” . “操作符；</li>
<li>在类的成员函数中，既可以访问目的对象的私有成员，又可以访问当前类的其他对象的私有成员；（复制构造函数可能会用到…..）<h3 id="带默认形参值的成员函数"><a href="#带默认形参值的成员函数" class="headerlink" title="带默认形参值的成员函数"></a>带默认形参值的成员函数</h3></li>
<li><p>类成员函数的默认值，一定要写在<strong>类定义</strong>中，不能写在类定义之外的函数实现中；</p>
<h3 id="内联成员函数"><a href="#内联成员函数" class="headerlink" title="内联成员函数"></a>内联成员函数</h3></li>
<li>内联函数的声明：<strong>隐式声明</strong>与<strong>显示声明</strong>；</li>
<li><strong>隐式声明</strong> ： 将函数体直接放在类内；</li>
<li><strong>显式声明</strong> ： 在函数实现时在函数返回值类型前使用关键字：<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">inline</span> <br></code></pre></td></tr></table></figure>
；</li>
</ul>
<h1 id="构造函数和析构函数："><a href="#构造函数和析构函数：" class="headerlink" title="构造函数和析构函数："></a><em>构造函数和析构函数</em>：</h1><ul>
<li>对象之间的区别有：对象的名称（外在区别）、对象自身的属性值，数据成员的值（内在区别）；</li>
<li><strong>对象的初始化</strong> ： 在定义对象时进行的数据成员设置；</li>
</ul>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ul>
<li><strong>构造函数的作用</strong> : 在对象被创建时利用特定的值构造对象，将对象初始化为一个特定的状态；</li>
<li>构造函数也是类的一个成员函数，构造函数的函数名与类名相同，而且没有返回值，通常被声明为公有函数；</li>
<li>构造函数在对象被创建时被自动调用；</li>
<li><strong>默认构造函数</strong> ：调用时无需提供参数的构造函数；若类中没有写构造函数时，编译器会自动生成一个隐含的默认构造函数，构造函数的参数列表和函数体皆为空；</li>
<li>构造函数可以直接访问类的所有数据成员，可以是内联函数，可以带有参数表，可以带有默认的形参值，也可以重载；<h2 id="复制构造函数"><a href="#复制构造函数" class="headerlink" title="复制构造函数"></a>复制构造函数</h2></li>
<li>复制构造函数是一种特殊的构造函数，具有一般构造函数的所有特性，<strong>其形参是本类的对象的引用</strong>；</li>
<li>复制构造函数的作用 ：使用一个已经存在的对象（由复制构造函数的形参指定），去初始化同类的一个新对象；</li>
<li>隐含的复制构造函数的功能 ： 把初始值对象的每一个数据成员的值都复制到新建立的对象中，同类对象的复制；</li>
<li><strong>声明和实现复制构造函数的方法</strong>:<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> 类名</span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>	类名 (形参表);			<span class="hljs-comment">//构造函数</span><br>	类名 (类名 &amp; 对象名);		<span class="hljs-comment">//复制构造函数</span><br>	...<br><br>&#125;;<br><br>类名 :: 类名 (类名 &amp; 对象名)	<span class="hljs-comment">//复制构造函数的实现</span><br>&#123;<br>	函数体<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="复制构造函数被调用的情况："><a href="#复制构造函数被调用的情况：" class="headerlink" title="复制构造函数被调用的情况："></a><strong>复制构造函数被调用的情况：</strong></h3><ul>
<li><p>当用类的一个对象去初始化该类的另一个对象时；</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">eg:<br><span class="hljs-function">Point <span class="hljs-title">a</span> <span class="hljs-params">( <span class="hljs-number">1</span> , <span class="hljs-number">2</span> )</span></span>;<br><span class="hljs-function">Point <span class="hljs-title">b</span> <span class="hljs-params">(a)</span></span>;		<span class="hljs-comment">//用对象a初始化对象b ， 复制构造函数被调用</span><br>Point c = a;		<span class="hljs-comment">//用对象a初始化对象c ， 复制构造函数被调用</span><br>					<span class="hljs-comment">//这两种初始化都能调用复制构造函数，只是形式不同</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>如果函数的形参时类的对象 ， 调用函数时 ， 进行形参和实参结合时：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">eg：<br><span class="hljs-keyword">void</span> (Point p)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; p.get() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-function">Point <span class="hljs-title">a</span> <span class="hljs-params">( <span class="hljs-number">1</span> , <span class="hljs-number">2</span> )</span></span>;<br>	f ( a );		<span class="hljs-comment">//函数的形参为类的对象 ， 当调用函数时 ， 复制构造函数被调用</span><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>如果函数的返回值时类的对象 ， 函数执行完成返回调用者时：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">eg:<br><span class="hljs-function">Point <span class="hljs-title">g</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-function">Point <span class="hljs-title">a</span> <span class="hljs-params">( <span class="hljs-number">1</span> , <span class="hljs-number">2</span> )</span></span>;<br>	<span class="hljs-keyword">return</span> a;		<span class="hljs-comment">//函数的返回值时类对象 ， 返回函数值时 ， 调用复制构造函数</span><br>&#125;<br>...<br>b = g();			<span class="hljs-comment">//此处会建立一个无名临时对象。。。</span><br>...<br></code></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><ul>
<li>用来完成对象被删除前的一些清理工作；</li>
<li>析构函数是在对象的生存期即将结束的时候被自动调用的，调用完成后，对象消失，<strong>相应的内存空间也被释放</strong>；</li>
<li>析构函数通常是类的公有函数成员，他的名称时由类名前加” ~ “构成 ，没有返回值；</li>
<li>析构函数不接受任何参数 ， 但可以是虚函数；</li>
<li>如果不进行显式说明 ， 系统会自动生成一个函数体为空的隐含析构函数；</li>
<li><strong>如果希望程序在对象被删除之前的时刻自动 （ 不需要人为的进行函数调用 ） 完成某些事情 ， 就可以把他们写到析构函数中</strong>；</li>
</ul>
<h1 id="类的组合"><a href="#类的组合" class="headerlink" title="类的组合"></a><em>类的组合</em></h1><h2 id="组合："><a href="#组合：" class="headerlink" title="组合："></a>组合：</h2><ul>
<li>解决复杂问题的有效方法就是将其层层分解为简单的问题的<strong>组合</strong>；</li>
<li>类的成员数据既可以是<strong>基本类型</strong>也可以是<strong>自定义类型</strong>，当然也可以是<strong>类的对象</strong>，由此可以采用部件组装的方法，利用已有的类的对象来构成新的类；</li>
<li><strong>类的组合</strong>描述的就是一个类内嵌其他类的对象作为成员的情况；他们之间的关系是包含与被包含的关系；</li>
<li><strong>当创建类的对象时，如果这个类具有内嵌对象成员，那么各个内嵌对象将首先被自动创建</strong>，<strong>因为部件对象是复杂对象的一部分，所以，在创建对象时既要对本类的基本类型数据成员进行初始化，又要对内嵌对象成员进行初始化</strong>；</li>
<li>组合类构造函数定义的一般形式：<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">类名 :: 类名 (形参表) : 内嵌对象<span class="hljs-number">1</span> (形参表) , 内嵌对象<span class="hljs-number">2</span> (形参表) ,......<br>&#123;<br>	类的初始化<br>&#125;<br>	<span class="hljs-comment">//&quot;内嵌对象1 (形参表) , 内嵌对象2 (形参表) ,......&quot;称作初始化列表 ， 作用是对内嵌对象的初始化；</span><br></code></pre></td></tr></table></figure></li>
<li>对基本类型的数据成员也可以这样初始化；</li>
<li><strong>在创建一个组合类的对象时，不仅它自身的构造函数的函数体将被执行，而且还将调用其内嵌对象的构造函数</strong> ，此时构造函数的调用顺序如下：<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">1.调用内嵌对象的构造函数 ， 调用顺序按照内嵌对象在组合类的定义中出现的次序；<span class="hljs-strong">**注意：内嵌对象在构造函数的初始化列表中出现的顺序与对象构造函数的调用顺序无关**</span>；<br>2.执行被类构造函数的函数体；<br></code></pre></td></tr></table></figure></li>
<li>析构函数的调用顺序与构造函数刚好相反；</li>
<li>组合类的<strong>复制构造函数</strong> ：需要为内嵌成员对象的复制构造函数传递参数：<figure class="highlight nim"><table><tr><td class="code"><pre><code class="hljs nim">//假设C类中包含B类的对象b作为成员 ， C类的复制构造函数的形式：<br>C :: C (C &amp;c1) : B (c1.b) <span class="hljs-meta">&#123;...&#125;</span><br></code></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="前向引用声明"><a href="#前向引用声明" class="headerlink" title="前向引用声明"></a>前向引用声明</h2><ul>
<li>两个类的相互引用成为循环依赖；</li>
<li>前向引用声明，是在引用为定义的类之前 ， 将该类的名字告诉编译器 ， 是编译器知道那是一个类名 ， 而类的完整定义可以在程序的其他地方 (类似函数的定义QAQ);</li>
<li>尽管使用了前向引用声明 ， 但在提供一个完整的类定义之前 ， 不能定义该类的对象 ， 也不能在内联成员函数中使用该类的对象 ， 即当使用前向引用声明时 ， 只能使用被声明的符号 ， 而不能涉及类的任何细节；</li>
</ul>
<h2 id="组合类的一个实例："><a href="#组合类的一个实例：" class="headerlink" title="组合类的一个实例："></a>组合类的一个实例：</h2><p><img src="https://i.imgur.com/OcEpTZQ.jpg" alt="1"><br><img src="https://i.imgur.com/7l6jYfh.jpg" alt="2"><br><img src="https://i.imgur.com/Slh1Fij.jpg" alt="3"></p>
<p><img src="https://i.imgur.com/AoC8mYQ.jpg" alt=""></p>
<blockquote>
<p>繁花似锦觅安宁 ， 淡云流水渡此生</p>
</blockquote>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>面向对象程序设计</tag>
        <tag>类</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforces-1111</title>
    <url>/2019/02/18/codeforces-1111/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p><a href="https://codeforces.com/contest/1111">codeforces 537 div2</a></p>
<h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><p>题意就是给你两个字符串，然后如果s,t的对应位上的字母要么都是元音，要么都是辅音，，就输出Yes反之输出No，，长度不等肯定输出的是No，，，</p>
<span id="more"></span>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-comment">//#include &lt;cstdio&gt;</span><br><span class="hljs-comment">//#include &lt;cstdlib&gt;</span><br><span class="hljs-comment">//#include &lt;string.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c = getchar(); <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; c = getchar();&#125;<br>    <span class="hljs-keyword">while</span>(c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = getchar();<br>    <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">char</span> a, <span class="hljs-keyword">char</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(a == <span class="hljs-string">&#x27;a&#x27;</span> || a == <span class="hljs-string">&#x27;e&#x27;</span> || a == <span class="hljs-string">&#x27;i&#x27;</span> || a == <span class="hljs-string">&#x27;o&#x27;</span> || a == <span class="hljs-string">&#x27;u&#x27;</span>)<br>        <span class="hljs-keyword">if</span>(b == <span class="hljs-string">&#x27;a&#x27;</span> || b == <span class="hljs-string">&#x27;e&#x27;</span> || b == <span class="hljs-string">&#x27;i&#x27;</span> || b == <span class="hljs-string">&#x27;o&#x27;</span> || b == <span class="hljs-string">&#x27;u&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b != <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; b != <span class="hljs-string">&#x27;e&#x27;</span> &amp;&amp; b != <span class="hljs-string">&#x27;i&#x27;</span> &amp;&amp; b != <span class="hljs-string">&#x27;o&#x27;</span> &amp;&amp; b != <span class="hljs-string">&#x27;u&#x27;</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>         <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">string</span> s, t;<span class="hljs-built_in">cin</span> &gt;&gt; s &gt;&gt; t;<br>    <span class="hljs-keyword">if</span>(s.length() != t.length())<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;No&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">int</span> len = s.length();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; ++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!check(s[i], t[i]))<br>            &#123;<br>                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;No&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><p>题意是给你n个数，有两种操作，一个是删除任意的一个数，另一个是将任意的一个数加一，，对于 <strong>每个数的操作</strong> 最多有k种，，总的操作数是m，，，然后问你m个操作后最大的平均值是多少，，</p>
<p>首先为了尽可能的增加平均数，要删除一些小的数，，暴力遍历可能删除的数的个数，，显然最多删除的个数是n-1或者是m，，所以遍历的边界是 <code>min(m, n - 1)</code>，，</p>
<p>然后依次删去最小的数（预先排序一下），，删掉这个数后，算一下此时剩下数的平均值，，，然后和上一次的结果比较一下，取最大就行</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-comment">//#include &lt;cstdio&gt;</span><br><span class="hljs-comment">//#include &lt;cstdlib&gt;</span><br><span class="hljs-comment">//#include &lt;string.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, ull&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span>   <span class="hljs-comment">//快读</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))<br>        ch=getchar();<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))<br>        ans=(ans&lt;&lt;<span class="hljs-number">3</span>)+(ans&lt;&lt;<span class="hljs-number">1</span>)+(ch^<span class="hljs-number">48</span>),ch=getchar();<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br>ll a[maxn];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    ll n, k, m;<br>    n = read(); k = read(); m = read();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)a[i] = read();<br>    sort(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n);<br>    ll sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)sum += a[i];<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ans = (<span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span>)(sum + min(k * n, m)) / (<span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span>)(n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= min(m, n - <span class="hljs-number">1</span>); ++i)<br>    &#123;<br>        sum -= a[i];<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> res = (<span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span>)(sum + min(m - i, k * (n - i))) / (<span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span>)(n - i);<br>        ans = max(ans, res);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.20f&quot;</span>, (<span class="hljs-keyword">double</span>)ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>题意是给你一个区间长度为 $2^n$长，，然后一个数组a[k]，a[i]表示第i个位置加一，，可能有a[i]是相等的，，然后有两种操作，一种是子区间全为零时操作的代价为A，，否则代价为 $B<em>num_{l,r}</em>len_{l, r}$，，，问你整个区间的最小操作代价，，</p>
<p>题解是递归+二分求解，，，</p>
<p>我一开始想到了递归来求，，但是自己写二分求区间[l, r]的 $num_{l, r}$ 时总是写爆，，，最后看了题解才想起来还有stl里的 <code>lower_bound</code> 和 <code>upper_bound</code> 可以直接二分找到，，，QAQ </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-comment">//#include &lt;cstdio&gt;</span><br><span class="hljs-comment">//#include &lt;cstdlib&gt;</span><br><span class="hljs-comment">//#include &lt;string.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, ull&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">read</span><span class="hljs-params">()</span>   <span class="hljs-comment">//快读</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))<br>        ch=getchar();<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))<br>        ans=(ans&lt;&lt;<span class="hljs-number">3</span>)+(ans&lt;&lt;<span class="hljs-number">1</span>)+(ch^<span class="hljs-number">48</span>),ch=getchar();<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;ll&gt; a;<br>ll n, k, A, B;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> len (r-l+1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span><br><span class="hljs-function">ll <span class="hljs-title">getnum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    l = lower_bound(a.begin(), a.end(), l) - a.begin();<br>    r = upper_bound(a.begin(), a.end(), r) - a.begin();<br>    <span class="hljs-keyword">return</span> r - <span class="hljs-number">1</span> - l + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll num = getnum(l, r);<br>    <span class="hljs-keyword">if</span>(!num)<span class="hljs-keyword">return</span> A;<br>    <span class="hljs-keyword">if</span>(l == r)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(num)<br>            <span class="hljs-keyword">return</span> B * num * <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> A;<br>    &#125;<br>    ll a = solve(l, mid);<br>    ll b = solve(mid + <span class="hljs-number">1</span>, r);<br><span class="hljs-comment">//    cout &lt;&lt; a &lt;&lt; b &lt;&lt; &quot;---&quot; &lt;&lt; endl;</span><br>    <span class="hljs-keyword">if</span>(num)<span class="hljs-keyword">return</span> min(a+b, (ll)(B * len * num));<br>    <span class="hljs-keyword">else</span>   <span class="hljs-keyword">return</span> min(a+b, A);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    n = read(); k = read(); A = read(); B = read();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i)<br>    &#123;<br>        <span class="hljs-keyword">int</span> t = read();<br>        a.pb(t);<br>    &#125;<br>    sort(a.begin(), a.end());<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, solve(<span class="hljs-number">1</span>, (<span class="hljs-number">1</span>&lt;&lt;n)));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>csp刷题</title>
    <url>/2018/12/13/csp%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>csp刷题留存：</p>
<span id="more"></span>
<h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a><a href="http://118.190.20.162/view.page?gpid=T55">Markdown</a></h1><p>在第7个点挂了，，，不改了，，，太恶心了这种题QAQ，，，，<br>有谁想改的改完了告诉我一下，，，QAQ<br><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-built_in">string</span> h1[] = &#123; <span class="hljs-string">&quot;&lt;h1&gt;&quot;</span> , <span class="hljs-string">&quot;&lt;h2&gt;&quot;</span> , <span class="hljs-string">&quot;&lt;h3&gt;&quot;</span> , <span class="hljs-string">&quot;&lt;h4&gt;&quot;</span> , <span class="hljs-string">&quot;&lt;h5&gt;&quot;</span> , <span class="hljs-string">&quot;&lt;h6&gt;&quot;</span> &#125;;<br><span class="hljs-built_in">string</span> h2[] = &#123; <span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span> , <span class="hljs-string">&quot;&lt;/h2&gt;&quot;</span> , <span class="hljs-string">&quot;&lt;/h3&gt;&quot;</span> , <span class="hljs-string">&quot;&lt;/h4&gt;&quot;</span> , <span class="hljs-string">&quot;&lt;/h5&gt;&quot;</span> , <span class="hljs-string">&quot;&lt;/h6&gt;&quot;</span> &#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">bool</span> _ = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">bool</span> href = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">while</span>(s[pos] != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(s[pos] == <span class="hljs-string">&#x27;_&#x27;</span>)<br>        &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;&lt;em&gt;&quot;</span>;<br>            <span class="hljs-keyword">int</span> pos2 = pos + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(s[pos2] != <span class="hljs-string">&#x27;_&#x27;</span>)++pos2;<br>            <span class="hljs-built_in">string</span> t = s.substr(pos + <span class="hljs-number">1</span> , pos2 - pos - <span class="hljs-number">1</span>);<br>            check(t);<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;&lt;/em&gt;&quot;</span>;<br>            pos = pos2 + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[pos] == <span class="hljs-string">&#x27;[&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> a , b , c , d;<br>            a = b = c = d = pos;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = pos; s[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; ++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;]&#x27;</span>)<br>                    b = i;<br>                <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;(&#x27;</span>)<br>                    c = i;<br>                <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;)&#x27;</span>)<br>                    d = i;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(b != pos &amp;&amp; c != pos &amp;&amp; d != pos)<br>            &#123;<br>                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;&lt;a href=\&quot;&quot;</span>;<br>                <span class="hljs-built_in">string</span> t = s.substr(c + <span class="hljs-number">1</span> , d - c - <span class="hljs-number">1</span>);<br>                check(t);<br>                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\&quot;&gt;&quot;</span>;<br>                t = s.substr(a + <span class="hljs-number">1</span> , b - a - <span class="hljs-number">1</span>);<br>                check(t);<br>                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;&lt;/a&gt;&quot;</span>;<br>                pos = d + <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">cout</span> &lt;&lt; s[pos++];<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">cout</span> &lt;&lt; s[pos++];<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    freopen(<span class="hljs-string">&quot;233.txt&quot;</span> , <span class="hljs-string">&quot;r&quot;</span> , <span class="hljs-built_in">stdin</span>);<br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">string</span> s;<br>    <span class="hljs-keyword">bool</span> flagul = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">bool</span> flagp = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">while</span>(getline(<span class="hljs-built_in">cin</span> , s))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;#&#x27;</span>)<br>        &#123;<br><br>            <span class="hljs-keyword">if</span>(flagul)<br>            &#123;<br>                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;&lt;/ul&gt;&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>                flagul = <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flagp)<br>            &#123;<br>                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>                flagp = <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">int</span> i;<span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">5</span>; ++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;#&#x27;</span>)<br>                    ++sum;<br>                <span class="hljs-keyword">else</span><br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">int</span> pos = i;<br>            <span class="hljs-keyword">while</span>(s[pos] == <span class="hljs-string">&#x27; &#x27;</span>)++pos;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; h1[sum - <span class="hljs-number">1</span>];<br>            <span class="hljs-built_in">string</span> t = s.substr(pos , s.length() - pos);<br>            check(t);<br>            <span class="hljs-built_in">cout</span> &lt;&lt; h2[sum - <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;*&#x27;</span>)<br>        &#123;<br><br>            <span class="hljs-keyword">if</span>(flagp)<br>            &#123;<br>                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>                flagp = <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(!flagul)<br>            &#123;<br>                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;&lt;ul&gt;&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>                flagul = <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">int</span> i;<br>            <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; s[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; ++i)<br>                <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27; &#x27;</span> || s[i] == <span class="hljs-string">&#x27;*&#x27;</span>)<br>                    ++pos;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;&lt;li&gt;&quot;</span>;<br>            <span class="hljs-keyword">while</span>(s[pos] != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>                <span class="hljs-built_in">cout</span> &lt;&lt; s[pos++];<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;&lt;/li&gt;&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.length() == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(flagp)<br>            &#123;<br>                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>                flagp = <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(flagul)<br>            &#123;<br>                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;&lt;/ul&gt;&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>                flagul = <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(!flagp)<br>            &#123;<br>                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;&lt;p&gt;&quot;</span>;<br>                flagp = <span class="hljs-literal">true</span>;<br>                check(s);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            check(s);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(flagp)<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(flagul)<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;&lt;/ul&gt;&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></p>
<h1 id="线性递推式"><a href="#线性递推式" class="headerlink" title="线性递推式"></a><a href="http://118.190.20.162/view.page?gpid=T74">线性递推式</a></h1><p>暴力肯定超时，，，试了试杜教筛，，，然后wa2，，，emmmm有毒，，，不管了++</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i,a,n) for (int i=a;i&lt;n;i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i,a,n) for (int i=n-1;i&gt;=a;i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> all(x) (x).begin(),(x).end()</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SZ(x) ((int)(x).size())</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; VI;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; PII;<br><span class="hljs-function">ll <span class="hljs-title">powmod</span><span class="hljs-params">(ll a,ll b)</span> </span>&#123;ll res=<span class="hljs-number">1</span>;a%=mod; assert(b&gt;=<span class="hljs-number">0</span>); <span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>)&#123;<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)res=res*a%mod;a=a*a%mod;&#125;<span class="hljs-keyword">return</span> res;&#125;<br><span class="hljs-comment">// head</span><br><br><span class="hljs-keyword">int</span> _,n;<br><span class="hljs-keyword">namespace</span> linear_seq &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">10010</span>;<br>    ll res[N],base[N],_c[N],_md[N];<br><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; Md;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mul</span><span class="hljs-params">(ll *a,ll *b,<span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        rep(i,<span class="hljs-number">0</span>,k+k) _c[i]=<span class="hljs-number">0</span>;<br>        rep(i,<span class="hljs-number">0</span>,k) <span class="hljs-keyword">if</span> (a[i]) rep(j,<span class="hljs-number">0</span>,k) _c[i+j]=(_c[i+j]+a[i]*b[j])%mod;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=k+k<span class="hljs-number">-1</span>;i&gt;=k;i--) <span class="hljs-keyword">if</span> (_c[i])<br>            rep(j,<span class="hljs-number">0</span>,SZ(Md)) _c[i-k+Md[j]]=(_c[i-k+Md[j]]-_c[i]*_md[Md[j]])%mod;<br>        rep(i,<span class="hljs-number">0</span>,k) a[i]=_c[i];<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(ll n,VI a,VI b)</span> </span>&#123; <span class="hljs-comment">// a 系数 b 初值 b[n+1]=a[0]*b[n]+...</span><br><span class="hljs-comment">//        printf(&quot;%d\n&quot;,SZ(b));</span><br>        ll ans=<span class="hljs-number">0</span>,pnt=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> k=SZ(a);<br>        assert(SZ(a)==SZ(b));<br>        rep(i,<span class="hljs-number">0</span>,k) _md[k<span class="hljs-number">-1</span>-i]=-a[i];_md[k]=<span class="hljs-number">1</span>;<br>        Md.clear();<br>        rep(i,<span class="hljs-number">0</span>,k) <span class="hljs-keyword">if</span> (_md[i]!=<span class="hljs-number">0</span>) Md.push_back(i);<br>        rep(i,<span class="hljs-number">0</span>,k) res[i]=base[i]=<span class="hljs-number">0</span>;<br>        res[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> ((<span class="hljs-number">1ll</span>&lt;&lt;pnt)&lt;=n) pnt++;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> p=pnt;p&gt;=<span class="hljs-number">0</span>;p--) &#123;<br>            mul(res,res,k);<br>            <span class="hljs-keyword">if</span> ((n&gt;&gt;p)&amp;<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=k<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--) res[i+<span class="hljs-number">1</span>]=res[i];res[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>                rep(j,<span class="hljs-number">0</span>,SZ(Md)) res[Md[j]]=(res[Md[j]]-res[k]*_md[Md[j]])%mod;<br>            &#125;<br>        &#125;<br>        rep(i,<span class="hljs-number">0</span>,k) ans=(ans+res[i]*b[i])%mod;<br>        <span class="hljs-keyword">if</span> (ans&lt;<span class="hljs-number">0</span>) ans+=mod;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <span class="hljs-function">VI <span class="hljs-title">BM</span><span class="hljs-params">(VI s)</span> </span>&#123;<br>        VI C(1,1),B(1,1);<br>        <span class="hljs-keyword">int</span> L=<span class="hljs-number">0</span>,m=<span class="hljs-number">1</span>,b=<span class="hljs-number">1</span>;<br>        rep(n,<span class="hljs-number">0</span>,SZ(s)) &#123;<br>            ll d=<span class="hljs-number">0</span>;<br>            rep(i,<span class="hljs-number">0</span>,L+<span class="hljs-number">1</span>) d=(d+(ll)C[i]*s[n-i])%mod;<br>            <span class="hljs-keyword">if</span> (d==<span class="hljs-number">0</span>) ++m;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span>*L&lt;=n) &#123;<br>                VI T=C;<br>                ll c=mod-d*powmod(b,mod<span class="hljs-number">-2</span>)%mod;<br>                <span class="hljs-keyword">while</span> (SZ(C)&lt;SZ(B)+m) C.pb(<span class="hljs-number">0</span>);<br>                rep(i,<span class="hljs-number">0</span>,SZ(B)) C[i+m]=(C[i+m]+c*B[i])%mod;<br>                L=n+<span class="hljs-number">1</span>-L; B=T; b=d; m=<span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ll c=mod-d*powmod(b,mod<span class="hljs-number">-2</span>)%mod;<br>                <span class="hljs-keyword">while</span> (SZ(C)&lt;SZ(B)+m) C.pb(<span class="hljs-number">0</span>);<br>                rep(i,<span class="hljs-number">0</span>,SZ(B)) C[i+m]=(C[i+m]+c*B[i])%mod;<br>                ++m;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> C;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gao</span><span class="hljs-params">(VI a,ll n)</span> </span>&#123;<br>        VI c=BM(a);<br>        c.erase(c.begin());<br>        rep(i,<span class="hljs-number">0</span>,SZ(c)) c[i]=(mod-c[i])%mod;<br>        <span class="hljs-keyword">return</span> solve(n,c,VI(a.begin(),a.begin()+SZ(c)));<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//freopen(&quot;233.txt&quot; , &quot;r&quot; , stdin);</span><br>    ll a[maxn];<br>    ll k[maxn];<br>    ll m , l , r;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span> , &amp;m , &amp;l , &amp;r);<br>    &#123;<br>        <span class="hljs-keyword">for</span>(ll i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span> , &amp;k[i]);<br>        <span class="hljs-built_in">memset</span>(a , (ll)<span class="hljs-number">0</span> , <span class="hljs-keyword">sizeof</span> a);<br>        a[<span class="hljs-number">0</span>] = (ll)<span class="hljs-number">1</span>;<br><br><br>        <span class="hljs-keyword">if</span>(r &gt;= <span class="hljs-number">20</span>)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(ll i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">30</span>; ++i)<br>            &#123;<br>                ll mi = min(i, m);<br>                ll ma = (m &lt;= i) ? m : i;<br>                <span class="hljs-keyword">for</span>(ll j = i, kk = <span class="hljs-number">1</span>; kk &lt;= ma; --j, ++kk)<br>                    a[i] = (a[i] + (a[j - <span class="hljs-number">1</span>] * k[kk] % mod)) % mod;<br>            &#125;<br>            <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>            <span class="hljs-keyword">for</span>(ll i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">30</span>; ++i)<br>                v.push_back(a[i]);<br>            <span class="hljs-keyword">for</span>(ll i = l; i &lt;= r; ++i)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, linear_seq::gao(v, i - <span class="hljs-number">1</span>));<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">for</span>(ll i = <span class="hljs-number">1</span>; i &lt;= r; ++i)<br>            &#123;<br>                <span class="hljs-keyword">int</span> mi = min(i, m);<br>                <span class="hljs-keyword">int</span> ma = (m &lt;= i) ? m : i;<br>                <span class="hljs-keyword">for</span>(ll j = i, kk = <span class="hljs-number">1</span>; kk &lt;= ma; --j, ++kk)<br>                    a[i] = (a[i] + (a[j - <span class="hljs-number">1</span>] * k[kk] % mod)) % mod;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = l; i &lt;= r; ++i)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span> , a[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h1 id="通信网络"><a href="#通信网络" class="headerlink" title="通信网络"></a><a href="http://118.190.20.162/view.page?gpid=T60">通信网络</a></h1><p>这题深搜就行了，，，代码丢了，，，</p>
<h1 id="除法"><a href="#除法" class="headerlink" title="除法"></a><a href="http://118.190.20.162/view.page?gpid=T59">除法</a></h1><p>这题给的时限是10s，，，一开始我还当一般的区间问题想，，，想着怎么用区间修改的线段树做，，，，然后发现时限很大，之后果断暴力更新区间的每个点，，，然后试了好多的线段树的板子都在第九个点t了，，，，换树状数组就没事，，emmmmm有毒++,,还有要判断这个数是不是已经比要除的数小，，，还有标记优化，，，这样才能过，，，，</p>
<p>代码没保存，，，emmmm不管了，，，，</p>
]]></content>
  </entry>
  <entry>
    <title>hdu-1540线段树刷题</title>
    <url>/2018/10/18/hdu-1540%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1540">哇，，，这道线段树的题可以说是到目前为止我所做过的最难的一道了吧QAQ，，，</a>，，，</p>
<p>一开始读完题就是一脸懵逼，，，，完全不知道该从哪里下手，，，就是知道这是一道线段树的题也不知道该怎么下手啊啊啊，，，，</p>
<p>最后还是看了kaungbin大佬的代码，，，QAQ</p>
<p>光是读代码就花了一两个小时，，，（不过也有可能和今天贼困有关，，，脑袋不怎么转啊</p>
<span id="more"></span>
<h1 id="分析思路"><a href="#分析思路" class="headerlink" title="分析思路"></a>分析思路</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>大概的题意就是一串在一条线上的村庄，，或者说是点，，，一开始都为1，，，然后有三种不同的操作，，，</p>
<ul>
<li>d a: 意味着将a这个点置为0，，，</li>
<li>q a: 意味着询问a周围有多少的1，，，只要碰到零就不算了，，，例如110111110,,(q 5) = 5</li>
<li>r: 意味着将上一个被置为零的点置为1 </li>
</ul>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="我的想法"><a href="#我的想法" class="headerlink" title="我的想法"></a>我的想法</h3><p>一开始我看到有需要上一次操作的情况，，就想着要将这些d操作保存下来，，适合这道题的就是栈，，，</p>
<p>然后就是询问了，，，我那时想着既然要求a周围这些1的个数，，那我就找到两端的0不就行了，，，然后从这里就彻底的脑抽了，，，又想着用线段树去求这段区间的和，，，，然后结果显而易见，，，，t了，，，</p>
<p>因为，，这种想法线段树根本没有用啊！！！！都找出那两端的0所在的位置直接减不就行了，，，这不就是裸暴力吗，，，，，哇，，，被自己蠢哭(๐॔˃̶ᗜ˂̶๐॓)，，，，</p>
<h3 id="斌神的做法"><a href="#斌神的做法" class="headerlink" title="斌神的做法"></a>斌神的做法</h3><p>首先将这段线划分成多个区段，，，每个区段保存的信息有：<strong>从这去区段的左端点开始最长的连续1的个数ll</strong> 、 <strong>从这个区段右端点开始的最长的连续1的个数rl</strong> 、 还有<strong>这个区段最大的连续点的个数ml</strong>。。。</p>
<p><strong>建树</strong>：ll = rl = ml = 区间长</p>
<p><strong>更新</strong>： </p>
<blockquote>
<p>叶子节点置一置零，，，</p>
<p>左右递归更新</p>
<p>其他区间：(pushup())<br>父节点.ll = 左节点.ll     父节点.rl = 右节点.rl<br>父节点.ml取左右节点的最大的一个ml<br>若左节点的rl + 右节点的ll &gt; 父节点的ml，，，，就更新为前者</p>
<p>对于父节点的ll,rl<br>如果左节点的ll为左节点的长度，，，就说明左节点从左端点开始的连续1的最大的个数就为左节点包含的点的个数，，，所以此时的父节点的ll就要和<strong>右节点的ll合并</strong><br>同理，，，父节点的rl也要进行这样的判断</p>
</blockquote>
<p><strong>查询</strong>：</p>
<p>对于一些特殊的区间直接返回该区间的最大的连续1的个数也就是ml</p>
<blockquote>
<p>当loc在中点左时，，，就要从左节点来判断，，，判断的条件是loc是否超出了rl的最左端（画图更容易理解一些），，，超出的话就说明loc所在的连续的1一部分是在左节点的rl里另一部分是在右节点的ll里，，，就分成两个点查询，，，一个是在左节点的loc，，，另一个时在右节点的mid+1那个点<br>同理，，若在中点的右时也有类似的判断，，，<br>大体上说就是不断地判断要找到那个点相对ll,rl的位置，，，最后把递归查询到的结果合并就行了，，，</p>
</blockquote>
<p>字丑见谅，，，，（不过应该没人看把，，，，</p>
<p><img src="https://img2018.cnblogs.com/blog/1028485/201810/1028485-20181018204849235-921393699.jpg" alt=""></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">5e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> l;<br>    <span class="hljs-keyword">int</span> r;<br>    <span class="hljs-keyword">int</span> ml;<br>    <span class="hljs-keyword">int</span> ll;<br>    <span class="hljs-keyword">int</span> rl;<br>&#125;node[maxn &lt;&lt; <span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> l , <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    node[rt].l = l;<br>    node[rt].r = r;<br>    node[rt].ml = node[rt].ll = node[rt].rl = r - l + <span class="hljs-number">1</span>;    <span class="hljs-comment">//刚开始肯定是区间的长度</span><br>    <span class="hljs-keyword">if</span>(l == r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    build(rt &lt;&lt; <span class="hljs-number">1</span> , l , mid);<br>    build(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , mid + <span class="hljs-number">1</span> , r);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> loc , <span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(node[rt].l == node[rt].r)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(val) node[rt].ml = node[rt].ll = node[rt].rl = <span class="hljs-number">1</span>;    <span class="hljs-comment">//摧毁和重建两种</span><br>        <span class="hljs-keyword">else</span>    node[rt].ml = node[rt].ll = node[rt].rl = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = (node[rt].l + node[rt].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(loc &lt;= mid)  update(rt &lt;&lt; <span class="hljs-number">1</span> , loc , val);<br>    <span class="hljs-keyword">else</span>            update(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , loc , val);<br>    <span class="hljs-comment">//递归更新</span><br>    <span class="hljs-comment">//先更新父节点的两个，ll,rl</span><br>    node[rt].ll = node[rt &lt;&lt; <span class="hljs-number">1</span>].ll;<br>    node[rt].rl = node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].rl;<br><br>    <span class="hljs-comment">//然后是父节点的ml</span><br>    node[rt].ml = max(node[rt &lt;&lt; <span class="hljs-number">1</span>].ml , node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].ml);<br>    node[rt].ml = max(node[rt].ml , node[rt &lt;&lt; <span class="hljs-number">1</span>].rl + node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].ll);<br><br>    <span class="hljs-comment">//父节点的ll,rl可能就是左右节点的ll,,rl,,,,当刚好是子节点的全部时还要加上另一个区间的一部分</span><br>    <span class="hljs-keyword">if</span>(node[rt &lt;&lt; <span class="hljs-number">1</span>].ll == node[rt &lt;&lt; <span class="hljs-number">1</span>].r - node[rt &lt;&lt; <span class="hljs-number">1</span>].l + <span class="hljs-number">1</span>)<br>        node[rt].ll += node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].ll;<br>    <span class="hljs-keyword">if</span>(node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].rl == node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].r - node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].l + <span class="hljs-number">1</span>)<br>        node[rt].rl += node[rt &lt;&lt; <span class="hljs-number">1</span>].rl;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> loc)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//特殊情况直接返回ml</span><br>    <span class="hljs-keyword">if</span>(node[rt].l == node[rt].r || node[rt].ml == <span class="hljs-number">0</span> || node[rt].ml == node[rt].r - node[rt].l + <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> node[rt].ml;<br><br>    <span class="hljs-keyword">int</span> mid = (node[rt].l + node[rt].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(loc &lt;= mid)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(loc &gt;= node[rt &lt;&lt; <span class="hljs-number">1</span>].r - node[rt &lt;&lt; <span class="hljs-number">1</span>].rl + <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> query(rt &lt;&lt; <span class="hljs-number">1</span> , loc) + query(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , mid + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> query(rt &lt;&lt; <span class="hljs-number">1</span> , loc);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(loc &lt;= node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].l + node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].ll - <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> query(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , loc) + query(rt &lt;&lt; <span class="hljs-number">1</span> , mid);<br>        <span class="hljs-keyword">return</span> query(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , loc);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n , m;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span> , &amp;n , &amp;m) != EOF)<br>    &#123;<br>        build(<span class="hljs-number">1</span> , <span class="hljs-number">1</span> , n);<br>        <span class="hljs-keyword">int</span> q[maxn];<br>        <span class="hljs-keyword">int</span> toc = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(m--)<br>        &#123;<br>            <span class="hljs-keyword">char</span> c;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot; %c&quot;</span> , &amp;c);<br>            <span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;D&#x27;</span>)<br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;t);<br>                q[toc++] = t;   <span class="hljs-comment">//把摧毁操作保存</span><br>                update(<span class="hljs-number">1</span> , t , <span class="hljs-number">0</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;Q&#x27;</span>)<br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;t);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span> , query(<span class="hljs-number">1</span> , t));<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(t)<br>                &#123;<br>                    t = q[--toc];<br>                    update(<span class="hljs-number">1</span> , t , <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//kaungbin</span><br><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM-线段树</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforces-1114F-线段树练习</title>
    <url>/2019/02/17/codeforces-1114F-%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><a href="https://codeforces.com/problemset/problem/1114/F">这是一道用线段树维区间值的一道题</a>，，题意很简单，，就是对于给定的一个序列，，初始时每个数的值不大于300，，，然后有两中操作，，一个是对区间[l, r]的每个数乘上以个数x，，一个是询问区间的乘积的欧拉函数值，，，</p>
<span id="more"></span>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>首先对于第一个操作显然可以用线段树的延迟更新来完成，，</p>
<p>对于第二个操作，，我最先没考虑数据，，就想着直接维护区间的乘积，，对最后的区间乘积求欧拉函数值，，，但是，，，即使数据初始值很小，，但是多次累乘x后会爆ll，甚至是ull，，，</p>
<p>正解是这样的：</p>
<p>对于第一个操作，，每次都保存区间模mod的乘积，，，</p>
<p>对于第二个操作，，因为我们是求的区间积的欧拉函数值，也就是</p>
<p>$MUL<em>{l,r} \times phi(Mul</em>{l, r}) = Mul<em>{l, r} \times \prod</em>{i=l}^j {prime[i]-1 \over prime[i]}$ </p>
<p>$prime[i] 是指 Mul_{l, r} 的质因数$</p>
<p>因为直接存 $Mul_{l, r}$ 会爆掉，，而最后的结果实在mod下的数，，300以里的质数也只有62个，，所以可以标记出乘积的所有质因数，，用一个ll的数就行了（状压的思想），，对于任意一个区间的乘积的标记都可以用两个子节点的标记值的或运算得到，，同时标记值也只会因为乘上的那个数x而增加，，，公式里的除 $prime[i]$ 也可以用逆元搞定，，这样这个操作就弄出来了，，</p>
<p>一开始我自己写爆了之后，就照着别人的思路一点一点的改，，莫名其妙的t，，一直以为是线段树写丑了，，，，后来看到一个人写的很简单但也过了，，，自己就重写了一遍过了，，数论+线段树的题第一次写，，学到很多，，尤其是状压的思想，，逆元，还有线段树作为一个维护的工具的使用，，，两个参数的返回可以使用 <code>pair&lt;int, ll&gt; pii</code> 型来返回，，</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-comment">//#include &lt;cstdio&gt;</span><br><span class="hljs-comment">//#include &lt;cstdlib&gt;</span><br><span class="hljs-comment">//#include &lt;string.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, ull&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">4e5</span> + <span class="hljs-number">5</span>;   <span class="hljs-comment">//注意数据范围，，，因为这个wa了一发，，，，（为啥不是re233）</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span>   <span class="hljs-comment">//快读</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))<br>        ch=getchar();<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))<br>        ans=(ans&lt;&lt;<span class="hljs-number">3</span>)+(ans&lt;&lt;<span class="hljs-number">1</span>)+(ch^<span class="hljs-number">48</span>),ch=getchar();<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">pow_</span><span class="hljs-params">(ll a, ll b, ll p)</span>    <span class="hljs-comment">//快速幂</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ret = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b &amp; <span class="hljs-number">1</span>) ret = (ret * a) % p;<br>        a = (a * a) % p;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-comment">//find all prime from 1 to 300</span><br><span class="hljs-keyword">bool</span> isprime[<span class="hljs-number">305</span>];<br><span class="hljs-keyword">int</span> prime[<span class="hljs-number">70</span>], tot = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">int</span> inv_prime[<span class="hljs-number">70</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span>     <span class="hljs-comment">//寻找300以内的质数及其质数的逆元</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">300</span>; ++i)isprime[i] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">300</span>; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!isprime[i])prime[++tot] = i, inv_prime[tot] = pow_(i, mod - <span class="hljs-number">2</span>, mod);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= tot &amp;&amp; i * prime[j] &lt;= <span class="hljs-number">300</span>; ++j)<br>        &#123;<br>            isprime[i * prime[j]] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(i % prime[j] == <span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">find_prime</span><span class="hljs-params">(ll x)</span> <span class="hljs-comment">//寻找数x的质因数，存在则对应质数数组的index位位1，这样最后返回的值的二进制表示即为状压标记的结果</span></span><br><span class="hljs-function"></span>&#123;<br>    ull ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= tot; ++i)<span class="hljs-keyword">if</span>(x == x / prime[i] * prime[i])ret |= ((ll)<span class="hljs-number">1</span> &lt;&lt; i);<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">mull</span><span class="hljs-params">(ll a, ll b)</span> <span class="hljs-comment">//带模的乘法</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a * b % mod;<br>&#125;<br>ll mul[maxn &lt;&lt; <span class="hljs-number">2</span>], vis[maxn &lt;&lt; <span class="hljs-number">2</span>], laz1[maxn &lt;&lt; <span class="hljs-number">2</span>], laz2[maxn &lt;&lt; <span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lc (rt&lt;&lt;1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rc (rt&lt;&lt;1|1)</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt)</span></span><br><span class="hljs-function"></span>&#123;<br>    mul[rt] = mull(mul[lc], mul[rc]);<br>    vis[rt] = vis[lc] | vis[rc];<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> llen, <span class="hljs-keyword">int</span> rlen)</span></span><br><span class="hljs-function"></span>&#123;<br>    mul[lc] = mull(mul[lc], pow_(laz1[rt], llen, mod)); <span class="hljs-comment">//更新乘积</span><br>    mul[rc] = mull(mul[rc], pow_(laz1[rt], rlen, mod));<br>    laz1[lc] = mull(laz1[lc], laz1[rt]);                <span class="hljs-comment">//更新子区间乘积的懒惰标记值</span><br>    laz1[rc] = mull(laz1[rc], laz1[rt]);<br>    laz1[rt] = <span class="hljs-number">1</span>;                                       <span class="hljs-comment">//恢复根区间乘积的懒惰标记值</span><br>    vis[lc] |= laz2[rt];                                <span class="hljs-comment">//更新标记</span><br>    vis[rc] |= laz2[rt];<br>    laz2[lc] |= laz2[rt];                               <span class="hljs-comment">//更新子区间标记的懒惰标记值</span><br>    laz2[rc] |= laz2[rt];<br>    laz2[rt] = <span class="hljs-number">0</span>;                                       <span class="hljs-comment">//恢复根区间标记的懒惰标记值</span><br><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    mul[rt] = vis[rt] = laz2[rt] = <span class="hljs-number">0</span>;<br>    laz1[rt] = <span class="hljs-number">1</span>;                       <span class="hljs-comment">//无标记时，乘积的标记的懒惰值为1，，，，，标记的为0，，</span><br>    <span class="hljs-keyword">if</span>(l == r)<br>    &#123;<br>        mul[rt] = a[l];<br>        vis[rt] = find_prime(mul[rt]);  <span class="hljs-comment">//叶子节点的标记值为其质因数出现的状压后的值</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    build(lc, l, mid);<br>    build(rc, mid + <span class="hljs-number">1</span>, r);<br>    pushup(rt);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R, <span class="hljs-keyword">int</span> x, ll vx)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)<br>    &#123;<br>        mul[rt] = mull(mul[rt], pow_(x, r - l + <span class="hljs-number">1</span>, mod));<br>        vis[rt] |= vx;                      <span class="hljs-comment">//标记更新</span><br>        laz1[rt] = mull(laz1[rt], x);       <span class="hljs-comment">//乘积的懒惰标记的更新</span><br>        laz2[rt] |= vx;                     <span class="hljs-comment">//标记的懒惰标记的更新</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(laz1[rt] &gt; <span class="hljs-number">1</span>)pushdown(rt, mid - l + <span class="hljs-number">1</span>, r - mid);<br>    <span class="hljs-keyword">if</span>(laz2[rt])pushdown(rt, mid - l + <span class="hljs-number">1</span>, r - mid);<br>    <span class="hljs-keyword">if</span>(R &lt;= mid)update(lc, l, mid, L, R, x, vx);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(L &gt; mid)update(rc, mid+<span class="hljs-number">1</span>, r, L, R, x, vx);<br>    <span class="hljs-keyword">else</span> update(lc, l, mid, L, R, x, vx), update(rc, mid+<span class="hljs-number">1</span>, r, L, R, x, vx);<br><span class="hljs-comment">//    if(L &lt;= mid)update(lc, l, mid, L, R, x, vx);</span><br><span class="hljs-comment">//    if(R &gt; mid)update(rc, mid + 1, r, L, R, x, vx);</span><br>    pushup(rt);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> pii <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R)</span><span class="hljs-comment">//询问区间的乘积值和标记值</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)<br>    &#123;<br>        <span class="hljs-keyword">return</span> pii(mul[rt], vis[rt]);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(laz1[rt] &gt; <span class="hljs-number">1</span>)pushdown(rt, mid - l + <span class="hljs-number">1</span>, r - mid);<span class="hljs-comment">//乘积的懒惰标记大于一说明待更新区间</span><br>    <span class="hljs-keyword">if</span>(laz2[rt])pushdown(rt, mid - l + <span class="hljs-number">1</span>, r - mid); <span class="hljs-comment">//标记的懒惰值非零说明待更新</span><br>    <span class="hljs-keyword">if</span>(R &lt;= mid)<span class="hljs-keyword">return</span> query(lc, l, mid, L, R);     <span class="hljs-comment">//询问区间再左子区间时，，递归询问左子区间</span><br>    <span class="hljs-keyword">if</span>(L &gt;  mid)<span class="hljs-keyword">return</span> query(rc, mid + <span class="hljs-number">1</span>, r, L, R);<br>    pii a = query(lc, l, mid, L, R);                <span class="hljs-comment">//a为佐子区间的值</span><br>    pii b = query(rc, mid + <span class="hljs-number">1</span>, r, L, R);            <span class="hljs-comment">//b为侑子区间的值</span><br>    <span class="hljs-keyword">return</span> pii(mull(a.first, b.first), (a.second | b.second));<span class="hljs-comment">//总区间的值为左右子区间的乘积的积和标记的或</span><br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">phi</span><span class="hljs-params">(ll mul, ull vis)</span> <span class="hljs-comment">//利用标记指求其欧拉函数值</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= tot; ++i)<br>        <span class="hljs-keyword">if</span>((vis &gt;&gt; i) &amp; <span class="hljs-number">1</span>)<br>            mul = mull(mul, mull(prime[i] - <span class="hljs-number">1</span>, inv_prime[i]));<br>    <span class="hljs-keyword">return</span> mul;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n, q;<br>    <span class="hljs-comment">//n = read(); q = read();</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)a[i] = read();<br>    init();     <span class="hljs-comment">//初始化找出300以内的所有素数，和对应的逆元</span><br>    build(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n); <span class="hljs-comment">//建树</span><br>    <span class="hljs-keyword">char</span> s[<span class="hljs-number">20</span>];<br>    <span class="hljs-keyword">int</span> l, r, x;<br><br>    <span class="hljs-keyword">while</span>(q--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>        l = read();r = read();<br>        <span class="hljs-keyword">if</span>(s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;M&#x27;</span>)<br>        &#123;<br>            <span class="hljs-comment">//l = read(); r = read(); x = read();</span><br>            <span class="hljs-comment">//scanf(&quot;%d&quot;, &amp;x);</span><br>            x = read();<br>            update(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r, x, find_prime(x));<span class="hljs-comment">//更新操作，最后一个参数是x的质因数的标记值</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">//l = read(); r = read();</span><br>            pii tmp = query(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r); <span class="hljs-comment">//返回区间值的乘积和他的标记</span><br><span class="hljs-comment">//            cout &lt;&lt; tmp.first &lt;&lt; &quot;---&quot; &lt;&lt; tmp.second &lt;&lt; endl;</span><br><span class="hljs-comment">//            ll ans = 1;</span><br><span class="hljs-comment">//            for(int i = l; i &lt;= r; ++i)ans = mull(ans, query(1, i, i).first);</span><br><span class="hljs-comment">//            cout &lt;&lt; ans &lt;&lt; endl;</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, phi(tmp.first, tmp.second));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>看来只做简单题是学不到新东西的，，，难题虽然难，，熬夜弄了两天wa了好几发但最后弄出来还是很有意义的，，，</p>
<p>同时多看看<a href="https://blog.csdn.net/dreaming__ldx/article/details/86981461">别人的代码也很有感触</a>，，学到很多好东西，，</p>
<p>(end)</p>
]]></content>
      <categories>
        <category>ACM-线段树</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>hdu-3790最短路刷题</title>
    <url>/2018/10/20/hdu-3790%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3790">一道最短路的水题</a>，，，尽量不看以前的代码打出来，，，熟悉一下dijkstra的格式和链式前向星的写法，，，，</p>
<p>虽然是水题，，，但是一开始没考虑取费用最短的wa了一发，，，，QAQ</p>
<span id="more"></span>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>链式前向星存图，，再加一个数组保存源点到每个点的费用cst[maxm]，，，注意取最少的费用</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e3</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-keyword">int</span> head[maxm &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> dis[maxm];<br><span class="hljs-keyword">int</span> cst[maxm];<br><span class="hljs-keyword">int</span> cnt;<br><span class="hljs-keyword">int</span> n , m;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to;<br>    <span class="hljs-keyword">int</span> w;<br>    <span class="hljs-keyword">int</span> c;<br>    <span class="hljs-keyword">int</span> last;<br>&#125;edge[maxm &lt;&lt; <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u , <span class="hljs-keyword">int</span> v , <span class="hljs-keyword">int</span> w , <span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[cnt].to = v;<br>    edge[cnt].w = w;<br>    edge[cnt].c = c;<br>    edge[cnt].last = head[u];<br>    head[u] = cnt++;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> u;<br>    <span class="hljs-keyword">int</span> w;<br>    node(<span class="hljs-keyword">int</span> _u , <span class="hljs-keyword">int</span> _w):u(_u) , w(_w)&#123;&#125;<br><br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> node &amp;res) <span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> w &gt; res.w;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n , <span class="hljs-keyword">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        dis[i] = (i == s) ? <span class="hljs-number">0</span> : inf;<br>    <span class="hljs-built_in">memset</span>(cst , inf , <span class="hljs-keyword">sizeof</span> cst);cst[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(vis , <span class="hljs-literal">false</span> , <span class="hljs-keyword">sizeof</span> vis);<br><br>    <span class="hljs-built_in">priority_queue</span>&lt;node&gt; q;<br><br>    <span class="hljs-keyword">while</span>(!q.empty())   q.pop();<br><br>    q.push(node(s , <span class="hljs-number">0</span>));<br><br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        node x = q.top();q.pop();<br>        <span class="hljs-keyword">int</span> u = x.u;<br><br>        <span class="hljs-keyword">if</span>(vis[u])  <span class="hljs-keyword">continue</span>;<br>        vis[u] = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u] ; ~i; i = edge[i].last)<br>        &#123;<br>            <span class="hljs-keyword">int</span> to = edge[i].to;<br>            <span class="hljs-keyword">int</span> w = edge[i].w;<br>            <span class="hljs-keyword">int</span> c = edge[i].c;<br>            <span class="hljs-keyword">if</span>(!vis[to] &amp;&amp; dis[u] + w &lt;= dis[to])<br>            &#123;<br>                dis[to] = dis[u] + w;<br>                <span class="hljs-comment">//if(cst[u] + c &lt; cst[to])</span><br>                    cst[to] = cst[u] + c;<br>                q.push(node(to , dis[to]));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span> , &amp;n , &amp;m) &amp;&amp; n &amp;&amp; m)<br>    &#123;<br>        cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(head , <span class="hljs-number">-1</span> , <span class="hljs-keyword">sizeof</span> head);<br>        <span class="hljs-keyword">int</span> u , v , w , c;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span> , &amp;u , &amp;v , &amp;w , &amp;c);<br>            addedge(u , v , w , c);<br>            addedge(v , u , w , c);<br>        &#125;<br>        <span class="hljs-keyword">int</span> s , t;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span> , &amp;s , &amp;t);<br><br>        dijkstra(n , s);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span> , dis[t] , cst[t]);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//最短路相等时注意取费用最短的</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//5 7</span><br><span class="hljs-comment">//1 2 5 5</span><br><span class="hljs-comment">//2 3 4 5</span><br><span class="hljs-comment">//1 3 4 6</span><br><span class="hljs-comment">//3 4 2 2</span><br><span class="hljs-comment">//3 5 4 7</span><br><span class="hljs-comment">//4 5 2 4</span><br><span class="hljs-comment">//1 3 4 4</span><br><span class="hljs-comment">//1 5</span><br><span class="hljs-comment">//8 10</span><br><br></code></pre></td></tr></table></figure>
<p>差不多记住了的dijkatra的代码，，，继续继续</p>
<p>(end)</p>
]]></content>
      <categories>
        <category>ACM-最短路</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>hdu-4027线段树练习</title>
    <url>/2018/10/10/hdu-4027%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4027">这道线段树的题</a>可以说是我这一段时间复习线段树后第一次认认真真的做的第一道线段树的题了吧，，，，</p>
<p> 然后，，，看似很简单的题翻车了，，，，QAQ</p>
 <span id="more"></span>
<h1 id="题意和分析"><a href="#题意和分析" class="headerlink" title="题意和分析"></a>题意和分析</h1><p> 题意大概就是给你一些数，，然后对[l , r]这个区间里的所有数进行开平方根运算，，，其中还有一些询问[l , r]的区间和，，，</p>
<p> 看到一排数列的区间和还有更新询问操作的题型铁定是要用线段树来维护这个数列了，，，</p>
<p> 一开始我想着结点保存两个区间和，，一个是现在未更新的区间和，，另一个是每个开方后的区间和，，，然后用lazy来延迟更新，，，然后貌似在更新时这样会少更新，，，最后的答案肯定就不对了，，</p>
<p> 最后，，，坑了两个多小时的我还是去找别人的做法了，，，</p>
<p> 这道题首先一点就是即使数字很大，，，<strong>但是 $2^{63} - 1$ 也就最多开8次平方根</strong>，，，<strong>而且开到1时再开平方根还是1</strong>，，，，</p>
<p> 所以再开到区间所有数都为1时就不再对这个区间更新，，，也就是当 node[rt].sum == node[rt].r - node[rt].l + 1 时就返回上一层，，，这样就减小了更新时的操作，，，</p>
<h1 id="最终的代码，，，"><a href="#最终的代码，，，" class="headerlink" title="最终的代码，，，"></a>最终的代码，，，</h1> <figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> n, q;<br>ll a[maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tree</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> l;<br>    <span class="hljs-keyword">int</span> r;<br>    ll sum;<br>&#125;node[maxn &lt;&lt; <span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt)</span></span><br><span class="hljs-function"></span>&#123;<br>    node[rt].sum = node[rt &lt;&lt; <span class="hljs-number">1</span>].sum + node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> l , <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    node[rt].l = l;<br>    node[rt].r = r;<br><br>    <span class="hljs-keyword">if</span> (l == r)<br>    &#123;<br>        node[rt].sum = a[l];<br>        <span class="hljs-keyword">return</span>;                 <span class="hljs-comment">//要记得return，，，最近写这个总是忘记写</span><br>    &#125;<br><br>    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br><br>    build(rt &lt;&lt; <span class="hljs-number">1</span> , l , mid);<br>    build(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , mid + <span class="hljs-number">1</span> , r);<br>    pushup(rt);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> L , <span class="hljs-keyword">int</span> R)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (node[rt].sum == node[rt].r - node[rt].l + <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span>;                 <span class="hljs-comment">//区间全为1时返回，，，不然会tle</span><br>    <span class="hljs-keyword">if</span> (node[rt].l == node[rt].r)<br>    &#123;<br>        node[rt].sum = (ll)(<span class="hljs-built_in">sqrt</span>(node[rt].sum));    <span class="hljs-comment">//直接开方就行了</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> mid = (node[rt].l + node[rt].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (L &lt;= mid)   update(rt &lt;&lt; <span class="hljs-number">1</span> , L , R);<br>    <span class="hljs-keyword">if</span> (R &gt;  mid)   update(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , L , R);<br>    pushup(rt);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> L , <span class="hljs-keyword">int</span> R)</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-keyword">if</span> (L &lt;= node[rt].l &amp;&amp; node[rt].r &lt;= R)<br>    &#123;<br>        <span class="hljs-keyword">return</span> node[rt].sum;<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> mid = (node[rt].l + node[rt].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (L &lt;= mid)    ans += query(rt &lt;&lt; <span class="hljs-number">1</span> , L , R);<br>    <span class="hljs-keyword">if</span> (R &gt;  mid)    ans += query(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , L , R);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> <span class="hljs-keyword">const</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;n) != EOF)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d:\n&quot;</span> , ++i);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span> , &amp;a[i]);<br><br>        build(<span class="hljs-number">1</span> , <span class="hljs-number">1</span> , n);<br><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;q);<br><br>        <span class="hljs-keyword">while</span>(q--)<br>        &#123;<br>            <span class="hljs-keyword">int</span> t , l , r;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span> , &amp;t , &amp;l , &amp;r);<br>            <span class="hljs-keyword">if</span> (l &gt; r)<br>                swap(l , r);        <span class="hljs-comment">//l , r不一定保证 l &lt;= r 所以要判断</span><br><br>            <span class="hljs-keyword">if</span> (t)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span> , query(<span class="hljs-number">1</span> , l , r));<br>            <span class="hljs-keyword">else</span><br>                update(<span class="hljs-number">1</span> , l , r);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);               <span class="hljs-comment">//每组测试样例之间加空行</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>没看出来一个数最多开方8次啊，，，</li>
<li>还是不能仔细的读题，，，比如那个输入的l , r比如那个每一组测试样例之间加空行</li>
<li>想的太多了，，，而且最主要的是还是想着套模板解题，，，而不是就题而选择怎么写</li>
<li>，，，，</li>
</ul>
<p>还是做的题太少了，，还是有点像暑假时见到线段树就套板子，，套板子，，已经好几次套板子是没用的情况了，，，而且除了入门的线段树的题，，，都不是之套板子就能出结果的，，，都要在某些地方加一些判断，，，或者对数据的处理，，，线段树只是众多工具之一啊，，不是万能的呐，，，，</p>
<p>(end)</p>
<p>动手总比只想所得到的多一些，，即使结果不尽人意呐~</p>
]]></content>
      <categories>
        <category>ACM-线段树</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>hdu-5023线段树刷题</title>
    <url>/2018/10/18/hdu-5023%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这道题和上次做的那道染色问题一样，，，这次主要是看看我再过去两三天之后，，大概凭借以前的记忆敲出来得多长的时间，，，，</p>
<p>结果是，，，大体的框架没问题了，，，，一遍下来编译也没问题，，，但是，，细节问题有两个，，，</p>
<ul>
<li>数组写成了1e6而不是1e6+10虽然对本题没什么影响，，</li>
<li>建树中的初始化操作时染色初始化为2，，，所以应该是从右往左数的第二个bit记为1，，，然后我就少算了一位，，，因为bitset可以看作是一个从右向左并且从0开始的数组，，所以是col[1] = 1，，，这样wa了一发</li>
<li>最后一个，，，，输出格式错误，，，，噗噗噗噗</li>
</ul>
<span id="more"></span>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>思路与poj那一道一模一样，，直接扔代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> l;<br>    <span class="hljs-keyword">int</span> r;<br>    <span class="hljs-keyword">int</span> laz;<br>    <span class="hljs-built_in">bitset</span>&lt;30&gt; col;<br>&#125;node[maxn &lt;&lt; <span class="hljs-number">2</span>];<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout &lt;&lt; node[rt].col &lt;&lt; endl;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> l , <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    node[rt].l = l;<br>    node[rt].r = r;<br>    node[rt].laz = <span class="hljs-number">0</span>;<br>    node[rt].col = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(node[rt].l == node[rt].r)<br>    &#123;<br>        <span class="hljs-built_in">bitset</span>&lt;30&gt; t;<br>        t.<span class="hljs-built_in">set</span>(<span class="hljs-number">1</span>);<br>        node[rt].col = t;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = (node[rt].l + node[rt].r) &gt;&gt; <span class="hljs-number">1</span>;<br><br>    build(rt &lt;&lt; <span class="hljs-number">1</span> , l , mid);<br>    build(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , mid + <span class="hljs-number">1</span> , r);<br>    node[rt].col = node[rt &lt;&lt; <span class="hljs-number">1</span>].col | node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].col;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(node[rt].laz)<br>    &#123;<br>        node[rt &lt;&lt; <span class="hljs-number">1</span>].col = node[rt].col;<br>        node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].col = node[rt].col;<br><br>        node[rt &lt;&lt; <span class="hljs-number">1</span>].laz = node[rt].laz;<br>        node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].laz = node[rt].laz;<br><br>        node[rt].laz = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> L , <span class="hljs-keyword">int</span> R , <span class="hljs-keyword">int</span> C)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(L &lt;= node[rt].l &amp;&amp; node[rt].r &lt;= R)<br>    &#123;<br>        <span class="hljs-built_in">bitset</span>&lt;30&gt; t;<br>        t.<span class="hljs-built_in">set</span>(C - <span class="hljs-number">1</span>);<br>        node[rt].col = t;<br>        node[rt].laz = C;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    pushdown(rt);<br><br>    <span class="hljs-keyword">int</span> mid = (node[rt].l + node[rt].r) &gt;&gt; <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">if</span>(L &lt;= mid)    update(rt &lt;&lt; <span class="hljs-number">1</span> , L , R , C);<br>    <span class="hljs-keyword">if</span>(R &gt;  mid)    update(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , L , R , C);<br>    node[rt].col = node[rt &lt;&lt; <span class="hljs-number">1</span>].col | node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].col;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-built_in">bitset</span>&lt;30&gt; <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> L , <span class="hljs-keyword">int</span> R)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(L &lt;= node[rt].l &amp;&amp; node[rt].r &lt;= R)<br>    &#123;<br>        <span class="hljs-keyword">return</span> node[rt].col;<br>    &#125;<br><br>    pushdown(rt);<br>    <span class="hljs-function"><span class="hljs-built_in">bitset</span>&lt;30&gt; <span class="hljs-title">ans</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-keyword">int</span> mid = (node[rt].l + node[rt].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(L &lt;= mid)    ans |= query(rt &lt;&lt; <span class="hljs-number">1</span> , L , R);<br>    <span class="hljs-keyword">if</span>(R &gt;  mid)    ans |= query(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , L , R);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n , m;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span> , &amp;n , &amp;m) &amp;&amp; n &amp;&amp; m)<br>    &#123;<br>        build(<span class="hljs-number">1</span> , <span class="hljs-number">1</span> , n);<br>        <span class="hljs-keyword">while</span>(m--)<br>        &#123;<br>            <span class="hljs-keyword">char</span> c;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot; %c&quot;</span> , &amp;c);<br>            <span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;P&#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">int</span> l , r , v;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span> , &amp;l , &amp;r , &amp;v);<br>                update(<span class="hljs-number">1</span> , l , r , v);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">int</span> l , r;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span> , &amp;l , &amp;r);<br>                <span class="hljs-built_in">bitset</span>&lt;30&gt; ans = query(<span class="hljs-number">1</span> , l , r);<br>                <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">30</span>; ++i , ans&gt;&gt;=<span class="hljs-number">1</span>)<br>                    <span class="hljs-keyword">if</span>(ans[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span>)<br>                        <span class="hljs-keyword">if</span>(flag)<br>                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span> , i) , flag = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">else</span><br>                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span> , i);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>先水一题，，，下午继续QAQ</p>
<p>(end)</p>
]]></content>
      <categories>
        <category>ACM-线段树</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo Nunjucks Errors 解决方法</title>
    <url>/2019/09/02/hexo-Nunjucks-Errors-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>这玩意总会爆奇奇怪怪的错，，这次生成文章的时候就报了一个 <code>Nunjucks Errors: balabala</code> 后面还是文章的 html 信息等等等，，这个错误是因为文章里出现了一些类似 ``{{}}`` 的内容什么的（比如我现在打出的这个，，，，然后 hexo 的文章渲染使用的是 ``Nunjucks`` ，他会将那几个大括号识别成自己的语法，，这样生成的时候就会报错，，，

<span id="more"></span>

解决方法是： 可以根据下面的报错信息，找到可能出错的地方，，比如说这样的，，``$a^{{a_1}^{{a_2}}}$`` 这样的公式什么的，，前后加一个这个： <code>    </code> ，， 也就是： ``\$a^{{a_1}^{{a_2}}}$```</p>
<p>这样改之后应该就行了，，，</p>
<p><a href="http://blog.tcs-y.com/2018/01/22/hexo-quote-ng2/">参考博客</a></p>
<p><a href="https://github.com/mozilla/nunjucks/issues/388#issuecomment-77730107">github 上的issue </a></p>
<p>(end…)</p>
]]></content>
      <categories>
        <category>hexo-报错</category>
      </categories>
      <tags>
        <tag>报错</tag>
        <tag>解决方法</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客源文件备份至github设置</title>
    <url>/2019/03/18/hexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%87%E4%BB%BD%E8%87%B3github%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>弄这个的主要原因是之前搞崩过两次博客（手贱在上传文件的时候按ctrl+c，，在恢复的时候总是怕再出错，，每次都备份了好几遍源文件，，，尤其是那些md文件，，，毕竟丢了就真的只能重写了啊，，，</p>
<p>今天偶然看到有人把md文件和渲染后的html文件放在一个文件夹中，，，感觉不错，，，后来看完他的设置后，，感觉有一点不好：md文件不集中，，，真要拿回所有的md文件很麻烦，，，而且还要动配置文件 <code>_config.yml</code> ，，实在是不想因为改动这个出现各种奇奇怪怪的错误了，，不是说不会解决，，，主要是太麻烦:(，，，，</p>
<p>后来又看到现在弄的这个方法： <strong>将主要的源文件定期备份到另一个分支里</strong> ，，，这样的话所有文件都在一个分支里，，，用的时候直接拉下来，，重新配置hexo环境等等就行了，，，</p>
<span id="more"></span>
<h1 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h1><p>主要的过程我是按照<a href="https://blog.csdn.net/White_Idiot/article/details/80685990">一个博主的文章</a>来的，，，但是自己记录一下，，以免之后忘记没处找，，</p>
<h2 id="创建分支目录"><a href="#创建分支目录" class="headerlink" title="创建分支目录"></a>创建分支目录</h2><p>现创建一个要备份所有文件的文件夹，，，我的是 <code>hexoBackup</code>：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">$ <span class="hljs-built_in">mkdir</span> hexoBackup<br></code></pre></td></tr></table></figure>
<p>然后将GitHub上的博客内容 <code>clone</code> 下来：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.com/yourname/yourname.github.io hexoBackup<br></code></pre></td></tr></table></figure>
<p>删除所有 <strong>除了 <code>.git</code> 的文件</strong> </p>
<blockquote>
<p>主要是为了得到版本管理的.git</p>
</blockquote>
<figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">$ <span class="hljs-built_in">cd</span> hexoBackup <br>$ rm -r *<br></code></pre></td></tr></table></figure>
<p>把要hexo里要备份的文件、文件夹放到这个文件夹里：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">scaffolds/<br>source/<br>themes/<br>.gitignore<br>_config.ym;<br>package.json<br></code></pre></td></tr></table></figure>
<p>然后删除所有的复制过来的文件中的 <code>.git</code> 文件夹，，，不然后面不能提交</p>
<h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><p>创建一个名为 <code>hexoBackup</code> 的分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git checkout -b hexoBackup<br></code></pre></td></tr></table></figure>
<p>保存所有文件到暂存区：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git add --all<br></code></pre></td></tr></table></figure>
<p>提交变更：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git commit -m <span class="hljs-string">&quot;create hexoBackup branch&quot;</span><br></code></pre></td></tr></table></figure>
<p>推送到GitHub，，并用 <code>--set-upstream</code> 与 <code>origin</code> 创建关联，，将 <code>hexoBackup</code> 设置为默认分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git push --set-upstream origin hexoBackup<br></code></pre></td></tr></table></figure>
<h2 id="合并管理"><a href="#合并管理" class="headerlink" title="合并管理"></a>合并管理</h2><p>我看的那篇博文的博主将这两个文件夹合并操作了（应该是这个意思），，，我想了想算了，，，嘿嘿嘿</p>
<h1 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h1><p>像往常那样写博客，，，提交</p>
<p>更新备份的话就是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git add .<br>$ git commit -m <span class="hljs-string">&quot;balabala&quot;</span><br>$ git push origin hexoBackup<br></code></pre></td></tr></table></figure>
<h1 id="迁移恢复"><a href="#迁移恢复" class="headerlink" title="迁移恢复"></a>迁移恢复</h1><ul>
<li>环境配置：git, nodejs, npm</li>
<li>clone仓库</li>
<li>执行命令:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ npm install hexo-cli -g<br>$ npm install<br>$ npm install hexo-deployer-git<br></code></pre></td></tr></table></figure>
<p><a href="https://www.jianshu.com/p/baab04284923">参考1</a></p>
<p><a href="https://blog.csdn.net/White_Idiot/article/details/80685990">参考2</a></p>
<p><del>(end)</del></p>
<p>刚写完就发现一个<a href="https://github.com/coneycode/hexo-git-backup">备份插件</a>，，以后在说</p>
]]></content>
      <categories>
        <category>hexo博客相关</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo更新域名以及配置</title>
    <url>/2020/02/21/hexo%E6%9B%B4%E6%96%B0%E5%9F%9F%E5%90%8D%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>现在这个博客的域名是用的是 freenom 下的免费域名进行解析，所以每年都要进行更新一次域名，以及对应的 cloudflare 下的解析，这篇博客是用来记录这一过程，为了之后再重复这个操作做个记录。</p>
<span id="more"></span>
<ul>
<li>首先在 <a href="freenom.com">freenom</a> 上申请新的域名，貌似申请过的域名在一年后可以再次申请，2333</li>
<li>去 <a href="cloudflare.com">cloudflare</a> 上配置DNS解析：</li>
<li>Add Site, Select Plan, Add more DNS records:</li>
<li>添加一项A类型、域名为新域名、IP 为 <code>192.30.252.153</code> Auto TTL、 DNS ONLY(灰色)记录</li>
<li>添加一项A类型、域名为新域名、IP 为 <code>192.30.252.154</code> Auto TTL、 DNS ONLY(灰色)记录</li>
<li>添加一项CNAME类型、www、31415926535x.github.io、Proxied(黄色)记录</li>
<li>更改域名服务器：去 freenom 下的 nameservers，添加 <code>burt.ns.cloudflare.com</code> 和 <code>molly.ns.cloudflare.com</code> cdn域名</li>
<li>修改 <code>hexo\source\CNAME</code> </li>
<li>修改 <code>hexo\_config.yml</code> 中的 <code>url</code> </li>
<li>hexo 更新即可</li>
</ul>
<p>end</p>
]]></content>
  </entry>
  <entry>
    <title>microsoft_refresh_token获取错误等导致的multi-factor authentication错误</title>
    <url>/2021/02/25/microsoft-refresh-token%E8%8E%B7%E5%8F%96%E9%94%99%E8%AF%AF%E7%AD%89%E5%AF%BC%E8%87%B4%E7%9A%84multi-factor-authentication%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>前几天无聊申请了一个 Microsoft 的开发者账号，目的当然是尝试白嫖可以续订的5T OneDrive网盘，，然后，根据网上的一些教程，利用 cloudfare 搭建了一个网盘页面。这里需要用到 Microsoft graph 的一些服务，同时需要手动获取到 api 的一些 token 。本来搭建的好好的，可能是因为 多重验证的问题，导致出现 </p>
<span id="more"></span>
<figure class="highlight lsl"><table><tr><td class="code"><pre><code class="hljs lsl">Uncaught (in promise) getAccessToken error <span class="hljs-string">&quot;&#123;<span class="hljs-subst">\&quot;</span>error<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>invalid_grant<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>error_description<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>AADSTS50079: Due to a configuration change made by your administrator, or because you moved to a new location, you must enroll in multi-factor authentication to access &#x27;00000003-0000-0000-c000-000000000000&#x27;.<span class="hljs-subst">\\</span>r<span class="hljs-subst">\\</span>nTrace ID: xxxxxxxxxxxxxxx<span class="hljs-subst">\\</span>r<span class="hljs-subst">\\</span>nCorrelation ID: xxxxxxxxxxxxxxxxxxxxx<span class="hljs-subst">\\</span>r<span class="hljs-subst">\\</span>nTimestamp: 2021-02-24 15:47:18Z<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>error_codes<span class="hljs-subst">\&quot;</span>:[50079],<span class="hljs-subst">\&quot;</span>timestamp<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>2021-02-24 15:47:18Z<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>trace_id<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>xxxxxxxxxxxxxxxxxx<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>correlation_id<span class="hljs-subst">\&quot;</span>:\xxxxxxxxxxxxxxxxxxxxx<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>error_uri<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>https://login.microsoftonline.com/error?code=50079<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>suberror<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>basic_action<span class="hljs-subst">\&quot;</span>&#125;&quot;</span><br></code></pre></td></tr></table></figure>
<p>的错误： <a href="https://github.com/microsoft/Partner-Center-PowerShell/issues/259">https://github.com/microsoft/Partner-Center-PowerShell/issues/259</a></p>
<p>然后就只能用 rclone 来重新获取一个 refresh_token ：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./rclone</span> authorize <span class="hljs-string">&quot;onedrive&quot;</span> <span class="hljs-string">&quot;应用程序(客户端)ID&quot;</span> <span class="hljs-string">&quot;应用程序密码&quot;</span><br></code></pre></td></tr></table></figure>
<p>或者： <a href="https://heymind.github.io/tools/microsoft-graph-api-auth">https://heymind.github.io/tools/microsoft-graph-api-auth</a></p>
<p>然后把 KV 中的 refresh_token 改了应该就行了。。</p>
<p>导致多重验证的原因，可能是因为之前设置了 authentication app ，，然后出现了这个问题，，也有可能是 mover.io 大批量搬文件的锅（应该无关），，或者 github 的自动调用续订脚本的问题等等。。。</p>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>next-修改</title>
    <url>/2019/03/31/next-%E4%BF%AE%E6%94%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>搭建hexo+next这个博客也有一年多了，，期间碰到很多的事情，，比如说自己把博客搞崩，更新等等，，，之前做的一些改变，美化什么的因为太过久远，，重新设置一些东西还得一点一点的重新的去搜，，或者去翻书签记录，，想着记录一下折腾过的东西，，以后可能用得上，，</p>
<span id="more"></span>
<h1 id="底栏添加音乐"><a href="#底栏添加音乐" class="headerlink" title="底栏添加音乐"></a>底栏添加音乐</h1><p>很早之前就尝试添加过音乐，但是网易云的外链时间一长就掉了，，而且很不好看，，于是就放弃了，，</p>
<p>今天又尝试弄一下，，感觉还行，，添加音乐也方便，，嘿嘿，，</p>
<p>用的 Aplayer 这个插件，，，</p>
<p><a href="https://www.jianshu.com/p/23e33d1fdc4e">参考</a></p>
<p>主要变化：</p>
<ul>
<li>在\next\source\ 下添加了dist 文件夹同时增加一个 <code>music.js</code> 歌单文件，，以后添加音乐就改这个就行了</li>
<li>\next\layout_layout.swig，，中添加插件的调用，，和红星什么的在一起，，</li>
</ul>
]]></content>
      <categories>
        <category>hexo博客相关</category>
      </categories>
      <tags>
        <tag>hexo_blog</tag>
        <tag>next_theme</tag>
        <tag>hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>poj-1151矩形面积并-线段树</title>
    <url>/2018/10/30/poj-1151%E7%9F%A9%E5%BD%A2%E9%9D%A2%E7%A7%AF%E5%B9%B6-%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>线段树问题里的另一个问题，，，矩形面积并，，，，</p>
<p>之前看lazy更新时看到下面这个的讲解，，，一大堆文字还有一大堆的图，，，，当时果断跳过，，，</p>
<p>今天花了一下午加一晚上的时间看了看这块知识，，，然后尝试自己写出代码，，，算是简单的了解一下这块，，，</p>
<span id="more"></span>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p><a href="http://poj.org/problem?id=1151">这道矩形面积并</a>问题的大意是给很多个矩形，，矩形之间可能有交集，，，然后问你这一大片的图形面积是多少，，，，</p>
<p>数据量不大，，看到有很多人是暴力过的，，，</p>
<p>但是用线段树来当作练习题锻炼锻炼思维还是很好的QAQ</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p><a href="http://www.cppblog.com/menjitianya/archive/2016/02/25/212891.html">一开始我是看这篇博客有关矩形面积并的知识</a>，，，<br>这篇博客讲解的思路很不错，，，一遍之后大致了解了整个解决问题的思路，，，，但是它没有相应的练习题以及代码，，，，我完全不知道该从哪里下手，，，线段树的具体如何实现一脸懵逼，，，，还有，，，一般这种题都是要将一个方向的坐标 <strong>离散化</strong>，，，，嗯，，又是这个东西，，，，更是一脸的懵逼，，，，</p>
<p><a href="https://blog.csdn.net/riba2534/article/details/76851233">然后看了这篇博客，，</a>对着代码，，，然后顺着思路写出来了，，，</p>
<p>主要的几点：</p>
<ul>
<li>前面两个博客的图很形象的把思路理了一遍，，，，就是枚举一个方向，，比如y方向，，然后，，将x方向的坐标离散化，，分成若干个 <strong>单位线段</strong>，，，，线段树维护这个单位线段，，，还是那个博客形象一些</li>
<li>整个图形的面积可以分成若干个小的矩形，，，然后加起来就行，，，，</li>
</ul>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa  cout &lt;&lt; x[r + 1] &lt;&lt; <span class="hljs-meta-string">&quot;----&quot;</span> &lt;&lt; x[l] &lt;&lt; endl;</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">205</span>;<br><span class="hljs-keyword">double</span> x[maxn &lt;&lt; <span class="hljs-number">2</span>];           <span class="hljs-comment">//所有的x的数据</span><br><span class="hljs-comment">//每一条线段</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">segment</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">double</span> y;<br>    <span class="hljs-keyword">double</span> l;<br>    <span class="hljs-keyword">double</span> r;<br>    <span class="hljs-keyword">int</span> flag;       <span class="hljs-comment">//1 or -1: 入边or出边</span><br>    segment()&#123;&#125;<br>    segment(<span class="hljs-keyword">double</span> y, <span class="hljs-keyword">double</span> l , <span class="hljs-keyword">double</span> r , <span class="hljs-keyword">int</span> flag):y(y) , l(l) , r(r) , flag(flag)&#123;&#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> segment &amp;res)<br>    &#123;<br>        <span class="hljs-keyword">return</span> y &lt; res.y;<br>    &#125;<br>&#125;seg[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><br><span class="hljs-comment">//线段树维护所有的单位线段（离散后的）</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> cov;<br>    <span class="hljs-keyword">double</span> len;<br>&#125;node[maxn &lt;&lt; <span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> l , <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(node[rt].cov)<br>        node[rt].len = x[r + <span class="hljs-number">1</span>] - x[l];<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l == r)<br>        node[rt].len = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span><br>        node[rt].len = node[rt &lt;&lt; <span class="hljs-number">1</span>].len + node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].len;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> l , <span class="hljs-keyword">int</span> r , <span class="hljs-keyword">int</span> L , <span class="hljs-keyword">int</span> R , <span class="hljs-keyword">int</span> cov)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)<br>    &#123;<br>        node[rt].cov += cov;<br>        pushdown(rt , l , r);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(L &lt;= mid)    update(rt &lt;&lt; <span class="hljs-number">1</span> , l , mid , L , R , cov);<br>    <span class="hljs-keyword">if</span>(R &gt;  mid)    update(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , mid + <span class="hljs-number">1</span> , r , L , R , cov);<br>    <span class="hljs-comment">//pushdown</span><br>    pushdown(rt , l , r);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">int</span> q = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;n) &amp;&amp; n)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(x , <span class="hljs-number">0</span> , <span class="hljs-keyword">sizeof</span> x);<br><br>        <span class="hljs-keyword">double</span> x1 , y1 , x2 , y2;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf%lf%lf%lf&quot;</span> , &amp;x1 , &amp;y1 , &amp;x2 , &amp;y2);<br>            seg[count]=segment(y1 , x1 , x2 , <span class="hljs-number">1</span>);<br>            x[count++] = x1;<br>            seg[count]=segment(y2 , x1 , x2 , <span class="hljs-number">-1</span>);<br>            <span class="hljs-comment">//segment[i].y = y1;segment[i].l = x1;segment[i].r = x2;segment[i].flag = 1;</span><br>            <span class="hljs-comment">//segment[i + 1].y = y2;segment[i + n].l = x1;segment[i + n].r = x2;segment[i + n].flag = -1;</span><br><br>            x[count++] = x2;<br>        &#125;<br>        <span class="hljs-comment">//离散</span><br>        sort(seg , seg + count);<br>        sort(x , x + count);<br><br>        <span class="hljs-keyword">int</span> sz = unique(x , x + count) - x;<br>        <span class="hljs-keyword">double</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; count; ++i)<br>        &#123;<br>            <span class="hljs-keyword">int</span> l = lower_bound(x , x + sz , seg[i].l) - x;<br>            <span class="hljs-keyword">int</span> r = lower_bound(x , x + sz , seg[i].r) - x - <span class="hljs-number">1</span>;<br>            update(<span class="hljs-number">1</span> , <span class="hljs-number">0</span> , sz , l , r , seg[i].flag);<br>            ans += node[<span class="hljs-number">1</span>].len * (seg[i + <span class="hljs-number">1</span>].y - seg[i].y);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Test case #%d\nTotal explored area: %.2f\n\n&quot;</span>,q++,ans);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>算了，，，先鸽了，，，细节那天再补一下，，，，<br>(loading,,,,)</p>
]]></content>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>poj-1251-最小生成树</title>
    <url>/2018/11/20/poj-1251-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>前段时间数据结构的课上提到了了<strong>最小生成树</strong>，，暑假的集训虽然再学并查集的时候看过一些，，但是之后好久没再用过，，早就忘记了，，，今天抽时间看了看，，把最小生成树的两个主要算法 <strong>prim</strong> 和 <strong>kruskal</strong>了解了一下，，，做几道题，，把自己的模板弄出来</p>
<span id="more"></span>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>这两个算法很简单，，，看几遍就可以去敲去了，，，</p>
<p><a href="https://blog.csdn.net/mgsky1/article/details/77840286">放几个别人的博客，，防止以后忘记了能快速回想起来</a><br><a href="https://blog.csdn.net/m0_37345402/article/details/76474311">还有一个</a></p>
<p>prim算法主要的思路是将最小生成树慢慢的变大，，，<br>kruskal算法主要是利用并查集将多个树也就是森林慢慢的合并成最后的树</p>
<h1 id="模板代码"><a href="#模板代码" class="headerlink" title="模板代码"></a>模板代码</h1><p><a href="http://poj.org/problem?id=1251">做了一道模板题</a>，，题意就是对给定的一个图，，去掉一些边，，求花费最小的方案，，，其实就是权值和最小的那一种，，</p>
<p>prim方法：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">30</span>;<br><br><span class="hljs-keyword">int</span> mp[maxn][maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> dis[maxn];<br><span class="hljs-keyword">int</span> n , m;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">prim</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(vis , <span class="hljs-literal">false</span> , <span class="hljs-keyword">sizeof</span> vis);<br>    vis[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        dis[i] = mp[<span class="hljs-number">1</span>][i];<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">int</span> m = inf;<br>        <span class="hljs-keyword">int</span> p = <span class="hljs-number">-1</span>;<br>        <span class="hljs-comment">//从所有的为加入最小生成树集合的点集里找到一个边权最小的</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>            <span class="hljs-keyword">if</span>(!vis[j] &amp;&amp; dis[j] &lt; m)<br>            &#123;<br>                m = dis[j];<br>                p = j;<br>            &#125;<br>        <span class="hljs-keyword">if</span>(m == inf)    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        sum += m;<br>        vis[p] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">//更新加入这个点之后能够到达其他点的值</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>            <span class="hljs-keyword">if</span>(!vis[j] &amp;&amp; dis[j] &gt; mp[p][j])<br>                dis[j] = mp[p][j];<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;n) &amp;&amp; n)<br>    &#123;<br>        <span class="hljs-keyword">char</span> c1 , c2;<br>        <span class="hljs-keyword">int</span> m1 , m2;<br>        <span class="hljs-built_in">memset</span>(mp , inf , <span class="hljs-keyword">sizeof</span> mp);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            mp[i][i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot; %c%d&quot;</span> , &amp;c1 , &amp;m1);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m1; ++j)<br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot; %c%d&quot;</span> , &amp;c2 , &amp;m2);<br>                mp[c1 - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">1</span>][c2 - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">1</span>] = m2;<br>                mp[c2 - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">1</span>][c1 - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">1</span>] = m2;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span> , prim());<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p>
<p>kruskal方法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">200</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">int</span> father[maxn];<br><span class="hljs-keyword">int</span> n , m;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> u , v , w;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> edge &amp;r) <span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> w &lt; r.w;<br>    &#125;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> tot;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _u , <span class="hljs-keyword">int</span> _v , <span class="hljs-keyword">int</span> _w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].u = _u;<br>    edge[tot].v = _v;<br>    edge[tot++].w = _w;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x == father[x])  <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> father[x] = find(father[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        father[i] = i;<br>    sort(edge , edge + tot);<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; tot; ++i)<br>    &#123;<br>        <span class="hljs-keyword">int</span> t1 = find(edge[i].u);<br>        <span class="hljs-keyword">int</span> t2 = find(edge[i].v);<br>        <span class="hljs-comment">//u , v如果不在一个森林中就合并</span><br>        <span class="hljs-keyword">if</span>(t1 != t2)<br>        &#123;<br>            sum += edge[i].w;<br>            father[t1] = t2;<br>            ++cnt;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cnt == n - <span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(cnt &lt; n - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span>            <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;n) &amp;&amp; n)<br>    &#123;<br>        <span class="hljs-keyword">char</span> c1 , c2;<br>        <span class="hljs-keyword">int</span> m1 , m2;<br>        tot = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot; %c%d&quot;</span> , &amp;c1 , &amp;m1);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m1; ++j)<br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot; %c%d&quot;</span> , &amp;c2 , &amp;m2);<br>                addedge(c1 - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">1</span> , c2 - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">1</span> , m2);<br>                addedge(c2 - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">1</span> , c1 - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">1</span> , m2);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span> , kruskal());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>(end)</p>
]]></content>
      <categories>
        <category>ACM-最小生成树</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>poj-2253-poj-1797_最短路练习</title>
    <url>/2018/11/17/poj-2253-%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><a href="http://poj.org/problem?id=2253">一道最短路的变形题</a>，，虽然说解法不止这一种，，</p>
<p>这道题看了好久都没看懂题意，，不知到在求什么，，，最后迫不得已去看了别人的思路，，理清思路之后，，代码就好写了，，，只需在原来的dijkstra板子上改一改就行了，，</p>
<p>补：第二道题和第一道题类似，，再改一改就行了，，</p>
<span id="more"></span>
<h1 id="分析与思路"><a href="#分析与思路" class="headerlink" title="分析与思路"></a>分析与思路</h1><p>这道题的大致题意就是：给你n块石头的坐标，，然后问你从第一块石头到第二块石头的所有可到的m条路径中，，那m条最长的路中的最小的，，</p>
<p>所以分两步计算，，，</p>
<ul>
<li><p>先求 i-&gt;j m条路径中每条路径中的最大值，，</p>
</li>
<li><p>然后求这m个最大值中的最小值，，，</p>
</li>
</ul>
<p>按照这个思路，，dijkstra中的松弛条件就要改成</p>
<p> $dis[v] = min(dis[v] , max(dis[u] , w[u][v]))$</p>
<ul>
<li>dis[v]表示原点1到v的最大路中的最小值，，同理dis[u]也一样</li>
<li>w[u][v]表示u-&gt;v的权值</li>
<li>求1-&gt;v的最大路中的最小值就等于 <strong>之前从别的路径到v中求得的最大路中的最小值</strong> 与 <strong>1-&gt;u-&gt;v这条路径中的最大路中的最小值，，（也就是 1-&gt;u 中最大路的最小值 和 u-&gt;v的权值相比较取最大的）</strong> 的最小值</li>
</ul>
<p>对了，，网上看到的别人的博客大多都是用邻接矩阵实现的，，，然后我尝试用邻接表实现的，，，注意对数据的处理，，，因为是给的点的坐标而不是点的编号，，，所以是每个点之间都有路径，，，最后，，用邻接表是实现记得处理完一组数据要把邻接表清空，，，<br>还有输出在poj上g++用%.3f</p>
<p><a href="http://poj.org/problem?id=1797">第二道题就是前一道的反过来，，，求所有路径中最小值的最大值，，，</a></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//poj-2253</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v;<br>    <span class="hljs-keyword">double</span> c;<br>    node()&#123;&#125;<br>    node(<span class="hljs-keyword">int</span> _v , <span class="hljs-keyword">double</span> _c):v(_v) , c(_c)&#123;&#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> node &amp;r) <span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> c &gt; r.c;<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v;<br>    <span class="hljs-keyword">double</span> w;<br>    edge(<span class="hljs-keyword">int</span> _v = <span class="hljs-number">0</span> , <span class="hljs-keyword">double</span> _w = <span class="hljs-number">0</span>):v(_v) , w(_w)&#123;&#125;<br>&#125;;<br><span class="hljs-built_in">vector</span>&lt;edge&gt; e[maxn];<br><span class="hljs-keyword">double</span> dis[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u , <span class="hljs-keyword">int</span> v , <span class="hljs-keyword">double</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[u].push_back(edge(v , w));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis , <span class="hljs-literal">false</span> , <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        dis[i] = inf;<br>    dis[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">priority_queue</span>&lt;node&gt; q;<br>    <span class="hljs-keyword">while</span>(!q.empty())   q.pop();<br>    q.push(node(<span class="hljs-number">1</span> , <span class="hljs-number">0</span>));<br>    node t;<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        t = q.top();q.pop();<br>        <span class="hljs-keyword">int</span> u = t.v;<br>        <span class="hljs-keyword">if</span>(vis[u])  <span class="hljs-keyword">continue</span>;<br>        vis[u] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; e[u].size(); ++i)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = e[t.v][i].v;<br>            <span class="hljs-keyword">double</span> w = e[u][i].w;<br><br>            <span class="hljs-keyword">if</span>(!vis[v])<br>            &#123;<br>                dis[v] = min(dis[v] , max(dis[u] , w));<br>                q.push(node(v , dis[v]));<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> q = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;n) != EOF &amp;&amp; n)<br>    &#123;<br>        <span class="hljs-keyword">double</span> x[maxn] , y[maxn];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i  &lt;= n; ++i)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf%lf&quot;</span> , &amp;x[i] , &amp;y[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>            &#123;<br>                <span class="hljs-keyword">double</span> w = <span class="hljs-built_in">sqrt</span>((x[i] - x[j]) * (x[i] - x[j]) + (y[i] - y[j]) * (y[i] - y[j]));<br>                addedge(i , j , w);<br>                addedge(j , i , w);<br>            &#125;<br>        dijkstra();<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Scenario #%d\nFrog Distance = %.3lf\n\n&quot;</span> , q++ , dis[<span class="hljs-number">2</span>]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; maxn; ++i)<br>            e[i].clear();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//1797</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v;<br>    <span class="hljs-keyword">int</span> c;<br>    node()&#123;&#125;<br>    node(<span class="hljs-keyword">int</span> _v , <span class="hljs-keyword">int</span> _c):v(_v) , c(_c)&#123;&#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> node &amp;r) <span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> c &lt; r.c;<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v;<br>    <span class="hljs-keyword">int</span> w;<br>    edge(<span class="hljs-keyword">int</span> _v = <span class="hljs-number">0</span> , <span class="hljs-keyword">int</span> _w = <span class="hljs-number">0</span>):v(_v) , w(_w)&#123;&#125;<br>&#125;;<br><span class="hljs-built_in">vector</span>&lt;edge&gt; e[maxn];<br><span class="hljs-keyword">int</span> dis[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> n , m;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u , <span class="hljs-keyword">int</span> v , <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[u].push_back(edge(v , w));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis , <span class="hljs-literal">false</span> , <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + <span class="hljs-number">1</span>; ++i)<br>        dis[i] = <span class="hljs-number">0</span>;<br>    dis[<span class="hljs-number">1</span>] = inf;<br>    <span class="hljs-built_in">priority_queue</span>&lt;node&gt; q;<br>    <span class="hljs-keyword">while</span>(!q.empty())   q.pop();<br>    q.push(node(<span class="hljs-number">1</span> , inf));<br>    node t;<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        t = q.top();q.pop();<br>        <span class="hljs-keyword">int</span> u = t.v;<br>        <span class="hljs-keyword">if</span>(vis[u])  <span class="hljs-keyword">continue</span>;<br>        vis[u] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; e[u].size(); ++i)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = e[t.v][i].v;<br>            <span class="hljs-keyword">int</span> w = e[u][i].w;<br>            <span class="hljs-keyword">if</span>(!vis[v])<br>            &#123;<br>                dis[v] = max(dis[v] , min(dis[u] , w));<br>                q.push(node(v , dis[v]));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> q = <span class="hljs-number">1</span>;<span class="hljs-keyword">int</span> t;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;t);<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span> , &amp;n , &amp;m);<br>        <span class="hljs-keyword">int</span> u , v , w;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span> , &amp;u , &amp;v , &amp;w);<br>            addedge(u , v , w);<br>            addedge(v , u , w);<br>        &#125;<br>        dijkstra();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Scenario #%d:\n%d\n\n&quot;</span> , q++ , dis[n]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; maxn; ++i)<br>            e[i].clear();<br>    &#125;<br>&#125;<br><br>第二道题思路是对的，，，最后的输出忘记加:wa了<span class="hljs-number">4</span>次，，，一直以为是自己的邻接表+优先队列写的有问题，，，emmmmm ，，，坑<br></code></pre></td></tr></table></figure>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>因为期中考试等等各种事，，，好久没弄acm的这些东西了，，大概有三周或则一个月了吧，，，</p>
<p>后果就是之前学的，记得东西又快忘记了，，，板子也不能自己的默写下来了QAQ，，</p>
<p>接下来这一个半月得好好的努力一把了，，，，，（逃</p>
<p>(end)</p>
]]></content>
      <categories>
        <category>ACM-最短路</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>poj-2421-最小生成树刷题</title>
    <url>/2018/11/20/poj-2421-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>做了几道最小生成树的题，，，都是些板子题，，，直接套板子就能过，，，有一些是在输入数据做文章，，处理一下再建图就行了，，，</p>
<p><a href="http://poj.org/problem?id=2421">这道最小生成树的题稍微需要处理一下，，不过之后也就是套板子了，，，</a></p>
<span id="more"></span>
<h1 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h1><p>大致的题意就是给出n个村庄之间的距离，，，然后再给出几个村庄之间已经存在的路径，，，然后让你再添加几条路径使得所有的路径的和最小，，，问你添加的这个值是多少，，，</p>
<p>之前做的那几道题都是图已经弄好，，，路径是给定的问你最小的权重之和，，，这道题相当于给你部分图问你最小的权重和，，，</p>
<p>其实只要在加边建图的时候把给的边的权重置为0当作这条边可以走，但我们不算权重，，这样跑一遍最小生成树就能得到答案，，，</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><br><span class="hljs-keyword">int</span> mp[maxn][maxn];<br><span class="hljs-keyword">int</span> father[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> n , m;<br><span class="hljs-keyword">int</span> tot;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> u , v , w;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> edge &amp;r) <span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> w &lt; r.w;<br>    &#125;<br>&#125;edge[maxm];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _u , <span class="hljs-keyword">int</span> _v , <span class="hljs-keyword">int</span> _w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].u = _u;<br>    edge[tot].v = _v;<br>    edge[tot++].w = _w;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x == father[x])  <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> father[x] = find(father[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        father[i] = i;<br>    sort(edge , edge + tot);<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; tot; ++i)<br>    &#123;<br>        <span class="hljs-keyword">int</span> t1 = find(edge[i].u);<br>        <span class="hljs-keyword">int</span> t2 = find(edge[i].v);<br>        <span class="hljs-keyword">if</span>(t1 != t2)<br>        &#123;<br>            father[t1] = t2;<br>            sum += edge[i].w;<br>            ++cnt;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cnt == n - <span class="hljs-number">1</span>)    <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(n &lt; n - <span class="hljs-number">1</span>)   <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span>            <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;n) != EOF)<br>    &#123;<br>        <span class="hljs-keyword">int</span> u , v , w;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;w);<br>                addedge(i , j , w);<br>                addedge(j , i , w);<br>            &#125;<br><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;m);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span> , &amp;u , &amp;v);<br>            addedge(u , v , <span class="hljs-number">0</span>);<br>            addedge(v , u , <span class="hljs-number">0</span>);<br>            <span class="hljs-comment">//无向图记得正反都要加边，，，少加了一个wa了一发，，，，QAQ</span><br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span> , kruskal());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>(end)</p>
]]></content>
      <categories>
        <category>ACM-最小生成树</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>poj-2528线段树练习</title>
    <url>/2018/10/13/poj-2528%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><a href="http://poj.org/problem?id=2528">这道题坑了我好久啊啊啊啊，，，，</a></p>
<p>到现在也只是理解了kaungbin的代码，，，知道每一步做什么，，，但感觉就是哪里有些不对劲的样子，，，，</p>
<p>这道题有两个点是我感觉很重要的，，，一个是数据的离散化，，，另一个是线段树的变形，，，也就是它所维护的东西和之前见过的不一样了，，，，</p>
<span id="more"></span>
<h1 id="分析思路"><a href="#分析思路" class="headerlink" title="分析思路"></a>分析思路</h1><p>题意是这样的，，，在一个很大的区间里，，，不停的给每一个区间覆盖海报，，，每个覆盖的海报是不一样的，，然后问你最后一共有几个海报是露出来的，，，</p>
<p>大体上的思路是与所给贴海报相反的顺序贴海报，，，这样的话第一张（也就是原来顺序的最后一张）一定是全露出来的，，然后第二张（也就是原来顺序的倒数第二张）<strong>如果是在第一张的区间里说明它就被完全覆盖了，，如果是在第一张以外的其他地方，，，就说明这张也一定是露出来的，，，以此类推</strong>，，对于每一次判断出是露出来的++ans，，，最终全处理了就得到了答案，，，数据要离散后再用，，，</p>
<p>可以看出这样的写法中线段树只是用来判断每一次的贴海报，，，也就是说，，，线段树只是用来维护每一个区间是否被覆盖（更新），，，同时返回所要覆盖的区间是否有露出来的（查询），，，所以更新和查询的操作可以合并在一起，，，，</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="数据的离散化"><a href="#数据的离散化" class="headerlink" title="数据的离散化"></a>数据的离散化</h2><p>先说一下离散怎么实现:</p>
<p>首先原数据保存到x[maxn]数组，，，</p>
<p>然后把所有的数据复制到另一个数组a[maxn]，，，</p>
<p>对其排序，，，</p>
<p>去重，，，</p>
<p>然后对去重的数组a[maxn]遍历进行离散，，，</p>
<p>这样想要知道知道原来数据中x所对应离散后的位置就为hash[x]，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">sort(a , a + count);<br>count = unique(a , a + count) - a;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; count; ++i)<br>    hash[a[i]] = i;<br></code></pre></td></tr></table></figure>
<h2 id="最后的代码"><a href="#最后的代码" class="headerlink" title="最后的代码"></a>最后的代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lson rt&lt;&lt;1,l,mid</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rson rt&lt;&lt;1|1,mid+1,r</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> l;<br>    <span class="hljs-keyword">int</span> r;<br>    <span class="hljs-keyword">bool</span> cov;       <span class="hljs-comment">//表示这个节点所代表的区间是否被覆盖</span><br>&#125;node[maxn &lt;&lt; <span class="hljs-number">2</span>];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poster</span>       //表示海报的结构体</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> l;<br>    <span class="hljs-keyword">int</span> r;<br>&#125;poster[maxn &lt;&lt; <span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> l , <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    node[rt].l = l;<br>    node[rt].r = r;<br>    node[rt].cov = <span class="hljs-literal">false</span>;   <span class="hljs-comment">//每一个区间初始化为未覆盖</span><br>    <span class="hljs-keyword">if</span>(l == r)  <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    build(lson);<br>    build(rson);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">post</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> l , <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//当前节点，所要覆盖的额区间[l , r]</span><br>    <span class="hljs-keyword">if</span>(node[rt].cov)    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;                   <span class="hljs-comment">//若这个区间已经被覆盖直接返回</span><br>    <span class="hljs-keyword">if</span>(node[rt].l == l &amp;&amp; node[rt].r == r)<br>    &#123;<br>        node[rt].cov = <span class="hljs-literal">true</span>;                            <span class="hljs-comment">//未覆盖的前提下找到整个区间时</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">bool</span> res;<br>    <span class="hljs-keyword">int</span> mid = (node[rt].l + node[rt].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(r &lt;= mid)    res = post(rt &lt;&lt; <span class="hljs-number">1</span> , l , r);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l &gt; mid)res = post(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , l , r);<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">bool</span> r1 = post(rt &lt;&lt; <span class="hljs-number">1</span> , l , mid);<br>        <span class="hljs-keyword">bool</span> r2 = post(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , mid + <span class="hljs-number">1</span> , r);<br>        res = r1 || r2;                                 <span class="hljs-comment">//当跨两个区间时，，，要分别判断是否都是被覆盖的，，有一个没覆盖即露出就说明这个区间有露出的</span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(node[rt &lt;&lt; <span class="hljs-number">1</span>].cov &amp;&amp; node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].cov)      <span class="hljs-comment">//两个子区间都露出父节点也是露出</span><br>        node[rt].cov = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-keyword">int</span> hash[<span class="hljs-number">10000010</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> T;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;T);<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> n;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;n);<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span> , &amp;poster[i].l , &amp;poster[i].r);<br>            a[count++] = poster[i].l;<br>            a[count++] = poster[i].r;<br>            <span class="hljs-comment">//相邻存点</span><br>        &#125;<br>        <span class="hljs-comment">//离散</span><br>        sort(a , a + count);<br>        count = unique(a , a + count) - a;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; count; ++i)<br>            hash[a[i]] = i;<br><br>        build(<span class="hljs-number">1</span> , <span class="hljs-number">0</span> , count - <span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i)             <span class="hljs-comment">//反着遍历，，有露出的就增一</span><br>            <span class="hljs-keyword">if</span>(post(<span class="hljs-number">1</span> , hash[poster[i].l] , hash[poster[i].r]))<br>                ++ans;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span> , ans);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//一个缺点，，，这样单纯的离散数据会出错，，，像这一组，，，</span><br><span class="hljs-comment">//但是poj上没有考虑这种情况，，，，应该是标程的离散也是这样把，，，，，，</span><br><span class="hljs-comment">//3</span><br><span class="hljs-comment">//1 10</span><br><span class="hljs-comment">//1 3</span><br><span class="hljs-comment">//6 10</span><br><span class="hljs-comment">//2</span><br><span class="hljs-comment">//应该是3</span><br></code></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li><p>暑假时接触过一次数据的离散化，，，但是当时只是会用就行，，，最终还是忘记了，，，只知道这样一个名词，，，这次花了点时间记忆了一下，，，但是还是没有仔细深入的看看，，，因为以前看到的离散化时用的lower_bound()，，，，而且操作更加的复杂，，，过一段时间再看看把，，，，</p>
</li>
<li><p>看到网上好多人用的线段树的结构和之前写的那样一样，，，build(),update(),query()，，，但就是理解不了，，，QAQ，，，看了kuangbin的写法反到理解了，，，虽然基本是照搬过来的，，，，再过几天要重写一遍，，，</p>
</li>
</ul>
<p>(end)</p>
]]></content>
      <categories>
        <category>ACM-线段树</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>poj-2777线段树刷题</title>
    <url>/2018/10/16/poj-2777%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><a href="http://poj.org/problem?id=2777">这道题是一道线段树的染色问题,,,,</a></p>
<p>做了几道染色的问题，，好像渐渐的熟悉的染色问题的大概的解体思路，，，不再像刚开始做的时候那样一脸懵逼，，，只能去翻博客去看别人的思路，，，好歹这次没有看别人博客自己写出来，，，（除了一些细节没考虑到wa的一发，，，，逃</p>
<span id="more"></span>
<h1 id="分析与思路"><a href="#分析与思路" class="headerlink" title="分析与思路"></a>分析与思路</h1><h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>大概的意思就是给一个区间1~n，，，然后最多有30种颜色，，，q次操作对[l,r]这个区间染色，，，中间有一些询问区间[l , r]内一共有几种颜色，，，</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p>首先考虑线段树所维护的东西，，，染色问题大多是维护每个区间的颜色，，，对于这道题就是维护该区间的颜色的种类，，，然后对于每两个子区间都要向上合并颜色的种类，，，，相同的忽略一边的不同的就加一，，，求出父区间的种类数，，，，也就是更新操作，，，询问呢就是再询问的区间[L , R]里的话直接返沪这个区间的种类数，，，跨区间的递归继续向下查找，，，</p>
</li>
<li><p>然后考虑颜色，，，最多一共有30种，，，如果每个区间都用一个30长的数组col[30]去存放每种颜色的种类，，col[i] == 1表示这个区间有第i种颜色反之没有的话，，，空间消耗较大，，，而且相关的操作也不好表达，，，因为每个区间的每种颜色只有两种情况，，，有或没有，，，所以选择状态压缩来实现比较好，，，这里我想到前段时间看到的一个很好的状压stl—bitset，，，优点有很多，，，比如说：他就像bool数组一样但是每一位只占1bit，，，而且有很多成员函数很方便，，，具体的食用方法<a href="https://www.cnblogs.com/RabbitHu/p/bitset.html">戳这里</a></p>
</li>
<li><p>另一个需要注意的是，，，线段树要选择lazy的，，，还有一些细节：</p>
<blockquote>
<p>区间的合并需要<strong>或</strong>操作，，，包括更新和询问<br>初始时所有区间都为1<br>当整个区间都染色时是将该区间的node[rt].col<strong>改</strong>为c,,,而不是或<br>还有一个最坑人的，，，，题目不保证l &lt;= r，，，（poj上的题都这样的吗，，噗噗噗噗</p>
</blockquote>
</li>
</ul>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>这次又写成node结构体实现的了，，，还是因为这个理解起来很容易，，，，</p>
<p>但是缺点是占用的空间比较大，，，，</p>
<p>下次再写这道题的时候要换用另一种裸的了QAQ</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lson rt&lt;&lt;1,l,mid</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rson rt&lt;&lt;1|1,mid+1,r</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout &lt;&lt; node[rt].col &lt;&lt; endl;</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> l;<br>    <span class="hljs-keyword">int</span> r;<br>    <span class="hljs-keyword">int</span> laz;<br>    <span class="hljs-built_in">bitset</span>&lt;30&gt; col;         <span class="hljs-comment">//bitset,,表示该区间的颜色的种类</span><br>&#125;node[maxn &lt;&lt; <span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> l , <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    node[rt].l = l;<br>    node[rt].r = r;<br>    node[rt].laz = <span class="hljs-number">0</span>;<br>    node[rt].col = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(node[rt].l == node[rt].r)<br>    &#123;<br>        node[rt].col = <span class="hljs-number">1</span>;   <span class="hljs-comment">//初始化为1</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = (node[rt].l + node[rt].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    build(lson);<br>    build(rson);<br>    node[rt].col = node[rt &lt;&lt; <span class="hljs-number">1</span>].col | node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].col; <span class="hljs-comment">//记得更新，，用或</span><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(node[rt].laz)<br>    &#123;<br>        <span class="hljs-built_in">bitset</span>&lt;30&gt; t;<br>        t.<span class="hljs-built_in">set</span>(node[rt].laz - <span class="hljs-number">1</span>);    <span class="hljs-comment">//标记为laz那一个颜色</span><br>        node[rt &lt;&lt; <span class="hljs-number">1</span>].col = t;      <span class="hljs-comment">//不是或操作</span><br>        node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].col = t;<br><br>        node[rt &lt;&lt; <span class="hljs-number">1</span>].laz = node[rt].laz;<br>        node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].laz = node[rt].laz;<br><br>        node[rt].laz = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> L , <span class="hljs-keyword">int</span> R , <span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(L &lt;= node[rt].l &amp;&amp; node[rt].r &lt;= R)<br>    &#123;<br>        <span class="hljs-built_in">bitset</span>&lt;30&gt; t;<br>        t.<span class="hljs-built_in">set</span>(c - <span class="hljs-number">1</span>);<br>        node[rt].col = t;       <span class="hljs-comment">//同上</span><br>        node[rt].laz = c;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    pushdown(rt);<br>    <span class="hljs-keyword">int</span> mid = (node[rt].l + node[rt].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(L &lt;= mid)    update(rt &lt;&lt; <span class="hljs-number">1</span> , L , R , c);<br>    <span class="hljs-keyword">if</span>(R &gt;  mid)    update(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , L , R , c);<br>    node[rt].col = node[rt &lt;&lt; <span class="hljs-number">1</span>].col | node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].col;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-built_in">bitset</span>&lt;30&gt; <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> L , <span class="hljs-keyword">int</span> R)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//对每两个子区间合并，，，同样是或操作，，，所以函数返回值类型为bitset&lt;30&gt;</span><br>    <span class="hljs-comment">//最后的答案为 返回值.count()</span><br>    <span class="hljs-keyword">if</span>(L &lt;= node[rt].l &amp;&amp; node[rt].r &lt;= R)<br>    &#123;<br>        <span class="hljs-keyword">return</span> node[rt].col;<br>    &#125;<br>    pushdown(rt);<br>    <span class="hljs-keyword">int</span> mid = (node[rt].l + node[rt].r) &gt;&gt; <span class="hljs-number">1</span>;<br><br>    <span class="hljs-function"><span class="hljs-built_in">bitset</span>&lt;30&gt; <span class="hljs-title">ans</span> <span class="hljs-params">(<span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-keyword">if</span>(L &lt;= mid)    ans |= query(rt &lt;&lt; <span class="hljs-number">1</span> , L , R);      <span class="hljs-comment">//用或合并</span><br>    <span class="hljs-keyword">if</span>(R &gt;  mid)    ans |= query(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , L , R);<br>    <span class="hljs-comment">//cout &lt;&lt; ans &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n , t , m;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span> , &amp;n , &amp;t , &amp;m) != EOF)<br>    &#123;<br>        build(<span class="hljs-number">1</span> , <span class="hljs-number">1</span> , n);<br>        <span class="hljs-keyword">while</span>(m--)<br>        &#123;<br>            <span class="hljs-keyword">char</span> q;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot; %c&quot;</span> , &amp;q);<br>            <span class="hljs-keyword">if</span>(q == <span class="hljs-string">&#x27;C&#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">int</span> l , r , c;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;l , &amp;r , &amp;c);<br>                <span class="hljs-keyword">if</span>(l &gt; r)   swap(l , r);        <span class="hljs-comment">//巨坑！！！！</span><br>                update(<span class="hljs-number">1</span> , l , r , c);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">int</span> l , r;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span> , &amp;l , &amp;r);<br>                <span class="hljs-keyword">if</span>(l &gt; r)   swap(l , r);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span> , query(<span class="hljs-number">1</span> , l , r).count());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>算了不说了QAQ</p>
<p>(end)</p>
]]></content>
      <categories>
        <category>ACM-线段树</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>zoj-1610线段树刷题</title>
    <url>/2018/10/16/zoj-1610%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><a href="https://vjudge.net/contest/259382#problem/F">这道题是一道简单的线段树区间染色问题，，，</a></p>
<p>但是，，，，刚学lazy更新没多久的我看到这样的题心里还是发怵，，，</p>
<p>本来是一道简单的题一开始就是不知道怎么用线段树维护染色的区间，，，还有一个老毛病，，，还是不知道怎么把题目里的信息抽象出来，，，</p>
<p>明确线段树所要维护的信息以及如何对这些信息如何更新和查询，，，</p>
<span id="more"></span>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><ul>
<li><p>这道题和前几天做的那道贴海报的题很像，，，都是在一个很大的区间里进行连续的<strong>区间覆盖</strong>操作，，，</p>
</li>
<li><p>然后问你最后露出来的颜色、海报有几种，，，只不过这道题是要列出每种颜色出现了几个区间，，，</p>
</li>
<li><p>首先，，，这道题染色是区间之间的染色，，，就是说”1 2 1”是指在1 ， 2这个长度只有1的区间里染色成颜色1，，，而那道海报的题是指1 ， 2这两个块贴上海报，，，，这就意味着我们用线段树来维护染色操作时要将所给的左端点加一，，</p>
</li>
<li><p>全部染色完了(更新)之后，，，就是对整个区域查询，，，然后把有颜色覆盖的区域都保存到另一个数组里，，，也就是最后染色后的区域，，，然后遍历这个区域，，，数出对应的颜色的个数就行了，，，</p>
</li>
<li><p>更新时用到了lazy操作</p>
</li>
</ul>
<p><a href="https://blog.csdn.net/shuangde800/article/details/8186332">参考</a></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lson rt&lt;&lt;1,l,mid</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rson rt&lt;&lt;1|1,mid+1,r</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;<span class="hljs-meta-string">&quot;2333&quot;</span>&lt;&lt;endl;</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">8005</span>;<br><br><span class="hljs-keyword">int</span> col[maxn &lt;&lt; <span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> vis[maxn &lt;&lt; <span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> ans[maxn &lt;&lt; <span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(~col[rt])<br>    &#123;<br>        col[rt &lt;&lt; <span class="hljs-number">1</span>] = col[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>] = col[rt];<br>        col[rt] = <span class="hljs-number">-1</span>;<span class="hljs-comment">//父节点有多种染色标记为-1</span><br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> l , <span class="hljs-keyword">int</span> r , <span class="hljs-keyword">int</span> L , <span class="hljs-keyword">int</span> R , <span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)<br>    &#123;<br>        <span class="hljs-comment">//当该区间在所要染色的区间里时染色</span><br>        col[rt] = val;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(col[rt] == val)  <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(~col[rt])        <span class="hljs-comment">//染过色又要染其他颜色时下推</span><br>        pushdown(rt);<br>    <span class="hljs-keyword">if</span>(L &lt;= mid)    update(lson , L , R , val);<br>    <span class="hljs-keyword">if</span>(R &gt;  mid)    update(rson , L , R , val);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> l , <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(col[rt] &gt;= <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-comment">//把存在的颜色保存到vis数组里</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = l; i &lt;= r; ++i)<br>            vis[i] = col[rt];<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(col[rt] == <span class="hljs-number">-1</span> &amp;&amp; l != r)<br>    &#123;<br>        <span class="hljs-comment">//已经保存的区间就不再查询了</span><br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        query(lson);<br>        query(rson);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;n) != EOF)<br>    &#123;<br>        <span class="hljs-comment">//初始化操作，，，无需再建树</span><br>        <span class="hljs-built_in">memset</span>(col , <span class="hljs-number">-1</span> , <span class="hljs-keyword">sizeof</span>(col));<br>        <span class="hljs-built_in">memset</span>(vis , <span class="hljs-number">-1</span> , <span class="hljs-keyword">sizeof</span>(vis));<br>        <span class="hljs-built_in">memset</span>(ans , <span class="hljs-number">0</span> , <span class="hljs-keyword">sizeof</span>(ans));<br>        <span class="hljs-keyword">int</span> a , b , c;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span> , &amp;a , &amp;b , &amp;c);<br>            update(<span class="hljs-number">1</span> , <span class="hljs-number">1</span> , <span class="hljs-number">8000</span> , a + <span class="hljs-number">1</span> , b , c);<span class="hljs-comment">//左端点++</span><br>        &#125;<br><br>        query(<span class="hljs-number">1</span> , <span class="hljs-number">1</span> , <span class="hljs-number">8000</span>);<br><br>        <span class="hljs-comment">//数出每个颜色的个数</span><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(i &lt; maxn)<br>        &#123;<br>            <span class="hljs-keyword">int</span> color = vis[i];<br>            <span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(color == <span class="hljs-number">-1</span>)<br>            &#123;<br>                ++i;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">while</span>(~vis[j] &amp;&amp; vis[j] == color &amp;&amp; j &lt; maxn)   ++j;<br>            ++ans[color];<br>            i = j;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; maxn; ++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(ans[i])  <span class="hljs-comment">//颜色存在输出</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span> , i , ans[i]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>还是不能找不出维护的信息以及如何查询</li>
<li>染色问题是线段树的区间覆盖问题，，，节点一般保存颜色信息</li>
</ul>
]]></content>
      <categories>
        <category>ACM-线段树</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>poj-3268最短路</title>
    <url>/2018/10/13/poj-3268%E6%9C%80%E7%9F%AD%E8%B7%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这是一道最短路的模板题，，，不过虽然是模板题，，，还是有一些细节的，，，，QAQ</p>
<p>刚开始我的思路是建立一个汇点，，，然后求这个点为起点到终点x的最短路，，，再求终点到汇点的最短路，，，最后找一个和最大的，，，，这么想是因为和之前做的一道题很像，，，但像归像，，，终究不一样的，，，，这样还是求不出最后的结果，，，因为即使求出汇点到终点的最短路，，，但并不是每个点到终点的最短路，，，QAQ</p>
<span id="more"></span>
<h1 id="分析思路"><a href="#分析思路" class="headerlink" title="分析思路"></a>分析思路</h1><p>首先确定是单元最短路有关的题，，，而且题目保证正边，，，所以选择dijkstra解决，，，</p>
<p>其次，，，我之前好像还是单源最短路的理解不够清楚，，，</p>
<p><strong>单源最短路一个最主要的性质就是所选起点到任意一点的最短路都可以求出来</strong></p>
<p>这道题分成两部分，，一部分是所有点到终点x的最短路，，，另一个是终点到所有点的最短路，，，</p>
<p>显然后一部分可以直接调用一次dijkstra便可以求出，，，</p>
<p>而前者可以考虑反方向，，，所有点到终点的最短路就相当于<strong>沿相同的最短路从 终点x 到 每个点 的最短路</strong>，，，这个相同的最短路就是指：假如1到3的最短路是1-&gt;4-&gt;3那么他就等同于3-&gt;4-&gt;1，，，所以再求前一部分就可以将图中的每一条路的方向都取反方向，，，也就是逆图，，，这样一终点x为起点到各点的最短路就等于各点到终点x的最短路，，，</p>
<p>所以为了实现逆图选择 <strong>邻接矩阵</strong> 要比其他方式的存图要好一些，，，</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e3</span> + <span class="hljs-number">10</span>;<br><span class="hljs-comment">//const int maxm = 1e5 + 10;</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-keyword">int</span> cost[maxn][maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> dis1[maxn];<br><span class="hljs-keyword">int</span> dis2[maxn];<br><span class="hljs-keyword">int</span> cnt;<br><span class="hljs-keyword">int</span> n , m , x;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n , <span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> dis[] , <span class="hljs-keyword">int</span> cost[][maxn])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//init</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        dis[i] = (i == s) ? <span class="hljs-number">0</span> : inf;<br>    <span class="hljs-built_in">memset</span>(vis , <span class="hljs-literal">false</span> , <span class="hljs-keyword">sizeof</span>(vis));<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">int</span> k = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">int</span> m = inf;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!vis[j] &amp;&amp; dis[j] &lt; m)<br>            &#123;<br>                m = dis[j];<br>                k = j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(k == <span class="hljs-number">-1</span>) <span class="hljs-keyword">break</span>;<br>        vis[k] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>            <span class="hljs-keyword">if</span>(!vis[j] &amp;&amp; dis[k] + cost[k][j] &lt; dis[j])<br>                dis[j] = dis[k] + cost[k][j];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> u , v , w;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span> , &amp;n , &amp;m , &amp;x) != EOF)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(i == j)  cost[i][j] = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">else</span>        cost[i][j] = inf;<br>            &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span> , &amp;u , &amp;v , &amp;w);<br>            cost[u][v] = min(cost[u][v] , w);<br>        &#125;<br>        dijkstra(n , x , dis1 , cost);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; i; ++j)<br>                swap(cost[i][j] , cost[j][i]);<br>        dijkstra(n , x , dis2 , cost);<br><br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            ans = max(ans , dis1[i] + dis2[i]);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span> , ans);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>(end)</p>
<p>什么时候才能真正的感觉这才是水题啊，，，QAQ</p>
]]></content>
      <categories>
        <category>ACM-最短路</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2021/07/11/test/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>..</p>
<p>—<a href="注释。。。。">正文，，，，</a><br>-<a href="注释。。。。">正文，，，，</a><br>—<a href="注释。。。。1">正文，，，，</a></p>
<div class="note-body" note="(注释。。。。)"><em class="note-content" style="background-color: #ff9;">正文，，，，</em></div>
-{正文，，，，}(注释。。。。)
<div class="note-body" note="(注释。。。。,)"><em class="note-content" style="background-color: #ff9;">正文，，，，</em></div>


<p>..<br>…..</p>
]]></content>
  </entry>
  <entry>
    <title>一个简单的爬取b站up下所有视频的所有评论信息的爬虫</title>
    <url>/2020/03/03/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E5%8F%96b%E7%AB%99up%E4%B8%8B%E6%89%80%E6%9C%89%E8%A7%86%E9%A2%91%E7%9A%84%E6%89%80%E6%9C%89%E8%AF%84%E8%AE%BA%E4%BF%A1%E6%81%AF%E7%9A%84%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>心血来潮搞了一个简单的爬虫，主要是想知道某个人的b站账号，但是你知道，b站在搜索一个用户时，如果这个用户没有投过稿，是搜不到的，，，这时就只能想方法搞到对方的mid，，就是 <code>space.bilibili.com/9444976</code> 后面的那一串数字。偶然看到这个人关注了某个主播，，想到可能这个人会回复主播的视频，于是想着爬到所有up下的视频的评论对应的用户，这样我就可以在数据库里检索昵称得到mid，，，嘿嘿嘿（然而失败了，，不是所有人都像我这么无聊，，，，有些人真的看视频不会回复，，</p>
<p><a href="https://github.com/31415926535x/CollegeProjectBackup/tree/master/BilibiliSpiders">项目地址: https://github.com/31415926535x/CollegeProjectBackup/tree/master/BilibiliSpiders</a></p>
<span id="more"></span>
<p>这个爬虫的主要功能是爬取某个指定up主下的所有视频中的评论（不包括评论的回复，当然可以实现，但是感觉都差不多，就没考虑这块），最后将爬到的用户数据存到数据库里。<a href="https://www.zhihu.com/question/291554395"><strong>整个项目只是抱着学习相关内容的心态来完成，不要做大批量的爬取网站(DDOS)及其敏感数据的事，也不要用作商业用途，，（虽然写的很丑，，，）</strong></a></p>
<h1 id="简要说明"><a href="#简要说明" class="headerlink" title="简要说明"></a>简要说明</h1><p>整个项目的分为三个部分，首先是爬取指定mid up的所有视频的av号，即 <code>CrawlAllVideosOfAUP.py</code> 这个脚本，使用的api是 <code>https://api.bilibili.com/x/space/arc/search?mid=mid&amp;ps=30&amp;tid=0&amp;pn=pn&amp;keyword=&amp;order=pubdate&amp;jsonp=jsonp</code> 具体的说明见脚本内注释。</p>
<p>之后有了所有的av号，使用 <code>CrawlCommentUsersByVideo.py</code> 爬取指定av号下的所有评论，使用的api是 <code>https://api.bilibili.com/x/v2/reply?pn=**&amp;type=1&amp;oid=***&amp;sort=2</code> 爬取av号为 oid 下第 pn 页的评论的信息（sort对应的应该是评论的展示顺序用不到没管。可以爬取到很多的信息，根据自己需求来修改脚本计科。</p>
<p>最后将这两个整合，加一点点细节就行了，，大致是一个能用的脚本（虽然最后没有找到我想要的一个信息，，，，</p>
<p>具体看注释吧，，很简单的一些东西吧，，长见识为主，留印象。。。。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>之前很早就接触了Python爬虫，，但是只是用一下就扔了，没有自己完全的编写一个，，所以心血来擦写一个练练手，，说不定以后还会遇到这样类似的事，，，</p>
<p>这个脚本最后将爬取到的数据扔到了数据库里，，因为之前看别人的代码，他是获取一条写入一条，，数据量一大就很慢，，（尤其是用了线程一边获取一遍写入时，因为爬虫一次会获得很多的数据，但是如果保存数据库时一条一条的 <code>commit</code> 些磁盘的io瓶颈就会显露出来，，所以可以加一个 flag ，写入到1000或者某个值时再 <code>commit</code> 这样就很有效率了，，跑偏了）</p>
<p>大概了解了一下python下的线程的写法，思路都是那个思路，，算是简单的见识一下，，，</p>
<p>关于windows下的mysql数据库：我们通常会备份一个数据库的某些表的结构到一个文件中，例如 <code>233.sql</code> ，使用的命令可能是 <code>mysqldump -uroot -p databases &gt; 233.sql</code> 等等类似的，，但是这个命令在windows的 <code>PowerShell</code> 会有bug，，具体原因没有深究（猜测是编码的锅），导出的文件不能使用 <code>source 233.sql</code> 导入，，会爆什么 <code>&#39;\0&#39;</code> 等 ASCII错误，，这时的解决方法就是换 <code>cmd</code> ，，这个错误第一次见，，而且不好解决，，迷惑性太大，，容易带偏QAQ，，，太浪费时间了，，，</p>
<p>好像没啥了。。。(end)</p>
<p>哦对，加个参考。。。</p>
<p><a href="https://github.com/airingursb/bilibili-user/blob/master/bilibili_user.py">这是一个暴力爬所有用户信息的，思路差不多的</a></p>
<p><a href="https://github.com/zhang0peter/bilibili-user-information-spider/blob/master/spider.py">这个也是，简单些的</a></p>
<p><a href="https://github.com/airingursb/bilibili-user/blob/master/user_agents.txt">user-agents看到一个很全的ua，因为我的数据量不大，所以就没用，记录一下</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划-线性dp-hdu-4055</title>
    <url>/2019/02/23/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E7%BA%BF%E6%80%A7dp-hdu-4055/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4055">这道题是大连的某一年的现场赛的题hdu-4055</a><br>，，，刚开始做线性dp的题，，看了好半天才看懂解法，，</p>
<span id="more"></span>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><a href="https://www.cnblogs.com/rhythmic/p/5398953.html">参考1</a><br><a href="https://www.cnblogs.com/ftae/p/7057372.html">参考2</a></p>
<p>题目的意思就是给出一个仅有1~n组成的序列的关系s：’I’表示 $a[i+1]&gt;a[i]$，’D’表示 $a[i+1] &lt; a[i]$，，’?’表示都可以，，然后问你所有可能的情况的总数，，</p>
<p>用 $dp[i][j]$ 表示长度为i并且仅由1~i组成的序列以j结尾时的种类数，，</p>
<ul>
<li><p>当 $s[i]= ?$ 时，，当前点的可能情况就是前面所有情况的和，即 $dp[i][j]=\sum_{k=1}^{i-1}dp[i-1][k]$</p>
</li>
<li><p>当 $s[i]=I$ 时，，因为第i位固定就为j了，并且前一位要满足小于等于j，所以就要找出所有长度为i-1且结尾小于等于j-1的情况的和，，即： $dp[i][j]=\sum_{k=1}^{j-1}dp[i-1][k]$</p>
</li>
<li><p>当 $s[i]=D$ 时，，和等于I的情况相反，，也就是要找到所有长度为i-1且最后一位大于j的种类数（同时要小于i-1），，也就是说可以直接用？的种类数减去I的种类数，，即： $dp[i][j]=\sum<em>{k=j}^{i-1}dp[i-1][k]=\sum</em>{k=1}^{i-1}dp[i-1][k]-\sum_{k=1}^{j-1}dp[i][k]$</p>
</li>
</ul>
<blockquote>
<p>假定每次使第i位为j时，前面大于等于j的值都加一，，这样保证前i个数都出现一次，，同时i-1变成了i，，j变成了j+1，，j就放在了后面，，所以遍历中的k是从j~i-1，，，</p>
</blockquote>
<p><a href="https://blog.csdn.net/lvshubao1314/article/details/46793805">参考</a></p>
<p>最后用前缀和维护一下那个和，空间换时间</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//hdu</span><br><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> dp[maxn][maxn], sum[maxn][maxn];<br><span class="hljs-keyword">char</span> s[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">2</span>))<br>    &#123;<br>        <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dp);<br>        <span class="hljs-built_in">memset</span>(sum, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> sum);<br>        dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = sum[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= len + <span class="hljs-number">1</span>; ++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; ++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;I&#x27;</span>)<br>                    dp[i][j] = sum[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;D&#x27;</span>)<br>                    dp[i][j] = (sum[i - <span class="hljs-number">1</span>][i - <span class="hljs-number">1</span>] - sum[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + mod) % mod;<br>                <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;?&#x27;</span>)<br>                    dp[i][j] = sum[i - <span class="hljs-number">1</span>][i - <span class="hljs-number">1</span>];<br>                sum[i][j] = (dp[i][j] + sum[i][j - <span class="hljs-number">1</span>]) % mod;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, sum[len + <span class="hljs-number">1</span>][len + <span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>(end)</p>
]]></content>
      <categories>
        <category>ACM-动态规划-线性dp</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划-kaungbin基础dp</title>
    <url>/2019/02/23/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-kaungbin%E5%9F%BA%E7%A1%80dp/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p><a href="https://vjudge.net/contest/284684#overview">kuangbin基础dp专题</a></p>
<p>做些题练练手</p>
<span id="more"></span>
<h1 id="A-Max-Sum-Plus-Plus-HDU-1024"><a href="#A-Max-Sum-Plus-Plus-HDU-1024" class="headerlink" title="A - Max Sum Plus Plus HDU - 1024"></a>A - Max Sum Plus Plus HDU - 1024</h1><p>这道题有两个坑点，一个是dp的状态转移方程的推导和化简优化还有一个是实现，，<del>（废话，，哪个题不是这样，，）</del>，，，</p>
<p>题意是给你一个长度为n的数组，，然后一个数m，，让你把这段数分成m段连续的子序列，，要求最后分成的这m段序列的和是最大的，，，</p>
<p>首先是状态的定义，，一开始我想着这该不会是区间dp的题吧，，但是m怎么用啊，，，后来看了别人的状态的定义差不多自己能推下来了，，</p>
<p>$dp[i][j]$ 表示取前i个数（最后一个序列的结尾一定时是a[i]）划分成j组时的最大的序列和，，</p>
<p>然后是状态转移方程的推导，，首先我们可以看出对于数 $a[i]$ 只有两种情况：</p>
<ul>
<li>$(x_1, y_1), (x_2, y_2), (x_3, y_3),,,,,(x_j, y_j,a[i])$，，，即，把a[i]划到最后一个序列里（也就是第j组里），，或者</li>
<li>$(x<em>1, y_1), (x_2, y_2), (x_3, y_3),,,,,(x</em>{j-1}, y_{j-1}),(a[i])$，，，即，a[i]单独成为第j组，，，注意前面的j-1组的情况有很多，，所以我们要取前面i-1个数所组成的j-1的情况里的最大值</li>
</ul>
<p>由以上我们可以写出状态转移方程：</p>
<script type="math/tex; mode=display">
    dp[i][j]=
        max(dp[i-1][j] + a[i], max(dp[k][j-1] + a[i]))      \{ j-1 \leq k \leq i-1 \}</script><p>所以此时的时间复杂度是 $O(n^3)$,,,空间复杂度是 $O(n^2)$，，n=1e6显然不行，，，然后就是dp里常见的优化：</p>
<ul>
<li>优化空间：dp里常见的优化空间的方法都是对高维的dp数组某一维的并不需要全局遍历的那一维去掉缩减，，也就是 <strong>滚动数组</strong></li>
<li>时间优化: 观察状态转移方程里的第二种情况的求最大值那一步，，我们每次需要的只是上一步中分成j-1组的所有情况里的最大值，，这个过程我们可以在计算分成j-1组的时候将最大值用一个数组保存下来给计算分成j组时使用，，这样就减少了一次遍历，，，时间复杂度降为 $O(n^2)$，，</li>
</ul>
<p>所以最后的状态转移方程为：</p>
<p>$dp[i]=max(dp[i-1], mmax[i-1])+a[i]$</p>
<p>mmax[i]表示前i个数分成当前组数-1(j-1)时的最大值，，滚动数组优化后后面那个组数的维度就去掉了，，，每一次记录一下前i-1个数分成j-1组的最大值，更新一下mmax[i-1]就行了，，，</p>
<p><a href="https://www.cnblogs.com/kuangbin/archive/2011/08/04/2127085.html">参考1</a><br><a href="https://blog.csdn.net/pmt123456/article/details/52695470">参考2</a></p>
<p>这两篇博客是用dp[i][j]表示前j个数分成i组的最大值，，和我的实现在循环的变量的名称上有些不一样，，，</p>
<p>记得中间变量不要用已经有的m，，，，因为这个wa2哭，，，</p>
<p>最后的答案就是最后一次找到的最大值，，也就是那个中间变量，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//hdu</span><br><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> a[maxn], dp[maxn], mmax[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;m, &amp;n))<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dp[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)mmax[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> mx;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>        &#123;<br>            mx = -inf;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = j; i &lt;= n; ++i)<br>            &#123;<br>                dp[i] = max(dp[i - <span class="hljs-number">1</span>], mmax[i - <span class="hljs-number">1</span>]) + a[i];<br>                mmax[i - <span class="hljs-number">1</span>] = mx;<br>                mx = max(mx, dp[i]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, mx);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="B-Ignatius-and-the-Princess-IV-HDU-1029"><a href="#B-Ignatius-and-the-Princess-IV-HDU-1029" class="headerlink" title="B - Ignatius and the Princess IV HDU - 1029"></a>B - Ignatius and the Princess IV HDU - 1029</h1><p>题意很简单，，就是给你n个数找出其中个数大于等于 $(n+1)/2$ 的那个数，，，</p>
<p>一种方法是直接排序，，最中间的那个数一定是要找的数，，因为个数超过 $(n+1)/2$ 一定有一个在排序后在中间那个位置</p>
<p>另一种是dp的思想，，因为要找的是个数至少为 $(n+1)/2$ 的数，，那么它肯定比其他数的个数个至少大一，，，这样我们可以遍历整个数组，，动态的记录下出现次数最多的数以及它和前面的数比较后出现的次数cnt，为零说明他并不是最多的，，换现在遍历的数，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//hdu</span><br><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n))<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        <span class="hljs-keyword">int</span> cnt, ans;<br>        cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(cnt == <span class="hljs-number">0</span>)<br>            &#123;<br>                ans = a[i];<br>                ++cnt;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(ans == a[i])<br>                    ++cnt;<br>                <span class="hljs-keyword">else</span><br>                    --cnt;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//hdu</span><br><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n))<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        sort(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n);<br>        <span class="hljs-keyword">int</span> ans = a[(n + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="E-Super-Jumping-Jumping-Jumping-HDU-1087"><a href="#E-Super-Jumping-Jumping-Jumping-HDU-1087" class="headerlink" title="E - Super Jumping! Jumping! Jumping! HDU - 1087"></a>E - Super Jumping! Jumping! Jumping! HDU - 1087</h1><p>求一个数列的最大上升子序列的和就行了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//hdu</span><br><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> a[maxn], dp[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dp[i] = a[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; i; ++j)<br>                <span class="hljs-keyword">if</span>(a[i] &gt; a[j])<br>                    dp[i] = max(dp[i], dp[j] + a[i]);<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)ans = max(ans, dp[i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="F-Piggy-Bank-HDU-1114"><a href="#F-Piggy-Bank-HDU-1114" class="headerlink" title="F - Piggy-Bank HDU - 1114"></a>F - Piggy-Bank HDU - 1114</h1><p>完全背包的板子题，，，几天没看，，有些细节倒忘了qaq</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//hdu</span><br><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> w[maxn], c[maxn], dp[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> e, f, n;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;e, &amp;f, &amp;n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;w[i], &amp;c[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= f - e; ++i)dp[i] = inf;<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = c[i]; j &lt;= f - e; ++j)<br>                dp[j] = min(dp[j], dp[j - c[i]] + w[i]);<br>        <span class="hljs-keyword">if</span>(dp[f - e] &gt;= inf)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This is impossible.\n&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The minimum amount of money in the piggy-bank is %d.\n&quot;</span>, dp[f - e]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="I-最少拦截系统-HDU-1257"><a href="#I-最少拦截系统-HDU-1257" class="headerlink" title="I-最少拦截系统 HDU - 1257"></a>I-最少拦截系统 HDU - 1257</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这道题的题意是给你一串数，然后让你找出最少的几个序列，这些序列满足递减的循序（不一定严格递减），，总数是原序列的总数，，</p>
<p>读完题后第一反应是模拟一下这个寻找过程，，贪心的去尽可能的找一个最长的序列，，但这就不是dp了，，，可怎么都想不到怎么用dp解决，，，<a href="https://www.cnblogs.com/cenariusxz/p/4304567.html">看了一个人的题解后了解了</a>：求这个序列的LIS，，对于这个LIS中的每一个元素都代表着一个拦截系统的最小值（也就是以前贪心要求得每一个序列的最后一个元素），，因为序列是上升的，，所以每一个元素都不能再拦截序列中的下一个数，，也就是说最后的LIS就是总的系统数</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> dp[maxn], a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n))<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dp[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; ++j)<br>                <span class="hljs-keyword">if</span>(a[i] &gt; a[j])<br>                    dp[i] = max(dp[i], dp[j] + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            ans = max(ans, dp[i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="L-Common-Subsequence-POJ-1458"><a href="#L-Common-Subsequence-POJ-1458" class="headerlink" title="L - Common Subsequence POJ - 1458"></a>L - Common Subsequence POJ - 1458</h1><p>LCS 板子题</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//hdu</span><br><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">char</span> s1[maxn], s2[maxn];<br><span class="hljs-keyword">int</span> dp[maxn][maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s&quot;</span>, s1, s2))<br>    &#123;<br>        <span class="hljs-keyword">int</span> len1 = <span class="hljs-built_in">strlen</span>(s1);<br>        <span class="hljs-keyword">int</span> len2 = <span class="hljs-built_in">strlen</span>(s2);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= max(len1, len2); ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= max(len1, len2); ++j)<br>                dp[i][j] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len1; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= len2; ++j)<br>                <span class="hljs-keyword">if</span>(s1[i - <span class="hljs-number">1</span>] == s2[j - <span class="hljs-number">1</span>])<br>                    dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span><br>                    dp[i][j] = max(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dp[len1][len2]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="N-Longest-Ordered-Subsequence-POJ-2533"><a href="#N-Longest-Ordered-Subsequence-POJ-2533" class="headerlink" title="N - Longest Ordered Subsequence POJ - 2533"></a>N - Longest Ordered Subsequence POJ - 2533</h1><p>LIS板子题，之前做过</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//hdu</span><br><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> a[maxn], dp[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n))<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dp[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i - <span class="hljs-number">1</span>; ++j)<br>                <span class="hljs-keyword">if</span>(a[i] &gt; a[j])<br>                    dp[i] = max(dp[i], dp[j] + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)ans = max(ans, dp[i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM-动态规划</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划_背包问题</title>
    <url>/2018/07/30/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>背包问题就是动态规划的一个典型问题，，，个人觉得重在考查动态规划的思维，，有时需要将题目抽象出来，，，找出相对应的模型，，，然后优化解决，，，而不是一味的套模板。。。</p>
<p>这篇博客主要有 <strong>01背包问题</strong> ， <strong>完全背包问题</strong> ， <strong>多重背包问题</strong> ， <strong>混和背包问题</strong> 还有 <strong>二维费用背包问题</strong>，，，</p>
<span id="more"></span>
<h2 id="概念知识点"><a href="#概念知识点" class="headerlink" title="概念知识点"></a>概念知识点</h2><p><a href="https://www.kancloud.cn/kancloud/pack/70124">大佬的文章写的不错，，有时间好好看看</a></p>
<h3 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h3><blockquote>
<p>有 N 件物品和一个容量为 V 的背包。放入第 i 件物品耗费的费用是 C_i ，得到的价值是 W_i 。求解将哪些物品装入背包可使价值总和最大。</p>
<p>这是最基础的背包问题，特点是：每种物品仅有一件，可以选择放或不放。</p>
</blockquote>
<p>定义状态：</p>
<p>F[i,v]表示把前i件物品放入容量为v的包中可以获得的最大价值。</p>
<p>状态转移方程：</p>
<p>F(i,v) = max(F(i-1,v),F(i-1,v-Ci)+Wi)</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> c[N];               <span class="hljs-comment">//第i个物品的代价</span><br><span class="hljs-keyword">int</span> w[N];               <span class="hljs-comment">//第i个物品的价值</span><br><span class="hljs-keyword">int</span> f[N][N];            <span class="hljs-comment">//f[i][j]表示将前i件物品放入容量为j的包是的最大的价值</span><br>F[<span class="hljs-number">0</span>][<span class="hljs-number">0</span> - v] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = c[i]; j &lt;= v; j++)<br>        f[i][j] = max(f[i - <span class="hljs-number">1</span>][j] , f[i - <span class="hljs-number">1</span>][j - c[i]] + w[i]);<br></code></pre></td></tr></table></figure>
<p>时间复杂度为O(v * n)</p>
<p>空间复杂度可以继续优化到O(v)</p>
<p>将二维的f(i , v)改成一维的，，，逆序求即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">f[<span class="hljs-number">0</span> - v] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = v; j &gt;= c[i]; j--)<br>        f[j] = max(f[j] , f[j - c[i]] + w[i]);<br></code></pre></td></tr></table></figure>
<p><strong>初始化细节</strong></p>
<p>若题目要求 <strong>恰好好装满背包的最优解</strong>，，初始化：f[0] = 0; f[1 - v] = -INF;</p>
<p>若题目要求 <strong>不需要将背包装满</strong> ，，，，，初始化：f[0 - v] = 0;</p>
<h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><h3 id="Problem-A-买东西"><a href="#Problem-A-买东西" class="headerlink" title="Problem A: 买东西"></a>Problem A: 买东西</h3><p>Time Limit: 1 Sec  Memory Limit: 128 MB</p>
<blockquote>
<p>Description</p>
<p>今天AveryBoy去一家诡异的店买东西。如果卡上的余额&gt;=5，就一定可以买到东西，即使买完之后卡上余额为负；否则不能买到东西，即使卡上的余额足够。所以最后大家肯定都希望卡上的余额尽可能的少。</p>
<p>现在已知商店有n种商品并且每种商品只有一个，每种商品的价格和卡上余额，求最少能使卡上余额为多少？</p>
<p>Input</p>
<p>有多组输入数据，对于每组输入数据：</p>
<p>第一行为一个正整数n，n&lt;=1000，表示商品的个数。</p>
<p>第二行为n个正整数，表示每种商品的价格，价格&lt;=50。</p>
<p>第三行为一个正整数m，m&lt;=1000，表示卡上的余额。</p>
<p>n=0表示输入结束。</p>
<p>Output</p>
<p>对于每组输入，输出卡上可能的最少余额。</p>
<p>Sample Input<br>1<br>50<br>5<br>10<br>1 2 3 2 1 1 2 3 2 1<br>50<br>0</p>
<p>Sample Output<br>-45<br>32</p>
</blockquote>
<p>我的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ms(a , b) memset(a , b , sizeof(a))</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e4</span>;<br><span class="hljs-keyword">int</span> f[N];<br><span class="hljs-keyword">int</span> c[N];<br><span class="hljs-keyword">int</span> n , m;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">cin</span> &gt;&gt; n &amp;&amp; n)<br>    &#123;<br>        ms(f , <span class="hljs-number">0</span>);<br>        ms(c , <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; c[i];<br>            <span class="hljs-comment">//w[i] = c[i];</span><br>        &#125;<br>        <span class="hljs-keyword">int</span> v;<span class="hljs-built_in">cin</span> &gt;&gt; v;<br>        <span class="hljs-keyword">if</span> (v &lt; <span class="hljs-number">5</span>)<br>        &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; v &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        sort(c + <span class="hljs-number">1</span> , c + <span class="hljs-number">1</span> + n);        <span class="hljs-comment">//将最大的那个放最后</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)     <span class="hljs-comment">//所以是n-1个</span><br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = v - <span class="hljs-number">5</span>; j &gt;= c[i]; j--)<br>            &#123;<br>                    f[j] = max(f[j] , f[j - c[i]] + c[i]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; v - f[v - <span class="hljs-number">5</span>] - c[n] &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-comment">//在添上最后哪一个最大的</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//5</span><br><span class="hljs-comment">//5 4 5 4 5</span><br><span class="hljs-comment">//15</span><br><span class="hljs-comment">//1</span><br><span class="hljs-comment">//50</span><br><span class="hljs-comment">//5</span><br><span class="hljs-comment">//10</span><br><span class="hljs-comment">//1 2 3 2 1 1 2 3 2 1</span><br><span class="hljs-comment">//50</span><br><span class="hljs-comment">//0</span><br><br></code></pre></td></tr></table></figure>
<p>学长的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// hdu 2546</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> dp[<span class="hljs-number">1005</span>],sz[<span class="hljs-number">1005</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n,num;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)&amp;&amp;n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;sz[i]);<br>        &#125;<br>        sort(sz+<span class="hljs-number">1</span>,sz+<span class="hljs-number">1</span>+n);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num);<br>        <span class="hljs-keyword">if</span>(num&lt;<span class="hljs-number">5</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,num);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(dp));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=num<span class="hljs-number">-5</span>;j&gt;=sz[i];j--)<br>            &#123;<br>                dp[j] = max(dp[j],dp[j-sz[i]]+sz[i]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,num-dp[num<span class="hljs-number">-5</span>]-sz[n]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h3 id="Problem-B-游戏"><a href="#Problem-B-游戏" class="headerlink" title="Problem B: 游戏"></a>Problem B: 游戏</h3><p>Time Limit: 1 Sec  Memory Limit: 128 MB</p>
<blockquote>
<p>Description</p>
<p>最近AveryBoy沉迷游戏，无法自拔。但是打怪升级的游戏玩久了很无趣，现在他还差n点经验就升到顶级了，但是他只剩m点忍耐度。每杀一个怪，他会得到对应的经验值，并减掉相应的忍耐度。当忍耐度&lt;=0时，他就不会再玩游戏。并且他最多只杀s只怪。请问他能升到顶级吗？</p>
<p>Input</p>
<p>输入数据有多组，对于每组数据第一行输入n，m，k，s(0 &lt; n,m,k,s &lt;= 100)四个正整数。分别表示还需的经验值，保留的忍耐度，怪的种数和最多的杀怪数。接下来输入k行数据。每行数据输入两个正整数a，b(0 &lt; a,b &lt;= 20)；分别表示杀掉一只这种怪AveryBoy会得到的经验值和会减掉的忍耐度。(每种怪都有无数个)</p>
<p>Output</p>
<p>输出升到顶级还能保留的最大忍耐度，如果无法升到顶级输出-1。</p>
<p>Sample Input<br>10 10 1 10<br>1 1<br>10 10 1 9<br>1 1<br>9 10 2 10<br>1 1<br>2 2</p>
<p>Sample Output<br>0<br>-1<br>1</p>
</blockquote>
<p>我的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">110</span>;<br><span class="hljs-keyword">int</span> f[N][N];<br><span class="hljs-keyword">int</span> c[N];<br><span class="hljs-keyword">int</span> w[N];<br><span class="hljs-keyword">int</span> n , m , k , s;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; s)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++)<br>            <span class="hljs-built_in">cin</span> &gt;&gt; w[i] &gt;&gt; c[i];<br> <br>        <span class="hljs-built_in">memset</span>(f , <span class="hljs-number">0</span> , <span class="hljs-keyword">sizeof</span>(f));<br> <br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)            <span class="hljs-comment">//忍耐度</span><br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= k; j++)         <span class="hljs-comment">//怪的种数</span><br>            &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>; l &lt;= s; l++)    <span class="hljs-comment">//可杀的怪的数量</span><br>                    <span class="hljs-keyword">if</span> (c[j] &lt;= i)<br>                        f[i][l] = max(f[i][l] , f[i - c[j]][l - <span class="hljs-number">1</span>] + w[j]);<br>            &#125;<br> <br>            <span class="hljs-keyword">if</span> (f[i][s] &gt;= n)<br>            &#123;<br>                <span class="hljs-built_in">cout</span> &lt;&lt; m - i &lt;&lt; <span class="hljs-built_in">endl</span>;<br>                flag = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag)   <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;-1&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>学长的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// hdu 2159</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> dp[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>],a[<span class="hljs-number">105</span>],b[<span class="hljs-number">105</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n,m,k,s,tmp;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k,&amp;s))<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++)  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a[i],&amp;b[i]);<br>        <span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(dp));<br>        tmp=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=k;j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(i&lt;b[j]) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=<span class="hljs-number">1</span>;x&lt;=s;x++)<br>                &#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> y=<span class="hljs-number">1</span>;y&lt;=x&amp;&amp;y*b[j]&lt;=i;y++)<br>                    &#123;<br>                        dp[i][x] = max(dp[i-y*b[j]][x-y]+y*a[j],dp[i][x]);<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(dp[i][s]&gt;=n)<br>            &#123;<br>                tmp=i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(tmp==<span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,m-tmp);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h3 id="Problem-C-买东西2"><a href="#Problem-C-买东西2" class="headerlink" title="Problem C: 买东西2"></a>Problem C: 买东西2</h3><p>Time Limit: 1 Sec  Memory Limit: 128 MB</p>
<blockquote>
<p>Description</p>
<p>你有n元钱，商店有m种商品，每种商品都有其对应的价格和重量。现在问你用这n元最多能买多重的商品。</p>
<p>Input</p>
<p>输入数据首先包含一个正整数C，表示有C组测试用例，每组测试用例的第一行是两个整数n和m(1&lt;=n&lt;=100, 1&lt;=m&lt;=100),分别表示经费的金额和商品的种类，然后是m行数据，每行包含3个数p，h和c(1&lt;=p&lt;=20,1&lt;=h&lt;=200,1&lt;=c&lt;=20)，分别表示每种商品的价格、重量以及个数。</p>
<p>Output</p>
<p>对于每组测试数据，请输出能够购买商品的最重的重量，你可以假设经费买不光所有的商品，并且经费你可以不用完。每个实例的输出占一行。</p>
<p>Sample Input<br>1<br>8 2<br>2 100 4<br>4 100 2</p>
<p>Sample Output<br>400</p>
</blockquote>
<p>我的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ms(a , b) memset(a , b , sizeof(a))</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e4</span> + <span class="hljs-number">3</span>;<br> <br><span class="hljs-keyword">int</span> f[N];<br><span class="hljs-keyword">int</span> w[N];<br><span class="hljs-keyword">int</span> c[N];<br><span class="hljs-keyword">int</span> m[N];<br><span class="hljs-keyword">int</span> pw[N];<br><span class="hljs-keyword">int</span> pc[N];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        ms(f , <span class="hljs-number">0</span>);<br>        ms(w , <span class="hljs-number">0</span>);<br>        ms(c , <span class="hljs-number">0</span>);<br>        ms(pw , <span class="hljs-number">0</span>);<br>        ms(pc , <span class="hljs-number">0</span>);<br>        ms(m , <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">int</span> n , mm;<span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; mm;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= mm; i++)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; pc[i];<br>            <span class="hljs-built_in">cin</span> &gt;&gt; pw[i];<br>            <span class="hljs-built_in">cin</span> &gt;&gt; m[i];<br>        &#125;<br> <br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= mm; i++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (k &lt; m[i])<br>            &#123;<br>                w[num] = pw[i] * k;<br>                c[num] = pc[i] * k;<br>                num++;<br>                m[i] -= k;<br>                k &lt;&lt;= <span class="hljs-number">1</span>;<br>            &#125;<br>            w[num] = pw[i] * m[i];<br>            c[num] = pc[i] * m[i];<br>            num++;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = n; j &gt;= c[i]; j--)<br>            &#123;<br>                f[j] = max(f[j] , f[j - c[i]] + w[i]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; f[n] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>学长的代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// hdu 2191</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> dp[<span class="hljs-number">105</span>],c[<span class="hljs-number">505</span>],w[<span class="hljs-number">505</span>];<br><span class="hljs-keyword">int</span> pc[<span class="hljs-number">105</span>],pw[<span class="hljs-number">105</span>],s[<span class="hljs-number">105</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;t);<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> n,m;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;pc[i],&amp;pw[i],&amp;s[i]);<br>        &#125;<br><br>        <span class="hljs-comment">// 二进制拆分</span><br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(k&lt;s[i])<br>            &#123;<br>                c[num] = pc[i]*k;<br>                w[num] = pw[i]*k;<br>                num++;<br>                s[i]-=k;<br>                k&lt;&lt;=<span class="hljs-number">1</span>;<br>            &#125;<br>            c[num] = pc[i]*s[i];<br>            w[num] = pw[i]*s[i];<br>            num++;<br>        &#125;<br><br>        <span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(dp));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;num;i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=n;j&gt;=c[i];j--)<br>            &#123;<br>                dp[j] = max(dp[j],dp[j-c[i]]+w[i]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,dp[n]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h3 id="Problem-D-选课"><a href="#Problem-D-选课" class="headerlink" title="Problem D: 选课"></a>Problem D: 选课</h3><p>Time Limit: 2 Sec  Memory Limit: 128 MB</p>
<blockquote>
<p>Description</p>
<p>AveryBoy这学期有n门课程，但由于他要去上班，导致他最多只有m天去学习这些课程。每门课程学习的天数不同会得到不同的分数，求他如何安排学习计划使得总分数最多。</p>
<p>Input</p>
<p>输入包含多组测试数据，每组测试数据第一行是两个正整数n，m。表示课程数和他学习的天数。</p>
<p>之后是n*m的矩阵，A[i][j]表示第i门课程学习j天会获得的分数。（1&lt;=i&lt;=n&lt;=100，1&lt;=j&lt;=m&lt;=100，1&lt;=A[i][j]&lt;=50）</p>
<p>输入以n=0，m=0结束。</p>
<p>Output</p>
<p>对于每组数据，输出AveryBoy能获得的最大分数。</p>
<p>Sample Input<br>2 2<br>1 2<br>1 3<br>2 2<br>2 1<br>2 1<br>2 3<br>3 2 1<br>3 2 1<br>0 0</p>
<p>Sample Output<br>3<br>4<br>6</p>
</blockquote>
<p>我的代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e3</span>;<br><span class="hljs-keyword">int</span> f[N];<br><span class="hljs-keyword">int</span> n , m;<br><span class="hljs-keyword">int</span> A[N][N];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &amp;&amp; n &amp;&amp; m)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>                <span class="hljs-built_in">cin</span> &gt;&gt; A[i][j];<br> <br>        <span class="hljs-built_in">memset</span>(f , <span class="hljs-number">0</span> , <span class="hljs-keyword">sizeof</span>(f));<br> <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++)            <span class="hljs-comment">//将n个课程分组为1~k</span><br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = m; j &gt;= <span class="hljs-number">1</span>; j--)        <br>            &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)    <span class="hljs-comment">//对于每一组中的m个不同的方案</span><br>                    <span class="hljs-keyword">if</span> (j - i &gt;= <span class="hljs-number">0</span>)             <span class="hljs-comment">//当前天数够时</span><br>                        f[j] = max(f[j] , f[j - i] + A[k][i]);<br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-built_in">cout</span> &lt;&lt; f[m] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br></code></pre></td></tr></table></figure>
<p>学长的代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// hdu 1712</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> sz[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>],dp[<span class="hljs-number">105</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n,m;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m)&amp;&amp;n&amp;&amp;m)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;sz[i][j]);<br>        <span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(dp));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=m;j&gt;=<span class="hljs-number">1</span>;j--)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;=m;k++)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(j-k&gt;=<span class="hljs-number">0</span>) dp[j] = max(dp[j],dp[j-k]+sz[i][k]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,dp[m]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>鸽了，，，，</p>
]]></content>
      <tags>
        <tag>acm</tag>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>同余问题</title>
    <url>/2018/07/23/%E5%90%8C%E4%BD%99%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>最近学了好多有关最大公约数的知识点，，acm里的同余问题主要是关于一元线性方程的解法等等，，，在此罗列 <strong>最大公约数gcd</strong> ， <strong>最小公倍数lcm</strong> ， <strong>欧几里得算法</strong> ， <strong>扩展欧几里得算法</strong> ， 以及他们的一些应用，，，</p>
<span id="more"></span>
<h2 id="最大公约数gcd和最小公倍数lcm"><a href="#最大公约数gcd和最小公倍数lcm" class="headerlink" title="最大公约数gcd和最小公倍数lcm"></a>最大公约数gcd和最小公倍数lcm</h2><p><a href="https://www.cnblogs.com/linyujun/p/5167914.html">参考文章</a></p>
<p>gcd(a , b)就是a与b的最大公约数<br>lcm(a , b)就是a与b的最小公倍数</p>
<ul>
<li>公式 $a<em>b=gcd</em>lcm$，，证明见大佬的博客</li>
</ul>
<h3 id="辗转相除法求gcd-欧几里得算法"><a href="#辗转相除法求gcd-欧几里得算法" class="headerlink" title="辗转相除法求gcd(欧几里得算法)"></a>辗转相除法求gcd(欧几里得算法)</h3><p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//非递归写法</span><br><span class="hljs-function">LL <span class="hljs-title">gcd</span><span class="hljs-params">(LL a, LL b)</span></span>&#123;<br>    LL t;<br>    <span class="hljs-keyword">while</span>(b)&#123;<br>        t = b;<br>        b = a % b;<br>        a = t;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-comment">//递归写法</span><br><span class="hljs-function">LL <span class="hljs-title">gcd</span><span class="hljs-params">(LL a, LL b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(b == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> gcd(b, a%b);<br>&#125;<br><br><span class="hljs-function">LL <span class="hljs-title">gcd</span><span class="hljs-params">(LL a, LL b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> b ? gcd(b, a%b) : a;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>注意，对于大整数来说，取模运算非常耗时。。。虽然这句话我还不理解，，，但是先记在这，，，以后说不定会知道来补个票，，，<a href="https://blog.csdn.net/suool/article/details/14094255#">这篇博客有说到这个问题，，他是用Stein算法解决的</a><br>代码如下：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//算法分析</span><br><span class="hljs-comment">//渐近时间,空间复杂度均与欧几里德算法相同</span><br><span class="hljs-comment">//原理:gcd(ka,kb)=k*gcd(a,b)</span><br><span class="hljs-comment">//最大特点:只有移位和加减法计算,避免了大整数的取模运算</span><br><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-title">MaxDivisor</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> a, <span class="hljs-keyword">unsigned</span> b)</span> </span><br><span class="hljs-function"></span>&#123; <br>    <span class="hljs-keyword">unsigned</span> c = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123; <br>    <span class="hljs-comment">// 退出条件 </span><br>        <span class="hljs-keyword">if</span>(a==<span class="hljs-number">0</span>) <br>            <span class="hljs-keyword">return</span> b &lt;&lt; c;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b == <span class="hljs-number">0</span>) <br>            <span class="hljs-keyword">return</span> a &lt;&lt; c;<br>    <span class="hljs-comment">// 为提高速度，采用位的与运算，避免用取模判断奇偶 </span><br>        <span class="hljs-keyword">if</span>(!(a &amp; <span class="hljs-number">1</span>) &amp;&amp; !(b &amp; <span class="hljs-number">1</span>)) <span class="hljs-comment">//a,b 都是偶数 </span><br>        &#123; <br>            a &gt;&gt;= <span class="hljs-number">1</span>; b &gt;&gt;= <span class="hljs-number">1</span>; ++c; <br>        &#125; <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!(a &amp; <span class="hljs-number">1</span>) &amp;&amp; (b &amp; <span class="hljs-number">1</span>)) <span class="hljs-comment">//a偶 b奇 </span><br>        &#123; <br>            a &gt;&gt;= <span class="hljs-number">1</span>; <br>        &#125; <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((a &amp; <span class="hljs-number">1</span>) &amp;&amp; !(b &amp; <span class="hljs-number">1</span>)) <span class="hljs-comment">//a奇 b偶 </span><br>        &#123;<br>             b &gt;&gt;= <span class="hljs-number">1</span>; <br>        &#125; <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((a &amp; <span class="hljs-number">1</span>) &amp;&amp; (b &amp; <span class="hljs-number">1</span>)) <span class="hljs-comment">//a,b都是奇数 </span><br>        &#123; <br>            <span class="hljs-keyword">unsigned</span> tmp = a&gt;b?b:a; <span class="hljs-comment">//取较小的一个 </span><br>            a = a&gt;b?a-b:(b-a); <span class="hljs-comment">//绝对差值</span><br>            b = tmp; <br>        &#125; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p>
<h3 id="求lcm"><a href="#求lcm" class="headerlink" title="求lcm"></a>求lcm</h3><p>求出gcd，，就可以用之前的公式来求lcm啦<br>$lcm=a<em>b/gcd$<br>因为$a</em>b$可能太大爆int,ll所以可以写成$lcm=a/gcd*b$</p>
<h3 id="其他几个公式"><a href="#其他几个公式" class="headerlink" title="其他几个公式"></a>其他几个公式</h3><p>$gcd(ka , kb)=k*gcd(a , b)$</p>
<p>$lcm(ka , kb)=k*lcm(a , b)$</p>
<p>还有这个：</p>
<p>$lcm(s/a , s/b)=s/gcd(a , b)$</p>
<h2 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h2><p><a href="https://blog.csdn.net/suool/article/details/14094255#">参考博客</a></p>
<p>扩展欧几里得算法主要是求方程 $ax+by=gcd(a , b)$的解</p>
<p>基本算法：</p>
<blockquote>
<p>对于不完全为 0 的非负整数 a，b，gcd（a，b）表示 a，b 的最大公约数，必然存在整数对 x，y ，使得 gcd（a，b）=ax+by。</p>
</blockquote>
<p>证明:</p>
<blockquote>
<p>设 a&gt;b<br>1，显然当 b=0，gcd（a，b）=a。此时 x=1，y=0；<br>2，ab!=0 时</p>
<p>设 :ax1+by1=gcd(a,b);<br>显然也有：bx2+(a mod b)y2=gcd(b,a mod b);</p>
<p>根据朴素的欧几里德原理有 gcd(a,b)=gcd(b,a mod b);<br>则:ax1+by1=bx2+(a mod b)y2;<br>即:ax1+by1=bx2+(a-(a/b)<em>b)y2=ay2+bx2-(a/b)</em>by2;<br>根据恒等定理得：x1=y2; y1=x2-(a/b)*y2;</p>
<p>这样我们就得到了求解 x1,y1 的方法：x1，y1 的值基于 x2，y2.</p>
<p>上面的思想是以递归定义的，因为 gcd 不断的递归求解一定会有个时候 b=0，所以递归可以结束。</p>
</blockquote>
<p>我的代码:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> x , y;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a , <span class="hljs-keyword">int</span> b , <span class="hljs-keyword">int</span> &amp;x , <span class="hljs-keyword">int</span> &amp;y , <span class="hljs-keyword">int</span> &amp;d)</span>      <span class="hljs-comment">//x , y , d为引用方便更改值，d为gcd(a , b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!b) &#123;d = a; x = <span class="hljs-number">1</span>; y = <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        gcd(b , a % b , y , x , d);<br>        y -= x * (a / b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>acm</tag>
        <tag>数论</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>博弈</title>
    <url>/2019/07/19/%E5%8D%9A%E5%BC%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>博弈论，一个曾经看了感觉看不懂的东西，，现在不得不再看一下，，不过也只是大概了解了一下这部分内容，主要是sg函数的使用吧，，</p>
<span id="more"></span>
<h1 id="经典博弈"><a href="#经典博弈" class="headerlink" title="经典博弈"></a>经典博弈</h1><p>经典博弈就那几个，，记住每种不同的局面和取法以及处理方式就行了，，</p>
<p><a href="https://blog.csdn.net/lgdblue/article/details/15809893">这里这个博客讲的很清楚</a></p>
<p><a href="https://www.cnblogs.com/frog112111/p/3199780.html">还有这个</a></p>
<p><a href="https://blog.csdn.net/strangedbly/article/details/51137432">这里</a></p>
<h1 id="公平组合博弈（Impartial-Combinatori-Games）"><a href="#公平组合博弈（Impartial-Combinatori-Games）" class="headerlink" title="公平组合博弈（Impartial Combinatori Games）"></a>公平组合博弈（Impartial Combinatori Games）</h1><p>这里就是sg函数的使用了，，主要是PN点表示必败和必胜态在sg函数里怎么体现、<code>mex()</code> 的求法，</p>
<p>多个游戏的问题可以利用经典博弈的异或来求每一个游戏的sg值的异或和来判断，，</p>
<p>用到sg函数的博弈可能的两种板子：</p>
<h2 id="打表"><a href="#打表" class="headerlink" title="打表"></a>打表</h2><p>最常用，但是如果多组输入，并且每组的取法不同就可能会爆，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//f[] 为一个游戏的取法，使用前初始化，排序，sg[]即为石子数为某个值下的先手的结果，0为必败</span><br><span class="hljs-keyword">int</span> f[maxn], fn, sg[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getsg</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(sg, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> sg);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; f[j] &lt;= i &amp;&amp; j &lt;= fn; ++j)vis[sg[i - f[j]]] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;; ++j)<span class="hljs-keyword">if</span>(!vis[j])&#123;sg[i] = j; <span class="hljs-keyword">break</span>;&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="dfs记忆化搜索"><a href="#dfs记忆化搜索" class="headerlink" title="dfs记忆化搜索"></a>dfs记忆化搜索</h2><p>当打表可能爆时就用搜索来求sg</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> f[<span class="hljs-number">105</span>], sg[maxn], n, m, fn;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfsg</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(~sg[num])<span class="hljs-keyword">return</span> sg[num];<br>    <span class="hljs-keyword">bool</span> vis[<span class="hljs-number">105</span>];<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= fn &amp;&amp; f[i] &lt;= num; ++i)<br>    &#123;<br>        dfsg(num - f[i]);<br>        vis[sg[num - f[i]]] = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;; ++i)&#123;<span class="hljs-keyword">if</span>(!vis[i])<span class="hljs-keyword">return</span> sg[num] = i;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><p><a href="https://vjudge.net/contest/311362#overview">[kuangbin]专题36 博弈论（Ⅱ）</a></p>
<p><a href="https://vjudge.net/contest/311361">[kuangbin]专题35 博弈论（Ⅰ）</a></p>
<p>有时间再多补些题吧，，，</p>
<p>(end)</p>
]]></content>
      <categories>
        <category>ACM-博弈论</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>博弈</tag>
      </tags>
  </entry>
  <entry>
    <title>图论-二分图</title>
    <url>/2019/04/03/%E5%9B%BE%E8%AE%BA-%E4%BA%8C%E5%88%86%E5%9B%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>很久之前就了解到有二分图这么个东西，，但是一直没看，拖到现在来学一下，图论的东西向来是理论简单，建图难，，</p>
<span id="more"></span>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><a href="https://www.renfei.org/blog/bipartite-matching.html">我是在这里看的二分图的东西</a>，，但是最后的代码因为一直是看kuangbin的板子理解，所以代码都是kuangbin板子上的（大同小异，代码风格不一样而已</p>
<p>//建图有毒，，，</p>
<h1 id="几个重要的概念"><a href="#几个重要的概念" class="headerlink" title="几个重要的概念"></a>几个重要的概念</h1><ul>
<li>最小图着色为2的图称为二分图，二分图的判定可以用染色法</li>
<li>匹配：指一个边的集合，任意两条边都没有公共的顶点</li>
<li>最大匹配数：边数最多的匹配，，，</li>
<li>完美匹配：原图的每个点都是某个匹配的匹配点的匹配</li>
<li><strong>最小点覆盖数</strong> ： 选取最少的点，使得任意一条边至少一个顶点是被选择的</li>
<li><strong>最小路径覆盖数</strong> ： 对于一个有向无环图DAG，选取最少的路径，使得每个顶点属于一条路径，路径长度可以为零（将每个点拆点后做最大匹配，利用性质求即可，具体的路径是 <code>i-&gt;j&#39; j-&gt;k&#39; k-&gt;l&#39;.....</code> 和网络流解决时的处理方法一致，，<strong>（注意这样算的最小路径覆盖每一个点都是属于一条路径，即交点只能走一次，，如果交点可以算多次，先跑一次传递闭包，然后再求最大匹配）</strong></li>
<li>$最大匹配数=最小点覆盖数$ ，，konig定理</li>
<li>$最大独立数=最小边覆盖=总点数-最大匹配数$ </li>
<li>$最小路径覆盖=总点数-最大匹配数$</li>
<li>$最小点覆盖=最大匹配数$</li>
</ul>
<p><a href="https://www.cnblogs.com/fish7/p/4088282.html">参考</a></p>
<h1 id="二分图的最大权匹配KM"><a href="#二分图的最大权匹配KM" class="headerlink" title="二分图的最大权匹配KM"></a>二分图的最大权匹配KM</h1><p><a href="https://blog.csdn.net/li13168690086/article/details/81557890">这篇博客讲的不错</a></p>
<p><a href="https://www.cnblogs.com/logosG/p/logos.html?tdsourcetag=s_pcqq_aiomsg">这篇的图示不错</a></p>
<p>在处理最小权匹配时，，kuangbin 这样说:</p>
<blockquote>
<p>这里我还要说几句：最正确解最小权匹配的办法是用一个很大的数-当前边权值，而不是直接对边权取反(这样只能处理左右点相等的完全二分图，即K(n, n)</p>
</blockquote>
<h1 id="最小点覆盖得到点集"><a href="#最小点覆盖得到点集" class="headerlink" title="最小点覆盖得到点集"></a>最小点覆盖得到点集</h1><p><a href="https://vjudge.net/problem/UVA-11419">题目</a></p>
<p>用最少的点覆盖所有的边，</p>
<p>做法： 先跑一遍最大匹配得到数量，，然后对X集中的未匹配点再跑一次，，一路标记，，<br>最后的X集中未标记点和Y集中标记点就是待求点集，，</p>
<p>kuangbin的板子需要加一些东西，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(TM(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> linker[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">bool</span> ans[maxn];<br><span class="hljs-keyword">int</span> un;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span>&#123;<br>    vis[u] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)&#123;<br>        <span class="hljs-keyword">int</span> v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(!vis[v])&#123;<br>            vis[v] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(linker[v] == <span class="hljs-number">-1</span> || dfs(linker[v]))&#123;<br>                linker[v] = u;<br>                linker[u] = v;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">hungary</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(linker, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> linker);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= un; ++u)&#123;<br>        <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>        <span class="hljs-keyword">if</span>(dfs(u))++res;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-keyword">int</span> r, c, n;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; r &gt;&gt; c &gt;&gt; n &amp;&amp; (r + c + n))&#123;<br>        <span class="hljs-keyword">int</span> u, v;<br>        init();<br>        un = r;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;<br>            addedge(u, v + r);<br>            addedge(v + r, u);<br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; hungary() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= r; ++i)&#123;<br>            <span class="hljs-keyword">if</span>(linker[i] == <span class="hljs-number">-1</span>)dfs(i);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= r; ++i)<span class="hljs-keyword">if</span>(!vis[i])<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;r&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= c; ++i)<span class="hljs-keyword">if</span>(vis[i + r])<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;c&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="二分图刷题"><a href="#二分图刷题" class="headerlink" title="二分图刷题"></a>二分图刷题</h1><p><a href="https://vjudge.net/contest/335837#overview">kuangbin的题集</a></p>
<h2 id="A-Fire-Net-HDU-1045"><a href="#A-Fire-Net-HDU-1045" class="headerlink" title="A - Fire Net HDU - 1045"></a>A - Fire Net HDU - 1045</h2><p>前面做过一个行列的二分图，，这个思想差不多，也是左面是表示行，右面表示列，，但是行列的编号得自己指定，因为有墙，，对每个点的所在行、列的标号进行连边，表示一种放置方法，，最后的最大匹配就是放的方案数，，<a href="https://vjudge.net/solution/22317268">code</a></p>
<h2 id="B-The-Accomodation-of-Students"><a href="#B-The-Accomodation-of-Students" class="headerlink" title="B - The Accomodation of Students"></a>B - The Accomodation of Students</h2><p>先染色判断一下是不是二分图，，是的话直接把0点放一边跑最大匹配就行了，，<a href="https://vjudge.net/solution/22318944">code</a> ，，<del>（染色写炸了一发，，，边开小了一发，，</del></p>
<h2 id="C-Courses"><a href="#C-Courses" class="headerlink" title="C - Courses"></a>C - Courses</h2><p>水题，，<a href="https://vjudge.net/solution/22319191">code</a></p>
<h2 id="D-棋盘游戏"><a href="#D-棋盘游戏" class="headerlink" title="D - 棋盘游戏"></a>D - 棋盘游戏</h2><p>怎么我感觉题目是错的，，，算了反正是水题，，枚举删边判断最大匹配是否减小即可，，</p>
<h2 id="E-Swap"><a href="#E-Swap" class="headerlink" title="E - Swap"></a>E - Swap</h2><p>这题不错，，</p>
<p>首先要知道一个性质：一个矩阵如果对角线全是一，它的秩就是n，，然后行列变换可以侑全是列变换或者行变换来得到，，</p>
<p>行列对1点建图，，然后如果最大匹配是n（完备匹配）就是有解的，，，然后输出方案利用到了上面性质，每个匹配也就是选的要交换的1点，，将他移动到对应的对角线所在的位置就行了，，移动的时候要将列的记录也同时交换，，<a href="https://vjudge.net/solution/22409107">code</a></p>
<h2 id="F-Rain-on-your-Parade"><a href="#F-Rain-on-your-Parade" class="headerlink" title="F - Rain on your Parade"></a>F - Rain on your Parade</h2><p>一边人，另一边伞，然后对于满足条件能得到伞的连边，，用hk来跑，，匈牙利会T<a href="https://vjudge.net/solution/22444013">code</a></p>
<h2 id="G-Oil-Skimming"><a href="#G-Oil-Skimming" class="headerlink" title="G - Oil Skimming"></a>G - Oil Skimming</h2><p>水题，，建图直接跑就行了<a href="https://vjudge.net/solution/22446412">code</a></p>
<h2 id="H-Antenna-Placement"><a href="#H-Antenna-Placement" class="headerlink" title="H - Antenna Placement"></a>H - Antenna Placement</h2><p>水题++，，，建图跑匈牙利，，然后对于没有匹配到的点加到答案里就行了，，<a href="https://vjudge.net/solution/22447059">code</a></p>
<h2 id="I-Strategic-Game"><a href="#I-Strategic-Game" class="headerlink" title="I - Strategic Game"></a>I - Strategic Game</h2><p>最小点覆盖，，处理一下图然后跑最大匹配就行了，，等价<a href="https://vjudge.net/solution/22447904">code</a></p>
<h2 id="J-Air-Raid"><a href="#J-Air-Raid" class="headerlink" title="J - Air Raid"></a>J - Air Raid</h2><p>最小路径覆盖数，，拆点后跑最大匹配，，答案就是点数减取匹配数，，<a href="https://vjudge.net/solution/22448190">code</a></p>
<h2 id="K-Treasure-Exploration"><a href="#K-Treasure-Exploration" class="headerlink" title="K - Treasure Exploration"></a>K - Treasure Exploration</h2><p>可以侑相交点的最小路径覆盖，，先传递闭包一次，这样就可以使得相交点算多次，，<a href="https://vjudge.net/solution/22451346">code</a></p>
<h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
      <categories>
        <category>ACM-图论-二分图</category>
      </categories>
      <tags>
        <tag>acm</tag>
        <tag>图论</tag>
        <tag>二分图</tag>
      </tags>
  </entry>
  <entry>
    <title>图论-割点、桥与双连通分支</title>
    <url>/2019/03/10/%E5%9B%BE%E8%AE%BA-%E5%89%B2%E7%82%B9%E4%B8%8E%E6%A1%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这应该是图论的基础知识点了吧，，，当初上离散课的时候没有好好听（因为不怎么考。。QAQ），，只知道个大致概念，，至于怎么用代码去求一个图的割点与桥之前也只知道用tarjan可以实现，，但具体的细节一点都不知道，，，想着迟早有一天栽在不会这块内容上，，emmm昨天就因为不熟悉这块内容简单的板子题都没看出来，，，</p>
<span id="more"></span>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>首先总结一下一些这块内容的知识点：</p>
<p><a href="https://www.cnblogs.com/kuangbin/p/3184889.html">参考kaungbin的博客</a></p>
<ul>
<li><strong>割点集合</strong>：对于一个 <strong>无向连通图</strong> ，如果有这么一个定点的集合，从这个图删去这个点集以及它所连接的边，原图变成多个联通块的图，，就成这个点集为 <strong>割点集合</strong>，就是说删除一个点集使得这个图中的其他点不再互相能够到达，，，同理换成边集就是 <strong>割边集合</strong>；</li>
<li><strong>点连通度、边连通度</strong>： 上面那个元素最少的集合的点（边）数就称为点（边）连通度；</li>
<li><strong>点双连通图</strong>：对于一个 <strong>无向连通图</strong> ，如果它的 <strong>点连通度</strong> 大于1，就称这个图是 <strong>点双联通</strong> 的，，简称 <strong>双联通</strong> 或 <strong>重连通</strong>；</li>
<li><strong>割点</strong>： 点连通度为1时，也就是割点点集的大小是1时，这个点就被称为割点（一个图可以有多个割点）</li>
<li><strong>边双连通、割边（桥）</strong>：和点的定义一样，，边连通度大于一就称这个图是双连通；边连通度等于1就称这个割边集合里的那条边是 <strong>割边（桥）</strong>；</li>
<li><strong>双连通分支</strong>；对于图 $G$ 的所有子图 $G’$ ，如果 $G’$ 是双连通的，就称 $G’$ 是 <strong>双连通子图</strong> ，对于所有的双连通子图中，最大的那个称为 <strong>极大双连通子图</strong>，也称为 <strong>双连通分支、重连通分支</strong>；特殊的，点双连通分支也称为 <strong>块</strong>；</li>
</ul>
<h1 id="求解方法"><a href="#求解方法" class="headerlink" title="求解方法"></a>求解方法</h1><h2 id="求割点与桥"><a href="#求割点与桥" class="headerlink" title="求割点与桥"></a>求割点与桥</h2><p>求割点和求桥是差不多的，，都用tarjan算法就可以求出</p>
<p>在tarjan算法中：</p>
<ul>
<li>dfn[i]表示节点i在dfs中的是第几个被访问到的（时间戳）</li>
<li>low[i]表示节点i所能到达的点中的最小的dfn</li>
</ul>
<p>对于一个点u和它在dfs树中的点 $v_1, v_2,v_3,,,,,,$:</p>
<ul>
<li>割点满足：$low[v_i] \geq dfn[u]$</li>
<li>桥满足： $low[v_i] &gt; dfn[u]$，，$(u,v)$就是一个桥</li>
</ul>
<p>最后对于搜索树的根节点，特判一下：如果根只有一个孩子节点，，那么它就不是割点</p>
<h2 id="求双连通分支"><a href="#求双连通分支" class="headerlink" title="求双连通分支"></a>求双连通分支</h2><p>（留坑）</p>
<h2 id="构造双连通图"><a href="#构造双连通图" class="headerlink" title="构造双连通图"></a>构造双连通图</h2><p>（留坑）</p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="牛客392-I"><a href="#牛客392-I" class="headerlink" title="牛客392-I"></a><a href="https://ac.nowcoder.com/acm/contest/392/I">牛客392-I</a></h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>题意就是给你一个无向连通图，问你有几条这样的边，删去一条图中的点还能互相到达。。。</p>
<p>一开始我想着：所有点都到达？哈密顿通路？？那我直接求出哈密顿通路的边数再用总边数减一下不就行了吗？？ 后来一想发现不对，，，<br>比如题里那个图哈密顿通路的边数是4，，减完之后是1，，，显然不对啊，，，</p>
<p>再看这个题，，让我们求所有删去一条后不影响点的连通的边，，从反面考虑，，我们可以求出所有删去后点不能到达的边，，然后用总边数减去就行了，，，而这样的边就是桥，，，所以求这个图的桥的个数就行了，，，</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>kaungbin的板子，，（好长啊，，不过能求出具体的边）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c = getchar(); <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; c = getchar();&#125;<br>    <span class="hljs-keyword">while</span>(c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = getchar();<br>    <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, next;<br>    <span class="hljs-keyword">bool</span> cut;   <span class="hljs-comment">//</span><br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> head[maxn], tot;<br><span class="hljs-keyword">int</span> low[maxn], dfn[maxn], sta[maxn];<br><span class="hljs-keyword">int</span> idx, top;<br><span class="hljs-keyword">bool</span> insta[maxn];<br><span class="hljs-keyword">bool</span> cut[maxn];<br><span class="hljs-keyword">int</span> add_block[maxn];<br><span class="hljs-keyword">int</span> bridge;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].cut = <span class="hljs-literal">false</span>;<br>    edge[tot].next = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> pre)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> v;<br>    low[u] = dfn[u] = ++idx;<br>    sta[top++] = u;<br>    insta[u] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">int</span> son = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> pre_cnt = <span class="hljs-number">0</span>;        <span class="hljs-comment">//</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>    &#123;<br>        v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(v == pre &amp;&amp; pre_cnt == <span class="hljs-number">0</span>)<br>        &#123;<br>            ++pre_cnt;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!dfn[v])<br>        &#123;<br>            ++son;<br>            tarjan(v, u);<br>            <span class="hljs-keyword">if</span>(low[u] &gt; low[v])low[u] = low[v];<br>            <span class="hljs-keyword">if</span>(low[v] &gt; dfn[u])<br>            &#123;<br>                ++bridge;<br>                edge[i].cut = <span class="hljs-literal">true</span>;<br>                edge[i ^ <span class="hljs-number">1</span>].cut = <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(u != pre &amp;&amp; low[v] &gt;= dfn[u])<br>            &#123;<br>                cut[u] = <span class="hljs-literal">true</span>;<br>                ++add_block[u];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(low[u] &gt; dfn[v])<br>            low[u] = dfn[v];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(u == pre &amp;&amp; son &gt; <span class="hljs-number">1</span>)cut[u] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span>(u == pre)add_block[u] = son - <span class="hljs-number">1</span>;<br>    insta[u] = <span class="hljs-literal">false</span>;<br>    --top;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dfn, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dfn);<br>    <span class="hljs-built_in">memset</span>(insta, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> insta);<br>    <span class="hljs-built_in">memset</span>(add_block, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> add_block);<br>    <span class="hljs-built_in">memset</span>(cut, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> cut);<br>    idx = top = bridge = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span>(!dfn[i])<br>            tarjan(i, i);<br><span class="hljs-comment">//    int ans = 0;</span><br><span class="hljs-comment">//    for(int u = 1; u &lt;= n; ++u)</span><br><span class="hljs-comment">//        for(int i = head[u]; ~i; i = edge[i].next)</span><br><span class="hljs-comment">//            if(edge[i].cut &amp;&amp; edge[i].to &gt; u)</span><br><span class="hljs-comment">//            ++ans;</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, m - bridge);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">int</span> u, v;<br>    init();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>        addedge(u, v);<br>        addedge(v, u);<br>    &#125;<br>    solve(n, m);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>只针对这道题短一点的：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c = getchar(); <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; c = getchar();&#125;<br>    <span class="hljs-keyword">while</span>(c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = getchar();<br>    <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, next;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> head[maxn], tot;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].next = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> ans;<br><span class="hljs-keyword">int</span> low[maxn], dfn[maxn];<br><span class="hljs-keyword">int</span> idx;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> pre)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> v;<br>    low[u] = dfn[u] =  ++idx;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>    &#123;<br>        v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(v == pre)<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span>(!dfn[v])<br>        &#123;<br>            tarjan(v, u);<br>            low[u] = min(low[u], low[v]);<br>            <span class="hljs-keyword">if</span>(low[v] &gt; dfn[u])++ans;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            low[u] = min(low[u], dfn[v]);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span>(!dfn[i])<br>            tarjan(i, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, m - ans);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">int</span> u, v;<br>    init();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>        addedge(u, v);<br>        addedge(v, u);<br>    &#125;<br>    solve(n, m);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>(其他的以后用到再说吧)</p>
]]></content>
      <categories>
        <category>ACM-图论-割点、桥与双连通分支</category>
      </categories>
      <tags>
        <tag>acm</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>[工具使用]-新版正方教务系统导出课程表-油猴脚本</title>
    <url>/2020/01/31/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8-%E6%96%B0%E7%89%88%E6%AD%A3%E6%96%B9%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F%E5%AF%BC%E5%87%BA%E8%AF%BE%E7%A8%8B%E8%A1%A8-%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://greasyfork.org/zh-CN/scripts/395847-%E6%96%B0%E7%89%88%E6%AD%A3%E6%96%B9%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F%E5%AF%BC%E5%87%BA%E8%AF%BE%E7%A8%8B%E8%A1%A8">这个油猴脚本</a>主要是针对新版的正方教务系统，实现将课程表转化为一个 <code>courses.ics</code> 文件，这样就可以 <strong>愉快</strong> 的使用 <code>Google Calendar</code> 来看课程表了，<del>（唉，我好像快毕业了哎，，，</del> ，</p>
<span id="more"></span>
<h1 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h1><p>安装油猴扩展，然后安装脚本</p>
<p>在使用前进入到要导出课程表的页面，<img src="https://raw.githubusercontent.com/31415926535x/CollegeProjectBackup/master/ZhengfangClassScheduleToICS/img/1.PNG" alt=""></p>
<p>然后确定这学期开学的第一周的周一的日期，<img src="https://raw.githubusercontent.com/31415926535x/CollegeProjectBackup/master/ZhengfangClassScheduleToICS/img/2.PNG" alt=""></p>
<p>点击 <code>生成课表</code> 然后就会提示导出成功，这时点击旁边的 <code>下载ics文件</code> 即可下载 <code>course.ics</code> 文件，<img src="https://raw.githubusercontent.com/31415926535x/CollegeProjectBackup/master/ZhengfangClassScheduleToICS/img/3.PNG" alt=""></p>
<p>之后怎么使用就看你了，，这样可以不再使用各种 **课程表 等看个课程表还要等半天，看半天广告，而且还占空间。。<del>（深受其害.jpg）</del></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>第一次写脚本，js用的也不熟练，这个脚本参照了一个学长之前根据旧版教务系统的课程表导出脚本写的，一直想自己写一个，一直拖到了新版教务系统，，，无聊时练下手，所以脚本的只是一个可以使用的状况，其中的一些处理没有考虑效率的问题<del>（数据量又不大，暴力就完事了嘛）</del> ，其中可能还存在一些bug每一处理，希望遇到的朋友可以提个issues，嘿嘿。</p>
<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>有时间将考试信息也加上。。。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>宁夏网络赛-F-Moving On</title>
    <url>/2019/08/31/%E5%AE%81%E5%A4%8F%E7%BD%91%E7%BB%9C%E8%B5%9B-F-Moving-On/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>一道<a href="https://nanti.jisuanke.com/t/A1766">简单的Floyd</a>题，，但是是动态加点求多次有限制的最短路，，感觉这个思想很好，，当然可以直接dp</p>
<span id="more"></span>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>题目给你一个图，然后对于每一个节点都有一个点权，然后有q次询问，每次询问两点间的最短距离，并且最短路径中不能通过任意一个点权大于等于w的点，（首尾不算），，</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>一次询问的话，直接最短路乱搞就行了，，但是询问次数很多的时候，就不能每一次建图跑，因为是任意两点的最短路，<del>而且给的图是邻接矩阵</del> ，所以用Floyed，，，但是怎么处理每一次的询问呢，，一种做法是再加一维，处理出任意的加入前k个点后的最短路，，最后回答询问即可，，，也就是dp的思想，，另一种是询问离线，动态建图跑q次floyed即可，，后面这种思路以前见过但是没套floyed用过，，</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="离线"><a href="#离线" class="headerlink" title="离线"></a>离线</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e2</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> d[maxn][maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">query</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> u, v, w;<br>    <span class="hljs-keyword">int</span> ans;<br>    <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> query &amp;q)<span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> w &lt; q.w;<br>    &#125;<br>&#125;qry[maxm];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmpid</span><span class="hljs-params">(query a, query b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a.id &lt; b.id;<br>&#125;<br><span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; r[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>  <br>    <span class="hljs-keyword">int</span> t; <span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">int</span> ca = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> n, q; <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; q;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; r[i].first;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)r[i].second = i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>                <span class="hljs-built_in">cin</span> &gt;&gt; d[i][j];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; qry[i].u &gt;&gt; qry[i].v &gt;&gt; qry[i].w;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; ++i)qry[i].id = i;<br>        sort(qry + <span class="hljs-number">1</span>, qry + <span class="hljs-number">1</span> + q);<br>        sort(r + <span class="hljs-number">1</span>, r + <span class="hljs-number">1</span> + n);<br>        <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> qi = <span class="hljs-number">1</span>; qi &lt;= q; ++qi)<br>        &#123;<br>            <span class="hljs-keyword">while</span>(cnt &lt;= n &amp;&amp; r[cnt].first &lt;= qry[qi].w)<br>            &#123;<br>                <span class="hljs-comment">//满足条件的情况下，利用这个城市来更新最短路</span><br>                <span class="hljs-keyword">int</span> k = r[cnt].second;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>                &#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>                    &#123;<br>                        d[i][j] = min(d[i][j], d[i][k] + d[k][j]);<br>                    &#125;<br>                &#125;<br>                ++cnt;<br>            &#125;<br>            qry[qi].ans = d[qry[qi].u][qry[qi].v];<br>        &#125;<br>        sort(qry + <span class="hljs-number">1</span>, qry + <span class="hljs-number">1</span> + q, cmpid);<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Case #&quot;</span> &lt;&lt; ca++ &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; ++i)<span class="hljs-built_in">cout</span> &lt;&lt; qry[i].ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    &#125;<br>    <br>       <br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="预处理在线"><a href="#预处理在线" class="headerlink" title="预处理在线"></a>预处理在线</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e2</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> d[maxn][maxn][maxn];<br><span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; r[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>  <br>    <span class="hljs-keyword">int</span> t; <span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">int</span> ca = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> n, q; <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; q;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; r[i].first;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)r[i].second = i;<br>        <span class="hljs-built_in">memset</span>(d, inf, <span class="hljs-keyword">sizeof</span> d);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>                <span class="hljs-built_in">cin</span> &gt;&gt; d[i][j][<span class="hljs-number">0</span>];<br>        sort(r + <span class="hljs-number">1</span>, r + <span class="hljs-number">1</span> + n);<br>        <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> cnt = <span class="hljs-number">1</span>; cnt &lt;= n; ++cnt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> k = r[cnt].second;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>                    d[i][j][cnt] = min(d[i][j][cnt - <span class="hljs-number">1</span>], d[i][k][cnt - <span class="hljs-number">1</span>] + d[k][j][cnt - <span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-comment">// sort(r + 1, r + 1 + n, [](pair&lt;int, int&gt; i, pair&lt;int, int&gt; j)&#123;return i.second &lt; j.second;&#125;);</span><br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Case #&quot;</span> &lt;&lt; ca++ &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">int</span> u, v, w;<br><br>        <span class="hljs-keyword">while</span>(q--)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>            <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-keyword">if</span>(r[i].first &lt;= w)k = i;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; d[u][v][k] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        &#125;<br>    &#125;<br>    <br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>状态不在，思路都理不清，，，emmmmmm（该收心努力了啊314，，，，，</p>
<p>(end)</p>
]]></content>
      <categories>
        <category>ACM-最短路</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>序列自动机</title>
    <url>/2019/03/10/%E5%BA%8F%E5%88%97%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>昨天在牛客碰到了这样的一道题，判断一些字符串是不是原串的子序列，，，因为之前做过一些LCS子序列的题，，，就想，这不贼简单，，用lcs求一下每个子串和原串，，然后判断LCS的长度是不是等于要判断的那个串的长度，，，然后，，T了，，，</p>
<p>因为dp求LCS几个串还好说，，但是当串又多又长时，，，不仅会T，，dp数组不弄滚动数组还会MLE，，，</p>
<p>之后看了题解了解到这个处理子序列的好东西，序列自动机，，，</p>
<span id="more"></span>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>序列自动机实质还是用空间换时间，，它有一个数组 $nxt[i][j](nxt[maxn][26]$，，表示原串s的第i位后面那26个字符j出现的最早的 <strong>位置</strong>，，</p>
<p>相当于建了一棵树，，根节点是一个空节点，，，它有26个孩子，，表示每一个字母最早出现的位置，，，那么原串的第一个字符 $s[0]$ 就使得 $nxt[0][s[0] - ‘a’] = 1$，，第二个字符就是 $nxt[0][s[1]-‘a’]=2$，，，等等等等，，，同样第一个字符也有这样的26个孩子，，，这样从根节点到任意一个叶子节点都是原串的一个子序列，，</p>
<p>这样判断一个字符串t是不是原串的子序列只要将t中的每一个字符在那棵树里跑一下，，，如果存在这样的路径就表示t是s的一个子序列，，，</p>
<p>那么怎么建树呢，，</p>
<p>如果正着建树的话每次都要找到后面最早出现的字符的位置，，，不太好弄，，所以我们倒着建树，，用一个 $now[26]$ 数组表示遍历到第i个字符时后面这26个字符从后往前看最晚出现的位置，，也就是第i个字符后面的26个字符最在出现的位置，，，用它来更新 $nxt[i][1 \to 26]$，，然后再将这个字符在 $now$ 数组中的位置更新为当前的位置，，$now[s[i]-‘a’]=i$，，，</p>
<p>最后的实现就是这样子：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> nxt[maxn][<span class="hljs-number">30</span>];<br><span class="hljs-keyword">int</span> now[<span class="hljs-number">30</span>];<br><span class="hljs-keyword">char</span> s[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//序列自动机预处理</span><br>    <span class="hljs-built_in">memset</span>(now, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> now);            <span class="hljs-comment">//mow_i表示第i个字母在原串中从后向前最晚出现的位置</span><br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(s);<br>    --len;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = len; ~i; --i)               <span class="hljs-comment">//处理每一个字符</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">26</span>; ++j)        <span class="hljs-comment">//找出第i个字符后面的26个字母最早出现的字符的位置</span><br>            nxt[i][j] = now[j];<br>        now[s[i] - <span class="hljs-string">&#x27;a&#x27;</span>] = i;                <span class="hljs-comment">//用当前字符更新当前字符在原串中从后向前最晚出现的位置</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="牛客392-j"><a href="#牛客392-j" class="headerlink" title="牛客392-j"></a><a href="https://ac.nowcoder.com/acm/contest/392/J">牛客392-j</a></h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>题意就是判断n个字符串是不是原串的子序列，，，</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c = getchar(); <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; c = getchar();&#125;<br>    <span class="hljs-keyword">while</span>(c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = getchar();<br>    <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><span class="hljs-keyword">int</span> nxt[maxn][<span class="hljs-number">30</span>];<br><span class="hljs-keyword">int</span> now[<span class="hljs-number">30</span>];<br><span class="hljs-keyword">char</span> s[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//序列自动机预处理</span><br>    <span class="hljs-built_in">memset</span>(now, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> now);            <span class="hljs-comment">//mow_i表示第i个字母在原串中从后向前最晚出现的位置</span><br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(s);<br>    --len;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = len; ~i; --i)               <span class="hljs-comment">//处理每一个字符</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">26</span>; ++j)        <span class="hljs-comment">//找出第i个字符后面的26个字母最早出现的字符的位置</span><br>            nxt[i][j] = now[j];<br>        now[s[i] - <span class="hljs-string">&#x27;a&#x27;</span>] = i;                <span class="hljs-comment">//用当前字符更新当前字符在原串中从后向前最晚出现的位置</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">char</span> ss[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>    <span class="hljs-keyword">int</span> n; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    init();<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, ss);<br>        <span class="hljs-keyword">int</span> loc = now[ss[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;a&#x27;</span>];             <span class="hljs-comment">//没有以子串第一个字符出现的子序列时</span><br>        <span class="hljs-keyword">if</span>(!~loc)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(ss);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; len; ++i)<br>            &#123;<br>                loc = nxt[loc][ss[i] - <span class="hljs-string">&#x27;a&#x27;</span>];    <span class="hljs-comment">//寻找母串中子串第i个字符下一次出现的位置</span><br>                <span class="hljs-keyword">if</span>(!~loc)                       <span class="hljs-comment">//没有就退出</span><br>                &#123;<br>                    flag = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>            <span class="hljs-keyword">else</span>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="牛客156-d"><a href="#牛客156-d" class="headerlink" title="牛客156-d"></a><a href="https://ac.nowcoder.com/acm/contest/156/D">牛客156-d</a></h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>找出所有$abcdefghi$的排列是原串的子序列的个数，，，</p>
<p>判断条件改一下就行了，，</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c = getchar(); <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; c = getchar();&#125;<br>    <span class="hljs-keyword">while</span>(c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = getchar();<br>    <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><span class="hljs-keyword">int</span> now[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">int</span> nxt[maxn][<span class="hljs-number">10</span>];<br><span class="hljs-keyword">char</span> s[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(now, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> now);<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(s);<br>    --len;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = len; ~i; --i)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; ++j)<br>            nxt[i][j] = now[j];<br>        now[s[i] - <span class="hljs-string">&#x27;a&#x27;</span>] = i;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> a[] = <span class="hljs-string">&quot;abcdefghi&quot;</span>;<br>    init();<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        <span class="hljs-keyword">int</span> loc = now[a[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;a&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(!~loc)<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">9</span>; ++i)<br>        &#123;<br>            loc = nxt[loc][a[i] - <span class="hljs-string">&#x27;a&#x27;</span>];<br>            <span class="hljs-keyword">if</span>(!~loc)<span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(s[loc] == a[<span class="hljs-number">8</span>])++ans;<br>    &#125;<span class="hljs-keyword">while</span>(next_permutation(a, a + <span class="hljs-number">9</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>还有一些序列自动机加dp什么的，，，以后再看把，，，</p>
<p><a href="https://blog.csdn.net/pig_dog_baby/article/details/81145857">这里有很多知识点</a></p>
<p>(end)</p>
]]></content>
      <categories>
        <category>ACM-字符串</category>
      </categories>
      <tags>
        <tag>acm</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>强连通分量Tarjan_Kosaraju</title>
    <url>/2019/02/11/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8FTarjan-Kosaraju/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>图的连通性是图论中的一个基础知识点，算法很简单，但是所所涉及的基础知识点也很多，后悔当初离散数学没有好好的学，QAQ，，，</p>
<p>这篇主要是记录一下两种方法求强连通分量的算法，Tarjan和Kosaraju的模板，</p>
<span id="more"></span>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>（具体的算法的证明和相关的内容来自<a href="https://www.cnblogs.com/five20/p/7594239.html">这篇博客</a>以及红书上的内容）</p>
<p>强连通分量即 Strongly Connected Component，一个有向图中的人一两点若能相互到达，即为强连通图，若不为强连通图，则改图肯定由若干个小的强连通图组成，即为强连通分量，例如<br><img src="https://images2017.cnblogs.com/blog/1240891/201709/1240891-20170926095934964-988227089.png" alt=""></p>
<p>对于这个图，有三个强连通分量，{1,2,3,4},{5},{6}，，，</p>
<h3 id="Kosaraju算法"><a href="#Kosaraju算法" class="headerlink" title="Kosaraju算法"></a>Kosaraju算法</h3><ul>
<li>对原图进行一次深搜，计算出每一个节点被访问的次序（时间）st[i]；</li>
<li>对逆图进行一次深搜，遍历的起点为第一步节点结束时间从大到小进行，同是做标记cnt2</li>
<li>最后标记值相同的点即为一个强连通分量，color[u]==color[v]，说明u,v在用一个分量里，，（kuangbin的板子这里是用的belong[i]表示的）</li>
</ul>
<h3 id="Tarjan算法"><a href="#Tarjan算法" class="headerlink" title="Tarjan算法"></a>Tarjan算法</h3><p>Tarjan算法的思想：对于每一个强连通分量scc所构成的树一定为深搜时的dfs树，所以找到dfs树上的根即能确定一个scc</p>
<ul>
<li>dfn[i]记录的是节点i在深搜中的访问次序（时间戳）</li>
<li>low[i]记录的是点i可以到达的访问时间的最早祖先</li>
<li>Stack是记录节点的栈</li>
</ul>
<p>1、深搜整个图，一路上标记dfn并把新节点压栈<br>2、对于一个节点i，如果low[i]==dfn[i]，，说明他无法到达他的任何一个祖先<br>3、栈中i和i之后的点是相互可达的，所以可以组成一个极大强连通分量，可以整体弹出<br>4、low的求法：根据定义，如果点u访问一个新店v，那么u也可以到达low[v]，所以可以用low[v]来尝试更新low[u]；如果点u访问一个祖先k，那么就直接用dfn[k]尝试更新low[u]；<br>（看那篇博客的图更好理解）</p>
<h2 id="例题和模板"><a href="#例题和模板" class="headerlink" title="例题和模板"></a>例题和模板</h2><p><a href="http://poj.org/problem?id=2186">例题为红书上的推荐poj2189</a></p>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>有这么一群牛，牛A可以认为牛B是受欢迎的，同时如果牛B认为牛C是受欢迎时，就可以理解为牛A认为牛C是受欢迎的，即这种关系具有传递性，然后问你这群牛中有多少头是被其他所有牛认为是受欢迎的。</p>
<p>抽象成图论的样子来理解就是：对于给定的一个有向图，u-&gt;v表示牛u认为牛v是受欢迎的，问你在这个图中有几个点是其他所有点可以到达的。</p>
<p>思路是先求出有向图的强连通分量，将同意分量的点“染色”成同一个编号，，然后“缩点”成一个DAG有向无环图，然后找出所有出度为0的点，如果这样的点只有一个，说明这个点是可以被其他的点到达的，同时也说明这个点（强连通分量）所包含的点也是原图中其他所有点可以到达的，答案就是这个强连通分量中点的个数；如果出度为0点有多个，及说明这些强连通分量块之间是没有可达的路径的，及原图中不存在任何一个其他所有点都能到达的点；</p>
<h3 id="Kosaraju实现"><a href="#Kosaraju实现" class="headerlink" title="Kosaraju实现"></a>Kosaraju实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c = getchar(); <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; c = getchar();&#125;<br>    <span class="hljs-keyword">while</span>(c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = getchar();<br>    <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><span class="hljs-comment">//kosaraju</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, next;<br>&#125;edge1[maxn], edge2[maxn];<br><span class="hljs-comment">//edge1为原图，edge2为逆图</span><br><span class="hljs-keyword">int</span> head1[maxn], head2[maxn];<br><span class="hljs-keyword">bool</span> mark1[maxn], mark2[maxn];<br><span class="hljs-keyword">int</span> tot1, tot2;<br><span class="hljs-keyword">int</span> cnt1, cnt2;<span class="hljs-comment">//cnt2即为强连通分量的个数scc</span><br><span class="hljs-keyword">int</span> st[maxn];<span class="hljs-comment">//对原图进行dfs，点的结束时间从小到大的排序</span><br><span class="hljs-keyword">int</span> belong[maxn];<span class="hljs-comment">//每个点属于那个连通分量的编号(0~cnt2-1)</span><br><span class="hljs-keyword">int</span> num;<span class="hljs-comment">//中间变量，用来书某个连通分量中点的个数</span><br><span class="hljs-keyword">int</span> setnum[maxn];<span class="hljs-comment">//强连通分量中点的个数，编号0~cnt2-1</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge1[tot1].to = v; edge1[tot1].next = head1[u]; head1[u] = tot1++;<br>    edge2[tot2].to = u; edge2[tot2].next = head2[v]; head2[v] = tot2++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    mark1[u] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head1[u]; ~i; i = edge1[i].next)<br>        <span class="hljs-keyword">if</span>(!mark1[edge1[i].to])<br>        dfs1(edge1[i].to);<br>    st[cnt1++] = u;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    mark2[u] = <span class="hljs-literal">true</span>;<br>    ++num;<br>    belong[u] = cnt2;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head2[u]; ~i; i = edge2[i].next)<br>        <span class="hljs-keyword">if</span>(!mark2[edge2[i].to])<br>        dfs2(edge2[i].to);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">kosaraju</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(mark1, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> mark1);<br>    <span class="hljs-built_in">memset</span>(mark2, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> mark2);<br>    cnt1 = cnt2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span>(!mark1[i])<br>            dfs1(i);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = cnt1 - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i)<br>        <span class="hljs-keyword">if</span>(!mark2[st[i]])<br>    &#123;<br>        num = <span class="hljs-number">0</span>;<br>        dfs2(st[i]);<br>        setnum[cnt2++] = num;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot1 = tot2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head1, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head1);<br>    <span class="hljs-built_in">memset</span>(head2, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head2);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m) != EOF)<br>    &#123;<br>        <span class="hljs-keyword">int</span> u, v;<br>        init();<br>        <span class="hljs-keyword">while</span>(m--)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>            addedge(u, v);<br>        &#125;<br>        kosaraju(n);<br>        <span class="hljs-keyword">int</span> out[maxn];<span class="hljs-comment">//缩点后每个强连通分量代表的点的出度</span><br>        <span class="hljs-built_in">memset</span>(out, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> out);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; ++u)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head1[u]; ~i; i = edge1[i].next)<br>            &#123;<br>                <span class="hljs-keyword">int</span> v = edge1[i].to;<br>                <span class="hljs-keyword">if</span>(belong[u] != belong[v])<span class="hljs-comment">//缩点，同一编号的点即为同一个强连通分量</span><br>                ++out[belong[u]];<br>            &#125;<br><br>        <span class="hljs-keyword">int</span> flag = <span class="hljs-number">-1</span>;<span class="hljs-comment">//出度为零的点的编号</span><br>        <span class="hljs-keyword">int</span> num_ = <span class="hljs-number">0</span>;<span class="hljs-comment">//出度为零的点的个数</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt2; ++i)<br>            <span class="hljs-keyword">if</span>(!out[i])<br>            &#123;<br>                flag = i;<br>                ++num_;<br>            &#125;<br>        <span class="hljs-keyword">if</span>(~flag &amp;&amp; num_ == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, setnum[flag]);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="Tarjan"><a href="#Tarjan" class="headerlink" title="Tarjan"></a>Tarjan</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//kaungbin的板子</span><br><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c = getchar(); <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; c = getchar();&#125;<br>    <span class="hljs-keyword">while</span>(c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = getchar();<br>    <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, next;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> head[maxn], tot;<br><span class="hljs-keyword">int</span> low[maxn], dfn[maxn], Stack[maxn], belong[maxn];<br><span class="hljs-keyword">int</span> index, top;<br><span class="hljs-keyword">int</span> scc;<span class="hljs-comment">//强连通分量的个数</span><br><span class="hljs-keyword">bool</span> instack[maxn];<br><span class="hljs-keyword">int</span> num[maxn];<span class="hljs-comment">//每个编号的强连通分量中点的个数</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].next = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> v;<br>    low[u] = dfn[u]= ++index;<br>    Stack[top++] = u;<br>    instack[u] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>    &#123;<br>        v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(!dfn[v])<br>        &#123;<br>            tarjan(v);<br>            <span class="hljs-keyword">if</span>(low[u] &gt; low[v])low[u] = low[v];<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(instack[v] &amp;&amp; low[u] &gt; dfn[v])<br>            low[u] = dfn[v];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(low[u] == dfn[u])<br>    &#123;<br>        ++scc;<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>            v = Stack[--top];<br>            instack[v] = <span class="hljs-literal">false</span>;<br>            belong[v] = scc;<br>            ++num[scc];<br>        &#125;<span class="hljs-keyword">while</span>(v != u);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dfn, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dfn);<br>    <span class="hljs-built_in">memset</span>(instack, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> instack);<br>    <span class="hljs-built_in">memset</span>(num, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> num);<br>    index = scc = top = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span>(!dfn[i])<br>            tarjan(i);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m) != EOF)<br>    &#123;<br>        <span class="hljs-keyword">int</span> u, v;<br>        init();<br>        <span class="hljs-keyword">while</span>(m--)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>            addedge(u, v);<br>        &#125;<br>        solve(n);<br>        <span class="hljs-keyword">int</span> out[maxn];<br>        <span class="hljs-built_in">memset</span>(out, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> out);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; ++u)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>            &#123;<br>                <span class="hljs-keyword">int</span> v = edge[i].to;<br>                <span class="hljs-keyword">if</span>(belong[u] != belong[v])<br>                ++out[belong[u]];<br>            &#125;<br><br>        <span class="hljs-keyword">int</span> flag = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">int</span> num_ = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= scc; ++i)<br>            <span class="hljs-keyword">if</span>(!out[i])<br>            &#123;<br>                flag = i;<br>                ++num_;<br>            &#125;<br>        <span class="hljs-keyword">if</span>(~flag &amp;&amp; num_ == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, num[flag]);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//红书的板子，感觉不太友好，虽然看着舒服，但是没有上一个板子灵活，而且使用vector实现，耗时稍大</span><br><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c = getchar(); <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; c = getchar();&#125;<br>    <span class="hljs-keyword">while</span>(c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = getchar();<br>    <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">scc</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-built_in">vector</span> &lt;<span class="hljs-keyword">int</span>&gt; &amp;color;<br>    <span class="hljs-built_in">vector</span> &lt;<span class="hljs-keyword">int</span>&gt; Stack;<br>    <span class="hljs-keyword">int</span> num_scc, colorcnt, curr, *instack, *dfn, *low, *info, *next, *to;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        dfn[x] = low[x] = ++curr;<br>        Stack.push_back(x);<br>        instack[x] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = info[x]; j; j = next[j])<br>            <span class="hljs-keyword">if</span>(!instack[to[j]])<br>            &#123;<br>                dfs(to[j]);<br>                low[x] = min(low[x], low[to[j]]);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(instack[to[j]] == <span class="hljs-number">1</span>)<br>            &#123;<br>                low[x] = min(low[x], dfn[to[j]]);<br>            &#125;<br><br>        <span class="hljs-keyword">if</span>(low[x] == dfn[x])<br>        &#123;<br>            <span class="hljs-keyword">while</span>(Stack.back() != x)<br>            &#123;<br>                color[Stack.back()] = colorcnt;<br>                instack[Stack.back()] = <span class="hljs-number">2</span>;<br>                Stack.pop_back();<br>            &#125;<br>            color[Stack.back()] = colorcnt++;<br>            instack[Stack.back()] = <span class="hljs-number">2</span>;<br>            Stack.pop_back();<br>            ++num_scc;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//edge为图, n为点数, ans为染色的结果，及编号, ansn为scc的个数</span><br>    scc(<span class="hljs-keyword">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; &gt; &amp;edge, <span class="hljs-keyword">int</span> n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;ans, <span class="hljs-keyword">int</span> &amp;ansn):color(ans)<br>    &#123;<br>        color.resize(n);<br>        instack = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        dfn = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        low = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        info = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        next = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[(<span class="hljs-keyword">int</span>)edge.size() + <span class="hljs-number">5</span>];<br>        to = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[(<span class="hljs-keyword">int</span>)edge.size() + <span class="hljs-number">5</span>];<br>        fill_n(info, n, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; edge.size(); ++i)<br>        &#123;<br>            to[i + <span class="hljs-number">1</span>] = edge[i].second;<br>            next[i + <span class="hljs-number">1</span>] = info[edge[i].first];<br>            info[edge[i].first] = i + <span class="hljs-number">1</span>;<br>        &#125;<br>        fill_n(instack, n, <span class="hljs-number">0</span>);<br>        colorcnt = <span class="hljs-number">0</span>;<br>        curr = <span class="hljs-number">0</span>;<br>        num_scc = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>            <span class="hljs-keyword">if</span>(!instack[i])<br>                dfs(i);<br>        ansn = num_scc;<br>        <span class="hljs-keyword">delete</span>[] instack;<br>        <span class="hljs-keyword">delete</span>[] dfn;<br>        <span class="hljs-keyword">delete</span>[] low;<br>        <span class="hljs-keyword">delete</span>[] info;<br>        <span class="hljs-keyword">delete</span>[] next;<br>        <span class="hljs-keyword">delete</span>[] to;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m) != EOF)<br>    &#123;<br>        <span class="hljs-keyword">int</span> u, v;<br>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; &gt; edge;<br>        edge.clear();<br>        <span class="hljs-keyword">while</span>(m--)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>            --u;--v;<br>            edge.push_back(<span class="hljs-built_in">make_pair</span>(u, v));<br>        &#125;<br>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ans;<br>        ans.clear();<br>        <span class="hljs-keyword">int</span> ansn;<br>        scc(edge, n, ans, ansn);<br><br>        <span class="hljs-keyword">int</span> out[maxn];<br>        <span class="hljs-built_in">memset</span>(out, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> out);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; edge.size(); ++i)<br>            <span class="hljs-keyword">if</span>(ans[edge[i].first] != ans[edge[i].second])<br>                ++out[ans[edge[i].first]];<br>        <span class="hljs-keyword">int</span> flag = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ansn; ++i)<br>            <span class="hljs-keyword">if</span>(!out[i])<br>            &#123;<br>                flag = i;<br>                ++num;<br>            &#125;<br>        <span class="hljs-keyword">if</span>(~flag &amp;&amp; num == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>                <span class="hljs-keyword">if</span>(ans[i] == flag)<br>                    ++res;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Tarjan和Kosaraju的时间复杂度基本相等，都为O(V + E),,,但是看很多人的建议是尽量用Tarjan做题，不易出现爆栈的情况，实际运行的时间也有时小一些，Kosaraju较容易理解；</p>
<p>求强连通分量是一些其他算法的基础，，例如2-sat；<br>(end)</p>
]]></content>
      <categories>
        <category>ACM-图论-强连通分量</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>批量将doc文件转化成docx</title>
    <url>/2019/05/29/%E6%89%B9%E9%87%8F%E5%B0%86doc%E6%96%87%E4%BB%B6%E8%BD%AC%E5%8C%96%E6%88%90docx/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>最近要弄暑期实训了，知道老师给了一份国标的软件文档标准，，然后里面很多 <code>.doc</code> 的文件，，因为我已经完全习惯了用md来写各种文档，，而且电脑也配置好了 <code>pandoc</code> 的环境，，所以就想着将 <code>doc</code> 文件转化成 <code>.md</code> 文件，，然后直接用md的语法来写文档，，然后用 <code>pandoc</code> 来转换写好的md文档成 <code>docx</code>，自动排版，，不用考虑一些对齐什么的格式问题，，但是，，<code>doc</code> 文档很多，，而且 <code>pandoc</code> 不支持直接将 <code>doc</code> 转换成 <code>md</code> 格式的文件，，要先转化成 <code>docx</code> 文件才能转换成 <code>md</code> 文件，，，但是一个文件还好说，，一坨文件的话手动转化就太麻烦了，，于是找了一些可以转化一整个文件夹下的 <code>doc</code> 文件的方法，，</p>
<span id="more"></span>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p><a href="https://www.zhihu.com/question/56463918">参考链接</a></p>
<p>网上有很多用插件就可以实现的方法，，但是我嫌安装软件麻烦，，而且内心想着肯定有一种用代码就可以解决的方法，，于是就找到了这个： <strong>利用word中的vb来实现批量转换文件格式</strong> ，，，</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul>
<li>新建一个word文件</li>
<li>按住 <code>Alt+F11</code> 这时会打开一个名为 <code>Microsoft Visual Basic for Application</code> 的窗口，，</li>
<li>点击 <code>插入-&gt;模块</code></li>
<li>在新窗口中填写如下形式的代码：</li>
</ul>
<figure class="highlight vb"><table><tr><td class="code"><pre><code class="hljs vb"><span class="hljs-keyword">Option</span> <span class="hljs-keyword">Explicit</span><br><span class="hljs-keyword">Sub</span> doc2docx()<br><span class="hljs-keyword">Dim</span> sEveryFile <span class="hljs-keyword">As</span> <span class="hljs-type">String</span><br><span class="hljs-keyword">Dim</span> sSourcePath <span class="hljs-keyword">As</span> <span class="hljs-type">String</span><br><span class="hljs-keyword">Dim</span> path <span class="hljs-keyword">As</span> <span class="hljs-type">String</span><br><span class="hljs-keyword">Dim</span> sNewSavePath <span class="hljs-keyword">As</span> <span class="hljs-type">String</span><br><span class="hljs-keyword">Dim</span> CurDoc <span class="hljs-keyword">As</span> <span class="hljs-type">Object</span><br>sSourcePath = <span class="hljs-string">&quot;G:\FTP项目\GB8567\GB8567\软件设计文档（国标）\软件设计文档国家标准_GB8567--88\&quot;</span><br>path = <span class="hljs-string">&quot;G:\FTP项目\GB8567\GB8567\软件设计文档（国标）\软件设计文档国家标准_GB8567--88_docx\&quot;</span><br>sEveryFile = Dir(sSourcePath &amp; <span class="hljs-string">&quot;*.doc&quot;</span>)<br><span class="hljs-keyword">Do</span> <span class="hljs-keyword">While</span> sEveryFile &lt;&gt; <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">Set</span> CurDoc = Documents.Open(sSourcePath &amp; sEveryFile, , , , , , , , , , , msoFalse)<br>    CurDoc.Convert<br>    sNewSavePath = VBA.Strings.Replace(path &amp; sEveryFile, <span class="hljs-string">&quot;.doc&quot;</span>, <span class="hljs-string">&quot;.docx&quot;</span>)<br>    CurDoc.SaveAs2 sNewSavePath, wdFormatDocumentDefault<br>    CurDoc.Close SaveChanges:=<span class="hljs-literal">False</span><br>    sEveryFile = Dir<br><span class="hljs-keyword">Loop</span><br><span class="hljs-keyword">Set</span> CurDoc = <span class="hljs-literal">Nothing</span><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Sub</span><br></code></pre></td></tr></table></figure>
<p><strong>其中 <code>sSourcePath</code> 表示你要批量转换文档的文件夹， <code>path</code> 表示最后转换出的文件保存的路径（根据自己的需求更改）</strong></p>
<ul>
<li>然后点击窗口（否则运行没反应），运行（F5 或者点上面的绿色的小三角）</li>
<li>等待，目标文件夹就有了转换后的文档</li>
</ul>
<h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><ul>
<li>上面两个路径记得 <strong>末尾添加 \ </strong> ，否则会提示文件路径找不到等错误</li>
<li>对了，如果提示 <code>错误5121</code> 等等的报错信息，，试试之前提示的保存 <strong>宏编码doc</strong> 的过程 <strong>保存的word文件为旧版本的word文件形式（我选的是word2003  .doc）</strong></li>
<li></li>
</ul>
]]></content>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>拓扑排序</title>
    <url>/2019/02/12/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>貌似从来没有敲过拓扑排序的板子，，，记录一下</p>
<p>拓扑排序就是对DAG有向无环图中的边u-&gt;v,要求排序出一个点的序列，满足u在v的前面，，</p>
<p>算法的思路是不停的将入度为零的点u放到前面，并且对u能到达的所有点v的入度递减，，循环处理所有的点即可，，期间将所有入度为零的点放在一个队列中，，</p>
<span id="more"></span>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1285">板子题</a></p>
<p>这道题要求对于多种可能的排序输出字典序最小的那种，，用优先队列代替原来的队列就行了，，</p>
<ul>
<li>注意杭电上不能用万能头文件，而且优先队列的由小到大的写法 <code>priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; q;</code>,头文件要加 <code>#include &lt;queue&gt;</code> 和 <code>#include &lt;functional&gt;</code> （一直不知道，，，233，，，</li>
<li>还有好久不练忘记多组数据要记得清零那些数组，，</li>
</ul>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c = getchar(); <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; c = getchar();&#125;<br>    <span class="hljs-keyword">while</span>(c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = getchar();<br>    <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-comment">//red_book</span><br><span class="hljs-comment">//l[maxn]为最后排序的结果</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; g[maxn];<br><span class="hljs-keyword">int</span> du[maxn], n, m, l[maxn];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">toposort</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(du, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> du);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; g[i].size(); ++j)<br>            ++du[g[i][j]];<br>    <span class="hljs-keyword">int</span> tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;, greater&lt;<span class="hljs-keyword">int</span>&gt; &gt; q;<span class="hljs-comment">//按字典序最小的排序时</span><br>    <span class="hljs-comment">//queue&lt;int&gt; q;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span>(!du[i])<br>            q.push(i);<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> x = q.top(); q.pop();<br>        l[tot++] = x;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; g[x].size(); ++j)<br>        &#123;<br>            <span class="hljs-keyword">int</span> t = g[x][j];<br>            --du[t];<br>            <span class="hljs-keyword">if</span>(!du[t])q.push(t);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(tot == n)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> u, v;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m) != EOF)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)g[i].clear();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)du[i] = l[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>            g[u].push_back(v);<br>        &#125;<br>        toposort();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; ++i)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, l[i]);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, l[n - <span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>(end)</p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>拓扑排序判环+二分枚举建图</title>
    <url>/2019/03/16/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E5%88%A4%E7%8E%AF-%E4%BA%8C%E5%88%86%E6%9E%9A%E4%B8%BE%E5%BB%BA%E5%9B%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>一道寒假没有做的题，，，当时没有看拓扑排序，，所以就跳过了，，今天看到了，，emmm很简单啊，，，</p>
<span id="more"></span>
<h1 id="Applese-的QQ群"><a href="#Applese-的QQ群" class="headerlink" title="Applese 的QQ群"></a><a href="https://ac.nowcoder.com/acm/contest/330/F">Applese 的QQ群</a></h1><p>题意就是一个不断长大的图，，判断什么时候会出现环，，</p>
<p>判断有向图是否有环用拓扑排序/bfs，，，因为图示不断变大的，，，所以当出现一个环后，，后面的就全是no了，，，所以可以二分枚举一下出现环时的图，，，</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;vector&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, next;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> tot, head[maxn];<br><span class="hljs-keyword">int</span> u[maxn], v[maxn], du[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>    <span class="hljs-built_in">memset</span>(du, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> du);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].next = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">toposort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    init();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= x; ++i)<br>        addedge(u[i], v[i]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= x; ++i)<br>        ++du[v[i]];<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span>(!du[i])<br>            q.push(i);<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front(); q.pop();<br>        ++cnt;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>            <span class="hljs-keyword">if</span>(--du[edge[i].to] == <span class="hljs-number">0</span>)<br>                q.push(edge[i].to);<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt == n;    <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u[i], &amp;v[i]);<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>, r = m, ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(l &lt;= r)&#123;<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(toposort(mid, n))<br>        &#123;<br>            ans = mid;<br>            l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            r = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= ans; ++i)<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = ans + <span class="hljs-number">1</span>; i &lt;= m; ++i)<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>(end)</p>
]]></content>
      <categories>
        <category>ACM-图论-拓扑排序</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>拯救者Y720-gtx1050-window10-配置tensorflow-gpu环境</title>
    <url>/2019/03/15/%E6%8B%AF%E6%95%91%E8%80%85Y720-gtx1050-window10-%E9%85%8D%E7%BD%AEtensorflow-gpu%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>因为选修了数字图像这门课，，要做一个人脸识别的项目，和室友打算利用tensorflow来训练一个模型，，然后刚开始的环境配置就折腾了一天，，</p>
<p>现在记录一下大致的流程和遇到的坑，，（只是简略的写写配置的要点，，具体的信息别的博客讲的很清楚了，，，</p>
<p>最后的环境： win10x64 + gtx1050 + CUDA9.0 + cuDNN9.0 + Anaconda + <strong>Tensorflow1.9.0</strong></p>
<p>英伟达官网你会发现1050不能使用它的CUDA，，但实际上是可以使用的，，后面可以看出算力大概是6.1，，</p>
<span id="more"></span>
<h1 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h1><p>只列出必要的流程以及我遇到的坑，，</p>
<p>详细的安装过程参考别人的博客：</p>
<p><a href="https://blog.csdn.net/haishiluoshen/article/details/83413568">Win10+1050Ti配置Tensorflow教程</a></p>
<p><a href="https://blog.csdn.net/weixin_39290638/article/details/80045236">Win10下Tensorflow(GPU版)安装趟坑实录</a></p>
<p><a href="https://www.cnblogs.com/wanyu416/p/9536853.html">win10搭建tensorflow-gpu环境</a></p>
<p><a href="https://blog.csdn.net/gangeqian2/article/details/79358543">tensorflow 安装GPU版本，个人总结，步骤比较详细</a></p>
<p><a href="https://blog.csdn.net/cxy7228484/article/details/84185412">在Windows 10上安装TensorFlow并支持GPU的最佳方式（无需安装CUDA</a></p>
<p><a href="https://blog.csdn.net/angzhangzhang123/article/details/79637346">Win10+cuda8.0+cudnn5.1+tensorflow-gpu1.2.0+gtx1050ti，tensorflow环境搭建与配置</a></p>
<p><a href="https://www.cnblogs.com/hutao722/p/9583214.html">tensorflow 使用CPU而不使用GPU的问题解决</a></p>
<h2 id="Python配置"><a href="#Python配置" class="headerlink" title="Python配置"></a>Python配置</h2><p>首先是Python的配置，，Python很简单就可以弄好了，，去<a href="https://www.python.org/downloads/">官网</a>下载win的安装器，，点一点等一等就行了，，</p>
<h2 id="Anaconda安装"><a href="#Anaconda安装" class="headerlink" title="Anaconda安装"></a>Anaconda安装</h2><p>这个也是直接去官网下载安装就行了，，，安装的过程可能会很长，，所以要一直等，，会出现终端，，不要叉掉，，等就可以了，，，（貌似这玩意儿2个多G</p>
<h2 id="CUDA9-0安装"><a href="#CUDA9-0安装" class="headerlink" title="CUDA9.0安装"></a>CUDA9.0安装</h2><p><a href="https://developer.nvidia.com/cuda-90-download-archive">CUDA9.0下载地址</a></p>
<p>这是一个大坑！！！被这玩意坑了一次，，，</p>
<p>首先，英伟达的官网你直接进去去下CUDA只显示最新版10.1，，，然后我就想着有新的就直接上新版本的算了，，，后来才发现Tensorflow到现在还不支持10.0的版本，，，最多只能用9.0的，，</p>
<p>还有一个坑，，，选择的安装器是第一个(Base Installer)还有选择在线安装(exe(Network))，，，</p>
<p>最后，，因为我的C盘不怎么空余了，，，所以就把这玩意装到了别的盘，，这样的话 <strong>系统环境变量</strong> 得重新修改，，</p>
<p><a href="https://www.cnblogs.com/wanyu416/p/9536853.html">参考博客1</a></p>
<p><a href="https://blog.csdn.net/angzhangzhang123/article/details/79637346">参考博客2</a></p>
<p>都可以</p>
<h2 id="cuDNN-v7-5-0-for-CUDA-9-0"><a href="#cuDNN-v7-5-0-for-CUDA-9-0" class="headerlink" title="cuDNN v7.5.0 for CUDA 9.0"></a>cuDNN v7.5.0 for CUDA 9.0</h2><p>这玩意也是一个坑，，，</p>
<p>因为CUDA安装的是9.0版本的，，所以这玩意也只能装对应的版本，，，</p>
<p><a href="https://developer.nvidia.com/rdp/cudnn-download">下载地址</a></p>
<p>会要你注册账号，，最主要的是10.0版本的可以直接下载，，换成9.0的就得要梯子，，，惊了，，，</p>
<p>下载好后解压，，把里面的那三个文件复制到cuda对应的文件夹里，，参考上面那几个博客的操作</p>
<h2 id="vs2017"><a href="#vs2017" class="headerlink" title="vs2017"></a>vs2017</h2><p>看到网上有人说配置环境需要vs来编译什么的，，，因为我在之前就已经装好了vs2017，，所以就省略了这一步的安装，，没有测试不装会发生什么，，</p>
<h2 id="安装Tensorflow-gpu—1-9-0-并测试"><a href="#安装Tensorflow-gpu—1-9-0-并测试" class="headerlink" title="安装Tensorflow-gpu—1.9.0 并测试"></a>安装Tensorflow-gpu—1.9.0 并测试</h2><p>之前的所有东西都弄好后就可以安装 Tensorflow 了，，，</p>
<p>打开 Anaconda Prompt </p>
<p>因为地下室这里网还不错，，所以就没有去配置清华的镜像，，</p>
<p>安装Tensorflow: <code>conda install tensorflow-gpu==1.9.0</code> 因为现在(2019-3-15)Tensorflow已经是1.13.0版本了，，直接安装的话就会是最新版，，，不知道怎么回事，，最新版的话我这里在之后不会调用gpu来运行，，用这个版本之后就可以了（CUDA的锅？），，（也有可能是我在改变了其它的因素的原因，，，待验证</p>
<p><del>创建运行环境； <code>conda create -n tensorflow-gpu python=3.6</code> 等待安装就行了，，</del></p>
<p>激活环境： <code>conda activate tensorflow-gpu</code></p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>然后打开python，，</p>
<h3 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf         //<span class="hljs-number">0</span><br>hello = tf.constant(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>sess = tf.Session()             //<span class="hljs-number">1</span><br>print(sess.run(hello))          //<span class="hljs-number">2</span><br>sess.close()<br></code></pre></td></tr></table></figure>
<ul>
<li>在输完0代码之后，会停顿一会，，</li>
<li>在输完1代码之后，会显示一些信息，，如果说有有关gpu的信息的话证明调用gpu成功，，否则的话只有一条cpu的信息，，可能之前的安装有问题，，重新安装试试，，（我就是因为这个重装了好几遍</li>
<li>在输完2代码之后，显示 <code>b&#39;hello&#39;</code></li>
</ul>
<p>1的输出类似这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-number">2019</span>-<span class="hljs-number">03</span>-<span class="hljs-number">15</span> <span class="hljs-number">13</span>:<span class="hljs-number">03</span>:<span class="hljs-number">55.881573</span>: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\platform\cpu_feature_guard.cc:<span class="hljs-number">141</span>] Your CPU supports instructions that <span class="hljs-built_in">this</span> TensorFlow binary was not compiled to use: AVX AVX2<br><span class="hljs-number">2019</span>-<span class="hljs-number">03</span>-<span class="hljs-number">15</span> <span class="hljs-number">13</span>:<span class="hljs-number">03</span>:<span class="hljs-number">56.695820</span>: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:<span class="hljs-number">1392</span>] Found device <span class="hljs-number">0</span> <span class="hljs-keyword">with</span> properties:<br>name: GeForce GTX <span class="hljs-number">1050</span> major: <span class="hljs-number">6</span> minor: <span class="hljs-number">1</span> memoryClockRate(GHz): <span class="hljs-number">1.493</span><br>pciBusID: <span class="hljs-number">0000</span>:<span class="hljs-number">01</span>:<span class="hljs-number">00</span><span class="hljs-number">.0</span><br>totalMemory: <span class="hljs-number">2.</span>00GiB freeMemory: <span class="hljs-number">1.</span>61GiB<br><span class="hljs-number">2019</span>-<span class="hljs-number">03</span>-<span class="hljs-number">15</span> <span class="hljs-number">13</span>:<span class="hljs-number">03</span>:<span class="hljs-number">56.702429</span>: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:<span class="hljs-number">1471</span>] Adding visible gpu devices: <span class="hljs-number">0</span><br><span class="hljs-number">2019</span>-<span class="hljs-number">03</span>-<span class="hljs-number">15</span> <span class="hljs-number">13</span>:<span class="hljs-number">03</span>:<span class="hljs-number">57.517589</span>: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:<span class="hljs-number">952</span>] Device interconnect StreamExecutor <span class="hljs-keyword">with</span> strength <span class="hljs-number">1</span> edge matrix:<br><span class="hljs-number">2019</span>-<span class="hljs-number">03</span>-<span class="hljs-number">15</span> <span class="hljs-number">13</span>:<span class="hljs-number">03</span>:<span class="hljs-number">57.521414</span>: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:<span class="hljs-number">958</span>]      <span class="hljs-number">0</span><br><span class="hljs-number">2019</span>-<span class="hljs-number">03</span>-<span class="hljs-number">15</span> <span class="hljs-number">13</span>:<span class="hljs-number">03</span>:<span class="hljs-number">57.523379</span>: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:<span class="hljs-number">971</span>] <span class="hljs-number">0</span>:   N<br><span class="hljs-number">2019</span>-<span class="hljs-number">03</span>-<span class="hljs-number">15</span> <span class="hljs-number">13</span>:<span class="hljs-number">03</span>:<span class="hljs-number">57.525486</span>: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:<span class="hljs-number">1084</span>] Created TensorFlow device (<span class="hljs-regexp">/job:localhost/</span>replica:<span class="hljs-number">0</span>/task:<span class="hljs-number">0</span>/device:GPU:<span class="hljs-number">0</span> <span class="hljs-keyword">with</span> <span class="hljs-number">1359</span> MB memory) -&gt; physical GPU (device: <span class="hljs-number">0</span>, <span class="hljs-attr">name</span>: GeForce GTX <span class="hljs-number">1050</span>, pci bus id: <span class="hljs-number">0000</span>:<span class="hljs-number">01</span>:<span class="hljs-number">00</span><span class="hljs-number">.0</span>, compute capability: <span class="hljs-number">6.1</span>)<br></code></pre></td></tr></table></figure>
<p><img src="https://img2018.cnblogs.com/blog/1028485/201903/1028485-20190315134928264-735455793.png" alt=""></p>
<h3 id="也可以这样验证："><a href="#也可以这样验证：" class="headerlink" title="也可以这样验证："></a><a href="https://www.cnblogs.com/hutao722/p/9583214.html">也可以这样验证：</a></h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tensorflow.python.client <span class="hljs-keyword">import</span> device_lib<br>print(device_lib.list_local_devices())<br></code></pre></td></tr></table></figure>
<p>会输出一长条的信息，，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&gt;&gt;&gt; <span class="hljs-keyword">from</span> tensorflow.python.client <span class="hljs-keyword">import</span> device_lib<br>&gt;&gt;&gt; print(device_lib.list_local_devices())<br><span class="hljs-number">2019</span>-<span class="hljs-number">03</span>-<span class="hljs-number">15</span> <span class="hljs-number">13</span>:<span class="hljs-number">13</span>:<span class="hljs-number">03</span><span class="hljs-number">.527577</span>: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:<span class="hljs-number">1471</span>] Adding visible gpu devices: <span class="hljs-number">0</span><br><span class="hljs-number">2019</span>-<span class="hljs-number">03</span>-<span class="hljs-number">15</span> <span class="hljs-number">13</span>:<span class="hljs-number">13</span>:<span class="hljs-number">03</span><span class="hljs-number">.545230</span>: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:<span class="hljs-number">952</span>] Device interconnect StreamExecutor <span class="hljs-keyword">with</span> strength <span class="hljs-number">1</span> edge matrix:<br><span class="hljs-number">2019</span>-<span class="hljs-number">03</span>-<span class="hljs-number">15</span> <span class="hljs-number">13</span>:<span class="hljs-number">13</span>:<span class="hljs-number">03</span><span class="hljs-number">.563464</span>: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:<span class="hljs-number">958</span>]      <span class="hljs-number">0</span> <br><span class="hljs-number">2019</span>-<span class="hljs-number">03</span>-<span class="hljs-number">15</span> <span class="hljs-number">13</span>:<span class="hljs-number">13</span>:<span class="hljs-number">03</span><span class="hljs-number">.576112</span>: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:<span class="hljs-number">971</span>] <span class="hljs-number">0</span>:   N <br><span class="hljs-number">2019</span>-<span class="hljs-number">03</span>-<span class="hljs-number">15</span> <span class="hljs-number">13</span>:<span class="hljs-number">13</span>:<span class="hljs-number">03</span><span class="hljs-number">.587662</span>: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:<span class="hljs-number">1084</span>] Created TensorFlow device (/device:GPU:<span class="hljs-number">0</span> <span class="hljs-keyword">with</span> <span class="hljs-number">1359</span> MB memory) -&gt; physical GPU (device: <span class="hljs-number">0</span>, <span class="hljs-attr">name</span>: GeForce GTX <span class="hljs-number">1050</span>, pci bus id: <span class="hljs-number">0000</span>:<span class="hljs-number">01</span>:<span class="hljs-number">00</span><span class="hljs-number">.0</span>, compute capability: <span class="hljs-number">6.1</span>)<br>[name: <span class="hljs-string">&quot;/device:CPU:0&quot;</span><br>device_type: <span class="hljs-string">&quot;CPU&quot;</span><br>memory_limit: <span class="hljs-number">268435456</span><br>locality &#123;<br>&#125;<br>incarnation: <span class="hljs-number">5406329819980989395</span><br>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;/device:GPU:0&quot;</span><br>device_type: <span class="hljs-string">&quot;GPU&quot;</span><br>memory_limit: <span class="hljs-number">1425578393</span><br>locality &#123;<br>  bus_id: <span class="hljs-number">1</span><br>  links &#123;<br>  &#125;<br>&#125;<br>incarnation: <span class="hljs-number">3552327620198962820</span><br>physical_device_desc: <span class="hljs-string">&quot;device: 0, name: GeForce GTX 1050, pci bus id: 0000:01:00.0, compute capability: 6.1&quot;</span><br>]<br></code></pre></td></tr></table></figure>
<p><img src="https://img2018.cnblogs.com/blog/1028485/201903/1028485-20190315134949105-834049286.png" alt=""></p>
<p>如果失败的话（也就是只有cpu运算）就是这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">[name: <span class="hljs-string">&quot;/device:CPU:0&quot;</span><br>device_type: <span class="hljs-string">&quot;CPU&quot;</span><br>memory_limit: <span class="hljs-number">268435456</span><br>locality &#123;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="再或者这样："><a href="#再或者这样：" class="headerlink" title="再或者这样："></a><a href="https://blog.csdn.net/gangeqian2/article/details/79358543">再或者这样：</a></h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br>a = tf.constant([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>], name=<span class="hljs-string">&quot;a&quot;</span>)<br>b = tf.constant([<span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>], name=<span class="hljs-string">&quot;b&quot;</span>)<br>result = a + b<br>print(result)<br><br>sess = tf.InteractiveSession()<br>print(result.<span class="hljs-built_in">eval</span>())<br>sees.close()<br></code></pre></td></tr></table></figure>
<p>正常情况下也会显示gpu等信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&gt;&gt;&gt; <span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br>&gt;&gt;&gt; a = tf.constant([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>], name=<span class="hljs-string">&quot;a&quot;</span>)<br>&gt;&gt;&gt; b = tf.constant([<span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>], name=<span class="hljs-string">&quot;b&quot;</span>)<br>&gt;&gt;&gt; result = a + b<br>&gt;&gt;&gt; print(result)<br>Tensor(<span class="hljs-string">&quot;add_1:0&quot;</span>, shape=(<span class="hljs-number">2</span>,), dtype=float32)<br>&gt;&gt;&gt; sess = tf.InteractiveSession()<br><span class="hljs-number">2019</span>-<span class="hljs-number">03</span>-<span class="hljs-number">15</span> <span class="hljs-number">13</span>:<span class="hljs-number">19</span>:<span class="hljs-number">57.500304</span>: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:<span class="hljs-number">1471</span>] Adding visible gpu devices: <span class="hljs-number">0</span><br><span class="hljs-number">2019</span>-<span class="hljs-number">03</span>-<span class="hljs-number">15</span> <span class="hljs-number">13</span>:<span class="hljs-number">19</span>:<span class="hljs-number">57.514303</span>: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:<span class="hljs-number">952</span>] Device interconnect StreamExecutor <span class="hljs-keyword">with</span> strength <span class="hljs-number">1</span> edge matrix:<br><span class="hljs-number">2019</span>-<span class="hljs-number">03</span>-<span class="hljs-number">15</span> <span class="hljs-number">13</span>:<span class="hljs-number">19</span>:<span class="hljs-number">57.530082</span>: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:<span class="hljs-number">958</span>]      <span class="hljs-number">0</span> <br><span class="hljs-number">2019</span>-<span class="hljs-number">03</span>-<span class="hljs-number">15</span> <span class="hljs-number">13</span>:<span class="hljs-number">19</span>:<span class="hljs-number">57.539267</span>: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:<span class="hljs-number">971</span>] <span class="hljs-number">0</span>:   N <br><span class="hljs-number">2019</span>-<span class="hljs-number">03</span>-<span class="hljs-number">15</span> <span class="hljs-number">13</span>:<span class="hljs-number">19</span>:<span class="hljs-number">57.547441</span>: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:<span class="hljs-number">1084</span>] Created TensorFlow device (<span class="hljs-regexp">/job:localhost/</span>replica:<span class="hljs-number">0</span>/task:<span class="hljs-number">0</span>/device:GPU:<span class="hljs-number">0</span> <span class="hljs-keyword">with</span> <span class="hljs-number">1359</span> MB memory) -&gt; physical GPU (device: <span class="hljs-number">0</span>, <span class="hljs-attr">name</span>: GeForce GTX <span class="hljs-number">1050</span>, pci bus id: <span class="hljs-number">0000</span>:<span class="hljs-number">01</span>:<span class="hljs-number">00</span><span class="hljs-number">.0</span>, compute capability: <span class="hljs-number">6.1</span>)<br>&gt;&gt;&gt; print(result.eval())<br>[<span class="hljs-number">3.</span> <span class="hljs-number">5.</span>]<br></code></pre></td></tr></table></figure>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>每次使用tensorflow时，，因为我们是在Anaconda的虚拟的一个环境里运行tensorflow+python，，所以要先激活环境：<code>conda activate tensorflow-gpu</code>，，，（这么说先前直接安装的python不仅版本过高，，而且没用上）</p>
<p>对了必须要在cmd里使用，，powershell貌似不行，，，进入powershell输入 <code>cmd</code> 切换到cmd就行了，，，激活环境后前面会多一个环境名： <code>(tensorflow-gpu)</code>，，这样再进入python等等，，，</p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>这样环境的配置基本就完了，，大概占了12个多G的存储空间，，，emmmm心疼硬盘ing</p>
<p>从昨天晚上到今天上午，，折腾了几遍，，，最后还是弄好了，，，最怕的不是出各种各样的错误，，而是放弃吧，，，毕竟很多人都在弄这个，，会遇到一样的状况，，总会找到解决的方法的，，，</p>
<p>(猜测：安装anaconda时，，发现里面有cuda了，，可能不需要安装cuda就可以，，留坑)<br>(end)</p>
]]></content>
      <categories>
        <category>人脸识别</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索专题</title>
    <url>/2019/07/13/%E6%90%9C%E7%B4%A2%E4%B8%93%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>搜索还是熟练啊，不知道是好久不练的原因还是，没有好好的刷题，，再次做这种题还是磕磕碰碰就像第一次学一样的感觉。。</p>
<span id="more"></span>
<h1 id="哈密顿绕行世界问题"><a href="#哈密顿绕行世界问题" class="headerlink" title="哈密顿绕行世界问题"></a><a href="https://vjudge.net/problem/HDU-2181">哈密顿绕行世界问题</a></h1><p>哈密顿图的遍历，，知道这个概念但是从未写过这样的题，即使是水题，，，（熟悉一下之前的代码风格，，一个多月没动了，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;iostream&gt;</span><br><span class="hljs-comment">// #include &lt;cstdio&gt;</span><br><span class="hljs-comment">// #include &lt;cstdlib&gt;</span><br><span class="hljs-comment">// #include &lt;string.h&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;algorithm&gt;</span><br><span class="hljs-comment">// #include &lt;set&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-comment">// #include &lt;ctime&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, next;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> tot, head[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].next = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> ans[<span class="hljs-number">21</span>];<br><span class="hljs-keyword">int</span> anscnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> m;<br><span class="hljs-keyword">bool</span> vis[<span class="hljs-number">21</span>];<br><span class="hljs-keyword">int</span> cnt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// cout &lt;&lt; cnt &lt;&lt; endl;</span><br>    <span class="hljs-comment">// for(int i = 1; i &lt;= 20; ++i)cout &lt;&lt; ans[i] &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;</span><br>    <span class="hljs-keyword">if</span>(cnt == <span class="hljs-number">20</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(u != m)<span class="hljs-keyword">return</span>;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; anscnt++ &lt;&lt; <span class="hljs-string">&quot;:  &quot;</span> &lt;&lt; m &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-comment">// for(int i = 1; i &lt;= 20; ++i)</span><br>        <span class="hljs-comment">//     cout &lt;&lt; ans[i] &lt;&lt; &quot; &quot;;</span><br>        <span class="hljs-built_in">cout</span> &lt;&lt; ans[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">20</span>; ++i)<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ans[i];<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(cnt &amp;&amp; u == m)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> tmp[<span class="hljs-number">45</span>], tmpn;<br>    tmpn = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>        <span class="hljs-keyword">if</span>(!vis[edge[i].to])<br>            tmp[++tmpn] = edge[i].to;<br>    sort(tmp + <span class="hljs-number">1</span>, tmp + <span class="hljs-number">1</span> + tmpn);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= tmpn; i += <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-comment">// cout &lt;&lt; u &lt;&lt; &quot;-&quot; &lt;&lt; tmp[i] &lt;&lt; endl;</span><br>        vis[tmp[i]] = <span class="hljs-literal">true</span>;<br>        ans[++cnt] = tmp[i];<br>        dfs(tmp[i]);<br>        vis[tmp[i]] = <span class="hljs-literal">false</span>;<br>        --cnt;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    init();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; ++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">3</span>; ++j)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; m;<br>            addedge(i, m);<br>            addedge(m, i);<br>        &#125;    <br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; m &amp;&amp; m)<br>    &#123;<br>        cnt = <span class="hljs-number">0</span>;<br>        anscnt = <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">memset</span>(ans, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> ans);<br>        <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>        dfs(m);<br>    &#125;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;       <br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="Maze-Escape"><a href="#Maze-Escape" class="headerlink" title="Maze Escape"></a><a href="https://vjudge.net/problem/HihoCoder-1328">Maze Escape</a></h1><p>印象中没有做过用第三维保存一个限制条件的搜索题，，（也有可能做了忘记了）</p>
<p>这题直接用一个第三维的二进制来表示拿着不同钥匙时的情况，，这样就可以解决可以倒回去的问题，，（我的理解是对于拿着每个不同的钥匙时换一张标记这个图的二维数组）</p>
<p>还有一个总是记不住的问题：求最短路一般都是 <strong>bfs</strong> ，，深搜没见过几次不T的，，，包括下面这题，，，QAQ</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;iostream&gt;</span><br><span class="hljs-comment">// #include &lt;cstdio&gt;</span><br><span class="hljs-comment">// #include &lt;cstdlib&gt;</span><br><span class="hljs-comment">// #include &lt;string.h&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;algorithm&gt;</span><br><span class="hljs-comment">// #include &lt;set&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-comment">// #include &lt;ctime&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e2</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> n, m, k;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> x, y, key;<br>&#125;;<br><span class="hljs-keyword">char</span> mp[maxn][maxn];<br><span class="hljs-keyword">int</span> vis[maxn][maxn][<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">6</span>];<br>node s, t;<br>node key[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">int</span> ans;<br><span class="hljs-keyword">int</span> dx[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-keyword">int</span> dy[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> ux, <span class="hljs-keyword">int</span> uy, <span class="hljs-keyword">int</span> cnt, <span class="hljs-keyword">int</span> Key)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// cout &lt;&lt; ux &lt;&lt; &quot; &quot; &lt;&lt; uy &lt;&lt; &quot; &quot; &lt;&lt; cnt &lt;&lt; endl;</span><br>    <span class="hljs-keyword">if</span>(ux == t.x &amp;&amp; uy == t.y)<br>    &#123;<br>        <span class="hljs-comment">// cout &lt;&lt; cnt &lt;&lt; &quot;------------------------&quot; &lt;&lt; Key &lt;&lt; endl;</span><br>        ans = min(ans, cnt);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; ++i)<br>    &#123;<br>        <span class="hljs-keyword">int</span> nx = ux + dx[i];<br>        <span class="hljs-keyword">int</span> ny = uy + dy[i];<br>        <span class="hljs-keyword">if</span>(nx &lt; <span class="hljs-number">0</span> || nx &gt;= n || ny &lt; <span class="hljs-number">0</span> || ny &gt;= m)<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span>(!vis[nx][ny][Key])<br>        &#123;<br>            <span class="hljs-keyword">if</span>(mp[nx][ny] == <span class="hljs-string">&#x27;.&#x27;</span>)<br>            &#123;<br>                vis[nx][ny][Key] = <span class="hljs-literal">true</span>;<br>                dfs(nx, ny, cnt + <span class="hljs-number">1</span>, Key);<br>                vis[nx][ny][Key] = <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(mp[nx][ny] != <span class="hljs-string">&#x27;.&#x27;</span> &amp;&amp; mp[nx][ny] != <span class="hljs-string">&#x27;#&#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(mp[nx][ny] &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; mp[nx][ny] &lt;= <span class="hljs-string">&#x27;z&#x27;</span>)<br>                &#123;<br>                    <span class="hljs-comment">// cout &lt;&lt; nx &lt;&lt; &quot;---&quot; &lt;&lt; ny &lt;&lt; &quot; --&quot; &lt;&lt; cnt &lt;&lt; endl;</span><br>                    <span class="hljs-keyword">int</span> key = Key | (<span class="hljs-number">1</span> &lt;&lt; (mp[nx][ny] - <span class="hljs-string">&#x27;a&#x27;</span>));<br>                    <span class="hljs-keyword">if</span>(vis[nx][ny][key])<span class="hljs-keyword">continue</span>;<br>                    vis[nx][ny][key] = <span class="hljs-literal">true</span>;<br>                    dfs(nx, ny, cnt + <span class="hljs-number">1</span>, key);<br>                    vis[nx][ny][key] = <span class="hljs-literal">false</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-comment">// cout &lt;&lt; &quot;---&quot; &lt;&lt; Key &lt;&lt; endl;</span><br>                    <span class="hljs-keyword">if</span>(Key &amp; (<span class="hljs-number">1</span> &lt;&lt; (mp[nx][ny] - <span class="hljs-string">&#x27;A&#x27;</span>)))<br>                    &#123;<br>                        <span class="hljs-comment">// cout &lt;&lt; nx &lt;&lt; &quot;++++&quot; &lt;&lt; ny &lt;&lt; &quot;++&quot; &lt;&lt; cnt &lt;&lt; endl;</span><br>                        <span class="hljs-keyword">int</span> key = Key ^ (<span class="hljs-number">1</span> &lt;&lt; (mp[nx][ny] - <span class="hljs-string">&#x27;A&#x27;</span>));<br>                        <span class="hljs-keyword">if</span>(vis[nx][ny][key])<span class="hljs-keyword">continue</span>;<br>                        vis[nx][ny][key] = <span class="hljs-literal">true</span>;<br>                        dfs(nx, ny, cnt + <span class="hljs-number">1</span>, key);<br>                        vis[nx][ny][key] = <span class="hljs-literal">false</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> dis[maxn][maxn][<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">6</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">queue</span>&lt;node&gt; q;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    q.push(s);  <br>    vis[s.x][s.y][s.key] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dis);<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        node u = q.front(); q.pop();<br>        <span class="hljs-keyword">if</span>(u.x == t.x &amp;&amp; u.y == t.y)<span class="hljs-keyword">return</span> dis[u.x][u.y][u.key];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; ++i)<br>        &#123;<br>            node v;<br>            v.x = u.x + dx[i];<br>            v.y = u.y + dy[i];<br>            v.key = u.key;<br>            <span class="hljs-keyword">if</span>(v.x &lt; <span class="hljs-number">0</span> || v.x &gt;= n || v.y &lt; <span class="hljs-number">0</span> || v.y &gt;= m)<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(!vis[v.x][v.y][v.key])<br>            &#123;<br>                <span class="hljs-keyword">if</span>(mp[v.x][v.y] == <span class="hljs-string">&#x27;.&#x27;</span>)<br>                &#123;<br>                    <span class="hljs-comment">// cout &lt;&lt; v.x &lt;&lt; &quot; &quot; &lt;&lt; v.y &lt;&lt; endl;</span><br>                    vis[v.x][v.y][v.key] = <span class="hljs-literal">true</span>;<br>                    q.push(v);<br>                    dis[v.x][v.y][v.key] = dis[u.x][u.y][u.key] + <span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(mp[v.x][v.y] != <span class="hljs-string">&#x27;#&#x27;</span>)<br>                &#123;<br>                    <span class="hljs-comment">// cout &lt;&lt; v.x &lt;&lt; &quot; &quot; &lt;&lt; v.y &lt;&lt; endl;</span><br>                    <span class="hljs-keyword">if</span>(mp[v.x][v.y] &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; mp[v.x][v.y] &lt;= <span class="hljs-string">&#x27;z&#x27;</span>)<br>                    &#123;<br>                        v.key |= (<span class="hljs-number">1</span> &lt;&lt; (mp[v.x][v.y] - <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">1</span>));<br>                        vis[v.x][v.y][v.key] = <span class="hljs-literal">true</span>;<br>                        q.push(v);<br>                        dis[v.x][v.y][v.key] = dis[u.x][u.y][u.key] + <span class="hljs-number">1</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        <span class="hljs-keyword">if</span>(v.key &amp; (<span class="hljs-number">1</span> &lt;&lt; (mp[v.x][v.y] - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">1</span>)))<br>                        &#123;<br>                            <span class="hljs-comment">// cout &lt;&lt; v.key &lt;&lt; endl;</span><br>                            <span class="hljs-comment">// cout &lt;&lt; v.x &lt;&lt; &quot;---&quot; &lt;&lt; v.y &lt;&lt; endl;</span><br>                            v.key ^= (<span class="hljs-number">1</span> &lt;&lt; (mp[v.x][v.y] - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">1</span>));<br>                            vis[v.x][v.y][v.key] = <span class="hljs-literal">true</span>;<br>                            q.push(v);<br>                            dis[v.x][v.y][v.key] = dis[u.x][u.y][u.key] + <span class="hljs-number">1</span>;<br>                        &#125;<br>                        <br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; s.x &gt;&gt; s.y &gt;&gt; t.x &gt;&gt; t.y;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; m; ++j)<br>            <span class="hljs-built_in">cin</span> &gt;&gt; mp[i][j];<br>    <span class="hljs-keyword">int</span> x, y;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; x &gt;&gt; y;<br>        mp[x][y] = <span class="hljs-string">&#x27;a&#x27;</span> + i - <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">// for(int i = 0; i &lt; n; ++i)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     for(int j = 0; j &lt; m; ++j)</span><br>    <span class="hljs-comment">//         cout &lt;&lt; mp[i][j];</span><br>    <span class="hljs-comment">//     cout &lt;&lt; endl;</span><br>    <span class="hljs-comment">// &#125;</span><br>    ans = inf;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-comment">// dfs(s.x, s.y, 0, 0);</span><br>    ans = bfs();<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;       <br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="Saving-Tang-Monk-II"><a href="#Saving-Tang-Monk-II" class="headerlink" title="Saving Tang Monk II"></a><a href="https://vjudge.net/problem/HihoCoder-1828">Saving Tang Monk II</a></h1><p>这题和前面两题差不多把，，也是要用第三维来标记不同的氧气数时的图怎么走，，再加一个优先队列，，不然队列里的前面的可能解不一定是最优的，，这样的话就只能遍历完整个队列，，但是这样又浪费时间会T，，所以换一个以距离为权的优先队列就可以保证第一个到达终点的可行解就是最优的，，</p>
<p>bfs+三维vis+优先队列</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;iostream&gt;</span><br><span class="hljs-comment">// #include &lt;cstdio&gt;</span><br><span class="hljs-comment">// #include &lt;cstdlib&gt;</span><br><span class="hljs-comment">// #include &lt;string.h&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;algorithm&gt;</span><br><span class="hljs-comment">// #include &lt;set&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-comment">// #include &lt;ctime&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e2</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> x, y, oxy;<br>    <span class="hljs-keyword">bool</span> b;<br>    <span class="hljs-keyword">int</span> dis;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;r)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> dis &gt;= r.dis;<br>    &#125;<br>&#125;s, t;<br><span class="hljs-keyword">char</span> mp[maxn][maxn];<br><span class="hljs-keyword">bool</span> vis[maxn][maxn][<span class="hljs-number">6</span>];<br><span class="hljs-keyword">int</span> dx[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-keyword">int</span> dy[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    s.oxy = t.oxy = <span class="hljs-number">0</span>;<br>    s.b = t.b = <span class="hljs-literal">false</span>;<br>    s.dis = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// queue&lt;node&gt; q;</span><br>    <span class="hljs-built_in">priority_queue</span>&lt;node&gt; q;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    q.push(s);<br>    <span class="hljs-keyword">int</span> ans = inf;<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        node u = q.top(); q.pop();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; ++i)<br>        &#123;<br>            node v;<br>            v.x = u.x + dx[i];<br>            v.y = u.y + dy[i];<br>            v.oxy = u.oxy;<br>            v.dis = u.dis + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(v.x &lt; <span class="hljs-number">1</span> || v.x &gt; n || v.y &lt; <span class="hljs-number">1</span> || v.y &gt; m)<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(mp[v.x][v.y] == <span class="hljs-string">&#x27;T&#x27;</span>)<span class="hljs-keyword">return</span> v.dis;<br>            <span class="hljs-keyword">if</span>(mp[v.x][v.y] == <span class="hljs-string">&#x27;#&#x27;</span> &amp;&amp; v.oxy == <span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(mp[v.x][v.y] == <span class="hljs-string">&#x27;P&#x27;</span>)--v.dis;<br>            <span class="hljs-keyword">if</span>(mp[v.x][v.y] == <span class="hljs-string">&#x27;B&#x27;</span>)<br>            &#123;<br>                v.b = <span class="hljs-literal">true</span>;<br>                ++v.oxy;v.oxy %= <span class="hljs-number">6</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(vis[v.x][v.y][v.oxy])<span class="hljs-keyword">continue</span>;<br>            vis[v.x][v.y][v.oxy] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(mp[v.x][v.y] == <span class="hljs-string">&#x27;#&#x27;</span>)<br>            &#123;<br>                ++v.dis;<br>                <span class="hljs-keyword">if</span>(v.oxy)<br>                    --v.oxy;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(v.b)<br>                    v.dis += <span class="hljs-number">2</span>;<br>            &#125;<br>            q.push(v);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ans == inf)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &amp;&amp; n &amp;&amp; m)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>            &#123;<br>                <span class="hljs-built_in">cin</span> &gt;&gt; mp[i][j];<br>                <span class="hljs-keyword">if</span>(mp[i][j] == <span class="hljs-string">&#x27;S&#x27;</span>)<br>                &#123;<br>                    s.x = i;<br>                    s.y = j;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(mp[i][j] == <span class="hljs-string">&#x27;T&#x27;</span>)<br>                &#123;<br>                    t.x = i;<br>                    t.y = j;<br>                &#125;<br>            &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; bfs() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;       <br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="A-Walk-Through-the-Forest"><a href="#A-Walk-Through-the-Forest" class="headerlink" title="A Walk Through the Forest"></a><a href="https://vjudge.net/problem/HDU-1142#author=0">A Walk Through the Forest</a></h1><p>dijkstra + 记忆化搜索</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-comment">// #include &lt;set&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-comment">// #include &lt;ctime&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> dis[maxn], dp[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt, w;<br>&#125;edge[maxm &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>    <span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> dp);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].w = w;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v, w;<br>    node (<span class="hljs-keyword">int</span> _v, <span class="hljs-keyword">int</span> _w)&#123;v = _v; w = _w;&#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;r)<span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> w &gt; r.w;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-built_in">memset</span>(dis, inf, <span class="hljs-keyword">sizeof</span> dis);<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">priority_queue</span>&lt;node&gt; q;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    q.push(node(s, <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        node u = q.top(); q.pop();<br>        <span class="hljs-keyword">if</span>(vis[u.v])<span class="hljs-keyword">continue</span>;<br>        vis[u.v] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u.v]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(dis[v] &gt;= dis[u.v] + edge[i].w)<br>            &#123;<br>                dis[v] = dis[u.v] + edge[i].w;<br>                q.push(node(v, dis[v]));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(~dp[u])<span class="hljs-keyword">return</span> dp[u];<br>    <span class="hljs-keyword">if</span>(u == <span class="hljs-number">2</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    dp[u] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        <span class="hljs-keyword">if</span>(dis[u] &gt; dis[edge[i].to])dp[u] += dfs(edge[i].to);<br>    <span class="hljs-keyword">return</span> dp[u];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot; , &quot;r&quot;   , stdin); </span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br><br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>        <span class="hljs-keyword">int</span> u, v, w;<br>        init();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);<br>            addedge(u, v, w);<br>            addedge(v, u, w);<br>        &#125;<br>        dijkstra(<span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dfs(<span class="hljs-number">1</span>));<br>    &#125;<br>   <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;       <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM-搜索</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>数据的共享与保护</title>
    <url>/2018/03/29/%E6%95%B0%E6%8D%AE%E7%9A%84%E5%85%B1%E4%BA%AB%E4%B8%8E%E4%BF%9D%E6%8A%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="标识符的作用域与可见性"><a href="#标识符的作用域与可见性" class="headerlink" title="标识符的作用域与可见性"></a>标识符的作用域与可见性</h1><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ul>
<li>作用域是一个标识符在程序正文中有效的区域；</li>
<li>c++中标识符的作用域有 <strong>函数原型作用域</strong> 、 <strong>局部作用域（块作用域）</strong> 、 <strong>类作用域</strong> 、 <strong>命名空间作用域</strong>;<h3 id="函数原型作用域："><a href="#函数原型作用域：" class="headerlink" title="函数原型作用域："></a>函数原型作用域：</h3></li>
<li>函数原型作用域是c++程序中最小的作用域；</li>
<li>在函数原型声明时形参的作用范围就是函数原型作用域；</li>
<li>在函数原型的参数列表中起的作用的只是形参类型，标识符不起作用，因此可以省去，但为了程序的可读性，通常还是要在函数原型声明时给出形参标识符；<h3 id="局部作用域："><a href="#局部作用域：" class="headerlink" title="局部作用域："></a>局部作用域：</h3></li>
<li>函数形参列表中形参的作用域，从形参列表中的声明处开始，到整个函数体结束之处为止；</li>
<li>函数体内声明的变量，其作用域从声明处开始，一直到声明所在的块结束的大括号为止；</li>
<li>具有局部作用域的变量也称作局部变量；<h3 id="类作用域："><a href="#类作用域：" class="headerlink" title="类作用域："></a>类作用域：</h3></li>
<li>类可以看作一组有名成员的集合，类X的成员m具有类作用域，对m的访问方式有：</li>
<li>1.如果在X的成员函数中没有声明同名的局部作用域标识符，那么在该函数内可以直接访问成员m；</li>
<li>2.通过表达式<code>x.m</code>或者<code>X::m</code>；（访问对象成员的最基本方法）；</li>
<li>3.通过<code>ptr-&gt;m</code>这样的表达式，其中ptr为指向X类的一个对象的指针；</li>
</ul>
<span id="more"></span>
<h3 id="命名空间作用域："><a href="#命名空间作用域：" class="headerlink" title="命名空间作用域："></a>命名空间作用域：</h3><ul>
<li>命名空间的语法形式：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">namespace</span> 命名空间名<br>&#123;<br>命名空间内的各种声明 (函数声明、类声明、······)<br>&#125;<br></code></pre></td></tr></table></figure>
<ul>
<li>一个命名空间确定了一个命名空间作用域，凡是在该命名空间之内声明的、不属于前面所述的各个作用域的标识符，都属于该命名空间作用域；</li>
<li>在命名空间内部可以直接引用当前命名空间中生命的标识符，如果需要引用其他命名空间的标识符，需要使用下列语法：<code>命名空间名::标识符名</code></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">eg:<br><span class="hljs-keyword">namespace</span> SomeNs<br>&#123;<br>	<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SomeClass</span>&#123;</span>...&#125;<br>&#125;<br><span class="hljs-comment">//如果需要引用类名SomeClass或函数名someFunc，需要使用下面的方式：</span><br>SomeNs::SomeClass obj1;			<span class="hljs-comment">//声明一个SomeNs::SomeClass型的对象obj1;</span><br></code></pre></td></tr></table></figure>
<ul>
<li><strong>using 语句</strong>：总使用这样的命名空间限定会显得过于冗长<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> 命名空间名::标识符名；<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> 命名空间名；<br></code></pre></td></tr></table></figure>
前一种形式将指定的标识符暴露在当前的作用域中，使得在当前作用域中可以直接引用该标识符；<br>后一种形式将指定命名空间内的所有标识符暴露在当前的作用域中，使得在当前作用域中可以直接引用该命名空间内的任何标识符；</li>
<li>命名空间允许嵌套；</li>
<li><strong>全局命名空间</strong>：是默认的命名空间，子啊显式声明的命名空间之外声明的标识符都在一个全局命名空间中；</li>
<li><strong>匿名命名空间</strong>：是一个需要显式声明的没有文字的命名空间，声明方式：</li>
<li><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">namespace</span> <br>&#123;<br>匿名命名空间内的各种声明 (函数声明、类声明、······)<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li>在包含多个源文件的工程中，匿名命名空间常常被用来屏蔽不希望暴露给其他源文件的标识符，这是因为每个源文件的匿名命名空间是彼此不同的，在每一个源文件中没有办法访问其他源文件的匿名命名空间；</li>
<li>具有命名空间作用域的变量也称为全局变量；<h3 id="可见性："><a href="#可见性：" class="headerlink" title="可见性："></a>可见性：</h3></li>
<li>程序运行到某一点，能够引用到的标识符，就是该处可见的标识符；</li>
<li><strong>命名空间作用域</strong>最大，接下来依次是<strong>类作用域</strong>和<strong>局部作用域</strong>；</li>
<li>可见性表示从内层作用域向外层作用域“看”时能看到什么；</li>
<li><strong>作用域可见性的一般规则</strong>：</li>
<li>标识符要声明在前，引用在后；</li>
<li>在同一作用域中，不能声明同名的标识符；</li>
<li>在没有互相包含关系的不同的作用域中声明的同名标识符，互不影响；</li>
<li>如果在两个或多个具有包含关系的作用域中声明了同名标识符，则外层标识符在内层不可见；</li>
<li>作用域和可见性的原则不只适用于变量名，也适用于其他各种标识符，包括常变量名、用户定义的类型名、函数名名、枚举类型的取值等；</li>
</ul>
<h2 id="对象的生存周期"><a href="#对象的生存周期" class="headerlink" title="对象的生存周期"></a>对象的生存周期</h2><h3 id="静态生存周期："><a href="#静态生存周期：" class="headerlink" title="静态生存周期："></a>静态生存周期：</h3><ul>
<li>如果对象的生存期与程序的运行期相同，则称它具有静态生存期；</li>
<li>在命名空间作用域中声明的对象都是具有静态生存期的；</li>
<li>如果在函数内部的局部作用域中声明具有静态生存期的对象，则要使用关键字<code>static</code>;</li>
<li>局部作用域中静态变量的特点：它不会随着每次函数调用而产成一个副本，也不会随着函数返回而失效；</li>
<li>定义时未指定初值的基本静态生存期变量，会被赋予0值初始化，而对于动态生存期变量，不指定初值意味着初值不确定；<h3 id="动态生存期"><a href="#动态生存期" class="headerlink" title="动态生存期"></a>动态生存期</h3></li>
<li>在局部作用域中声明的具有动态生存期的对象，习惯上也称为<strong>局部生存期对象</strong>；</li>
<li>局部生存期对象诞生于声明点，结束于声明所在的块执行完毕之时；</li>
<li>类的成员对象也有各自的生存期，不用<code>static</code>修饰的成员对象，其生存期都与它们所属对象的生存期保持一致；</li>
</ul>
<h2 id="类的静态成员"><a href="#类的静态成员" class="headerlink" title="类的静态成员"></a>类的静态成员</h2><h3 id="静态数据成员："><a href="#静态数据成员：" class="headerlink" title="静态数据成员："></a>静态数据成员：</h3><ul>
<li>如果某个属性为整个类所共有，不属于任何一个具体对象，则采用<code>static</code>关键字来声明为静态成员，静态成员在每个类只有一个副本，由该类的所有对象共同维护和使用，从而实现了同一个类的不同对象之间的数据共享；</li>
<li><strong>类属性</strong>是描述类的所有对象共同特征的一个数据项，对于任何对象实例，它的属性值是相同的；类 == 工厂，对象 == 产品，静态成员 == 存放于工厂中、属于工厂的但不属于每个产品的东西；</li>
<li>静态数据成员具有静态生存期，由于静态数据成员不属于任何一个对象，因此可以通过类名对它访问，一般用法是：<code>类名::标识符</code>；再类的定义中仅仅对静态数据成员进行<strong>引用性声明</strong>，必须在<strong>命名空间作用域</strong>的某个地方使用<strong>类名限定定义性声明</strong>，这是也可以进行<strong>初始化</strong>；</li>
<li>之所以类的静态成员需要在类的定义之外在加定义是因为需要以这种方式专门为它们分配空间，非静态数据成员无需以此方式定义，因为它们的空间是与所属对象的空间同时分配的；</li>
<li>在对类的静态私有数据成员初始化的同时，还可以引用类的其他私有成员，例如，如果一个类T存在类型为T的静态私有对象，那么可以引用该类的私有构造函数将其初始化；</li>
</ul>
<h3 id="静态函数成员："><a href="#静态函数成员：" class="headerlink" title="静态函数成员："></a>静态函数成员：</h3><ul>
<li>静态成员函数：使用<code>static</code>关键字声明的函数成员；同静态数据成员一样，静态成员函数也属于整个类，由同一个类的所有对象共同拥有，为这些对象所共享；</li>
<li>静态成员函数可以通过类名或对象来调用，而非静态成员函数只能通过对象名来调用；</li>
<li>虽然静态成员函数可以通过类名和对象名两种方式调用，但一般习惯与通过类名调用。因为即使通过对象名调用，起作用的也只是对象的类型信息，与所使用的具体对象毫无关系；</li>
<li>静态成员函数可以直接访问该类的静态数据和函数成员。而访问非静态成员，必须通过对象名；<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">A::f</span> <span class="hljs-params">(A a)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">cout</span> &lt;&lt; x ;		<span class="hljs-comment">//对x的引用是错误的</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; a.x :	<span class="hljs-comment">//正确</span><br>&#125;<br></code></pre></td></tr></table></figure></li>
<li>可以看到，通过静态函数成员访问非静态成员是相当麻烦的，一般情况下，它主要来访问一个类中的静态数据成员，维护对象之间共享数据；</li>
<li>之所以在静态成员函数中访问类的非静态成员需要指明对象，是因为对静态成员函数的调用是没有目的对象的，因此不能像非静态成员函数那样，隐含的通过目的对象访问类的静态成员；</li>
</ul>
<h2 id="类的友元"><a href="#类的友元" class="headerlink" title="类的友元"></a><strong>类的友元</strong></h2><ul>
<li>友元关系提供了不同类或对象的成员函数之间、类的成员函数与一般函数之间进行数据共享的机制；</li>
<li>通俗的说，友元关系就是一个类<strong>主动</strong>声明哪些其他类或函数是它的朋友进而<strong>给它们提供对本类的访问特许</strong>，也就是说，通过友元关系每一个普通函数或者类的成员函数就可以访问封装与另一个类中的数据；</li>
<li>在一个类中，可以利用关键字<code>friend</code>将其他函数或类声明为友元；</li>
<li>如果友元是一般函数或类的成员函数，称为<strong>友元函数</strong>；</li>
<li>如果友元是一个类，则称为<strong>友元类</strong>，友元类的所有成员函数都自动成为友元函数；</li>
</ul>
<h3 id="友元函数："><a href="#友元函数：" class="headerlink" title="友元函数："></a>友元函数：</h3><ul>
<li>友元函数是在类中用关键字<code>friend</code>修饰的非成员函数；</li>
<li>友元函数可以是一个普通的函数，也可以是其他类的成员函数；</li>
<li>虽然友元函数不是本类的成员函数，但是<strong>在它的函数体中可以通过对象名访问类的私有和保护成员</strong>；</li>
<li>在类的内部声明友元函数的原型，其定义在类外；</li>
<li>友元成员函数的使用和一般友元函数的使用基本相同，只是要通过相应的类或对象来访问；</li>
</ul>
<h3 id="友元类："><a href="#友元类：" class="headerlink" title="友元类："></a>友元类：</h3><ul>
<li>若A类为B类的友元类，则A类的所有成员函数都是B类的友元函数，都可以访问B类的私有和保护成员；</li>
<li>声明友元类的语法形式：<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span><br><span class="hljs-class">&#123;</span><br>	...					<span class="hljs-comment">//B类的成员声明</span><br>	<span class="hljs-keyword">friend</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>;</span>		<span class="hljs-comment">//声明A为B类的友元类</span><br>	...<br>&#125;;<br></code></pre></td></tr></table></figure></li>
<li>声明友元类，是建立类与类之间的联系，实现类之间数据共享的一种途径；</li>
<li><strong>Attention：</strong><br>1.<strong>友元关系是不能传递的</strong>。B类是A类友元，C类是B类的友元，C类与A类之间，如果没有声明，就没有任何友元关系，不能进行数据共享；<br>2.<strong>友元关系是单向的</strong>。如果声明B类是A类的友元，B类成员函数就可以访问A类的私有和保护数据，但A类的成员函数却不能访问B类的私有、保护成员；<br>3.<strong>友元关系是不被继承的</strong>。如果类B是类A的友元明类B的派生类并不会自动成为类A的友元；打个比方说，就好像别人相信你，但不见得相信你的孩子；</li>
</ul>
<h2 id="共享数据的保护"><a href="#共享数据的保护" class="headerlink" title="共享数据的保护"></a>共享数据的保护</h2><h3 id="常对象："><a href="#常对象：" class="headerlink" title="常对象："></a>常对象：</h3><ul>
<li>常对象是这样的对象：它的数据成员值在对象的整个生存期间内都不能被改变。也就是说，<strong>常对象必须进行初始化，而且不能被更新</strong>；</li>
<li>声明常对象的语法形式：<code>const 类型说明符 对象名；</code>;(<code>const</code>关键字放在类型名之后也是允许的）<h3 id="用const修饰的类成员："><a href="#用const修饰的类成员：" class="headerlink" title="用const修饰的类成员："></a>用const修饰的类成员：</h3></li>
</ul>
<h4 id="1-常成员函数："><a href="#1-常成员函数：" class="headerlink" title="1.常成员函数："></a>1.常成员函数：</h4><ul>
<li>使用<code>const</code>关键字修饰的函数为常成员函数，常成员函数声明的格式：<code>类型说明符 函数名 （参数表）const</code>;</li>
<li>1.const是函数类型的一个组成部分，因此在函数的定义部分也要带const关键字；</li>
<li>2.如果将一个对戏那个说明为常对象，则通过该常对象之能调用它的常成员函数，而不能调用其他成员函数（这就是c++从语法机制上对常对象的保护，也是常对象唯一的对外接口方式）；</li>
<li>3.无论是否通过常对象调用常成员函数，在常成员函数调用期间，目的对象都能被视同为常对象，因此常成员函数不能更新目的对象的数据成员，也不能针对目的对象调用该类中没有用const修饰的成员函数（这就保证了常成员函数中不会更改目的对象的数据成员的值）；</li>
<li>4.const关键字可以用于对重载函数的区分：<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br></code></pre></td></tr></table></figure></li>
<li><strong>如果仅以const关键字为区分对成员函数重载，那么通过非const的对象调用该函数，两个重载的函数都可以与之匹配，这时编译器将选择最近的重载函数—不带const关键字的函数；</strong><h4 id="2-常数据成员："><a href="#2-常数据成员：" class="headerlink" title="2.常数据成员："></a>2.常数据成员：</h4></li>
<li>如果在一个类中说明了常数据成员，那么任何函数中都不能对该成员赋值。构造函数对该数据成员进行初始化 ，就只能通过初始化列表；<h4 id="3-常引用："><a href="#3-常引用：" class="headerlink" title="3.常引用："></a>3.常引用：</h4></li>
<li>如果在声明引用时用const修饰，被声明的引用就是常引用；</li>
<li>常引用所引用的对象不能被更新；</li>
<li>非const的引用只能绑定到一个普通的对象，而不能绑定到常对象，但常引用可以绑定到常对象；</li>
<li>一个常引用，无论是绑定到一个普通的对象，还是常对象，通过该引用访问该对象时，都只能把该对象当作常对象，对于基本数据类型的引用，则不能为数据赋值对于类类型的引用，则不能修改它的数据成员们也不能调用它的非const的成员函数；</li>
</ul>
<h2 id="多文件结构和编译预处理命令"><a href="#多文件结构和编译预处理命令" class="headerlink" title="多文件结构和编译预处理命令"></a>多文件结构和编译预处理命令</h2><h3 id="C-程序的一般组织结构"><a href="#C-程序的一般组织结构" class="headerlink" title="C++程序的一般组织结构"></a>C++程序的一般组织结构</h3><ul>
<li>通常一个项目包含三个文件：<strong>类定义文件（<code>*.h文件</code>）</strong>、<strong>类实现文件（<code>*.cpp文件</code>）</strong>、<strong>类的使用文件（<code>*.cpp主函数文件</code>）</strong>；<h3 id="外部变量与外部函数"><a href="#外部变量与外部函数" class="headerlink" title="外部变量与外部函数"></a>外部变量与外部函数</h3></li>
</ul>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>c++</tag>
        <tag>类</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-链表</title>
    <url>/2018/09/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>作为数据结构中的入门基础，，表十分的重要，，基本上可以说数据结构中其他的大部分的实现都是基于顺序表的，，而 <strong>链表</strong> 则是顺序表中很重要的一个东西，，，</p>
<p>之前在学习C/C++时就已经了解到了链表，，，那时粗略的看了看，，以为自己可以熟练的实现，，，但实际是，，我只会基于C++的链表的实现，，在使用C来实现时总是在报错，，，最后发现是自己的逻辑不清，，各个函数的实现中指针乱指，，，才导致总是出现各种报错，，，</p>
<span id="more"></span>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="链表节点"><a href="#链表节点" class="headerlink" title="链表节点"></a>链表节点</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> datatype;           <span class="hljs-comment">//自定义节点所储存的数据类型，便于之后的更改</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class">&#123;</span><br>    datatype key;               <span class="hljs-comment">//节点所储存的数据</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">next</span>;</span>          <span class="hljs-comment">//当前节点指向下一节点的指针</span><br>&#125;Node , *List;                  <span class="hljs-comment">//节点，节点指针（链表指针）</span><br><br></code></pre></td></tr></table></figure>
<p>节点结构体内可以根据需要增加更多的数据，，，同时也可以设置两个节点指针，，创建双向链表。。。</p>
<h2 id="建立链表"><a href="#建立链表" class="headerlink" title="建立链表"></a>建立链表</h2><h3 id="尾插法建立链表"><a href="#尾插法建立链表" class="headerlink" title="尾插法建立链表"></a>尾插法建立链表</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">List <span class="hljs-title">creat_List</span><span class="hljs-params">(<span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//尾插法实现链表的建立</span><br>    Node *pre;              <span class="hljs-comment">//前一节点</span><br>    List L = <span class="hljs-literal">NULL</span>;          <span class="hljs-comment">//链表指针</span><br>    List head;              <span class="hljs-comment">//头节点</span><br><br>    head = (List)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    head-&gt;next = <span class="hljs-literal">NULL</span>;<br>    pre = head;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; i++)<br>    &#123;<br>        datatype t;<br>        <span class="hljs-comment">//cin &gt;&gt; t;</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;t);<br>        L = (List)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br><br>        L-&gt;key = t;<br><br>        pre-&gt;next = L;<br>        pre = L;<br>    &#125;<br>    L-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">return</span> head;<br>    <span class="hljs-comment">//display_list(L);</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>学校发的书上的方法编译错误，，，最后我选择了这种返回头节点的指针的方法，</p>
<h3 id="头插法建立链表"><a href="#头插法建立链表" class="headerlink" title="头插法建立链表"></a>头插法建立链表</h3><p>和尾插法相似，，改一下指针就行了，，，</p>
<h2 id="插入一个节点"><a href="#插入一个节点" class="headerlink" title="插入一个节点"></a>插入一个节点</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert_List</span><span class="hljs-params">(List L , <span class="hljs-keyword">int</span> i , datatype k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//在链表的第i个位置插入数据为k的结点</span><br>    List p , s;                         <span class="hljs-comment">//s为要插入的节点</span><br>    p = L;<br>    <span class="hljs-comment">//找到第i-1个位置的节点</span><br>    <span class="hljs-keyword">if</span> (i - <span class="hljs-number">1</span>)                          <span class="hljs-comment">//若要在不是第一个位置处插入，遍历到第i-1节点处</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i - <span class="hljs-number">1</span>; j++)<br>        &#123;<br>            p = p-&gt;next;<br>            <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>)<br>                <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>    &#125;<br><br>    s = (Node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));   <span class="hljs-comment">//为新节点申请空间</span><br>    s-&gt;key = k;                         <span class="hljs-comment">//赋值</span><br>    s-&gt;next = p-&gt;next;                  <span class="hljs-comment">//指向下一节点，及插入链表</span><br>    p-&gt;next = s;                        <span class="hljs-comment">//上一节点指向新建的节点</span><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="删除一个节点"><a href="#删除一个节点" class="headerlink" title="删除一个节点"></a>删除一个节点</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delete_List</span><span class="hljs-params">(List L , <span class="hljs-keyword">int</span> i <span class="hljs-comment">/*datatype &amp;x*/</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//删除链表中的第i个节点</span><br>    List pre , cur;                     <span class="hljs-comment">//pre为前一节点,cur为要删除的节点</span><br>    pre = L;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i - <span class="hljs-number">1</span>; j++)    <span class="hljs-comment">//遍历到第i-1个节点</span><br>    &#123;<br>        pre = pre-&gt;next;<br>        <span class="hljs-keyword">if</span> (pre == <span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (pre-&gt;next == <span class="hljs-literal">NULL</span>)              <span class="hljs-comment">//若此时为尾节点，则无法删除第i个节点</span><br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cur = pre-&gt;next;<br>        pre-&gt;next = cur-&gt;next;<br>        <span class="hljs-built_in">free</span>(cur);                      <span class="hljs-comment">//删除节点并释放空间</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="显示链表中的数据"><a href="#显示链表中的数据" class="headerlink" title="显示链表中的数据"></a>显示链表中的数据</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">display_list</span><span class="hljs-params">(List L)</span>       <span class="hljs-comment">//输出链表所储存的所有数据</span></span><br><span class="hljs-function"></span>&#123;<br>    List p = L;                 <span class="hljs-comment">//定义链表的指针，用于遍历该链表</span><br>    <span class="hljs-keyword">if</span> (p-&gt;next)<br>    &#123;<br>        <span class="hljs-comment">//cout &lt;&lt; p-&gt;key;</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span> , p-&gt;next-&gt;key);<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (p-&gt;next)<br>    &#123;<br>        <span class="hljs-comment">//cout &lt;&lt; &quot; &quot; &lt;&lt; p-&gt;key;</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span> , p-&gt;next-&gt;key);<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">//cout &lt;&lt; endl;</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><figure class="highlight dns"><table><tr><td class="code"><pre><code class="hljs dns">假设利用两个线性表LA和LB分别表示两个集合<span class="hljs-keyword">A</span>和B（即：线性表中的数据元素即为集合中的成员），<br>现要求一个新的集合<span class="hljs-keyword">A</span>=<span class="hljs-keyword">A</span>∪B。这就要求对线性表做如下操作：扩大线性表LA，<br>将存在于线性表LB中而不存在于线性表LA中的数据元素插入到线性表LA中去。<br>只要从线性表LB中依次取得每个元素，并依值在线性表LA中进行查访，<br>若不存在，则插入之。上述操作过程可用下列算法描述之。<br><br>图：将两个列表合并的算法（C/C++描述）<br>上图算法中，在第<span class="hljs-number">8</span>行取得集合B中的元素，然后再在第<span class="hljs-number">10</span>行插入到集合<span class="hljs-keyword">A</span>中。<br>你的任务是先输出集合<span class="hljs-keyword">A</span>和集合B中的元素，每个集合在一行中输出。<br>然后每次在将集合B中的元素取出插入到集合<span class="hljs-keyword">A</span>尾部后输出集合<span class="hljs-keyword">A</span>中的元素。<br>当然你的代码可以和上面的代码不一样，只要有相同的输出即可。<br></code></pre></td></tr></table></figure>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><figure class="highlight excel"><table><tr><td class="code"><pre><code class="hljs excel">有多组测试数据，每组测试数据占两行。第一行是集合A，<br>第一个整数m（<span class="hljs-number">0</span>&lt; m &lt; = <span class="hljs-number">100</span>）代表集合A起始有m个元素，后面有m个整数，代表A中的元素。<br>第二行是集合B，第一个整数<span class="hljs-built_in">n</span>(<span class="hljs-comment">0 &lt; n &lt; = 100</span>)代表集合B起始有<span class="hljs-built_in">n</span>个元素，<br>后面有<span class="hljs-built_in">n</span>个整数，代表B中的元素。每行中整数之间用一个空格隔开。<br></code></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">每组测试数据输出n+<span class="hljs-number">2</span>行：前两行分别输出集合<span class="hljs-selector-tag">A</span>、集合<span class="hljs-selector-tag">B</span>中的数据，<br>后面n行是每次从<span class="hljs-selector-tag">B</span>中取出元素插入到<span class="hljs-selector-tag">A</span>尾部后的集合<span class="hljs-selector-tag">A</span>。<br>每行整数之间用一个空格隔开，每组测试数据之间用一行空行隔开。<br></code></pre></td></tr></table></figure>
<h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Sample</span> Input<br><br><span class="hljs-attribute">5</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">3</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span><br><span class="hljs-attribute">1</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">2</span> <span class="hljs-number">2</span> <span class="hljs-number">7</span><br><span class="hljs-attribute">4</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span><br><span class="hljs-attribute">4</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br><br><span class="hljs-attribute">Sample</span> Output<br><br><span class="hljs-attribute">1</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">1</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span><br><span class="hljs-attribute">1</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">1</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">7</span><br><span class="hljs-attribute">1</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span><br><br><span class="hljs-attribute">3</span><br><span class="hljs-attribute">2</span> <span class="hljs-number">7</span><br><span class="hljs-attribute">3</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">3</span> <span class="hljs-number">2</span> <span class="hljs-number">7</span><br><br><span class="hljs-attribute">2</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span><br><span class="hljs-attribute">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br><span class="hljs-attribute">2</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span><br><span class="hljs-attribute">2</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span><br><span class="hljs-attribute">2</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span><br><span class="hljs-attribute">2</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure>
<p>我的代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-comment">//const int maxn = 105;</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> datatype;           <span class="hljs-comment">//自定义节点所储存的数据类型，便于之后的更改</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class">&#123;</span><br>    datatype key;               <span class="hljs-comment">//节点所储存的数据</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">next</span>;</span>          <span class="hljs-comment">//当前节点指向下一节点的指针</span><br>    <span class="hljs-comment">//Node(datatype x):key(x) , next(NULL)&#123;&#125;</span><br>&#125;Node , *List;                  <span class="hljs-comment">//节点，节点指针（链表指针）</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">display_list</span><span class="hljs-params">(List L)</span>       <span class="hljs-comment">//输出链表所储存的所有数据</span></span><br><span class="hljs-function"></span>&#123;<br>    List p = L;                 <span class="hljs-comment">//定义链表的指针，用于遍历该链表</span><br>    <span class="hljs-keyword">if</span> (p-&gt;next)<br>    &#123;<br>        <span class="hljs-comment">//cout &lt;&lt; p-&gt;key;</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span> , p-&gt;next-&gt;key);<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (p-&gt;next)<br>    &#123;<br>        <span class="hljs-comment">//cout &lt;&lt; &quot; &quot; &lt;&lt; p-&gt;key;</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span> , p-&gt;next-&gt;key);<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">//cout &lt;&lt; endl;</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">search_List</span><span class="hljs-params">(List L , datatype k)</span>    <span class="hljs-comment">//搜索值为k的节点在链表中的位置，返回所在的位置loc</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//查找链表中值为k的节点的位置</span><br>    List p = L-&gt;next;<br>    <span class="hljs-keyword">int</span> loc = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;key != k)<br>    &#123;<br>        p = p-&gt;next;<br>        loc++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p != <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> loc;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;                       <span class="hljs-comment">//没有找到返回值0</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert_List</span><span class="hljs-params">(List L , <span class="hljs-keyword">int</span> i , datatype k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//在链表的第i个位置插入数据为k的结点</span><br>    List p , s;                         <span class="hljs-comment">//s为要插入的节点</span><br>    p = L;<br>    <span class="hljs-comment">//找到第i-1个位置的节点</span><br>    <span class="hljs-keyword">if</span> (i - <span class="hljs-number">1</span>)                          <span class="hljs-comment">//若要在不是第一个位置处插入，遍历到第i-1节点处</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i - <span class="hljs-number">1</span>; j++)<br>        &#123;<br>            p = p-&gt;next;<br>            <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>)<br>                <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>    &#125;<br><br>    s = (Node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));   <span class="hljs-comment">//为新节点申请空间</span><br>    s-&gt;key = k;                         <span class="hljs-comment">//赋值</span><br>    s-&gt;next = p-&gt;next;                  <span class="hljs-comment">//指向下一节点，及插入链表</span><br>    p-&gt;next = s;                        <span class="hljs-comment">//上一节点指向新建的节点</span><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delete_List</span><span class="hljs-params">(List L , <span class="hljs-keyword">int</span> i <span class="hljs-comment">/*datatype &amp;x*/</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//删除链表中的第i个节点</span><br>    List pre , cur;                     <span class="hljs-comment">//pre为前一节点,cur为要删除的节点</span><br>    pre = L;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i - <span class="hljs-number">1</span>; j++)    <span class="hljs-comment">//遍历到第i-1个节点</span><br>    &#123;<br>        pre = pre-&gt;next;<br>        <span class="hljs-keyword">if</span> (pre == <span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (pre-&gt;next == <span class="hljs-literal">NULL</span>)              <span class="hljs-comment">//若此时为尾节点，则无法删除第i个节点</span><br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cur = pre-&gt;next;<br>        pre-&gt;next = cur-&gt;next;<br>        <span class="hljs-built_in">free</span>(cur);                      <span class="hljs-comment">//删除节点并释放空间</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function">List <span class="hljs-title">creat_List</span><span class="hljs-params">(<span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//尾插法实现链表的建立</span><br>    Node *pre;              <span class="hljs-comment">//前一节点</span><br>    List L = <span class="hljs-literal">NULL</span>;          <span class="hljs-comment">//链表指针</span><br>    List head;              <span class="hljs-comment">//头节点</span><br><br>    head = (List)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    head-&gt;next = <span class="hljs-literal">NULL</span>;<br>    pre = head;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; i++)<br>    &#123;<br>        datatype t;<br>        <span class="hljs-comment">//cin &gt;&gt; t;</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;t);<br>        L = (List)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br><br>        L-&gt;key = t;<br><br>        pre-&gt;next = L;<br>        pre = L;<br>    &#125;<br>    L-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">return</span> head;<br>    <span class="hljs-comment">//display_list(L);</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> m , n;<br>    List LA;<br>    List LB;<br>    <span class="hljs-keyword">int</span> flag = <span class="hljs-number">1</span>;<br><span class="hljs-comment">//    freopen(&quot;233.txt&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;emmm.txt&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;m) != EOF)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (flag)<br>            flag = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-comment">//            cout &lt;&lt; endl;</span><br><br>        LA = creat_List(m);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;n);<br>        LB = creat_List(n);<br><br>        display_list(LA);<br>        display_list(LB);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            datatype t = LB-&gt;next-&gt;key;<br>            <span class="hljs-keyword">int</span> p = search_List(LA , t);<br><span class="hljs-comment">//            printf(&quot;lb---%d\n&quot; , t);</span><br><span class="hljs-comment">//            printf(&quot;p---%d\n&quot; , p);</span><br>            <span class="hljs-keyword">if</span> (!p)<br>            &#123;<br><br>                m++;<br>                insert_List(LA , m , t);<br>                delete_List(LB , <span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                delete_List(LB , <span class="hljs-number">1</span>);<br>            &#125;<br>            display_list(LA);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>链表</tag>
        <tag>c/c++</tag>
      </tags>
  </entry>
  <entry>
    <title>数论_快速幂</title>
    <url>/2018/07/16/%E6%95%B0%E8%AE%BA_%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>2018.7.16</p>
<p>这篇主要是关于数论里的快速幂和矩阵的快速乘法，，，</p>
<h2 id="快速幂和快速乘"><a href="#快速幂和快速乘" class="headerlink" title="快速幂和快速乘"></a>快速幂和快速乘</h2><p>对于a^n这样的计算，，最简单的方法就是一个for循环连乘下去，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-function">ll <span class="hljs-title">pow</span> <span class="hljs-params">(ll a , ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= b; i++)<br>        ans *= a;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>但是如果a,n都很大，，尤其是某些题，，，超时，，妥妥的，，(^_っ^)</p>
<span id="more"></span>
<ul>
<li>所以，对于这种情况可以使用快速幂的方法来计算，，，</li>
<li>首先，快速幂的主要思想是将多个a合并，，比如：</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">2^11 <br><span class="hljs-section">== 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 </span><br><span class="hljs-section">== (2 * 2) * (2 * 2) * (2 * 2) * (2 * 2) * (2 * 2) * 2 </span><br><span class="hljs-section">== 4 * 4 * 4 * 4 * 4 * 2 </span><br><span class="hljs-section">== (4 * 4) * (4 * 4) * 4 * 2 </span><br><span class="hljs-section">== 16 * 16 * 4 * 2 ...</span><br></code></pre></td></tr></table></figure>
<p>这样就就把10次的乘法操作减少到了5次，，，这样就减少的运算的时间，，，就 <strong>有可能</strong>不会TLE，， (因为有的题的数据可能快速幂也会超时，，，<em>(:3 」∠ )</em>)</p>
<h2 id="快速幂的模板："><a href="#快速幂的模板：" class="headerlink" title="快速幂的模板："></a><strong>快速幂的模板：</strong></h2><h3 id="递推的写法（用循环解决）"><a href="#递推的写法（用循环解决）" class="headerlink" title="递推的写法（用循环解决）"></a><strong>递推的写法（用循环解决）</strong></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MOD = <span class="hljs-number">1e9</span>;<br><span class="hljs-function">ll <span class="hljs-title">pow</span> <span class="hljs-params">(ll a , ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans = <span class="hljs-number">1</span>;     <span class="hljs-comment">//注意是1，，，下面的快乘是0，，</span><br>    <span class="hljs-keyword">while</span> (b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)  ans = ans * a % MOD;    <span class="hljs-comment">//如果b,也就是当前指数是奇数时，要给ans补一个a，，因为下面b会减半</span><br>        a = a * a % MOD;                    <span class="hljs-comment">//合并两个a，变成a^2</span><br>        b /= <span class="hljs-number">2</span>;                             <span class="hljs-comment">//b减半</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="递归的写法（用函数递归解决）"><a href="#递归的写法（用函数递归解决）" class="headerlink" title="递归的写法（用函数递归解决）"></a><strong>递归的写法（用函数递归解决）</strong></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MOD = <span class="hljs-number">1e9</span>;<br><span class="hljs-function">ll <span class="hljs-title">pow</span> <span class="hljs-params">(ll a , ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    ll ans = <span class="hljs-built_in">pow</span> (a , b / <span class="hljs-number">2</span>);<br>    ans = ans * ans % MOD;<br>    <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)  ans = ans * a % MOD;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="用位操作的写法"><a href="#用位操作的写法" class="headerlink" title="用位操作的写法"></a><strong>用位操作的写法</strong></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MOD = <span class="hljs-number">1e9</span>;<br><span class="hljs-function">ll <span class="hljs-title">pow</span> <span class="hljs-params">(ll a , ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)  ans = ans * a % MOD;<br>         a = a * a % MOD;<br>         b &gt;&gt;= <span class="hljs-number">1</span>;                           <span class="hljs-comment">//b右移相当于除以二</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在某些模板里a用的res,,b用的n</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MOD = <span class="hljs-number">1e9</span>;<br><span class="hljs-function">ll <span class="hljs-title">pow</span> <span class="hljs-params">(ll x , ll n)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll res = x;<br>    ll ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (n)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n &amp; <span class="hljs-number">1</span>)  ans = ans * res % MOD;<br>         res = res * res % MOD;<br>         n &gt;&gt;= <span class="hljs-number">1</span>;                           <span class="hljs-comment">//b右移相当于除以二</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="快速乘"><a href="#快速乘" class="headerlink" title="快速乘"></a><strong>快速乘</strong></h3><p> 有了快速幂就有了 <strong>快速乘</strong>，只要把乘该成加就OK啦，，，(ゝ∀･)<br><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MOD = <span class="hljs-number">1e9</span>;<br><span class="hljs-function">ll <span class="hljs-title">mul</span> <span class="hljs-params">(ll x , ll n)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll res = x;<br>    ll ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (n)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n &amp; <span class="hljs-number">1</span>)  ans = (ans + res) % MOD;<br>         res = (res + res) % MOD;<br>         n &gt;&gt;= <span class="hljs-number">1</span>;                           <span class="hljs-comment">//b右移相当于除以二</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><br>对了，，，快速幂里的乘法运算也可以换成快速乘，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br>ll MOD;<br><span class="hljs-function">ll <span class="hljs-title">mul</span> <span class="hljs-params">(ll a , ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)  ans = (ans + a) % MOD;<br>        a = (a + a) % MOD;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">pow</span> <span class="hljs-params">(ll a , ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)  ans = mul(ans , a);<br>        a = mul(a , a);<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="矩阵快速幂："><a href="#矩阵快速幂：" class="headerlink" title="矩阵快速幂："></a>矩阵快速幂：</h2><p>好了，，，(」・ω・)」うー！(／・ω・)／にゃー！快速幂和快速乘都清楚了，，这时来看另一个东西，，<strong>矩阵快速幂</strong>(σ′▽‵)′▽‵)σ<br>首先，，，我们先实现一个矩阵结构体，，，<br><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Matrix</span></span><br><span class="hljs-class">&#123;</span><br>    ll m[N][N];<br>&#125;ans , res;                                 <span class="hljs-comment">//ans是最终的结果，，res是中间合并操作的变量，类似a*a等等</span><br></code></pre></td></tr></table></figure></p>
<p><del>然后，，emmmm先鸽了，，，碎觉ｷﾀ━━━━(ﾟ∀ﾟ)━━━━!!</del></p>
<p>然后，，实现两矩阵的相乘，，，(ﾉ&gt;ω&lt;)ﾉ</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">Matrix <span class="hljs-title">mul</span> <span class="hljs-params">(Matrix a , Matrix b , <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    Matrix t;                               <span class="hljs-comment">//临时矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)             <span class="hljs-comment">//初始化为0</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>            t.m[i][j] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)             <span class="hljs-comment">//矩阵的相乘</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++)<br>            &#123;<br>                t.m[i][j] = (t.m[i][j] + (a.m[i][k] * b.m[k][j]) % MOD) % MOD;  <span class="hljs-comment">//对每一个数取模</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> t;                               <span class="hljs-comment">//返回结果</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>然后就是最重要的，，，<strong>矩阵的快速幂</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">matrixmul</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> nn , <span class="hljs-keyword">int</span> n)</span>             <span class="hljs-comment">//nn是指数，，，n是阶数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)             <span class="hljs-comment">//先将ans矩阵初始化为单位矩阵</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>            <span class="hljs-keyword">if</span> (i == j)<br>                ans.m[i][j] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span><br>                ans.m[i][j] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (nn)                              <span class="hljs-comment">//矩阵的快速幂，，把以前的乘号改成上面的mul函数就可以了，，，</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (nn &amp; <span class="hljs-number">1</span>)  ans = mul (ans , res , n);<br>        res = mul (res , res , n);<br>        nn &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>好了，，，这样主题的框架就有了，，，</p>
<p>接下来就是根据递推式来转化成矩阵的运算，，，</p>
<p>利用矩阵快速幂的题一般会根据题意来得到一个关于f(n)的递推式，，</p>
<p>如果只是简单的用循环递归来实现，，在有些题里n很大时会tle ，，，如果在开始时预先算出来f(n)储存，有可能mle，，，所以这种情况下可以试试矩阵的快速幂来解体，，，</p>
<p>我们的任务就是根据这个递推式来转化为一个矩阵的递推式，，这个矩阵一般是一个含有f(n)的矩阵等于一个f(n-1)*A的形式，，然后根据递推式就可以将这个新的矩阵递推式转化成一个含有f(n)的矩阵等于一个含有f(a)等常数的矩阵乘一个常数矩阵A的n-m次幂，，，（这里的a、m都是一个不定的常数，，）</p>
<p>例如，斐波那契数列f(n) = f(n - 1) + f(n - 2)写成矩阵的形式就是</p>
<p>$</p>
<p>\left[<br>\begin{matrix}<br>f(n) &amp; f(n - 1)<br>\end{matrix}</p>
<h1 id="right"><a href="#right" class="headerlink" title="\right]"></a>\right]</h1><p>\left[<br>\begin{matrix}<br>f(n - 1) &amp; f(n - 2)<br>\end{matrix}<br>\right]</p>
<p>*</p>
<p>\left[<br>\begin{matrix}<br>1 &amp; 1\<br>1 &amp; 0<br>\end{matrix}<br>\right]</p>
<p>$<br>然后，，， 把$</p>
<p>\left[<br>\begin{matrix}<br>f(n - 1) &amp; f(n - 2)<br>\end{matrix}<br>\right]</p>
<p>再展开，，，就可以得到很多的A(<br>\left[<br>\begin{matrix}<br>1 &amp; 1\<br>1 &amp; 0<br>\end{matrix}<br>\right]<br>)$相乘，，，</p>
<p>也就是$</p>
<p>\left[<br>\begin{matrix}<br>f(n) &amp; f(n - 1)<br>\end{matrix}<br>\right]</p>
<p>\== </p>
<p>\left[<br>\begin{matrix}<br>f(2) &amp; f(1)<br>\end{matrix}<br>\right]</p>
<ul>
<li>$A^n$$</li>
</ul>
<p>m阶矩阵A的相乘的时间复杂度是O($m^3$)，，矩阵快速幂为O(logn)</p>
<p>所以这个的时间复杂度是 8*log1000 &lt; 1000这样就减小了运算时间，，，<a href="https://www.cnblogs.com/chsobin/p/8417356.html">参考</a></p>
<p>还有一些其他的递推公式的推导，，，看<a href="https://blog.csdn.net/wust_zzwh/article/details/52058209">这里，，，</a>，，，</p>
<p>然后是一些<a href="https://blog.csdn.net/chenguolinblog/article/details/10309423">练习题</a>，，，</p>
]]></content>
      <tags>
        <tag>acm</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数论模板</title>
    <url>/2019/02/17/%E6%95%B0%E8%AE%BA%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>自己虽然没有好好看过数论的知识，，但是实际的做题中有一些处理总是需要数论的板子，，总是再做题的时候翻别人的博客抄很耽误事，，而且对自己也不好，，所以总结一下平常用道的数论的板子，，</p>
<span id="more"></span>
<h1 id="求素数"><a href="#求素数" class="headerlink" title="求素数"></a>求素数</h1><h2 id="埃筛"><a href="#埃筛" class="headerlink" title="埃筛"></a>埃筛</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//判断一个数是否为质数</span><br><span class="hljs-keyword">bool</span> prime[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; maxn; ++i)prime[i] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i * i &lt; maxn; ++i)<br>        <span class="hljs-keyword">if</span>(prime[i])<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i * i; j &lt; maxn; j += i)<br>                prime[j] = <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="线筛"><a href="#线筛" class="headerlink" title="线筛"></a>线筛</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">bool</span> prime[maxn];<br><span class="hljs-keyword">int</span> p[maxn], tot;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; maxn; ++i)prime[i] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; maxn; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(prime[i])p[tot++] = i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; tot &amp;&amp; i * p[j] &lt; maxn; ++j)<br>        &#123;<br>            prime[i * p[j]] = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span>(i % p[j] == <span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="筛质数的同时求质数的逆元，，（欧拉函数可能用）"><a href="#筛质数的同时求质数的逆元，，（欧拉函数可能用）" class="headerlink" title="筛质数的同时求质数的逆元，，（欧拉函数可能用）"></a>筛质数的同时求质数的逆元，，（欧拉函数可能用）</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//find all prime from 1 to maxn</span><br><span class="hljs-keyword">bool</span> isprime[maxn];<br><span class="hljs-keyword">int</span> prime[maxn], tot = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">int</span> inv_prime[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span>     <span class="hljs-comment">//寻找maxn以内的质数及其质数的逆元</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= maxn; ++i)isprime[i] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= maxn; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!isprime[i])prime[++tot] = i, inv_prime[tot] = pow_(i, mod - <span class="hljs-number">2</span>, mod);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= tot &amp;&amp; i * prime[j] &lt;= maxn; ++j)<br>        &#123;<br>            isprime[i * prime[j]] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(i % prime[j] == <span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="预处理每个数的质因数"><a href="#预处理每个数的质因数" class="headerlink" title="预处理每个数的质因数"></a>预处理每个数的质因数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; prime_factor[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; maxn; ++i)<br>        <span class="hljs-keyword">if</span>(prime_factor[i].size() == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i; j &lt; maxn; j += i)<br>                prime_factor[j].push_back(i);<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="预处理每个数的所有因数"><a href="#预处理每个数的所有因数" class="headerlink" title="预处理每个数的所有因数"></a>预处理每个数的所有因数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; factor[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= maxn; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i; j &lt;= maxn; j += i)<br>            factor[j].push_back(i);<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="预处理每个数的-质因数分解"><a href="#预处理每个数的-质因数分解" class="headerlink" title="预处理每个数的 质因数分解"></a>预处理每个数的 质因数分解</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//18 2 3 3</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; prime_factor[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> tmp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= maxn; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(prime_factor[i].size() == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i; j &lt;= maxn; j += i)<br>            &#123;<br>                tmp = j;<br>                <span class="hljs-keyword">while</span>(tmp == tmp / i * i)<span class="hljs-comment">//直接取模貌似很费时</span><br>                &#123;<br>                    prime_factor[j].push_back(i);<br>                    tmp /= i;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h2><h2 id="普通做法"><a href="#普通做法" class="headerlink" title="普通做法"></a>普通做法</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">phi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> ans = x;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i * i &lt;= x; ++i)<br>        <span class="hljs-keyword">if</span>(x % i == <span class="hljs-number">0</span>)&#123;<br>            ans = ans / i * (i - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">while</span>(x % i == <span class="hljs-number">0</span>)x /= i;<br>        &#125;<br>    <span class="hljs-keyword">if</span>(x &gt; <span class="hljs-number">1</span>) ans = ans / x * (x - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="类似埃筛的做法"><a href="#类似埃筛的做法" class="headerlink" title="类似埃筛的做法"></a>类似埃筛的做法</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> phi[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">euler</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    phi[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= maxn; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!phi[i])<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i; j &lt;= maxn; j += i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(!phi[j])<br>                    phi[j] = j;<br>                phi[j] = phi[j] / i * (i - <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="更快的做法"><a href="#更快的做法" class="headerlink" title="更快的做法"></a>更快的做法</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> phi[maxn], prime[maxn];<br><span class="hljs-keyword">int</span> tot;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">euler</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    phi[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= maxn; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!phi[i])<br>        &#123;<br>            phi[i] = i - <span class="hljs-number">1</span>;<br>            prime[tot++] = i;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; tot &amp;&amp; <span class="hljs-number">1ll</span> * i * prime[j] &lt;= maxn; ++j)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(i % prime[j])phi[i * prime[j]] = phi[i] * (prime[j] - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                phi[i * prime[j]] = phi[i] * prime[j];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">pow_</span><span class="hljs-params">(ll a, ll b, ll p)</span>    <span class="hljs-comment">//快速幂</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ret = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b &amp; <span class="hljs-number">1</span>) ret = (ret * a) % p;<br>        a = (a * a) % p;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="求a在mod下的逆元"><a href="#求a在mod下的逆元" class="headerlink" title="求a在mod下的逆元"></a>求a在mod下的逆元</h1><h2 id="费马小定理法"><a href="#费马小定理法" class="headerlink" title="费马小定理法"></a>费马小定理法</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">pow_</span><span class="hljs-params">(ll a, ll b, ll p)</span>    <span class="hljs-comment">//快速幂</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ret = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b &amp; <span class="hljs-number">1</span>) ret = (ret * a) % p;<br>        a = (a * a) % p;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-comment">//inv(a)=a^(mod-2)(mod) 费马小定理</span><br><span class="hljs-function">ll <span class="hljs-title">inv</span><span class="hljs-params">(ll a, ll p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> pow_(a, p - <span class="hljs-number">2</span>, p);<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="扩展欧几里得法"><a href="#扩展欧几里得法" class="headerlink" title="扩展欧几里得法"></a>扩展欧几里得法</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ex_gcd</span><span class="hljs-params">(ll a, ll b, ll &amp;x, ll &amp;y, ll &amp;d)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(!b)&#123;d = a, x = <span class="hljs-number">1</span>, y = <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        ex_gcd(b, a % b, y, x, d);<br>        y -= x * (a / b);<br>    &#125;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">inv</span><span class="hljs-params">(ll a, ll p)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll d, x, y;<br>    ex_gcd(a, p, x, y, d);<br>    <span class="hljs-keyword">return</span> d == <span class="hljs-number">1</span> ? (x % p + p) % p : <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">ll <span class="hljs-title">inv</span><span class="hljs-params">(ll a, ll p)</span><span class="hljs-comment">//求t关于p的逆元，注意:t要小于p，最好传参前先把t%p一下 </span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a == <span class="hljs-number">1</span> ? <span class="hljs-number">1</span> : (p - p / a) * inv(p % a, p) % p;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="线性递推"><a href="#线性递推" class="headerlink" title="线性递推"></a>线性递推</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> inv[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	inv[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; maxn; ++i)inv[i] = (mod - mod / i) * <span class="hljs-number">1ll</span> * inv[mod % i] % mod;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="gcd-lcm"><a href="#gcd-lcm" class="headerlink" title="gcd, lcm"></a>gcd, lcm</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a, ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(b == <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> gcd(b, a % b);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>$lcm = a * b / gcd(a, b)$</p>
<h1 id="位运算的快读"><a href="#位运算的快读" class="headerlink" title="位运算的快读"></a>位运算的快读</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span>   <span class="hljs-comment">//快读</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))<br>        ch=getchar();<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))<br>        ans=(ans&lt;&lt;<span class="hljs-number">3</span>)+(ans&lt;&lt;<span class="hljs-number">1</span>)+(ch^<span class="hljs-number">48</span>),ch=getchar();<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>acm</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>最大权闭合子图</title>
    <url>/2018/12/15/%E6%9C%80%E5%A4%A7%E6%9D%83%E9%97%AD%E5%90%88%E5%AD%90%E5%9B%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>某一天在翻cf上的contest时，，发现最近的某一场的G题是网络流的题，，，正好最近看了看网络流的题，，想着把他弄出来，，，然后查了一下发现是网络流里<strong>最大权闭合子图</strong>的问题，，于是就一直拖到现在才基本弄懂。。。。最大权闭合子图的解法很简单，，，其中一部分的计算利用到了求解网络的最大流的那几个算法，，主要是理解它的性质和<strong>建图</strong>，，，，</p>
<span id="more"></span>
<h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>首先是cf的那道题，，，<a href="https://codeforces.com/contest/1082/problem/G">传送门</a>，，，</p>
<h2 id="题目的意思"><a href="#题目的意思" class="headerlink" title="题目的意思"></a>题目的意思</h2><p>大致意思是他定义了一个网络的子图是<em>子图中的点的后继节点也在子图中</em>，，（后继节点就是指1-&gt;2-&gt;3 , 2就是1的后继节点，，3就是2的后继节点），，然后要你找出最大的子图的权，，，，</p>
<p>题目的描述的其实就是闭合子图的性质，，，所问其实也就是最大权闭合子图，，，</p>
<p>接下来是有关最大权闭合子图的一些概念</p>
<h2 id="最大权闭合子图"><a href="#最大权闭合子图" class="headerlink" title="最大权闭合子图"></a>最大权闭合子图</h2><p><a href="https://www.cnblogs.com/dilthey/p/7565206.html">以下资料引用自这里</a></p>
<p><a href="https://www.cnblogs.com/TreeDream/p/5942354.html#_labelTop">还有这里</a>，，，<br>(本文所引用内容版权归原作者所有)</p>
<p>首先对于一个有点权的有向连通图：</p>
<p><img src="https://images2017.cnblogs.com/blog/1103198/201709/1103198-20170920131516868-1508739899.png" alt=""></p>
<p>用超级源点s和超级汇点t将正权值的点连到s负权值的连到t上，，这样可以将点权图转化为一个边权图，，，：</p>
<p><img src="https://images2017.cnblogs.com/blog/1103198/201709/1103198-20170920133616665-1270622724.png" alt=""></p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul>
<li>该带边权的有向图的s-t最小割是简单割，，（简单割就是割集中的所有点都与s或t相连），，所以最小割不会出现在inf的边上，，这样的图也是二分图，，，（这里看不懂了，，不过不影响，，）</li>
<li>该图中每一个简单割产生的两个子图中，含有s的子图是<strong>闭合图</strong></li>
<li><p><strong>闭合图</strong>：在一个图中，选取一些点构成集合，若集合中的任一点连接点的任意出弧，其指向的点也在集合中，，，则这个集合构成的图就是闭合图，，</p>
</li>
<li><p>例如：<br><img src="https://media.hihocoder.com/problem_images/20161008/14759139776998.jpg" alt=""></p>
</li>
</ul>
<p>这个图的闭合子图就有8个：$∅,{3},{4},{2,4},{3,4},{1,3,4},{2,3,4},{1,2,3,4}$</p>
<ul>
<li><strong>最小割产生的子图s,t，图s是最大权闭合子图</strong></li>
<li>证明如下：<blockquote>
<p>因为割集中所有的边，不是连接在s上，就是连接在t上；</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>我们记割集中，所有连接在s上的边的权值和为$x_1$，所有连接在t上的边的权值和为$x_2$，而割集中所有边权值和为$X=x_1+x_2；$</p>
<p>又，记图S中所有点的权值和为$W$，记其中正权值之和为$w_1$，负权值之和为$-w_2$，故$W = w_1 - w_2；$</p>
<p>而 $W + X = w_1 - w_2 + x_1 + x_2$，由于$x_2 = w_2$（因为图S中所有负权值的点，必然连接到t点，而图S必然要与t分割开；故割集中，“连接在t点上的边权值和”就是“图S中所有负权值点的权值之和，取负”）</p>
<p>因而$W + X = w_1 + x_1；$</p>
<p>　　而显然的，$w_1 + x_1$是整个图中所有正权值之和，记为$SUM$；</p>
<p>　　故$W = SUM - X$，即 <strong>“图S中所有点的权值和” = “整个图中所有正权值之和”  - “割集中所有边权值和”</strong>；</p>
<p>　　然后，因为$SUM$为定值，只要我们取最小割，则“图S中所有点的权值和”就是最大的，即此时图S为图S为最大权闭合子图；</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据以上的论述，我们就可以得到求解一般的最大权闭合子图的步(tao)骤(lu):</p>
<ul>
<li>记录图中的所有点权为正的和：$sum$</li>
<li>然后建图，建图的大概流程是：正点权的点与源点s相连，边权为点权，，负点权的点与汇点t相连，，边权为点权的相反数，，最后正负点之间相连，，边权为$inf$</li>
<li>最后跑网络路的最大流得到最大流$maxflow$,,,最大权闭合子图的权值就是：$sum - maxflow$</li>
</ul>
<p>有了这些，，这道板子题其实也就差不多了，，，和求最大流的不同只有建图和最后的处理了，，，</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//codefroces1082G</span><br><span class="hljs-comment">//https://codeforces.com/contest/1082/submission/47022828</span><br><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> n , m;<br><span class="hljs-keyword">int</span> a[maxn];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to , next , cap , flow;<br>&#125;edge[maxm];<br><span class="hljs-keyword">int</span> tol;<br><span class="hljs-keyword">int</span> head[maxn];<br><span class="hljs-keyword">int</span> gap[maxn] , dep[maxn] , cur[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tol = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head , <span class="hljs-number">-1</span> , <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u , <span class="hljs-keyword">int</span> v , <span class="hljs-keyword">int</span> w , <span class="hljs-keyword">int</span> rw  = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tol].to = v; edge[tol].cap = w;edge[tol].flow = <span class="hljs-number">0</span>;<br>    edge[tol].next = head[u]; head[u] = tol++;<br>    edge[tol].to = u; edge[tol].cap = rw;edge[tol].flow = <span class="hljs-number">0</span>;<br>    edge[tol].next = head[v];head[v] = tol++;<br>&#125;<br><span class="hljs-keyword">int</span> q[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dep , <span class="hljs-number">-1</span> , <span class="hljs-keyword">sizeof</span> dep);<br>    <span class="hljs-built_in">memset</span>(gap , <span class="hljs-number">0</span> , <span class="hljs-keyword">sizeof</span> gap);<br>    gap[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> front = <span class="hljs-number">0</span> , rear = <span class="hljs-number">0</span>;<br>    dep[t] = <span class="hljs-number">0</span>;<br>    q[rear++] = t;<br>    <span class="hljs-keyword">while</span>(front != rear)<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q[front++];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(~dep[v])<span class="hljs-keyword">continue</span>;<br>            q[rear++] = v;<br>            dep[v] = dep[u] + <span class="hljs-number">1</span>;<br>            ++gap[dep[v]];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> stck[maxn];<br><span class="hljs-function">ll <span class="hljs-title">isap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> t , <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    bfs(s , t);<br>    <span class="hljs-built_in">memcpy</span>(cur , head , <span class="hljs-keyword">sizeof</span> head);<br>    <span class="hljs-comment">//for(int i = 0; i &lt;= n; ++i)cur[i] = head[i];</span><br>    <span class="hljs-keyword">int</span> top = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> u = s;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(dep[s] &lt; n)<br>    &#123;<br>        <span class="hljs-comment">//cout &lt;&lt; u &lt;&lt; endl;</span><br>        <span class="hljs-keyword">if</span>(u == t)<br>        &#123;<br>            <span class="hljs-comment">//cout &lt;&lt; u &lt;&lt; endl;</span><br>            <span class="hljs-keyword">int</span> mi = inf;<br>            <span class="hljs-keyword">int</span> inser;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(mi &gt; edge[stck[i]].cap - edge[stck[i]].flow)<br>                &#123;<br>                    mi = edge[stck[i]].cap - edge[stck[i]].flow;<br>                    inser = i;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i)<br>            &#123;<br>                edge[stck[i]].flow += mi;<br>                edge[stck[i] ^ <span class="hljs-number">1</span>].flow -= mi;<br>            &#125;<span class="hljs-comment">//cout &lt;&lt; mi &lt;&lt; &quot;  ---&quot; &lt;&lt; inf &lt;&lt; endl;</span><br>            ans += mi;<br>            top = inser;<br>            u = edge[stck[top] ^ <span class="hljs-number">1</span>].to;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">int</span> v;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = cur[u]; ~i; i = edge[i].next)<br>        &#123;<br>            v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dep[v] + <span class="hljs-number">1</span> == dep[u])<br>            &#123;<br>                flag = <span class="hljs-literal">true</span>;<br>                cur[u] = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)<br>        &#123;<br>            stck[top++] = cur[u];<br>            u = v;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mi = n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dep[edge[i].to] &lt; mi)<br>            &#123;<br>                mi = dep[edge[i].to];<br>                cur[u] = i;<br>            &#125;<br>        &#125;<br>        --gap[dep[u]];<br>        <span class="hljs-keyword">if</span>(!gap[dep[u]])<span class="hljs-keyword">return</span> ans;<br>        dep[u] = mi + <span class="hljs-number">1</span>;<br>        ++gap[dep[u]];<br>        <span class="hljs-keyword">if</span>(u != s)u = edge[stck[--top] ^ <span class="hljs-number">1</span>].to;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.txt&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    init();<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">int</span> x;<br>    <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> t = n + m + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; x;<br>        addedge(i , t , x);<br>    &#125;<br>    <span class="hljs-keyword">int</span> u , v , w;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>        addedge(n + i , u , inf);<br>        addedge(n + i , v , inf);<br>        addedge(s , n + i , w);<br>        ans += w;<br>    &#125;<br>    ans -= isap(s , t , n + m + <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>之后又找了一道这样的题，，，还是在建图上做文章，，，就是和上一道一样的敲错了板子，，，死活运行不正确，emmmmm，，，还有初始化函数init()总是忘记调用，，，菜的流泪，，，，QAQ</p>
<p><a href="https://www.luogu.org/problemnew/show/P4313">题目链接</a></p>
<p>题目大概意思是一个班的人选理科满意度加多少多少，，选文科加多少多少，，如果一个人的前后左右选的和他一样也加多少多少，，问你最大的满意值是多少，，，<br>思路是给这n*m个点和s点连的边权是文科的那个值，，和t点连的边权是理科那个值，，然后加一个新的点cnt，，和s点连，，边权为第三组满意度，，和其对应的相邻同学连inf的边，，选理科也就是和t连的新点同理，，最后跑网络流就行，，要求的满意值就是总的满意值-最小割的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//记得边数开大点，，貌似能有点数的30倍左右，，，之前re了一发QAQ</span><br><span class="hljs-comment">//https://www.luogu.org/problemnew/show/P4313</span><br><span class="hljs-comment">//https://www.luogu.org/record/show?rid=14708566</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">3e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-keyword">int</span> dx[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">0</span> , <span class="hljs-number">0</span> , <span class="hljs-number">0</span> , <span class="hljs-number">-1</span> , <span class="hljs-number">1</span>&#125;;<br><span class="hljs-keyword">int</span> dy[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">0</span> , <span class="hljs-number">-1</span> , <span class="hljs-number">1</span> , <span class="hljs-number">0</span> , <span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">int</span> tol;<br><span class="hljs-keyword">int</span> head[maxn];<br><span class="hljs-keyword">int</span> gap[maxn] , dep[maxn] , cur[maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to , next , cap , flow;<br>&#125;edge[maxm];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tol = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head , <span class="hljs-number">-1</span> , <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u , <span class="hljs-keyword">int</span> v , <span class="hljs-keyword">int</span> w , <span class="hljs-keyword">int</span> rw = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tol].to = v;edge[tol].cap = w;edge[tol].flow = <span class="hljs-number">0</span>;<br>    edge[tol].next = head[u];head[u] = tol++;<br>    edge[tol].to = u;edge[tol].cap = rw; edge[tol].flow = <span class="hljs-number">0</span>;<br>    edge[tol].next = head[v];head[v] = tol++;<br>&#125;<br><span class="hljs-keyword">int</span> q[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dep , <span class="hljs-number">-1</span> , <span class="hljs-keyword">sizeof</span> dep);<br>    <span class="hljs-built_in">memset</span>(gap , <span class="hljs-number">0</span> , <span class="hljs-keyword">sizeof</span> gap);<br>    gap[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> front = <span class="hljs-number">0</span> , rear = <span class="hljs-number">0</span>;<br>    dep[t] = <span class="hljs-number">0</span>;<br>    q[rear++] = t;<br>    <span class="hljs-keyword">while</span>(front != rear)<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q[front++];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(~dep[v])<span class="hljs-keyword">continue</span>;<br>            q[rear++] = v;<br>            dep[v] = dep[u] + <span class="hljs-number">1</span>;<br>            ++gap[dep[v]];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> stck[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">isap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> t , <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    bfs(s , t);<br>    <span class="hljs-built_in">memcpy</span>(cur , head , <span class="hljs-keyword">sizeof</span> head);<br>    <span class="hljs-keyword">int</span> top = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> u = s;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(dep[s] &lt; n)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(u == t)<br>        &#123;<br>            <span class="hljs-keyword">int</span> mi = inf;<br>            <span class="hljs-keyword">int</span> inser;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(mi &gt; edge[stck[i]].cap - edge[stck[i]].flow)<br>                &#123;<br>                    mi = edge[stck[i]].cap - edge[stck[i]].flow;<br>                    inser = i;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i)<br>            &#123;<br>                edge[stck[i]].flow += mi;<br>                edge[stck[i] ^ <span class="hljs-number">1</span>].flow -= mi;<br>            &#125;<br>            ans += mi;<br>            top = inser;<br>            u = edge[stck[top] ^ <span class="hljs-number">1</span>].to;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">int</span> v;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = cur[u]; ~i; i = edge[i].next)<br>        &#123;<br>            v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dep[v] + <span class="hljs-number">1</span> == dep[u])<br>            &#123;<br>                flag = <span class="hljs-literal">true</span>;<br>                cur[u] = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)<br>        &#123;<br>            stck[top++] = cur[u];<br>            u = v;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mi = n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dep[edge[i].to] &lt; mi)<br>            &#123;<br>                mi = dep[edge[i].to];<br>                cur[u] = i;<br>            &#125;<br>        &#125;<br>        --gap[dep[u]];<br>        <span class="hljs-keyword">if</span>(!gap[dep[u]])<span class="hljs-keyword">return</span> ans;<br>        dep[u] = mi + <span class="hljs-number">1</span>;<br>        ++gap[dep[u]];<br>        <span class="hljs-keyword">if</span>(u != s)u = edge[stck[--top] ^ <span class="hljs-number">1</span>].to;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-keyword">int</span> m;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getid</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i , <span class="hljs-keyword">int</span> j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (i - <span class="hljs-number">1</span>) * m + j;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//freopen(&quot;233.txt&quot;,  &quot;r&quot; , stdin);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">int</span> u , v , w;<br>    <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> t = n * m + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>    init();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; w;<br>            sum += w;<br>            u = s;<br>            v = getid(i , j);<br>            addedge(u , v , w);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; w;<br>            sum += w;<br>            u = getid(i , j);<br>            v = t;<br>            addedge(u , v , w);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> cnt = n * m + <span class="hljs-number">1</span>;<span class="hljs-comment">//额外的点</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; w;<br>            sum += w;<br>            v = getid(i , j);<br>            ++cnt;<br>            addedge(s , cnt , w);<br>            addedge(cnt , v , inf);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">4</span>; ++k)<br>                <span class="hljs-keyword">if</span>(i + dx[k] &gt;= <span class="hljs-number">1</span> &amp;&amp; i + dx[k] &lt;= n &amp;&amp; j + dy[k] &gt;= <span class="hljs-number">1</span> &amp;&amp; j + dy[k] &lt;= m)<br>                    addedge(cnt , getid(i + dx[k] , j + dy[k]) , inf);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; w;<br>            sum += w;<br>            u = getid(i , j);<br>            ++cnt;<br>            addedge(cnt , t , w);<br>            addedge(u , cnt , inf);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">4</span>; ++k)<br>                <span class="hljs-keyword">if</span>(i + dx[k] &gt;= <span class="hljs-number">1</span> &amp;&amp; i + dx[k] &lt;= n &amp;&amp; j + dy[k] &gt;= <span class="hljs-number">1</span> &amp;&amp; j + dy[k] &lt;= m)<br>                    addedge(getid(i + dx[k] , j + dy[k]) , cnt , inf);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; sum - isap(s , t , cnt + <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p><strong>剑之所指，心之所向，身之所往！！</strong></p>
<p>(end)</p>
]]></content>
      <categories>
        <category>ACM-网络流-最大权闭合子图</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>栈</title>
    <url>/2018/05/10/%E6%A0%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="栈的定义："><a href="#栈的定义：" class="headerlink" title="栈的定义："></a>栈的定义：</h2><ul>
<li>栈（stack)是一种元素满足后进先出（Last in first out,LIFO) 规则的线性表；</li>
<li>对栈的操作是在 表尾 进行；</li>
<li><strong> 栈底 （bottom)</strong>：栈的表头，<strong> 栈顶 (top)</strong>：栈的表尾；</li>
<li><strong> 入栈 (push)</strong>：向栈内添加元素，<strong> 出栈 (pop)</strong>：删除元素；</li>
<li><strong> 空栈 </strong>：没有任何元素的栈；</li>
<li>栈的主要操作：入栈、出栈、判断栈空；</li>
</ul>
<span id="more"></span>
<h2 id="c-栈的实现："><a href="#c-栈的实现：" class="headerlink" title="c++栈的实现："></a>c++栈的实现：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    Stack(<span class="hljs-keyword">int</span> size)<br>    &#123;<br>        maxSize = size;                     <span class="hljs-comment">//设置最大容量</span><br>        top = <span class="hljs-number">-1</span>;                           <span class="hljs-comment">//初始化为空栈</span><br>        elements = <span class="hljs-keyword">new</span> DataType[size];      <span class="hljs-comment">//分配空间</span><br>    &#125;<br>    ~Stack()<br>    &#123;<br>        <span class="hljs-keyword">delete</span> [] elements;<br>    &#125;<br><br>    <span class="hljs-comment">//入栈操作</span><br>    <span class="hljs-function">Bool <span class="hljs-title">push</span> <span class="hljs-params">(DataType data)</span></span>;<br>    <span class="hljs-comment">//出栈操作</span><br>    <span class="hljs-function">DataType <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>    DataType *elements;                     <span class="hljs-comment">//数据域指针</span><br>    <span class="hljs-keyword">int</span> top;                                <span class="hljs-comment">//栈顶</span><br>    <span class="hljs-keyword">int</span> maxSize;                            <span class="hljs-comment">//栈的最大容量</span><br>&#125;;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt; DataType Stack&lt;DataType&gt;::push(DataType data)<br>&#123;<br>    <span class="hljs-keyword">if</span> (top == maxSize)                     <span class="hljs-comment">//判断是否栈满</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    elements[++top] = data;                 <span class="hljs-comment">//从栈顶压入元素</span><br>    <span class="hljs-keyword">return</span> ture;<br>&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> DataType&gt; DataTpye Stack&lt;DataType&gt;::pop()<br>&#123;<br>    <span class="hljs-keyword">if</span> (pop == <span class="hljs-number">-1</span>)                          <span class="hljs-comment">//判断是否栈空</span><br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> elements[top--];                 <span class="hljs-comment">//返回栈顶元素</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Stack&lt;<span class="hljs-keyword">int</span>&gt; s = Stack&lt;<span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">6</span>);<br>    <span class="hljs-keyword">int</span> temp;<br>    temp = s.push(<span class="hljs-number">23</span>);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; temp &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    temp = s.pop();<br>    <span class="hljs-built_in">cout</span> &lt;&lt; temp &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h2 id="c-stack的使用："><a href="#c-stack的使用：" class="headerlink" title="c++ stack的使用："></a>c++ stack的使用：</h2><ul>
<li>头文件：<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br></code></pre></td></tr></table></figure></li>
<li>声明一个栈：<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">stack</span> &lt;DataType&gt; p;<br></code></pre></td></tr></table></figure></li>
<li>相关函数：<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">p.empty();		<span class="hljs-comment">//如果是空栈，返回真值，否则返回假值</span><br>p.size();		<span class="hljs-comment">//返回栈中元素的个数</span><br>p.top();		<span class="hljs-comment">//返回栈顶元素的**值**，但不删除该元素</span><br>p.pop();		<span class="hljs-comment">//删除栈顶元素，但不返回其值</span><br>p.push(k);		<span class="hljs-comment">//压入新元素k</span><br></code></pre></td></tr></table></figure>
</li>
</ul>
<p>如果是解题，使用stack模板更快且不易出错，，，<br>但是也要了解其如何实现的。。。。(๑•̀ㅂ•́)و✧</p>
<p>End—</p>
]]></content>
      <tags>
        <tag>acm</tag>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>求树的直径、树中最长路</title>
    <url>/2019/03/16/%E6%B1%82%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84%E3%80%81%E6%A0%91%E4%B8%AD%E6%9C%80%E9%95%BF%E8%B7%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>对于一颗有边权的树，，它的直径表示树中最远的两个节点之间的距离，，，</p>
<p>可以通过两次深搜（广搜）来求出直径</p>
<span id="more"></span>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>从任意起点s开始，，求出到s的最远的节点node，，然后再从node开始求出到node最远的节点，，，搜索的过程中更新节点的值和距离，，</p>
<p><a href="https://www.cnblogs.com/ywjblog/p/9254997.html">（貌似还可以用树形dp来求，，，</a></p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="旅行商问题"><a href="#旅行商问题" class="headerlink" title="旅行商问题"></a><a href="https://ac.nowcoder.com/acm/contest/547/E">旅行商问题</a></h2><p>刚刚做的一道题，，当时感觉是两倍的权值和减去一个最远的路，，，但是当时不会求最远的路的距离，，就放弃了，，，后来有人说就是这个思想，，，就看了一下树的直径怎么求，，，当然这题是求出到节点1最远的路，，不是直径，，，</p>
<p>红书上的板子有点长，，而且建图方式不怎么用，，就不管了，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;vector&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, next, w;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> tot, head[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].w = w;<br>    edge[tot].next = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> ans, node, sum;<br><span class="hljs-keyword">int</span> dis[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(!vis[v])<br>        &#123;<br>            vis[v] = <span class="hljs-literal">true</span>;<br>            dis[v] = dis[u] + edge[i].w;<br>            <span class="hljs-keyword">if</span>(dis[v] &gt; ans)<br>            &#123;<br>                ans = dis[v];<br>                node = v;<br>            &#125;<br>            dfs(v);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    q.push(s);<br>    vis[s] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front(); q.pop();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(!vis[v])<br>            &#123;<br>                vis[v] = <span class="hljs-literal">true</span>;<br>                dis[v] = dis[u] + edge[i].w;<br>                q.push(v);<br>                <span class="hljs-keyword">if</span>(dis[v] &gt; ans)<br>                &#123;<br>                    ans = dis[v];<br>                    node = v;<br>                &#125;<br>            &#125;<br>        &#125;    <br>    &#125;<br>    <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// memset(dis, 0, sizeof dis);</span><br>    <span class="hljs-comment">// memset(vis, false, sizeof vis);</span><br>    <span class="hljs-comment">// ans = 0;</span><br>    <span class="hljs-comment">// node = 0;</span><br>    <span class="hljs-comment">// vis[1] = true;</span><br>    <span class="hljs-comment">// dfs(1);</span><br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dis);<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    ans = <span class="hljs-number">0</span>;<br>    node = <span class="hljs-number">0</span>;<br>    vis[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>    bfs(<span class="hljs-number">1</span>, n);<br>    ans = sum * <span class="hljs-number">2</span> - ans;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">int</span> n; <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">int</span> u, v, w;<br>    init();<br>    sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>        addedge(u, v, w);<br>        addedge(v, u, w);<br>        sum += w;<br>    &#125;<br>    solve(n);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h2 id="Roads-in-the-North"><a href="#Roads-in-the-North" class="headerlink" title="Roads in the North"></a><a href="http://poj.org/problem?id=2631">Roads in the North</a></h2><p>裸题，，求树的最长路，，也就是直径，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;vector&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, next, w;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> tot, head[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].w = w;<br>    edge[tot].next = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> dis[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> ans, node;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(!vis[v])<br>        &#123;<br>            dis[v] = dis[u] + edge[i].w;<br>            vis[v] =<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(dis[v] &gt; ans)<br>            &#123;<br>                ans = dis[v];<br>                node = v;<br>            &#125;<br>            dfs(v);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dis);<br>    ans = <span class="hljs-number">0</span>;<br>    node = <span class="hljs-number">0</span>;<br>    vis[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>    dfs(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dis);<br>    vis[node] = <span class="hljs-literal">true</span>;<br>    ans = <span class="hljs-number">0</span>;<br>    dfs(node);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, ans);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br>    init();<br>    <span class="hljs-keyword">int</span> u, v, w;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w))<br>    &#123;<br>        addedge(u, v, w);<br>        addedge(v, u, w);<br>    &#125;<br>    solve();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>(end)</p>
]]></content>
      <categories>
        <category>ACM-图论-树的直径</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编笔记_第一章</title>
    <url>/2018/12/25/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>马上要期末了，，，浪了一学期，，现在开始复(yu)习(xi)了，，，QAQ</p>
<p>汇编其实不难，，把概念记住基本就没问题了，，</p>
<p>所以，写这几篇博客的目的就是做个复习的笔记，，把我认为（或者说对于我来说）重要的东西记录以下，，如果有什么错误的地方也希望能指出来，，</p>
<p>主要内容都是 <em>王爽《汇编语言》</em> 这本书和老师的ppt上的摘抄，理解</p>
<span id="more"></span>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="汇编语言定义"><a href="#汇编语言定义" class="headerlink" title="汇编语言定义"></a>汇编语言定义</h2><blockquote>
<p>汇编语言是一种 <strong>符号化的机器语言</strong> ，即用 <strong>指令助记符</strong> 、 <strong>符号地址</strong> 、 <strong>标号</strong> 等符号书写程序的语言。</p>
</blockquote>
<h2 id="用汇编语言编写程序的工作过程"><a href="#用汇编语言编写程序的工作过程" class="headerlink" title="用汇编语言编写程序的工作过程"></a>用汇编语言编写程序的工作过程</h2><p><strong>汇编器(assembler)</strong>: 一种工具程序，将 汇编程序 转化为 机器语言；<br><strong>链接器(linker)</strong>: 把 汇编生成的单个文件 组合成一个 可执行文件；<br><strong>调试器(debugger)</strong>: 在程序运行时，跟踪 程序执行过程 和 各器件状态；</p>
<h2 id="汇编语言的组成"><a href="#汇编语言的组成" class="headerlink" title="汇编语言的组成"></a>汇编语言的组成</h2><p>汇编语言有3类指令组成：</p>
<ul>
<li>汇编指令： 机器码的助记符，有对应的机器码；</li>
<li>伪指令： 由编译器执行，没有对应的机器码，计算机不执行；</li>
<li>其他符号： 由编译器识别，没有对应的机器码，如+、-、*、/等</li>
</ul>
<h2 id="指令系统的的分类："><a href="#指令系统的的分类：" class="headerlink" title="指令系统的的分类："></a>指令系统的的分类：</h2><ul>
<li>算逻运算类</li>
<li>数据传送类</li>
<li>指令控制类</li>
<li>I/O类</li>
<li>其他</li>
</ul>
<h2 id="I-O子系统"><a href="#I-O子系统" class="headerlink" title="I/O子系统"></a>I/O子系统</h2><p>I/O软件被组织成从高到低的四个层次：</p>
<ul>
<li>用户层I/O软件（I/O函数调用系统调用）</li>
<li>与设备无关的操作系统I/O软件</li>
<li>设备驱动程序</li>
<li>I/O中断处理程序</li>
</ul>
<h2 id="储存器"><a href="#储存器" class="headerlink" title="储存器"></a>储存器</h2><ul>
<li>储存器被划分为若干个 <strong>储存单元</strong>，每个单元从0开始顺序编号；</li>
<li>储存的信息： <strong>指令</strong> 和 <strong>数据</strong> ， 在内存或磁盘上二者没有区别都是二进制信息；</li>
</ul>
<h3 id="内存读写"><a href="#内存读写" class="headerlink" title="内存读写"></a>内存读写</h3><p>CPU要进行数据的读写，必须和外部器件进行3类信息的交互：</p>
<ul>
<li>地址信息：储存单元的地址</li>
<li>控制信息：器件的选择，读或写的命令</li>
<li>数据信息：读或写的数据</li>
</ul>
<p>计算机中专门由 <strong>连接CPU</strong> 和 <strong>其他芯片</strong> 的 <strong>导线</strong>，通常为 <strong>总线</strong>；</p>
<p>物理上：一根根导线的集合；<br>逻辑上划分为： <strong>地址总线</strong> 、 <strong>数据总线</strong> 、 <strong>控制总线</strong>；</p>
<h3 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h3><h4 id="地址总线"><a href="#地址总线" class="headerlink" title="地址总线"></a>地址总线</h4><p>CPU是通过地址总线来制定存储的单元的；</p>
<p>总线的宽度决定了 <strong>物理寻址的范围</strong>；</p>
<p>一个CPU有 $N$ 根地址总线，CPU最多可以寻找 $2^N$个内存单元；</p>
<h4 id="数据总线"><a href="#数据总线" class="headerlink" title="数据总线"></a>数据总线</h4><p>数据总线的宽度决定了 <strong>CPU和外界进行一次数据传送</strong> 的 <strong>位数</strong>；</p>
<p>例如，8根数据总线一次可以传送一个8为二进制数据（即一个字节），16的就是两个字节；</p>
<h4 id="控制总线"><a href="#控制总线" class="headerlink" title="控制总线"></a>控制总线</h4><p>不同的控制线的集合，控制总线的宽度决定了 <strong>CPU对外部器件的控制能力</strong>；</p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><ul>
<li>一个CPU的寻址能力为8KB，那么它的地址总线的宽度为13；1kB = 1024B,8kB = $2^{13}$ B</li>
<li>1KB的存储器可以存储 $2^{13}$ 个bit,1024个Byte;1Byte = 8bit,1KB = $2^{10} Byte = $8 * 2^{10}$ bit = $2^{13}$ bit</li>
</ul>
<p>(end)</p>
]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编笔记_第七章</title>
    <url>/2018/12/26/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%83%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="更灵活的定位内存地址的方法"><a href="#更灵活的定位内存地址的方法" class="headerlink" title="更灵活的定位内存地址的方法"></a>更灵活的定位内存地址的方法</h1><h2 id="and和or指令"><a href="#and和or指令" class="headerlink" title="and和or指令"></a>and和or指令</h2><ul>
<li>and指令：逻辑与指令，按位进行与运算；</li>
<li>通过该指令可以将操作对象的相应为设为0，其他位不变，例如将al的第6为设为0的指令是：<code>and al,10111111B</code></li>
</ul>
<span id="more"></span>
<ul>
<li>or指令，逻辑或指令，按位进行或运算；</li>
<li>同样，或运算可以将操作对象的相应设为1，其他位不变：<code>or al,01000000B</code>；</li>
</ul>
<h2 id="字符大小写转换"><a href="#字符大小写转换" class="headerlink" title="字符大小写转换"></a>字符大小写转换</h2><ul>
<li>汇编程序中，用<code>&#39;...&#39;</code>来指明数据是以字符的形式给出的，编译器将把他们转化成对应的ASCII码；</li>
<li>对比大写字母和小写字母的二进制，小写字母的ascii码值比大学字母的大 <strong>20H</strong>，而且除第5位以外其他位都一样，大写字母的第五位为0，小写字母的为1；</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>大写</th>
<th>二进制</th>
<th>小写</th>
<th>二进制</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>01000001</td>
<td>a</td>
<td>01100001</td>
</tr>
<tr>
<td>B</td>
<td>01000010</td>
<td>b</td>
<td>01100010</td>
</tr>
<tr>
<td>C</td>
<td>01000011</td>
<td>c</td>
<td>01100011</td>
</tr>
<tr>
<td>D</td>
<td>01000100</td>
<td>d</td>
<td>01100100</td>
</tr>
</tbody>
</table>
</div>
<p>所以可以通过与或操作来实现：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">...</span><br><span class="hljs-keyword">add</span> al,<span class="hljs-number">11011111</span>B<span class="hljs-comment">;变大写字母</span><br><span class="hljs-symbol">...</span><br><span class="hljs-symbol">or</span> al,<span class="hljs-number">00100000</span>B<span class="hljs-comment">;变小写字母</span><br><span class="hljs-symbol">...</span><br></code></pre></td></tr></table></figure>
<h2 id="bx-idata"><a href="#bx-idata" class="headerlink" title="[bx + idata]"></a>[bx + idata]</h2><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mov</span> al,[<span class="hljs-keyword">bx</span> + <span class="hljs-number">5</span>]<br><span class="hljs-keyword">mov</span> al,[<span class="hljs-number">5</span> + bx]<br><span class="hljs-keyword">mov</span> al,<span class="hljs-number">5</span>[bx]<br><br><span class="hljs-keyword">mov</span> al,[<span class="hljs-keyword">bx</span> + <span class="hljs-number">0</span>]<br><span class="hljs-keyword">mov</span> al,[<span class="hljs-number">0</span> + bx]<br><span class="hljs-keyword">mov</span> al,<span class="hljs-number">0</span>[bx]<br><br>都是等价的<br></code></pre></td></tr></table></figure>
<h2 id="SI和DI"><a href="#SI和DI" class="headerlink" title="SI和DI"></a>SI和DI</h2><ul>
<li>SI和DI是8086CPU中和bx功能相近的寄存器；</li>
<li>他们不能分成两个8位寄存器使用；</li>
<li><p>可以使用[bx + si]、[bx + di]指明内存单元，指令<code>mov ax,[bx + si]</code>可以写成<code>mov ax,[bx][si]</code>；</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mov</span> ax[bx+si+idata]<br>可以写成：<br><span class="hljs-keyword">mov</span> ax,[bx+<span class="hljs-number">200</span>+si]<br><span class="hljs-keyword">mov</span> ax,[<span class="hljs-number">200</span>+bx+si]<br><span class="hljs-keyword">mov</span> ax,<span class="hljs-number">200</span>[bx][si]<br><span class="hljs-keyword">mov</span> ax,[bx].<span class="hljs-number">200</span>[si]<br><span class="hljs-keyword">mov</span> ax,[bx][si].<span class="hljs-number">200</span><br></code></pre></td></tr></table></figure>
<h2 id="不同的寻址方式的灵活运用"><a href="#不同的寻址方式的灵活运用" class="headerlink" title="不同的寻址方式的灵活运用"></a>不同的寻址方式的灵活运用</h2></li>
<li><p>一般来说，在需要暂存数据的时候，需要栈来保存；</p>
</li>
<li>例如：<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-comment">//将每一行的字母都变为大写</span><br><br><span class="hljs-symbol">assume</span> cs:codesg,ds:datasg,ss:stacksg<br><span class="hljs-symbol">datasg</span> segment<br><span class="hljs-symbol">db</span> <span class="hljs-string">&#x27;ibm           &#x27;</span><br><span class="hljs-symbol">db</span> <span class="hljs-string">&#x27;dec           &#x27;</span><br><span class="hljs-symbol">db</span> <span class="hljs-string">&#x27;dos           &#x27;</span><br><span class="hljs-symbol">db</span> <span class="hljs-string">&#x27;vax           &#x27;</span><br><span class="hljs-symbol">datasg</span> ends<br><br><span class="hljs-symbol">stacksg</span> segment<br><span class="hljs-symbol">dw</span> <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br><span class="hljs-symbol">stacksg</span> ends<br><br><span class="hljs-symbol">cosesg</span> segment<br><br><span class="hljs-symbol">start:</span><br><span class="hljs-keyword">mov</span> ax,stacksg<br><span class="hljs-keyword">mov</span> ss,ax<br><span class="hljs-keyword">mov</span> ds,ax<br><span class="hljs-keyword">mov</span> bx,<span class="hljs-number">0</span><br><br><span class="hljs-keyword">mov</span> cx,<span class="hljs-number">4</span><br><br><span class="hljs-symbol">s0:</span><br><span class="hljs-keyword">push</span> cx     <span class="hljs-comment">//保存外层循环的cx</span><br><span class="hljs-keyword">mov</span> si,<span class="hljs-number">0</span><br><span class="hljs-symbol">mob</span> cx,<span class="hljs-number">3</span>    <span class="hljs-comment">//设置内层循环的cx</span><br><br>s:<br><span class="hljs-keyword">mov</span> al,[bx+si]<br><span class="hljs-keyword">and</span> al,<span class="hljs-number">11011111</span>b<br><span class="hljs-keyword">mov</span> [bx+si],al<br><span class="hljs-symbol">inc</span> si<br><span class="hljs-symbol">loop</span> s<br><br><span class="hljs-keyword">add</span> bx,<span class="hljs-number">16</span><br><span class="hljs-keyword">pop</span> cx      <span class="hljs-comment">//恢复外层循环cx的值</span><br><span class="hljs-symbol">loop</span> <span class="hljs-built_in">s0</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-number">4</span>c00h<br><span class="hljs-symbol">int</span> <span class="hljs-number">21</span>h<br><br><span class="hljs-symbol">codesg</span> ends<br><span class="hljs-symbol">end</span> start<br></code></pre></td></tr></table></figure>
</li>
</ul>
<p>(end)</p>
]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编笔记_第三章</title>
    <url>/2018/12/26/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%89%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="寄存器内存访问"><a href="#寄存器内存访问" class="headerlink" title="寄存器内存访问"></a>寄存器内存访问</h1><h2 id="内存器中字的存储"><a href="#内存器中字的存储" class="headerlink" title="内存器中字的存储"></a>内存器中字的存储</h2><ul>
<li>大端方式：高位字节排放在内存的低地址端，低位字节存放在高地址端；（现在见到的都是大端方式）</li>
<li>小端方式：低位字节存放在内存的低地址端，高位字节存放在高地址端；</li>
</ul>
<span id="more"></span>
<h2 id="DS和-address"><a href="#DS和-address" class="headerlink" title="DS和[address]"></a>DS和[address]</h2><ul>
<li>执行指令时，8086CPU自动取DS中的数据作为内存单元的段地址；</li>
<li>不能直接将数据送到DS中，必须 <em>数据-&gt;一般的寄存器-&gt;段寄存器</em>；</li>
</ul>
<p>例如：</p>
<p><code>mov bx,1000H</code></p>
<p><code>mov ds,bx</code></p>
<p><code>mov [0],al</code></p>
<h2 id="字的传送"><a href="#字的传送" class="headerlink" title="字的传送"></a>字的传送</h2><ul>
<li>8086CPU是16位结构，有16根数据线，一次可以传送16位的数据，也就是一次可以传送一个字；(P50的问题3.3、3.4)</li>
</ul>
<h2 id="mov、add、sub指令"><a href="#mov、add、sub指令" class="headerlink" title="mov、add、sub指令"></a>mov、add、sub指令</h2><p>mov指令的几种形式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">mov 寄存器,数据<br><br>mov 寄存器,寄存器<br><br>mov 寄存器,内存单元<br><br>mov 内存单元,寄存器<br><br>mov 段寄存器,寄存器<br></code></pre></td></tr></table></figure>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><ul>
<li>8086CPU中的入栈和出栈操作都是以 <strong>字</strong> 为单位的；</li>
<li>任意时刻，SS:SP指向栈顶元素；</li>
</ul>
<h3 id="push指令的执行过程"><a href="#push指令的执行过程" class="headerlink" title="push指令的执行过程"></a>push指令的执行过程</h3><p><code>push ax</code></p>
<ul>
<li>SP = SP - 2;</li>
<li>将ax中的内容送入到SS:SP指向的内存单元处，SS:SP此时指向新栈顶；</li>
<li>栈空时，SS:SP指向栈空间最高地址单元的下一个单元；</li>
</ul>
<h3 id="pop指令的执行过程"><a href="#pop指令的执行过程" class="headerlink" title="pop指令的执行过程"></a>pop指令的执行过程</h3><p><code>pop ax</code></p>
<ul>
<li>将SS:SP指向的内存单元出的数据送入ax中；</li>
<li>SP = SP + 2；</li>
</ul>
<h2 id="栈顶超界的问题"><a href="#栈顶超界的问题" class="headerlink" title="栈顶超界的问题"></a>栈顶超界的问题</h2><ul>
<li>当 <strong>栈满的时候再使用push指令入栈</strong> 、 <strong>栈空的时候再使用pop指令出栈</strong> 都会发生栈顶超界问题；</li>
<li>8086CPU不保证对栈的操作不会超界；</li>
</ul>
<h3 id="push、pop指令"><a href="#push、pop指令" class="headerlink" title="push、pop指令"></a>push、pop指令</h3><ul>
<li><p><code>push/pop 寄存器、段寄存器、内存单元</code></p>
</li>
<li><p>栈可以保存寄存器的数据，恢复时出栈的顺序要和入栈的顺序相反；</p>
</li>
<li>栈可以向一个地址处的内存单元写入数据，先设置ss,sp的值然后push；</li>
<li>栈顶sp的变化范围为0~FFFFH；</li>
</ul>
<h2 id="段地综述"><a href="#段地综述" class="headerlink" title="段地综述"></a>段地综述</h2><ul>
<li>对于数据段，段地址存放在DS中</li>
<li>对于代码段，段地址存放在CS，段中的第一条指令的偏移地址在IP中；</li>
<li>对于栈段，段地址存放在SS中，栈顶的偏移地址存放在SP中；</li>
</ul>
]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编笔记_第九章</title>
    <url>/2018/12/27/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B9%9D%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="转移指令的原理"><a href="#转移指令的原理" class="headerlink" title="转移指令的原理"></a>转移指令的原理</h1><p>8086CPU的转移指令分为以下几类：</p>
<ul>
<li>无条件转移指令（如：<code>jmp</code>）</li>
<li>条件转移指令</li>
<li>循环指令（如：<code>loop</code>）</li>
<li>过程</li>
<li>中断</li>
</ul>
<span id="more"></span>
<h2 id="操作符offset"><a href="#操作符offset" class="headerlink" title="操作符offset"></a>操作符offset</h2><p>offset的功能是 <strong>取得标号的偏移地址</strong>，是伪操作符；</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">assume</span> cs:codesg<br><span class="hljs-symbol">codesg</span> segment<br><span class="hljs-symbol">start:</span><br><span class="hljs-keyword">mov</span> ax,offset start <span class="hljs-comment">;相当于mov ax,0</span><br>s:<br><span class="hljs-keyword">mov</span> ax,offset s     <span class="hljs-comment">;相当于mov ax,3</span><br><span class="hljs-symbol">codesg</span> ends<br><span class="hljs-symbol">end</span> start<br></code></pre></td></tr></table></figure>
<p>例题：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">assume</span> cs:codesg<br><span class="hljs-symbol">codesg</span> segment<br><br><span class="hljs-symbol">start:</span><br><span class="hljs-keyword">mov</span> ax,<span class="hljs-keyword">bx</span>   <span class="hljs-comment">;mov ax,bx的机器码占两个字节</span><br><span class="hljs-keyword">mov</span> si,offset start<br><span class="hljs-keyword">mov</span> di,offset <span class="hljs-built_in">s0</span><br><br><span class="hljs-keyword">mov</span> ax,cs:[si]<br><span class="hljs-keyword">mov</span> cs:[di],ax<br><br><span class="hljs-symbol">s0:</span><br><span class="hljs-keyword">nop</span>         <span class="hljs-comment">;nop的机器码占一个字节</span><br><span class="hljs-symbol">nop</span><br><br><span class="hljs-symbol">codesg</span> ends<br><span class="hljs-symbol">end</span> start<br></code></pre></td></tr></table></figure>
<h2 id="jmp指令"><a href="#jmp指令" class="headerlink" title="jmp指令"></a>jmp指令</h2><ul>
<li>jmp为无条件转移，可以只修改IP，也可以同时修改CS和IP；</li>
<li>jmp指令要给出两种信息：<strong>转移的目的地址</strong>、<strong>转移的距离（段间转移、段内短转移、段内近转移）</strong>；</li>
</ul>
<h2 id="依据位移进行转移的jmp指令"><a href="#依据位移进行转移的jmp指令" class="headerlink" title="依据位移进行转移的jmp指令"></a>依据位移进行转移的jmp指令</h2><p><code>jmp short 标号（转到标号处执行指令）</code></p>
<ul>
<li>段内短转移</li>
<li>IP的修改范围为 <strong>-128~127</strong>；</li>
</ul>
<p><code>jmp short 标号</code>的功能为：</p>
<ul>
<li>(IP)=(IP)+8位位移；</li>
<li>8位位移=“标号”处的地址-jmp指令后的第一个字节的地址；</li>
<li>short指明此处的位移位8位位移；</li>
<li>8位位移的范围位-128~127，用补码表示；</li>
<li>8位位移由编译程序在编译时算出；</li>
</ul>
<p>CPU在执行jmp short 标号指令时只需知道转移的位移就行；</p>
<p><code>jmp near ptr 标号</code></p>
<p>实现 段内近转移，(IP)=(IP)+16位位移；</p>
<ul>
<li>16位位移=“标号”处的地址-jmp指令后的第一个字节的地址；</li>
<li>near ptr指明此处的位移位16位位移；</li>
<li>16位位移的范围位-32769~32767，用补码表示；</li>
<li>16位位移由编译程序在编译时算出</li>
</ul>
<h2 id="转移的目的地址-在指令中-的jmp指令"><a href="#转移的目的地址-在指令中-的jmp指令" class="headerlink" title="转移的目的地址 在指令中 的jmp指令"></a>转移的目的地址 <strong>在指令中</strong> 的jmp指令</h2><p>上面两个jmp指令相当于当前IP的转移位移；</p>
<p><code>jmp far ptr 标号</code>实现的是 <strong>段间转移，又称远转移</strong>；</p>
<ul>
<li>(CS)=标号所在段的段地址；</li>
<li>(IP)=标号所在段中的偏移地址；</li>
<li>far ptr指明了指令用标号的段地址和偏移地址修改CS和IP；</li>
</ul>
<h2 id="转移地址在-寄存器-中的jmp指令"><a href="#转移地址在-寄存器-中的jmp指令" class="headerlink" title="转移地址在 寄存器 中的jmp指令"></a>转移地址在 <strong>寄存器</strong> 中的jmp指令</h2><p>指令格式：</p>
<p><code>jmp 16位寄存器</code></p>
<p>功能：IP=(16位寄存器)；</p>
<h2 id="转移指令在-内存-中的jmp指令"><a href="#转移指令在-内存-中的jmp指令" class="headerlink" title="转移指令在 内存 中的jmp指令"></a>转移指令在 <strong>内存</strong> 中的jmp指令</h2><p><code>jmp word ptr 内存的单元地址（段内转移）</code></p>
<p>功能：从内存的单元地址处开始存放着一个字，事转移的目的偏移地址；</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mov</span> ax,<span class="hljs-number">0123</span>h<br><span class="hljs-keyword">mov</span> ds:[<span class="hljs-number">0</span>],ax<br><span class="hljs-symbol">jmp</span> word ptr ds<span class="hljs-comment">;[0]</span><br><br>执行后(<span class="hljs-built_in">IP</span>)<span class="hljs-number">=0123</span>h<br><br><span class="hljs-keyword">mov</span> ax,<span class="hljs-number">0123</span>h<br><span class="hljs-keyword">mov</span> [bx],ax<br><span class="hljs-symbol">jmp</span> word ptr [bx]<br></code></pre></td></tr></table></figure>
<p><code>jmp dword ptr 内存单元地址（段间转移）</code></p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mov</span> ax,<span class="hljs-number">0123</span>h<br><span class="hljs-keyword">mov</span> ds:[<span class="hljs-number">0</span>],ax<br><span class="hljs-keyword">mov</span> word ptr ds:[<span class="hljs-number">2</span>],<span class="hljs-number">0</span><br><span class="hljs-symbol">jmp</span> dword ptr ds:[<span class="hljs-number">0</span>]<br><br>执行后(CS)<span class="hljs-number">=0</span>,(<span class="hljs-built_in">IP</span>)<span class="hljs-number">=0123</span>h,CS:<span class="hljs-built_in">IP</span>指向<span class="hljs-number">0000</span>:<span class="hljs-number">0123</span><br><br><span class="hljs-keyword">mov</span> ax,<span class="hljs-number">0123</span>h<br><span class="hljs-keyword">mov</span> [bx],ax<br><span class="hljs-keyword">mov</span> word ptr [bx+<span class="hljs-number">2</span>],<span class="hljs-number">0</span><br><span class="hljs-symbol">jmp</span> dword ptr[bx]<br></code></pre></td></tr></table></figure>
<h2 id="jcxz指令"><a href="#jcxz指令" class="headerlink" title="jcxz指令"></a>jcxz指令</h2><ul>
<li>jcxz指令位有条件转移指令；</li>
<li>所有的有条件转移指令都是 <strong>短转移</strong>；</li>
<li>对应的机器码中包含转移的 <strong>位移</strong>，而不是目的地址，对IP的修改范围都为-128~127；</li>
<li>指令格式: <code>jcxz 标号</code>，（如果(cx)=0，则转移到标号处执行）；</li>
</ul>
<p>例题：利用 jcxz 指令，实现在内存2000h段中查找第一个值为0的字节，找到后将偏移地址存储到dx中：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">assume</span> cs:<span class="hljs-meta">code</span><br><br><span class="hljs-symbol">code</span> segment<br><br><span class="hljs-symbol">start:</span><br><span class="hljs-keyword">mov</span> ax,<span class="hljs-number">2000</span>h<br><span class="hljs-keyword">mov</span> ds,ax<br><span class="hljs-keyword">mov</span> bx,<span class="hljs-number">0</span><br><br>s:<br><span class="hljs-keyword">mov</span> ch,<span class="hljs-number">0</span><br><span class="hljs-keyword">mov</span> cl,ds:[bx]<br><span class="hljs-symbol">jcxz</span> ok<br><span class="hljs-symbol">inc</span> bx<br><span class="hljs-symbol">jmp</span> short s<br><br><span class="hljs-symbol">ok:</span><br><span class="hljs-keyword">mov</span> dx,bx<br><br><span class="hljs-keyword">mov</span> ax,<span class="hljs-number">4</span>c00h<br><span class="hljs-symbol">int</span> <span class="hljs-number">21</span>h<br><br><span class="hljs-symbol">code</span> ends<br><span class="hljs-symbol">end</span> start<br></code></pre></td></tr></table></figure>
<h2 id="loop指令"><a href="#loop指令" class="headerlink" title="loop指令"></a>loop指令</h2><ul>
<li>loop为循环指令；</li>
<li>所有的循环指令都是短转移；</li>
</ul>
<p>loop 标号：</p>
<ul>
<li>(cx)=(cx)-1;</li>
<li>如果 $(cx) \neq 0$,(IP)=(IP)+8位位移；</li>
<li>8位位移=“标号”处的地址-loop指令后的第一个字节的地址；</li>
</ul>
<p>例题：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-comment">;找到2000h段中第一个值为0的字节</span><br><br><span class="hljs-symbol">assume</span> cs:<span class="hljs-meta">code</span><br><span class="hljs-symbol">code</span> segment<br><span class="hljs-symbol">start:</span><br><span class="hljs-keyword">mov</span> ax,<span class="hljs-number">2000</span>H<br><span class="hljs-symbol">mob</span> ds,ax<br><span class="hljs-keyword">mov</span> bx,<span class="hljs-number">0</span><br><br>s:<br><span class="hljs-keyword">mov</span> al,[bx]<br><span class="hljs-keyword">mov</span> ch,<span class="hljs-number">0</span><br><span class="hljs-symbol">inc</span> cx  <span class="hljs-comment">;若该字节为零，那么现在递增为1，之后的loop会使cx减一为零自动退出循环，</span><br><span class="hljs-symbol">inc</span> bx<br><span class="hljs-symbol">loop</span> s<br><br><span class="hljs-symbol">ok:</span><br><span class="hljs-symbol">dec</span> <span class="hljs-keyword">bx</span>      <span class="hljs-comment">;dec指令的功能和inc相反</span><br><span class="hljs-keyword">mov</span> dx,bx<br><span class="hljs-keyword">mov</span> ax,<span class="hljs-number">4</span>c00h<br><span class="hljs-symbol">int</span> <span class="hljs-number">21</span>h<br><br><span class="hljs-symbol">code</span> ends<br><span class="hljs-symbol">end</span> start<br></code></pre></td></tr></table></figure>
<h2 id="根据位移进行转移的意义"><a href="#根据位移进行转移的意义" class="headerlink" title="根据位移进行转移的意义"></a>根据位移进行转移的意义</h2><p><code>jmp short 标号</code></p>
<p><code>jmp near ptr 标号</code></p>
<p><code>jcxz 标号</code></p>
<p><code>loop 标号</code></p>
<p>对IP的修改是根据转移目的地址和转移起始地址之间的 <strong>位移</strong> 来进行的，这样设计方便程序段在内存中的浮动装配；</p>
<h2 id="编译器对转移位移超界的检测"><a href="#编译器对转移位移超界的检测" class="headerlink" title="编译器对转移位移超界的检测"></a>编译器对转移位移超界的检测</h2><p>原程序中出现转移范围超界的问题时，编译报错；<br>例如：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">assume</span> cs:<span class="hljs-meta">code</span><br><span class="hljs-symbol">code</span> segment<br><span class="hljs-symbol">start:</span><br><span class="hljs-symbol">jmp</span> short s<br><span class="hljs-symbol">db</span> <span class="hljs-number">128</span> dup(<span class="hljs-number">0</span>)<br>s:<br><span class="hljs-keyword">mov</span> ax,<span class="hljs-number">0</span>ffffh<br><span class="hljs-symbol">code</span> ends<br><span class="hljs-symbol">end</span> start<br></code></pre></td></tr></table></figure>
<p><code>jmp short s</code>的转移范围为-128~127，IP最多向后移动127个字节；</p>
<p>但如果在debug中使用汇编指令<code>jmp 2000:0100</code>就没有问题，如果在源程序里使用也会报错；</p>
<p>(end)</p>
]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编笔记_第二章</title>
    <url>/2018/12/25/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h1><p>8086寄存器组</p>
<p>一共14个寄存器</p>
<ul>
<li>数据寄存器：AX , BX , CX , DX;</li>
<li>段寄存器：CS , DS , ES , SS;</li>
<li>地址寄存器：SI , DI , SP , BP;</li>
<li>控制寄存器： IP , PSW(FLAGS)</li>
</ul>
<span id="more"></span>
<h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><ul>
<li>所有的寄存器都是16位的，可以存放两个字节；</li>
<li>AX , BX , CX , DX通常用来存放一般数据，被称为通用寄存器；</li>
<li>一个16位寄存器所能存储的数据最大值为： $2^{16} - 1$;</li>
</ul>
<h2 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h2><ul>
<li>段寄存器就是提供段地址的，访问内存时，有着4个段寄存器提供内存单元的段地址；</li>
<li>4个段寄存器：CS , DS , SS , ES;</li>
</ul>
<h1 id="内存地址的分配"><a href="#内存地址的分配" class="headerlink" title="内存地址的分配"></a>内存地址的分配</h1><h2 id="物理地址的形成"><a href="#物理地址的形成" class="headerlink" title="物理地址的形成"></a>物理地址的形成</h2><ul>
<li>8086有 <strong>20位</strong> 地址总线，可以传送20位地址，<strong>寻址能力为1M</strong>；</li>
<li>8086内部为16位结构，地址16位；</li>
<li>存储器采用 <strong>分段管理</strong>，将存储器划分位若干 <strong>逻辑段</strong>，每段最大64K字节单元，最小16B；</li>
<li>逻辑段的大小可变；</li>
<li>内存单元地址的描述： <strong>段基址:偏移量</strong>；</li>
<li>地址加法器合成物理地址的方法： <strong>物理地址=段地址*16 + 偏移地址</strong>；</li>
<li>在存储器中，每16个字节单元为一小段；</li>
<li>例如：某内存单元的地址为1234:5678H，则物理地址为 $12340H + 5678H = 179B8H$;</li>
<li>CPU可以用不同的段地址和偏移地址形成同一个物理地址；</li>
</ul>
<h2 id="段的类型"><a href="#段的类型" class="headerlink" title="段的类型"></a>段的类型</h2><ul>
<li>逻辑段有四种类型： <strong>代码段</strong> 、 <strong>数据段</strong> 、 <strong>附加段</strong> 、 <strong>堆栈段</strong>；</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">段名</th>
<th style="text-align:center">段寄存器</th>
<th>偏移地址</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">代码段</td>
<td style="text-align:center">CS</td>
<td>IP</td>
</tr>
<tr>
<td style="text-align:center">数据段</td>
<td style="text-align:center">DS</td>
<td>BX,SI,DI等地址寄存器</td>
</tr>
<tr>
<td style="text-align:center">附加段</td>
<td style="text-align:center">ES</td>
<td>BX,SI,DI等地址寄存器</td>
</tr>
<tr>
<td style="text-align:center">堆栈段</td>
<td style="text-align:center">SS</td>
<td>SP或BP</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>例题：给定段地址为0001H，仅通过变化偏移地址寻址，CPU的寻址范围为 <em>00010H</em> 到 <em>1000FH</em>;</li>
</ul>
<p>解：物理地址=SA*16+EA</p>
<p>EA变化范围为0H~FFFFH</p>
<p>所以物理地址的变化范围为：$(0001H<em>16 + 0H)~(0001H</em>16 + FFFFH)$;</p>
<p>就是00010H~1000FH;</p>
<ul>
<li>例题：有一数据存放在内存20000H单元中，现给定段地址SA，若想用偏移地址寻找到此单元，SA满足的条件是：最小是<em>1001H</em>，最大为<em>2000H</em>;</li>
</ul>
<p>解； </p>
<script type="math/tex; mode=display">\mathrm{
20000H=SA*16+EA
}</script><script type="math/tex; mode=display">\mathrm{
SA = (20000H - EA)/16
}</script><script type="math/tex; mode=display">\mathrm{
SA = 2000H - EA/16
}</script><script type="math/tex; mode=display">\mathrm{
EA\in[0000H , FFFFH]
}</script><script type="math/tex; mode=display">\mathrm{
SA\in[1001H , 2000H]
}</script><h1 id="特殊寄存器CS和IP"><a href="#特殊寄存器CS和IP" class="headerlink" title="特殊寄存器CS和IP"></a>特殊寄存器CS和IP</h1><ul>
<li>CS为 <strong>代码段寄存器</strong></li>
<li>IP为 <strong>指令指针寄存器</strong></li>
<li>CPU将CS:IP指向的内存单元中的内容看作指令</li>
<li>8086pc工作过程：1、从CS:IP指向的内存的单元读取指令，读取的指令进入指令缓冲器；2、IP=IP+所读取的指令的长度，从而指向下一条指令；3、执行指令，转到步骤1；</li>
<li>加电启动或复位后CS=FFFFH , IP=0000H</li>
<li>修改CS,IP的值：</li>
<li><code>jmp 段地址:偏移地址//同时修改CS、IP</code>,<br> <code>jmp 寄存器//用寄存器中的值修改IP</code></li>
</ul>
<h1 id="外部设备及IO地址空间"><a href="#外部设备及IO地址空间" class="headerlink" title="外部设备及IO地址空间"></a>外部设备及IO地址空间</h1><ul>
<li>每个外部设备的接口都有一组寄存器，每个寄存器都有一个端口地址；</li>
<li>8086提供的IO地址总线宽度总是16位的，所以允许的最大的IO寻址空间位64KB，寻址范围为0000H~FFFFH；</li>
<li>pc机中，由于IO地址空间是独立编址的，所以系统需要提供独立的 访问外设指令(IO指令)：IN,OUT</li>
</ul>
<h1 id="指令的寻址方式"><a href="#指令的寻址方式" class="headerlink" title="指令的寻址方式"></a>指令的寻址方式</h1><p>操作数的物理地址=段地址*10H + EA</p>
<h2 id="立即寻址方式"><a href="#立即寻址方式" class="headerlink" title="立即寻址方式"></a>立即寻址方式</h2><p><code>mov al,5</code></p>
<p><code>mov ax,3060H</code></p>
<h2 id="寄存器寻址方式"><a href="#寄存器寻址方式" class="headerlink" title="寄存器寻址方式"></a>寄存器寻址方式</h2><p><code>mov ax,bx</code></p>
<h2 id="直接寻址方式"><a href="#直接寻址方式" class="headerlink" title="直接寻址方式"></a>直接寻址方式</h2><h3 id="存储器读操作"><a href="#存储器读操作" class="headerlink" title="存储器读操作"></a>存储器读操作</h3><p><code>mov ax,ds:[2000H]</code></p>
<h3 id="存储器写操作"><a href="#存储器写操作" class="headerlink" title="存储器写操作"></a>存储器写操作</h3><p><code>mov ds:[4000H],ax</code></p>
<h3 id="符号地址"><a href="#符号地址" class="headerlink" title="符号地址"></a>符号地址</h3><p><code>mov ax,[value]</code></p>
<h3 id="段超越"><a href="#段超越" class="headerlink" title="段超越"></a>段超越</h3><p><code>mov ax,es:[value]</code></p>
<h2 id="间接寻址方式"><a href="#间接寻址方式" class="headerlink" title="间接寻址方式"></a>间接寻址方式</h2><p><code>mov ax,[bx]</code></p>
<p>$操作数的物理地址=(ds)*10H + {(bx) , (si) , (di)};$</p>
<p>$操作数的物理地址=(ss)*10H + (bp);$</p>
<p>四个间接寻址寄存器：<strong>BX , BP , SI , DI</strong>;</p>
<p><code>mov ax,[bx]</code></p>
<p>指令执行前：</p>
<p>$DS = 1500H$</p>
<p>$BX = 4580H$</p>
<p>$AX = 1010H$</p>
<p>$19580H = 64H$</p>
<p>$19581H = 23H$</p>
<p>$EA = BX = 4580H$</p>
<p>指令执行后：</p>
<p>$AX = 2364H$</p>
<h2 id="寄存器相对寻址方式"><a href="#寄存器相对寻址方式" class="headerlink" title="寄存器相对寻址方式"></a>寄存器相对寻址方式</h2><p><code>mov AX,TOP[SI]</code></p>
<p>指令执行前；</p>
<p>$DS =1500H$</p>
<p>$SI = 7310H$</p>
<p>$AX = 1010H$</p>
<p>$TOP = 25H$</p>
<p>$1C335H = 28H$</p>
<p>$1C336H = 24H$</p>
<p>$EA = TOP + SI = 7335H$</p>
<p>指令执行后；</p>
<p>$AX = 2428H$</p>
<h2 id="基址变址寻址方式"><a href="#基址变址寻址方式" class="headerlink" title="基址变址寻址方式"></a>基址变址寻址方式</h2><p><code>mov AX,[BX + DI]</code></p>
<p>执行前：</p>
<p>$DS = 2100H$</p>
<p>$BX = 0158H$</p>
<p>$DI = 10A5H$</p>
<p>$AX = 0FFFFH$</p>
<p>$221FDH = 34H$</p>
<p>$221FE - 12H$</p>
<p>有效地址:</p>
<p>$EA=BX+DI=0158+10A5=11FDH$</p>
<p>$物理地址=21000 + 11FD = 221FDH$</p>
<p>执行后：</p>
<p>$AX=1234H$</p>
<h2 id="相对基址变址寻址方式"><a href="#相对基址变址寻址方式" class="headerlink" title="相对基址变址寻址方式"></a>相对基址变址寻址方式</h2><p><code>mov AX,MASJ[BX[SI]</code></p>
<p><code>mov AX,[MASK + BX + SI]</code></p>
<p><code>mov AX,[BX + SI].MASK</code></p>
<p>有效地址：</p>
<p>$EA = MASK + BX + SI$</p>
<p>$物理地址=DS + EA$</p>
<p>看不懂233，，，，，</p>
<p>(end)</p>
]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编笔记_第八章</title>
    <url>/2018/12/27/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%85%AB%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="数据处理的两个基本问题"><a href="#数据处理的两个基本问题" class="headerlink" title="数据处理的两个基本问题"></a>数据处理的两个基本问题</h1><h2 id="两个描述性符号"><a href="#两个描述性符号" class="headerlink" title="两个描述性符号"></a>两个描述性符号</h2><ul>
<li>寄存器reg:包括ax,bx,cx,dx,sp,bp,si,di</li>
<li>段寄存器sreg:包括ds,ss,cs,es</li>
</ul>
<span id="more"></span>
<h2 id="bx-si-di-bp"><a href="#bx-si-di-bp" class="headerlink" title="bx,si,di,bp"></a>bx,si,di,bp</h2><ul>
<li>8086CPU中只有这四个寄存器可以用<code>[...]</code>来寻址，像<code>mov ax,[cx]</code>就是错误的；</li>
<li>在<code>[...]</code>中，这四个寄存器可以的那个出现，或 <strong>只能以四种组合出现：bx和si、bx和di、bp和si 以及 bp和di</strong>，<code>mov ax,[bx+bp]</code>是错误的；</li>
<li>只要在<code>[...]</code>中使用寄存器 <strong>bp</strong>,而指令中没有显示的给出段地址，段地址就默认在 <strong>ss</strong>中，比如：<code>mov ax,[bp+si+idata]</code>的含义是：<code>(ax)=((ss)*16+(bp)+(si)+idata)</code>；</li>
</ul>
<h2 id="机器指令处理的数据所在的位置"><a href="#机器指令处理的数据所在的位置" class="headerlink" title="机器指令处理的数据所在的位置"></a>机器指令处理的数据所在的位置</h2><ul>
<li>数据的处理可分为三类：读取、写入、运算</li>
<li>机器指令并不关心数据的值，而关心数据所在的位置：cpu内部、内存、端口；</li>
</ul>
<h2 id="汇编语言中数据位置的表达"><a href="#汇编语言中数据位置的表达" class="headerlink" title="汇编语言中数据位置的表达"></a>汇编语言中数据位置的表达</h2><p>汇编语言中用三种概念来表达数据的位置：<strong>立即数(idata)</strong>、<strong>寄存器</strong>、<strong>段地址(SA)和偏移地址(EA)</strong>；</p>
<h2 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h2><div class="table-container">
<table>
<thead>
<tr>
<th>寻址方式</th>
<th style="text-align:center">含义</th>
<th>名称</th>
<th>常用格式举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>[idata]</td>
<td style="text-align:center">SA=(ds);EA=idata</td>
<td>直接寻址</td>
<td>[idata]</td>
</tr>
<tr>
<td>[bx] <br> [si] <br> [di] <br> [bp]</td>
<td style="text-align:center">SA=(ds);EA=(bx) <br> SA=(ds);EA=(si) <br> SA=(ds);EA=(di) <br> SA=(ss);EA=(bp)</td>
<td>寄存器间接寻址</td>
<td>[bx]</td>
</tr>
<tr>
<td>[bx+idata] <br> [si+idata] <br> [di+idata] <br> [bp+idata]</td>
<td style="text-align:center">SA=(ds);EA=(bx)+idata <br> SA=(ds);EA=(si)+idata <br> SA=(ds);EA=(di)+idata <br> SA=(ss);EA=(bp)+idata</td>
<td>寄存器相对寻址</td>
<td>用于结构体：[bx].idata; <br> 用于数组：idata[si],idata[di]; <br> 用于二维数组：[bx][idata]</td>
</tr>
<tr>
<td>[bx+si] <br> [bx+di] <br> [bp+si] <br> [bp+di]</td>
<td style="text-align:center">SA=(ds);EA=(bx)+(si) <br> SA=(ds);EA=(bx)+(di) <br> SA=(ss);EA=(bp)+(si) <br> SA=(ss);EA=(bp)+(di)</td>
<td>基址变址寻址</td>
<td>用于二维数组：[bx][si]</td>
</tr>
<tr>
<td>[bx+si+idata] <br> [bx+di+idata] <br> [bp+si+idata] <br> [bp+di+idata]</td>
<td style="text-align:center">SA=(ds);EA=(bx)+(si)+idata <br> SA=(ds);EA=(bx)+(di)+idata <br> SA=(ss);EA=(bp)+(si)+idata <br> SA=(ss);EA=(bp)+(di)+idata</td>
<td>相对基址变址寻址</td>
<td>用于表格（结构）中的数据项：[bx].idata[si] <br> 用于二位数组：idata[bx][si]</td>
</tr>
</tbody>
</table>
</div>
<h2 id="指令处理的数据的长度"><a href="#指令处理的数据的长度" class="headerlink" title="指令处理的数据的长度"></a>指令处理的数据的长度</h2><ul>
<li>8086CPU的指令，可以处理两种长度的数据：<strong>byte</strong>、<strong>word</strong>；</li>
</ul>
<h3 id="指明方式"><a href="#指明方式" class="headerlink" title="指明方式"></a>指明方式</h3><h4 id="寄存器指明"><a href="#寄存器指明" class="headerlink" title="寄存器指明"></a>寄存器指明</h4><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mov</span> al,ds:[<span class="hljs-number">0</span>]   <span class="hljs-comment">//按字节操作</span><br><span class="hljs-keyword">mov</span> ax,ds:[<span class="hljs-number">0</span>]   <span class="hljs-comment">//按字操作</span><br></code></pre></td></tr></table></figure>
<h4 id="用操作符-X-ptr-指明（X-word-byte）"><a href="#用操作符-X-ptr-指明（X-word-byte）" class="headerlink" title="用操作符 X ptr 指明（X=word/byte）"></a>用操作符 <strong>X ptr</strong> 指明（X=word/byte）</h4><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">add</span> word ptr [bx],<span class="hljs-number">2</span>     <span class="hljs-comment">//按字操作</span><br><span class="hljs-keyword">mov</span> byte ptr ds:[<span class="hljs-number">0</span>],<span class="hljs-number">1</span>   <span class="hljs-comment">//按字节操作</span><br></code></pre></td></tr></table></figure>
<h4 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h4><p>有些指令默认是访问字单元还是字节单元，例如：push 指令只进行字操作；</p>
<h2 id="寻址方式的综合应用"><a href="#寻址方式的综合应用" class="headerlink" title="寻址方式的综合应用"></a>寻址方式的综合应用</h2><p>一般来说，可以用 <code>[bx+idata+si]</code>的方式来访问结构体中的数据；</p>
<ul>
<li>用bx定位整个结构体，用idata定位结构体中的某一个数据项，用si定位数组项中的每一个元素；</li>
<li><p>汇编的写法：<code>[bx].idata , [bx].idata[si]</code>；</p>
</li>
<li><p>例如c中: <code>dec.cp[i]</code>，dec指明了结构体变量的的地址；cp指明了数据项cp的地址；i用来定位cp中的每一个字符；汇编语言：<code>bx.10h[si]</code>；</p>
</li>
</ul>
<h2 id="div指令"><a href="#div指令" class="headerlink" title="div指令"></a>div指令</h2><ul>
<li>div 是出除法指令；</li>
<li>除数：在寄存器或内存单元中；</li>
<li>被除数：（默认）放在AX或DX和AX中；</li>
<li>结果：8位的商在AL中，余数在AH中；16位的商在AX中，余数在DX中</li>
<li><p>div指令格式：<code>div reg</code>或<code>div 内存单元</code>；</p>
</li>
<li><p><code>div byte ptr ds:[0]</code> <br> 含义： <br> <code>(al)=(ax)/((ds)*16+0)的商</code> <br> <code>(al)=(ax)/((ds)*16+0)的余数</code></p>
</li>
<li><p><code>div word ptr es:[0]</code> <br> 含义：<br> <code>(ax)=[(dx)*10000H+(ax)]/((es)*16+0)的商</code> <br> <code>(dx)=[(dx)*10000H+(ax)]/((es)*16+0)的余数</code></p>
</li>
</ul>
<h2 id="伪指令dd"><a href="#伪指令dd" class="headerlink" title="伪指令dd"></a>伪指令dd</h2><p>dd是用来定义 <strong>dword(double word双字)</strong> 型数据的；</p>
<h2 id="dup"><a href="#dup" class="headerlink" title="dup"></a>dup</h2><ul>
<li>dup是一个操作符，同db,dw,dd一样由编译器识别处理；</li>
<li>和db,dw,dd等伪指令配合使用，用来 <strong>数据的重复</strong>；</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">dup</span>的使用格式：<br><span class="hljs-symbol">db</span> 重复的次数 dup (重复的字节型数据)<br><span class="hljs-symbol">dw</span> 重复的次数 dup (重复的字型数据)<br><span class="hljs-symbol">dd</span> 重复的次数 dup (重复的双字数据)<br><br><span class="hljs-symbol">eg:</span><br><span class="hljs-symbol">db</span> <span class="hljs-number">3</span> dup (<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>相当于：<br><span class="hljs-symbol">db</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>
<p>(end)</p>
]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编笔记_第六章</title>
    <url>/2018/12/26/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%85%AD%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="包含多个段的程序"><a href="#包含多个段的程序" class="headerlink" title="包含多个段的程序"></a>包含多个段的程序</h1><h2 id="在代码段中使用数据"><a href="#在代码段中使用数据" class="headerlink" title="在代码段中使用数据"></a>在代码段中使用数据</h2><p>先看程序：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">assume</span> cs:codesg<br><span class="hljs-symbol">codesg</span> segment<br><span class="hljs-symbol">dw</span> <span class="hljs-number">0123</span>h,<span class="hljs-number">0456</span>h,<span class="hljs-number">0789</span>h,<span class="hljs-number">0</span>abch,<span class="hljs-number">0</span>fedh,<span class="hljs-number">0</span>cbah,<span class="hljs-number">0987</span>h<br><span class="hljs-symbol">start:</span><br><span class="hljs-keyword">mov</span> bx,<span class="hljs-number">0</span><br><span class="hljs-keyword">mov</span> ax,<span class="hljs-number">0</span><br><span class="hljs-keyword">mov</span> cx,<span class="hljs-number">8</span><br>s:<br><span class="hljs-keyword">add</span> ax,cx:[bx]<br><span class="hljs-keyword">add</span> bx,<span class="hljs-number">2</span><br><span class="hljs-symbol">loop</span> s<br><span class="hljs-keyword">mov</span> ax,<span class="hljs-number">4</span>c00h<br><span class="hljs-symbol">int</span> <span class="hljs-number">21</span>h<br><span class="hljs-symbol">codesg</span> ends<br><span class="hljs-symbol">end</span> start<br></code></pre></td></tr></table></figure>
<span id="more"></span>
<ul>
<li>dw 的含义是定义字型数据；</li>
<li>程序的第一条指令前加了标号start，这个标号又在end后出现，这样end除了可以同值编译器结束程序外，还可以通知编译器的入口在哪里，即，若要CPU从何处卡是执行程序，只要在源程序中用<code>end 标号</code>指明就行；</li>
</ul>
<p>所以程序的框架可以为：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">assume</span> cs:<span class="hljs-meta">code</span><br><br><span class="hljs-symbol">cdoe</span> segment<br><span class="hljs-symbol">...</span><br>数据<br><span class="hljs-symbol">...</span><br><span class="hljs-symbol">start:</span><br><span class="hljs-symbol">...</span><br>代码<br><span class="hljs-symbol">...</span><br><span class="hljs-symbol">code</span> ends<br><br><span class="hljs-symbol">end</span> start<br></code></pre></td></tr></table></figure>
<h2 id="将数据、代码、栈放入不同的段"><a href="#将数据、代码、栈放入不同的段" class="headerlink" title="将数据、代码、栈放入不同的段"></a>将数据、代码、栈放入不同的段</h2><ul>
<li>放到一个段中使得程序很混乱</li>
<li>当处理的数据、栈、代码需要的空间超过64KB时，就不能放在一个段中；</li>
</ul>
<p>伪指令；</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">assume</span><br><span class="hljs-symbol">cs:</span><span class="hljs-meta">code</span>,ds:<span class="hljs-meta">data</span>,ss:stack<br><br><span class="hljs-symbol">...</span><br><br><span class="hljs-keyword">mov</span> ax,stack<br><span class="hljs-keyword">mov</span> ss,ax<br><br><span class="hljs-keyword">mov</span> ax,<span class="hljs-meta">data</span><br><span class="hljs-keyword">mov</span> ds,ax<br><br></code></pre></td></tr></table></figure>
<p>ss:sp就指向stack:16，CPU把stack段当栈空间用；</p>
<p>把数据段、堆栈段放在代码段前，其对应的段地址是x-1、x-2<br>放在后面紧跟代码段后面（貌似）</p>
<p>(end)</p>
]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编笔记_第十一章</title>
    <url>/2018/12/30/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h1><p>标志寄存器的作用：</p>
<ul>
<li>用来存储相关指令的某些执行结果</li>
<li>用来为CPU执行相关指令提供行为依据</li>
<li><p>用来控制CPU的相关工作方式</p>
</li>
<li><p>标志寄存器由16位，按位起作用，0,2,4,6,7,8,9,10,11有特殊的含义，其他的没有任何含义；</p>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>15</th>
<th>14</th>
<th>13</th>
<th>12</th>
<th>11</th>
<th>10</th>
<th>9</th>
<th>8</th>
<th>7</th>
<th>6</th>
<th>5</th>
<th>4</th>
<th>3</th>
<th>2</th>
<th>1</th>
<th>0</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td>OF</td>
<td>DF</td>
<td>IF</td>
<td>TF</td>
<td>SF</td>
<td>ZF</td>
<td></td>
<td>AF</td>
<td></td>
<td>PF</td>
<td></td>
<td>CF</td>
</tr>
</tbody>
</table>
</div>
<span id="more"></span>
<p><br><br>标志位的符号</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
</tr>
</thead>
<tbody>
<tr>
<td>零标志ZF(Zero flag)</td>
<td style="text-align:center">ZR(1)</td>
<td style="text-align:center">NZ(0)</td>
</tr>
<tr>
<td>奇偶标志PF(Parity flag)</td>
<td style="text-align:center">PE(1)</td>
<td style="text-align:center">PO(0)</td>
</tr>
<tr>
<td>符号标志SF(Sign flag)</td>
<td style="text-align:center">NG(1)</td>
<td style="text-align:center">PL(0)</td>
</tr>
<tr>
<td>进位标志CF(Carry flag)</td>
<td style="text-align:center">CY(1)</td>
<td style="text-align:center">NC(0)</td>
</tr>
<tr>
<td>溢出标志OF(Over flow flag)</td>
<td style="text-align:center">OV(1)</td>
<td style="text-align:center">NV(0)</td>
</tr>
<tr>
<td>方向标志DF(Direction flag)</td>
<td style="text-align:center">DN(1)</td>
<td style="text-align:center">UP(0)</td>
</tr>
<tr>
<td>中断标志IF(Interrupt flag)</td>
<td style="text-align:center">EI(1)</td>
<td style="text-align:center">DI(0)</td>
</tr>
<tr>
<td>辅助标志AF(Auxiliary carry flag)</td>
<td style="text-align:center">AC(1)</td>
<td style="text-align:center">NA(0)</td>
</tr>
</tbody>
</table>
</div>
<h2 id="零标志ZF"><a href="#零标志ZF" class="headerlink" title="零标志ZF"></a>零标志ZF</h2><p>flag的第6位</p>
<p>它记录相关指令执行后，<br></p>
<ul>
<li>结果为0，ZF=1；</li>
<li>结果非零，ZF=0；</li>
</ul>
<p>例如：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mov</span> ax,<span class="hljs-number">1</span><br><span class="hljs-keyword">sub</span> ax,<span class="hljs-number">1</span><br><br><span class="hljs-keyword">mov</span> ax,<span class="hljs-number">1</span><br><span class="hljs-keyword">and</span> ax,<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>
<p>指令执行后，结果为0，则ZF=1；</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mov</span> ax,<span class="hljs-number">2</span><br><span class="hljs-keyword">sub</span> ax,<span class="hljs-number">1</span><br><br><span class="hljs-keyword">mov</span> ax,<span class="hljs-number">1</span><br><span class="hljs-symbol">or</span> ax,<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>
<p>指令执行后，结果为1，则ZF=0；</p>
<p>在8086CPU的指令集中，有的指令的执行事影响标志寄存器的，例如:add,sub,mul,div,inc,or,and等。有的不影响，如:mov push,pop等传送指令；</p>
<h2 id="奇偶标志PF"><a href="#奇偶标志PF" class="headerlink" title="奇偶标志PF"></a>奇偶标志PF</h2><p>flag的第二位</p>
<p>它记录指令执行后，结果的所有二进制位中1的个数：</p>
<ul>
<li>为偶数，PF=1；</li>
<li>为奇数，PF=0；</li>
</ul>
<p>例如：<br><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mov</span> al,<span class="hljs-number">1</span><br><span class="hljs-keyword">add</span> al,<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><br>执行后，PF=0；<br><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mov</span> al,<span class="hljs-number">1</span><br><span class="hljs-symbol">or</span> al,<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><br>执行后，PF=1；</p>
<h2 id="符号标志SF"><a href="#符号标志SF" class="headerlink" title="符号标志SF"></a>符号标志SF</h2><p>flag的第七位</p>
<p>它记录指令执行后：</p>
<ul>
<li>结果为负，SF=1；</li>
<li>结果为正，SF=0；</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mov</span> al,<span class="hljs-number">10000001</span>b<br><span class="hljs-keyword">add</span> al,<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>
<p>执行后SF=1；</p>
<h2 id="进位标志CF"><a href="#进位标志CF" class="headerlink" title="进位标志CF"></a>进位标志CF</h2><p>flag的第0位</p>
<p>在进行 <strong>无符号数运算</strong> 的时候，它记录的运算结果的最高有效位项更高位的进位值，或从更高位的借位值；</p>
<p>例：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mov</span> al,<span class="hljs-number">98</span>h<br><span class="hljs-keyword">add</span> al,al   <span class="hljs-comment">;(al)=30h,cf=1</span><br><span class="hljs-keyword">add</span> al,al   <span class="hljs-comment">;(al)=30h,cf=1</span><br></code></pre></td></tr></table></figure>
<h2 id="溢出标志OF"><a href="#溢出标志OF" class="headerlink" title="溢出标志OF"></a>溢出标志OF</h2><p>flag的第11位</p>
<p>在进行 <strong>有符号数运算</strong> 的时候，如果结果超出了及其所能表示的范围称为溢出；</p>
<p>溢出时OF=1；</p>
<p>注意：</p>
<ul>
<li>CF是对 <strong>无符号</strong> 数运算有意义的标志位；</li>
<li>OF是对 <strong>有符号</strong> 数运算有意义的标志位；</li>
</ul>
<p>例如：<br><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mov</span> al,<span class="hljs-number">0</span>F0H<br><span class="hljs-keyword">add</span> al,<span class="hljs-number">78</span>H<br></code></pre></td></tr></table></figure><br>CF=1,OF=0；<br>对于无符号运算，0F0H+78H有进位，CF=1；对于有符号数运算，不发生溢出，OF=0；</p>
<p>例如：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">sub</span> al,al<br><span class="hljs-comment">;0h=0000 0000b</span><br><span class="hljs-comment">;CF=0    OF=0    SF=0    ZF=1    PF=1</span><br><br><span class="hljs-keyword">mov</span> al,<span class="hljs-number">10</span>h<br><span class="hljs-comment">;10h=0001 0000b</span><br><span class="hljs-comment">;CF=0    OF=0    SF=0    ZF=1    PF=1</span><br><br><span class="hljs-keyword">add</span> al,<span class="hljs-number">90</span>h<br><span class="hljs-comment">;90h=1001 0000b</span><br><span class="hljs-comment">;ans=1010 0000b</span><br><span class="hljs-comment">;CF=0   OF=0    SF=1    ZF=0    PF=1</span><br><br><span class="hljs-keyword">mov</span> al,<span class="hljs-number">80</span>h<br><span class="hljs-comment">;80h=1000 0000b</span><br><span class="hljs-comment">;CF=0   OF=0    SF=1    ZF=0    PF=1</span><br><br><span class="hljs-keyword">add</span> al,<span class="hljs-number">80</span>h<br><span class="hljs-comment">;80h=1000 0000b=128d</span><br><span class="hljs-comment">;ans=1 0000 0000b=256d</span><br><span class="hljs-comment">;CF=1   OF=1    SF=0    ZF=1    PF=1</span><br><br><span class="hljs-keyword">mov</span> al,<span class="hljs-number">0</span>FCH<br><span class="hljs-comment">;0FCH=1111 1100b=252d</span><br><span class="hljs-comment">;CF=1   OF=1    SF=0    ZF=1    PF=1</span><br><br><span class="hljs-keyword">add</span> al,<span class="hljs-number">05</span>h<br><span class="hljs-comment">;05h=0000 0101b</span><br><span class="hljs-comment">;ans=1 0000 0001b=257d</span><br><span class="hljs-comment">;CF=1   OF=0    SF=0    ZF=0    PF=0</span><br><br><span class="hljs-keyword">mov</span> al,<span class="hljs-number">7</span>DH<br><span class="hljs-comment">;7DH=0111 1101b=125d</span><br><span class="hljs-comment">;CF=1   OF=0    SF=0    ZF=0    PF=0</span><br><br><span class="hljs-keyword">add</span> al,<span class="hljs-number">0</span>BH<br><span class="hljs-comment">;0BH=0000 1011b=11d</span><br><span class="hljs-comment">;ans=1000 1000b=136d</span><br><span class="hljs-comment">;CF=0   OF=1    SF=1    ZF=0    PF=1</span><br><br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>CF只看八位二进制计算后的第九位的值</li>
<li>OF看计算后的值是否在-128~127内</li>
<li>SF只看有符号数的第8位</li>
<li>ZF看8位是否都为0</li>
<li>PF看8位里的1的个数</li>
<li>标志寄存器的改变仅在非传送指令执行时</li>
</ul>
<h2 id="adc指令"><a href="#adc指令" class="headerlink" title="adc指令"></a>adc指令</h2><p>adc是带进位加法指令，他利用了CF位上记录的进位值；</p>
<p>格式：<br><code>adc 操作对象1，操作对象2</code></p>
<p>功能：<br><code>操作对象1=操作对象2+CF</code></p>
<p>例如：<code>adc ax,bx</code>==<code>(ax)=(ax)+(bx)+CF</code></p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mov</span> ax,<span class="hljs-number">2</span><br><span class="hljs-keyword">mov</span> bx,<span class="hljs-number">1</span><br><span class="hljs-keyword">sub</span> bx,ax<br><span class="hljs-keyword">adc</span> ax,<span class="hljs-number">1</span><br><br>(ax)=(ax)+<span class="hljs-number">1</span>+CF<span class="hljs-number">=4</span><br></code></pre></td></tr></table></figure>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mov</span> al,<span class="hljs-number">98</span>h<br><span class="hljs-keyword">add</span> al,al<br><span class="hljs-keyword">adc</span> al,<span class="hljs-number">3</span><br><br>(ax)=(ax)+<span class="hljs-number">3</span>+CF<span class="hljs-number">=30</span>H+<span class="hljs-number">3</span>+<span class="hljs-number">1</span><span class="hljs-number">=34</span>H<br></code></pre></td></tr></table></figure>
<ul>
<li>adc指令和add指令相配合可以对更大的数据进行加法运算；</li>
<li>adc指令加上CF值的含义由adc之前的指令决定，如果CF是由sub设置，它的含义就是借位值，由add设置就是金为珩值；</li>
</ul>
<p>编写一个对两个128位进制数据进行相加的子程序：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">add128:</span><br><span class="hljs-keyword">push</span> ax<br><span class="hljs-keyword">push</span> cx<br><span class="hljs-keyword">push</span> si<br><span class="hljs-keyword">push</span> di<br><span class="hljs-keyword">sub</span> ax,ax   <span class="hljs-comment">;置CF为零</span><br><span class="hljs-keyword">mov</span> cx,<span class="hljs-number">8</span><br><br>s:<br><span class="hljs-keyword">mov</span> ax,[si]<br><span class="hljs-keyword">adc</span> ax,[si]<br><span class="hljs-keyword">mov</span> [si],ax<br><br><span class="hljs-symbol">inc</span> si<br><span class="hljs-symbol">inc</span> si<br><span class="hljs-symbol">inc</span> di<br><span class="hljs-symbol">inc</span> di<br><span class="hljs-comment">;注意这里只能这么写，不能改成add si,2，否则会置CF为零</span><br><br><span class="hljs-symbol">loop</span> s<br><span class="hljs-keyword">pop</span> di<br><span class="hljs-keyword">pop</span> si<br><span class="hljs-keyword">pop</span> cx<br><span class="hljs-keyword">pop</span> ax<br></code></pre></td></tr></table></figure>
<h2 id="sbb指令"><a href="#sbb指令" class="headerlink" title="sbb指令"></a>sbb指令</h2><p>sbb是带借位减法指令，利用了CF位上记录的借位值</p>
<p>格式：<br><code>sbb 操作对象1，操作对象2</code></p>
<p>功能：<br><code>操作对象1=操作对象1-操作对象2-CF</code></p>
<p>比如：<br><code>sbb ax,bx</code>实现：<code>(ax)=(ax)-(bx)-CF</code></p>
<p>sbb指令执行后，将对CF进行设置；</p>
<h2 id="cmp指令"><a href="#cmp指令" class="headerlink" title="cmp指令"></a>cmp指令</h2><p>cmp是比较指令，功能相当于减法指令，但 <strong>不保存结果</strong>；</p>
<p>cmp指令执行后，将对标志寄存器产生影响；</p>
<p>格式：<br><code>cmp 操作对象1，操作对象2</code></p>
<p>功能：计算操作对象1-操作对象2</p>
<p>不保存结果，仅仅根据计算结果对标志寄存器进行设置；</p>
<p>例如：<br><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">cmp</span> ax,ax<br><br><span class="hljs-symbol">ZF</span><span class="hljs-number">=1</span><br><span class="hljs-symbol">PF</span><span class="hljs-number">=1</span><br><span class="hljs-symbol">SF</span><span class="hljs-number">=0</span><br><span class="hljs-symbol">CF</span><span class="hljs-number">=0</span><br><span class="hljs-symbol">OF</span><span class="hljs-number">=0</span><br></code></pre></td></tr></table></figure></p>
<p><code>cmp ax,bx</code> 指令执行后，可以根据相关的标志位的值看出比较的结果：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>如果(ax)=(bx)</td>
<td>(ax)-(bx)=0</td>
<td>ZF=1</td>
</tr>
<tr>
<td>如果(ax) $\neq$ (bx)</td>
<td>(ax)-(bx) $\neq$ 0</td>
<td>ZF=0</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>如果(ax) $\lt$ (bx)</td>
<td>(ax)-(bx)将产生借位</td>
<td>CF=1</td>
</tr>
<tr>
<td>如果(ax) $\ge$ (bx)</td>
<td>(ax)-(bx)不必借位</td>
<td>CF=0</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>如果(ax) $\gt$ (bx)</td>
<td>(ax)-(bx)既不必借位，结果又不为零</td>
<td>CF=0并且ZF=0</td>
</tr>
<tr>
<td>如果(ax) $\le$ (bx)</td>
<td>(ax)-(bx)既可能借位，结果可能为零</td>
<td>CF=1或ZF=1</td>
</tr>
</tbody>
</table>
</div>
<p>cmp与add、sub一样既可以对无符号数比较也可以对有符号数比较；</p>
<p>不能单纯的看SF的值来判断两个操作对象的大小，因为溢出的问题；</p>
<p><code>cmp ah,bh</code></p>
<ul>
<li>如果SF=1，OF=0：OF=0说明没有溢出，逻辑上真正的结果的正负和实际结果的相同；SF=1，实际结果为负，所以逻辑上为负，(ah) $\lt$ (bh)；</li>
<li>如果SF=1，OF=1：因为溢出导致实际结果为负，那么逻辑上真正结果为正，说明 (ah) $\gt$ (bh)；</li>
<li>如果SF=0，OF=1：因为溢出导致实际结果为正，那么逻辑上真正的结果必然为负，说明 (ah) $\lt$ (bh)；</li>
<li>如果SF=0，OF=0： (ah) $\ge$ (bh)；</li>
</ul>
<h2 id="条件转移指令"><a href="#条件转移指令" class="headerlink" title="条件转移指令"></a>条件转移指令</h2><p>所有条件转移指令的转移位移是[-128,127]；</p>
<p>通常和cmp相配合；</p>
<p>cmp指令的比较结果进行转移的指令分为：</p>
<ul>
<li>根据 <strong>无符号整数</strong> 的比较结果进行转移的条件转移指令，检测ZF、CF的值；</li>
<li>根据 <strong>有符号整数</strong> 的比较结果进行转移的条件转移指令，检测SF、OF、和ZF的值；</li>
</ul>
<p>根据无符号数的比较结果进行转移的条件转移指令：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>指令</th>
<th style="text-align:center">含义</th>
<th style="text-align:center">检测的相关标志位</th>
</tr>
</thead>
<tbody>
<tr>
<td>je</td>
<td style="text-align:center">等于则转移</td>
<td style="text-align:center">ZF=1</td>
</tr>
<tr>
<td>jne</td>
<td style="text-align:center">不等于则转移</td>
<td style="text-align:center">ZF=0</td>
</tr>
<tr>
<td>jb</td>
<td style="text-align:center">低于则转移</td>
<td style="text-align:center">CF=1</td>
</tr>
<tr>
<td>jnb</td>
<td style="text-align:center">不低于则转移</td>
<td style="text-align:center">CF=0</td>
</tr>
<tr>
<td>ja</td>
<td style="text-align:center">高于则转移</td>
<td style="text-align:center">CF=0,ZF=0</td>
</tr>
<tr>
<td>jan</td>
<td style="text-align:center">不高于则转移</td>
<td style="text-align:center">CF=1或ZF=1</td>
</tr>
</tbody>
</table>
</div>
<h2 id="DF标志和串传送指令"><a href="#DF标志和串传送指令" class="headerlink" title="DF标志和串传送指令"></a>DF标志和串传送指令</h2><p>flag的第10位</p>
<p>功能：在串处理指令中，控制每次操作后si,di的增减；</p>
<ul>
<li>DF=0：每次操作后si,di递增；</li>
<li>DF=1：每次操作后si,di递减；</li>
</ul>
<p>格式1：<code>movsb</code></p>
<p>功能：以字节为单位传送；</p>
<ul>
<li>((es)<em>16+(di))=((ds)</em>16+(si))</li>
<li>if(df==0): (si)=(si)=1,(di)=(di)+1;</li>
<li>if(df=0): (si)=(si)-1,(di)=(di)-1;</li>
</ul>
<p>格式2： <code>movsw</code></p>
<p>功能：以字为单位传送</p>
<p><code>rep mobsb</code> or <code>rep movsw</code></p>
<p>一般，<code>movsb</code> 和 <code>movsw</code> 和 <code>rep</code> 配合使用，rep的作用是根据cx的值，重复执行后面的串传送指令；</p>
<p>对DF位的设置：</p>
<ul>
<li><code>cld</code>指令：将标志寄存器的DF位置0</li>
<li><code>std</code>指令：将标志寄存器的DF位置1</li>
</ul>
<p>例如：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">data</span> segment <br>    db <span class="hljs-string">&#x27;Welcome to masn!&#x27;</span><br>    db <span class="hljs-number">16</span> dup(<span class="hljs-number">0</span>)<br><span class="hljs-symbol">data</span> ends<br><span class="hljs-comment">;将data段中的第一个串送到后面的空间</span><br><br><span class="hljs-comment">;传送的设置：</span><br><span class="hljs-comment">;传送的原始位置：ds:si</span><br><span class="hljs-comment">;传送的目的地址：es:di</span><br><span class="hljs-comment">;传送的长度：cx</span><br><span class="hljs-comment">;传送的方向：DF</span><br><br><span class="hljs-keyword">mov</span> ax,<span class="hljs-meta">data</span><br><span class="hljs-keyword">mov</span> ds,ax<br><span class="hljs-keyword">mov</span> si,<span class="hljs-number">0</span><br><span class="hljs-keyword">mov</span> es,ax<br><span class="hljs-keyword">mov</span> di,<span class="hljs-number">16</span><br><span class="hljs-keyword">mov</span> cx,<span class="hljs-number">16</span><br><span class="hljs-symbol">cld</span><br><span class="hljs-symbol">rep</span> movsb<br></code></pre></td></tr></table></figure>
<h2 id="pushf和popf"><a href="#pushf和popf" class="headerlink" title="pushf和popf"></a>pushf和popf</h2><ul>
<li><code>pushf</code>: 将标志寄存器的值压栈</li>
<li><code>popf</code>: 从栈中弹出数据，送入到标志寄存器中</li>
</ul>
<p>(end)</p>
]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编笔记_第十三章</title>
    <url>/2019/01/02/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="中断程序设计"><a href="#中断程序设计" class="headerlink" title="中断程序设计"></a>中断程序设计</h1><h2 id="int-指令"><a href="#int-指令" class="headerlink" title="int 指令"></a>int 指令</h2><p><code>int n</code>：n为中断类型码，功能是引发中断过程</p>
<span id="more"></span>
<h2 id="定制自己的中断"><a href="#定制自己的中断" class="headerlink" title="定制自己的中断"></a>定制自己的中断</h2><p>eg：将data段中的字符转化为大写<br><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">assume</span> cs:<span class="hljs-meta">code</span><br><span class="hljs-symbol">data</span> segment <br>    db <span class="hljs-string">&#x27;coversation&#x27;</span>,<span class="hljs-number">0</span><br><span class="hljs-symbol">data</span> ends<br><br><span class="hljs-symbol">code</span> segment<br><span class="hljs-symbol">start:</span><br>    <span class="hljs-keyword">mov</span> ax,<span class="hljs-meta">data</span><br>    <span class="hljs-keyword">mov</span> ds,ax<br>    <span class="hljs-keyword">mov</span> si,<span class="hljs-number">0</span><br><br>    int <span class="hljs-number">7</span>ch<br><br>    <span class="hljs-keyword">mov</span> ax,<span class="hljs-number">4</span>c00h<br>    int <span class="hljs-number">21</span>h<br><br><span class="hljs-symbol">code</span> ends<br><span class="hljs-symbol">end</span> start<br><br><br><br><span class="hljs-symbol">capital:</span><br>    <span class="hljs-keyword">push</span> cx<br>    <span class="hljs-keyword">push</span> si<br><span class="hljs-symbol">change:</span><br>    <span class="hljs-keyword">mov</span> cl,[si]<br>    <span class="hljs-keyword">mov</span> ch,<span class="hljs-number">0</span><br>    jcxz ok<br>    <span class="hljs-keyword">and</span> byte ptr [si],<span class="hljs-number">0</span>DFH<br>    inc si<br>    jmp short change<br><br><span class="hljs-symbol">ok:</span><br>    <span class="hljs-keyword">pop</span> si<br>    <span class="hljs-keyword">pop</span> cx<br>    iret<br><br><span class="hljs-symbol">capitalend:</span>nop<br></code></pre></td></tr></table></figure></p>
<h2 id="软件中断子程序的编写"><a href="#软件中断子程序的编写" class="headerlink" title="软件中断子程序的编写"></a>软件中断子程序的编写</h2><ul>
<li>保存现场</li>
<li>STI开中断指令；如允许中断嵌套，则开中断</li>
<li>处理中断</li>
<li>CLI关中断指令</li>
<li>恢复现场</li>
<li>IRET指令，返回被中断的程序</li>
</ul>
<h2 id="对int-iret和栈的深入理解"><a href="#对int-iret和栈的深入理解" class="headerlink" title="对int,iret和栈的深入理解"></a>对int,iret和栈的深入理解</h2><p>用7ch中断完成loop指令的功能</p>
<p>bx：保存位移（负的）<br>cx: 保存循环次数</p>
<p>所以7ch的功能有：</p>
<ul>
<li>dec cx</li>
<li>判断(cx)，不为零循环，为零向下执行</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">assume</span> cs:<span class="hljs-meta">code</span><br><span class="hljs-symbol">code</span> segment<br><span class="hljs-symbol">start:</span><br>    <span class="hljs-keyword">mov</span> ax,<span class="hljs-number">0</span>b800h<br>    <span class="hljs-keyword">mov</span> es,ax<br>    <span class="hljs-keyword">mov</span> di,<span class="hljs-number">160</span>*<span class="hljs-number">12</span><br><br>    <span class="hljs-keyword">mov</span> bx,offset s-offset se<br>    <span class="hljs-keyword">mov</span> cx,<span class="hljs-number">80</span><br><br>  s:<br>    <span class="hljs-keyword">mov</span> byte ptr es:[di],<span class="hljs-string">&#x27;!&#x27;</span><br>    <span class="hljs-keyword">add</span> di,<span class="hljs-number">2</span><br>    int <span class="hljs-number">7</span>ch<br><span class="hljs-symbol">  se:</span>nop<br><br>  <span class="hljs-keyword">mov</span> ax,<span class="hljs-number">4</span>c00h<br>  int <span class="hljs-number">21</span>h<br><br><span class="hljs-symbol">code</span> ends<br><span class="hljs-symbol">end</span> start<br><br><br><span class="hljs-comment">;int 7ch:</span><br><span class="hljs-comment">;直接修改IP的值到s处实现循环</span><br><span class="hljs-comment">;访问栈需要使用bp</span><br><br><span class="hljs-symbol">lp:</span><br>    <span class="hljs-keyword">push</span> bp<br>    <span class="hljs-keyword">mov</span> bp,<span class="hljs-built_in">sp</span><br>    dec cx<br>    jcxz lpret<br>    <span class="hljs-keyword">add</span> [bp+<span class="hljs-number">2</span>],<span class="hljs-keyword">bx</span>   <span class="hljs-comment">;[bp+2]即为IP</span><br><span class="hljs-symbol">lpret:</span><br>    <span class="hljs-keyword">pop</span> bp<br>    iret<br></code></pre></td></tr></table></figure>
<h2 id="BIOS和DOS中断例程"><a href="#BIOS和DOS中断例程" class="headerlink" title="BIOS和DOS中断例程"></a>BIOS和DOS中断例程</h2><p>rom中存放着BIOS（基本输入输出系统）：</p>
<ul>
<li>硬件系统的检测和初始化程序</li>
<li>外部中断和内部中断例程</li>
<li>用于对硬件设备进行IO操作的中断例程</li>
<li>其他和硬件系统相关的中断例程</li>
</ul>
<h2 id="BIOS和DOS中断例程的安装过程"><a href="#BIOS和DOS中断例程的安装过程" class="headerlink" title="BIOS和DOS中断例程的安装过程"></a>BIOS和DOS中断例程的安装过程</h2><ul>
<li>CPU开机加电后，初始化(CS)=0FFFFH,(IP)=0，自动从FFFF:0单元开始执行程序（该单元处为一条跳转指令，CPU会转去执行BIOS中的硬件系统检测和初始化程序）</li>
<li>初始化程序将建立BIOS所支持的中断向量，将BIOS提供的中断例程的入口地址登记在中断向量表中</li>
<li>硬件系统检测和初始化完成后，调用 <code>int 19h</code> 进行操作系统的应道，从而将计算机交由操作系统控制</li>
<li>DOS启动后，除完成其他工作外，还将它提供的中断例程装入内存，并建立相应的中断向量</li>
</ul>
<h2 id="BIOS中断"><a href="#BIOS中断" class="headerlink" title="BIOS中断"></a>BIOS中断</h2><p>BIOS主要分为：</p>
<ul>
<li>系统硬件检测和初始化程序</li>
<li>内中断的中断处理程序</li>
<li>硬件中断的中断处理程序</li>
<li>IO设备及接口控制等功能模块</li>
</ul>
<h2 id="屏幕及光标控制-int-10h"><a href="#屏幕及光标控制-int-10h" class="headerlink" title="屏幕及光标控制 int 10h"></a>屏幕及光标控制 int 10h</h2><h3 id="光标控制"><a href="#光标控制" class="headerlink" title="光标控制"></a>光标控制</h3><ul>
<li><p>光标大小控制</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ah</span><span class="hljs-number">=01</span>h<br><span class="hljs-symbol">ch</span>=光标开始行<br><span class="hljs-symbol">cl</span>=光标结束行<br><span class="hljs-symbol">int</span> <span class="hljs-number">10</span>h<br></code></pre></td></tr></table></figure>
</li>
<li><p>设置光标位置</p>
</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ah</span><span class="hljs-number">=01</span>h<br><span class="hljs-symbol">dh</span>=行号<br><span class="hljs-symbol">dl</span>=列号<br><span class="hljs-symbol">bh</span>=页号<br><span class="hljs-symbol">int</span> <span class="hljs-number">10</span>h<br></code></pre></td></tr></table></figure>
<ul>
<li>读光标位置</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ah</span><span class="hljs-number">=03</span>h<br><span class="hljs-symbol">bh</span>=页号<br><span class="hljs-symbol">int</span> <span class="hljs-number">10</span>h<br><br>返回值：<br><span class="hljs-symbol">dh</span>=行号<br><span class="hljs-symbol">dl</span>=列号<br><span class="hljs-symbol">cx</span>=光标大小<br></code></pre></td></tr></table></figure>
<h3 id="卷屏、清屏、开窗口"><a href="#卷屏、清屏、开窗口" class="headerlink" title="卷屏、清屏、开窗口"></a>卷屏、清屏、开窗口</h3><ul>
<li>选择显示页</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ah</span><span class="hljs-number">=05</span>h<br><span class="hljs-symbol">al</span>=页号<br><span class="hljs-symbol">int</span> <span class="hljs-number">10</span>h<br></code></pre></td></tr></table></figure>
<ul>
<li>屏幕开窗口</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ah</span><span class="hljs-number">=06</span>h<br><span class="hljs-symbol">al</span><span class="hljs-number">=0</span><br><span class="hljs-symbol">bh</span>=窗口颜色属性<br><span class="hljs-symbol">ch</span>=左上角行号<br><span class="hljs-symbol">cl</span>=左上角列号<br><span class="hljs-symbol">dh</span>=右下角行号<br><span class="hljs-symbol">dl</span>=右下角列号<br><span class="hljs-symbol">int</span> <span class="hljs-number">10</span>h<br></code></pre></td></tr></table></figure>
<ul>
<li>屏幕上卷</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ah</span><span class="hljs-number">=06</span>h<br><span class="hljs-symbol">al</span>=上卷行数<br><span class="hljs-symbol">bh</span>=卷入行属性<br><span class="hljs-symbol">ch</span>=左上角行号<br><span class="hljs-symbol">cl</span>=左上角列号<br><span class="hljs-symbol">dh</span>=右下角行号<br><span class="hljs-symbol">dl</span>=右下角列号<br><span class="hljs-symbol">int</span> <span class="hljs-number">10</span>h<br></code></pre></td></tr></table></figure>
<ul>
<li>屏幕下卷</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ah</span><span class="hljs-number">=07</span>h<br></code></pre></td></tr></table></figure>
<h3 id="字符读与显示"><a href="#字符读与显示" class="headerlink" title="字符读与显示"></a>字符读与显示</h3><ul>
<li>读当前光标处字符和属性</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ah</span><span class="hljs-number">=08</span>h<br><span class="hljs-symbol">bh</span>=页号<br><span class="hljs-symbol">int</span> <span class="hljs-number">10</span>h<br><br>返回值：<br><span class="hljs-symbol">ah</span>=属性<br><span class="hljs-symbol">al</span>=字符<br></code></pre></td></tr></table></figure>
<ul>
<li>显示多个带属性的相同字符</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ah</span><span class="hljs-number">=09</span>h<br><span class="hljs-symbol">bh</span>=页号<br><span class="hljs-symbol">cx</span>=字符重复个数<br><span class="hljs-symbol">al</span>=字符<br><span class="hljs-symbol">bl</span>=属性<br><span class="hljs-symbol">int</span> <span class="hljs-number">10</span>h<br><br><br><span class="hljs-number">7</span>   <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span>  <span class="hljs-number">3</span>  <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">bl</span>  r g <span class="hljs-keyword">b</span>  i  r g b<br>闪烁 背景 高亮 前景<br></code></pre></td></tr></table></figure>
<h2 id="DOS中断"><a href="#DOS中断" class="headerlink" title="DOS中断"></a>DOS中断</h2><p>显示功能调用</p>
<ul>
<li>显示一个字符</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ah</span><span class="hljs-number">=02</span>h<br><span class="hljs-symbol">dl</span>=字符<br><span class="hljs-symbol">int</span> <span class="hljs-number">21</span>h<br>功能：屏幕上显示一个字符，光标跟随字符移动。检验DL是否为Ctrl_Break。<br></code></pre></td></tr></table></figure>
<ul>
<li>显示一个字符</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ah</span><span class="hljs-number">=06</span>h<br><span class="hljs-symbol">dl</span>=字符<br><span class="hljs-symbol">int</span> <span class="hljs-number">21</span>h<br>功能：屏幕上显示一个字符，光标跟随字符移动。不检验Ctrl_Break。<br></code></pre></td></tr></table></figure>
<ul>
<li>显示一串字符</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ah</span><span class="hljs-number">=09</span>h<br><span class="hljs-symbol">ds:</span>dx=字符串地址<br><span class="hljs-symbol">int</span> <span class="hljs-number">21</span>h<br>功能：屏幕上显示一串字符，光标跟随字符移动。要求字符串必须以$结尾。<br></code></pre></td></tr></table></figure>
<p>输入</p>
<ul>
<li>键入一个字符并回显</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ah</span><span class="hljs-number">=01</span>h<br><span class="hljs-symbol">int</span> <span class="hljs-number">21</span>h<br>返回值：AL=字符的ASCII码。<br></code></pre></td></tr></table></figure>
<ul>
<li>键入一个字符不回显</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ah</span><span class="hljs-number">=07</span>h<br><span class="hljs-symbol">int</span> <span class="hljs-number">21</span>h<br>返回值：AL=字符的ASCII码。不检验键入的字符是否为Ctrl_Break。<br></code></pre></td></tr></table></figure>
<p>(end)</p>
]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编笔记_第十二章</title>
    <url>/2019/01/01/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="内中断"><a href="#内中断" class="headerlink" title="内中断"></a>内中断</h1><h2 id="中断的产生"><a href="#中断的产生" class="headerlink" title="中断的产生"></a>中断的产生</h2><p><strong>中断</strong>：<br>中断分为 <em>软件中断</em> 和 <em>硬件中断</em>，前者又称为内中断后者又称为外部中断；</p>
<p><strong>软件中断</strong>： 由CPU内部的某些事件引起的，不受中断允许标志IF的控制。包括：</p>
<span id="more"></span>
<ul>
<li>由终端指令 <code>int n</code> 引起，n指出中断类型</li>
<li>由CPU的某些错误引起，除法错中断（类型号0）、溢出中断（类型号4）</li>
<li>为调试程序Debug设置的中断，单步中断（类型号1）、断点中断（类型号3）</li>
</ul>
<p><strong>硬件中断</strong>： 由输入输出外设产生的中断请求引起的中断。<br>8086系统的硬件中断可分为 <em>可屏蔽中断</em> 和 <em>不可屏蔽中断</em>。所有的中断请求都有对应的中断处理子程序与之对应；</p>
<p>补充：</p>
<ul>
<li>内中断中，int n和into指令产生的中断以及出发错中断都不能被禁止，并且比任何外部中断的优先级都高；</li>
<li>8086系统的硬件中断都是通过CPU的引脚引入中断请求型号，不可屏蔽中断请求信号接到CPU的NMI引脚上，当发生电源故障，奇偶检验错，io通道校验错等紧急情况时有系统自动产生，NMI不可屏蔽中断的类型号为2；</li>
<li>可屏蔽中断是键盘、显示器、打印机、磁盘、串口、并口等外设发出的。由于可屏蔽中断种类较多，系统专门有8259A中断控制器来管理这些中断。可屏蔽中断指这些外设可以用软件设置允许或禁止器发出中断请求。8086可屏蔽中断的中断类型号为08H~0FH；</li>
<li>优先级由高到低：内部中断-非屏蔽中断-可屏蔽中断-单步中断；</li>
<li>硬件中断时，CPU执行完一条指令后都会读取INTR引脚信号；</li>
<li>软件中断时，若为0-4号中断，CPU按相应的方式处理，如果是int n指令，则由n获取中断向量转而执行中断处理程序；</li>
<li>单步中断是int 1(TF=1)；</li>
</ul>
<h2 id="中断处理程序"><a href="#中断处理程序" class="headerlink" title="中断处理程序"></a>中断处理程序</h2><p>CPU的设计者必须在中断信息和其处理程序的入口地址之间建立某种联系，使得CPU可以根据中断信息可以找到哟啊执行的处理程序；</p>
<h2 id="中断类型和中断向量表"><a href="#中断类型和中断向量表" class="headerlink" title="中断类型和中断向量表"></a>中断类型和中断向量表</h2><p>8086提供了256个中断类型，类型号为0~FFH；</p>
<p>CPU用8位的中断类型码通过中断向量表找到相应的中断处理程序的入后地址；</p>
<p>用中断类型码找到中断向量，并用它设置CS和IP，这个工作是由CPU的硬件自动完成的，这个过程称为 <strong>中断过程</strong>；</p>
<p>8086中专门建立了一张中断向量表用于保存所有的中断向量。表位于内存最低地址区0开始的1KB单元。每个中断向量占用4个字节，高位放段地址，低位放偏移地址；</p>
<p>中断向量表的地址为：00000H~003FCH；</p>
<p>其中，</p>
<ul>
<li><strong>5个专用中断</strong>：类型0中断（出发出错）00000H~00003H，保存ip和cs内容、类型1中断（单步中断）00004H~00007H、类型2中断（NMI）00008H~0000BH、类型3中断（断点中断）0000CH~0000FH、类型4中断（溢出中断）00010H~00013H；</li>
<li><strong>27个系统保留中断</strong>：类型5中断~类型31中断00014H~0007FH；</li>
<li><strong>224个用户自定义中断</strong>： 类型32中断~类型255中断00080H~003FCH；</li>
</ul>
<h2 id="中断过程"><a href="#中断过程" class="headerlink" title="中断过程"></a>中断过程</h2><p>8086CPU的中断过程：</p>
<p>1、取得中断类型码</p>
<p>2、标志寄存器的指入栈</p>
<p>3、设置标志寄存器的第8位TF和第9位IF的值0</p>
<p>4、CS的内容入栈</p>
<p>5、IP的内容入栈</p>
<p>6、从内存地址位中断类型码*4和中断类型码*4+2的两个字的单元中读取中断处理程序的入口地址设置IP和CS</p>
<ul>
<li>在使用call指令调用子程序时有同样的问题，子程序执行后还要返回到原来的执行点继续执行，所以，call指令先保存当前CS和IP值，然后设置CS和IP跳转；</li>
</ul>
<h2 id="中断处理程序和iret指令"><a href="#中断处理程序和iret指令" class="headerlink" title="中断处理程序和iret指令"></a>中断处理程序和iret指令</h2><p>CPU要随时都可能执行中断程序，所以中断处理程序必须一直在内存的某段空间中；同时，中断程序的入口地址，即中断向量必须储存在对应的中断向量表表项中；</p>
<p>中断处理程序的编写方法：</p>
<ul>
<li>1、保存用到的寄存器</li>
<li>2、处理中断</li>
<li>3、恢复用到的寄存器</li>
<li>4、用 <code>iret</code> 指令返回</li>
</ul>
<p>iret指令的功能用汇编语法描述为：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">pop</span> <span class="hljs-built_in">IP</span><br><span class="hljs-keyword">pop</span> CS<br><span class="hljs-symbol">popf</span><br></code></pre></td></tr></table></figure>
<p>iret通常和硬件自动完成的中断程序配合使用；</p>
<p>入栈的顺序时标志寄存器、CS、IP，和iret的出栈相反；</p>
<h2 id="编写处理0号中断"><a href="#编写处理0号中断" class="headerlink" title="编写处理0号中断"></a>编写处理0号中断</h2><p>当发生出发溢出时，CPU将进行以下工作：</p>
<ul>
<li>1、取得中断类型码0</li>
<li>2、标志寄存器入栈，TF、IF设置为0</li>
<li>3、CS、IP入栈</li>
<li>4、(IP)=(0*4),(CS)=(0*4+2)</li>
</ul>
<p>中断处理程序do0，只需显示”overflow!”</p>
<ul>
<li>1、相关处理</li>
<li>2、向显示缓冲区送入字符串”overflow!”</li>
<li>3、返回dos</li>
</ul>
<p>因为除法溢出随时可能发生，CPU随时可能将cs:ip指向do0的入口，执行程序，所以为了简单可以将中断处理程序do0放到中断向量表的0000:0200处；</p>
<p>所以最后的处理是；</p>
<ul>
<li>1、编写可以显示”overflow!”的中断程序do0；</li>
<li>2、将do0送到内存0000:0200处</li>
<li>3、将do0的入口地址0000:0200存储在中断向量表0号表项中</li>
</ul>
<p>大致的框架：<br><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">assume</span> cs:<span class="hljs-meta">code</span><br><span class="hljs-symbol">code</span> segment<br><span class="hljs-symbol">start:</span><br>    do0安装程序<br>    设置中断向量表<br>    <span class="hljs-keyword">mov</span> ax,<span class="hljs-number">4</span>c00h<br>    int <span class="hljs-number">21</span>h<br><br><span class="hljs-symbol">do0:</span><br>    显示字符串:<span class="hljs-string">&quot;overflow!&quot;</span><br>    <span class="hljs-keyword">mov</span> ax,<span class="hljs-number">4</span>c00h<br>    int <span class="hljs-number">21</span>h<br><span class="hljs-comment">;do0程序在这段程序中并不执行，只是作为数据传送到中断向量表中，即安装程序</span><br><span class="hljs-symbol">code</span> ends<br><span class="hljs-symbol">end</span> start<br></code></pre></td></tr></table></figure></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>中断程序的安装可以使用 <code>rep movsb</code> 来将do0的代码送入到0000:0200处；</p>
<p>大致框架：<br><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">assume</span> cs:<span class="hljs-meta">code</span><br><span class="hljs-symbol">code</span> segment<br><span class="hljs-symbol">start:</span><br>    设置es:di指向目的地址<br>    设置ds:si指向源地址<br>    设置cx的长度<br>    设置传送方向为正<br>    rep movsb<br><br>    设置中断向量表<br><br>    <span class="hljs-keyword">mov</span> ax,<span class="hljs-number">4</span>c00h<br>    int <span class="hljs-number">21</span>h<br><br><span class="hljs-symbol">do0:</span><br>    显示字符串:<span class="hljs-string">&quot;overflow!&quot;</span><br>    <span class="hljs-keyword">mov</span> ax,<span class="hljs-number">4</span>c00h<br>    int <span class="hljs-number">21</span>h<br><br><span class="hljs-symbol">code</span> ends<br><span class="hljs-symbol">end</span> start<br></code></pre></td></tr></table></figure></p>
<p>使用 <code>rep movsb</code> 要确定的信息：</p>
<ul>
<li>目的地址：0000:0200</li>
<li>源地址：code:offset do0</li>
<li>传送的长度cx: do0的代码的长度</li>
<li>传送方向为正： <code>cld</code></li>
</ul>
<p>因为do0的长度根据不同的序求需求会改变，没有必要每一次都计算，可以在最后加一个 <code>do0end:nop</code>，这样 <code>mov cx,offset do0end-offset do0</code>即可，”-“是编译器识别的运算符号，编译器可以用它来进行两个 <strong>常数</strong> 的减法，同时，也可以处理表达式；</p>
<p>最后的安装程序：<br><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">assume</span> cs:<span class="hljs-meta">code</span><br><span class="hljs-symbol">code</span> segment<br><span class="hljs-symbol">start:</span><br>    <span class="hljs-keyword">mov</span> ax,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> es,ax<br>    <span class="hljs-keyword">mov</span> di,<span class="hljs-number">0200</span>h        <span class="hljs-comment">;目的地址</span><br>    <span class="hljs-keyword">mov</span> ax,cs<br>    <span class="hljs-keyword">mov</span> ds,ax<br>    <span class="hljs-keyword">mov</span> si,offset do0   <span class="hljs-comment">;源地址</span><br>    <span class="hljs-keyword">mov</span> cx,offset do0end-offset do0<br>    cld<br>    rep movsb<br><br>    设置中断向量表<br><br>    <span class="hljs-keyword">mov</span> ax,<span class="hljs-number">4</span>c00h<br>    int <span class="hljs-number">21</span>h<br><br><span class="hljs-symbol">do0:</span><br>    显示字符串:<span class="hljs-string">&quot;overflow!&quot;</span><br>    <span class="hljs-keyword">mov</span> ax,<span class="hljs-number">4</span>c00h<br>    int <span class="hljs-number">21</span>h<br><span class="hljs-symbol">do0end:</span>nop<br><br><span class="hljs-symbol">code</span> ends<br><span class="hljs-symbol">end</span> start<br></code></pre></td></tr></table></figure></p>
<h2 id="do0"><a href="#do0" class="headerlink" title="do0"></a>do0</h2><p>do0的任务是显示字符串，大致的框架：<br><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">do0:</span><br>    设置ds:si指向字符串<br>    <span class="hljs-keyword">mov</span> ax,<span class="hljs-number">0</span>b800h<br>    <span class="hljs-keyword">mov</span> es,ax<br>    <span class="hljs-keyword">mov</span> di,<span class="hljs-number">12</span>*<span class="hljs-number">160</span>+<span class="hljs-number">36</span>*<span class="hljs-number">2</span><br>    <span class="hljs-comment">;设置es:di指向显存空间中间位置</span><br><br>    <span class="hljs-keyword">mov</span> cx,<span class="hljs-number">9</span>    <span class="hljs-comment">;设置cx为字符串长度</span><br>  s:<br>    <span class="hljs-keyword">mov</span> al,[si]<br>    <span class="hljs-keyword">mov</span> es:[di],al<br>    inc si<br>    <span class="hljs-keyword">add</span> di,<span class="hljs-number">2</span><br>    loop s<br><br>    <span class="hljs-keyword">mov</span> ax,<span class="hljs-number">4</span>c00h<br>    int <span class="hljs-number">21</span>h<br><br><span class="hljs-symbol">do0end:</span>nop<br></code></pre></td></tr></table></figure></p>
<p>这里的字符串的存放不能像之前的程序那样放在总程序的数据段中，因为当总程序运行完后数据段也就释放，不能保证中断程序所显示的字符串还是”overflow!”；</p>
<p>所以要将字符串放在do0中，将其以通送到中断向量表的0000:0200处；</p>
<p>这样在发生除法溢出时，cs中存放的是do0的段地址，同时也是字符串的段地址，而因为程序要跳过字符串，不把他当作代码执行，所以在字符串之前要有一个jmp指令跳过字符串到实际的代码处，所以字符串的偏移地址就为0000:0200加2即0000:0202处（jmp占两个字节）</p>
<p>最后的程序：<br><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">do0:</span><br>    jmp short do0start<br>    db <span class="hljs-string">&quot;overflow!&quot;</span><br><br><span class="hljs-symbol">do0start:</span><br>    <span class="hljs-keyword">mov</span> ax,cs<br>    <span class="hljs-keyword">mov</span> ds,ax<br>    <span class="hljs-keyword">mov</span> si,<span class="hljs-number">0202</span>h<br>    <span class="hljs-comment">;设置ds:si指向字符串</span><br><br>    <span class="hljs-keyword">mov</span> ax,<span class="hljs-number">0</span>b800h<br>    <span class="hljs-keyword">mov</span> es,ax<br>    <span class="hljs-keyword">mov</span> di,<span class="hljs-number">12</span>*<span class="hljs-number">160</span>+<span class="hljs-number">36</span>*<span class="hljs-number">2</span><br>    <br>    <span class="hljs-keyword">mov</span> cx,<span class="hljs-number">9</span><br><br>  s:<br>    <span class="hljs-keyword">mov</span> al,[si]<br>    <span class="hljs-keyword">mov</span> es:[di],al<br>    inc si<br>    <span class="hljs-keyword">add</span> di,<span class="hljs-number">2</span><br>    loop s<br><br>    <span class="hljs-keyword">mov</span> ax,<span class="hljs-number">4</span>c00h<br>    int <span class="hljs-number">21</span>h<br><br><span class="hljs-symbol">do0end:</span>nop<br></code></pre></td></tr></table></figure></p>
<h2 id="设置中断向量"><a href="#设置中断向量" class="headerlink" title="设置中断向量"></a>设置中断向量</h2><p>设置中断向量即为将do0的入后地址0000:0200写入到中断向量表的0号表项中，使do0成为0号中断的中断处理程序；</p>
<p>0号表项的地址为0:0，其中0:0字单元存放偏移地址(ip)，0:2字单元存放段地址(cs)，</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mov</span> ax,<span class="hljs-number">0</span><br><span class="hljs-keyword">mov</span> es,ax<br><span class="hljs-keyword">mov</span> word ptr es:[<span class="hljs-number">0</span>*<span class="hljs-number">4</span>],<span class="hljs-number">0200</span>h<br><span class="hljs-keyword">mov</span> word ptr es:[<span class="hljs-number">0</span>*<span class="hljs-number">4</span>+<span class="hljs-number">2</span>],<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>
<p>综上，最后的程序如下：<br><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">assume</span> cs:<span class="hljs-meta">code</span><br><span class="hljs-symbol">code</span> segment<br><span class="hljs-symbol">start:</span><br>	<span class="hljs-keyword">mov</span> ax,<span class="hljs-number">0</span><br>	<span class="hljs-keyword">mov</span> es,ax<br>	<span class="hljs-keyword">mov</span> di,<span class="hljs-number">0200</span>h<br>	<span class="hljs-keyword">mov</span> ax,cs<br>	<span class="hljs-keyword">mov</span> ds,ax<br>	<span class="hljs-keyword">mov</span> si,offset do0<br>	<span class="hljs-keyword">mov</span> cx,offset do0end-offset do0<br>	cld<br>	rep movsb<br>	<br>	<span class="hljs-keyword">mov</span> ax,<span class="hljs-number">0</span><br>	<span class="hljs-keyword">mov</span> es,ax<br>	<span class="hljs-keyword">mov</span> word ptr es:[<span class="hljs-number">0</span>*<span class="hljs-number">4</span>],<span class="hljs-number">0200</span>h<br>	<span class="hljs-keyword">mov</span> word ptr es:[<span class="hljs-number">0</span>*<span class="hljs-number">4</span>+<span class="hljs-number">2</span>],<span class="hljs-number">0</span><br>	<br>	<span class="hljs-keyword">mov</span> ax,<span class="hljs-number">1000</span>h<br>	<span class="hljs-keyword">mov</span> bh,<span class="hljs-number">1</span><br>	div bh<br>	<br>	<span class="hljs-keyword">mov</span> ax,<span class="hljs-number">4</span>c00h<br>	int <span class="hljs-number">21</span>h<br>	<br><span class="hljs-symbol">do0:</span><br>	jmp short do0start<br>	db <span class="hljs-string">&quot;overflow!&quot;</span><br><span class="hljs-symbol">do0start:</span><br>	<span class="hljs-keyword">mov</span> ax,cs<br>	<span class="hljs-keyword">mov</span> ds,ax<br>	<span class="hljs-keyword">mov</span> si,<span class="hljs-number">202</span>h<br>	<br>	<span class="hljs-keyword">mov</span> ax,<span class="hljs-number">0</span>b800h<br>	<span class="hljs-keyword">mov</span> es,ax<br>	<span class="hljs-keyword">mov</span> di,<span class="hljs-number">12</span>*<span class="hljs-number">160</span>+<span class="hljs-number">36</span>*<span class="hljs-number">2</span><br>	<br>	<span class="hljs-keyword">mov</span> cx,<span class="hljs-number">9</span><br>	<br>  s:<br>  	<span class="hljs-keyword">mov</span> al,[si]<br>  	<span class="hljs-keyword">mov</span> es:[di],al<br>  	inc si<br>  	<span class="hljs-keyword">add</span> di,<span class="hljs-number">2</span><br>  	loop s<br>  	<br>  	<span class="hljs-keyword">mov</span> ax,<span class="hljs-number">4</span>c00h<br>  	int <span class="hljs-number">21</span>h<br>  	<br><span class="hljs-symbol">do0end:</span>nop<br><br><span class="hljs-symbol">code</span> ends<br><span class="hljs-symbol">end</span> start<br></code></pre></td></tr></table></figure></p>
<h2 id="单步中断"><a href="#单步中断" class="headerlink" title="单步中断"></a>单步中断</h2><p>CPU在执行完一条指令后，如果检测到标志寄存器的TF位为1，则产生单步中断，单步中断的中断类型码为1；</p>
<p>他引发的中断类型如下：</p>
<ul>
<li>1、取得中断类型码1</li>
<li>标志寄存器入栈，TF、IF置0</li>
<li>CS，IP入栈</li>
<li>(IP)=(1<em>4),(CS)=(1</em>4+2)</li>
</ul>
<p>使用t命令时，debug将TF设置为1，使得cpu执行完这条指令后引发单步中断；</p>
<p>执行单步中断的中断程序，所有寄存器的内容显示，等待输入；</p>
<blockquote>
<p>中断处理程序也是由一条条指令组成的，如果在执行中断处理程序之前，TF=1，则CPU在执行完中断处理程序的第一条指令后，又要产生单步中断，则又要转去执行单步中断的中断处理程序…… ?</p>
</blockquote>
<p>解决方法是在进入中断程序之前设置TF=0，也就是在前面说的中断过程中的第二步标志寄存器入栈后设置TF=0的原因；</p>
<p>CPU提供单步中断功能的原因就是，为单步跟踪的执行过程，提供了实现机制。</p>
<h2 id="响应中断的特殊情况"><a href="#响应中断的特殊情况" class="headerlink" title="响应中断的特殊情况"></a>响应中断的特殊情况</h2><p>有些情况下，CPU在执行完当前指令后，即使发生中断，也不相应，例如：在执行完向ss寄存器传送数据的指令后，发生中断时，CPU也不会响应，因为，ss:sp联合指向栈顶，对他们的设置应该连续完成；</p>
<blockquote>
<p>如果在执行完设置ss的指令后，CPU响应中断，引发中断过程，要在栈中压入标志寄存器、CS和IP的值。<br>而ss改变，sp并未改变，ss:sp指向的不是正确的栈顶，将引起错误。</p>
<p>所以CPU在执行完设置ss的指令后，不响应中断。<br>这给连续设置 ss和sp，指向正确的栈顶提供了一个时机。<br>  即，我们应该利用这个特性，将设置ss和sp的指令连续存放，使得设置sp的指令紧接着设置ss的指令执行，而在此之间，CPU不会引发中断过程</p>
</blockquote>
<p><em>解释了实验2中的（3）</em></p>
<blockquote>
<p>Debug 利用单步中断来实现T命令的功能，<br>  也就是说，用T命令执行一条指令后，CPU响应单步中断，执行Debug设置好的处理程序，才能在屏幕上显示寄存器的状态，并等待命令的输入。</p>
<p>而在mov ss,ax指令执行后，CPU根本就不响应任何中断，其中也包括单步中断，</p>
<p>所以Debug设置好的用来显示寄存器状态和等待输入命令的中断处理程序根本没有得到执行，所以我们看不到预期的结果。</p>
<p>CPU接着向下执行后面的指令mov sp,10h，然后响应单步中断，我们才看到正常的结果</p>
</blockquote>
<p>（以上引用来自汇编老师的课件，转载请注明地址）</p>
<p>(end)</p>
]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编笔记_第十章</title>
    <url>/2018/12/28/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%8D%81%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="call和ret指令"><a href="#call和ret指令" class="headerlink" title="call和ret指令"></a>call和ret指令</h1><h2 id="ret和retf"><a href="#ret和retf" class="headerlink" title="ret和retf"></a>ret和retf</h2><ul>
<li>ret指令用栈中的数据，修改IP的内容，从而是实现 <strong>近转移</strong>，<br> (IP)=((ss)*16+(sp)) <br> (sp)=(sp)+2；</li>
<li>retf指令用栈中的数据，修改 <strong>CS和IP</strong> 的内容，从而实现 <strong>远转移</strong>， <br> (IP)=((ss)<em>16+(sp)) <br> (sp)=(sp)+2 <br> (cs)=((ss)</em>16+(sp)) <br> (sp)=(sp)+2；</li>
<li>前者相当于：<br> <code>pop IP</code>，<br> 后者相当于 <br> <code>pop IP</code> <br> <code>pop CS</code></li>
</ul>
<span id="more"></span>
<h2 id="call指令"><a href="#call指令" class="headerlink" title="call指令"></a>call指令</h2><p>CPU执行call指令，进行两步操作：</p>
<ul>
<li>将当前的IP或CS和IP压入栈中；</li>
<li>转移</li>
</ul>
<p>call指令 <strong>不能实现短转移</strong>，除此之外与jmp的原理相同；</p>
<h2 id="依据位移进行转移"><a href="#依据位移进行转移" class="headerlink" title="依据位移进行转移"></a>依据位移进行转移</h2><p>指令格式：<br><code>call 标号</code><br>将当前的IP压栈后，转到标号处执行；（入栈的是call指令后的第一个字节偏移地址入栈），段内转移；</p>
<ul>
<li>(sp)=(sp)-2;((ss)*16+(sp))(ip)</li>
<li>(ip)=(ip)+16位位移</li>
</ul>
<p>相当于：</p>
<p><code>push IP</code></p>
<p><code>jmp near ptr 标号</code></p>
<p>eg:</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm">内存地址    机器码    汇编指令<br><span class="hljs-number">1000</span>:<span class="hljs-number">0</span>     b8 <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-keyword">mov</span> ax,<span class="hljs-number">0</span><br><span class="hljs-number">1000</span>:<span class="hljs-number">3</span>     e8 <span class="hljs-number">01</span> <span class="hljs-number">00</span>  call s<br><span class="hljs-number">1000</span>:<span class="hljs-number">6</span>     <span class="hljs-number">40</span>        inc ax<br><span class="hljs-number">1000</span>:<span class="hljs-number">7</span>     <span class="hljs-number">58</span>        s:<span class="hljs-keyword">pop</span> ax<br><br>最后ax的值为：<span class="hljs-number">6</span>h，因为执行call s时，<span class="hljs-keyword">push</span> <span class="hljs-built_in">ip</span> (<span class="hljs-built_in">ip</span>)<span class="hljs-number">=6</span>h，之后<span class="hljs-keyword">pop</span> ax，(ax)<span class="hljs-number">=6</span>h<br></code></pre></td></tr></table></figure>
<h2 id="转移的目的地址在指令中"><a href="#转移的目的地址在指令中" class="headerlink" title="转移的目的地址在指令中"></a>转移的目的地址在指令中</h2><ul>
<li><code>call far ptr 标号</code>实现的是段间转移；</li>
<li>(sp)=(sp)-2</li>
<li>((ss)*16+(sp))=(cs)</li>
<li>(sp)=(sp)-2</li>
<li><p>((ss)*16+(sp))=(ip)</p>
</li>
<li><p>(cs)=标号所在的段地址；</p>
</li>
<li>(ip)=标号所在的偏移地址；</li>
</ul>
<p>eg:<br><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm">内存地址    机器码          汇编指令<br><span class="hljs-number">1000</span>:<span class="hljs-number">0</span>     b8 <span class="hljs-number">00</span> <span class="hljs-number">00</span>        <span class="hljs-keyword">mov</span> ax,<span class="hljs-number">0</span><br><span class="hljs-number">1000</span>:<span class="hljs-number">3</span>     <span class="hljs-number">9</span>A <span class="hljs-number">09</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">10</span>  call far ptr s<br><span class="hljs-number">1000</span>:<span class="hljs-number">8</span>     <span class="hljs-number">40</span>              inc ax<br><span class="hljs-number">1000</span>:<span class="hljs-number">9</span>     <span class="hljs-number">58</span>              s:<span class="hljs-keyword">pop</span> ax<br>                           <span class="hljs-keyword">add</span> ax,ax<br>                           <span class="hljs-keyword">pop</span> bx<br>                           <span class="hljs-keyword">add</span> ax,bx<br></code></pre></td></tr></table></figure><br>指令执行后，(ax)=1010h</p>
<p>执行call时，push cs , push ip，(cs)=1000h,(ip)=8h；</p>
<p>pop ax后，(ax)=8h,add ax,ax后(ax)=10h,pop bx后(bx)=1000h,最后add ax,bx,(ax)=1010h;</p>
<h2 id="转移地址在寄存器中"><a href="#转移地址在寄存器中" class="headerlink" title="转移地址在寄存器中"></a>转移地址在寄存器中</h2><p>格式：<br><code>call 16位寄存器</code></p>
<p>功能：</p>
<ul>
<li>(sp)=(sp)-2</li>
<li>((ss)*16+(sp))=(ip)</li>
<li>(ip)=(16位寄存器)</li>
</ul>
<p>相当于进行：</p>
<p><code>push ip</code> <br><br><code>jmp 16位reg</code></p>
<p>eg:</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm">内存地址    机器码    汇编指令<br><span class="hljs-number">1000</span>:<span class="hljs-number">0</span>     b8 <span class="hljs-number">06</span> <span class="hljs-number">00</span>  <span class="hljs-keyword">mov</span> ax,<span class="hljs-number">6</span><br><span class="hljs-number">1000</span>:<span class="hljs-number">3</span>     ff <span class="hljs-built_in">d0</span>     call ax<br><span class="hljs-number">1000</span>:<span class="hljs-number">5</span>     <span class="hljs-number">40</span>        inc ax<br><span class="hljs-number">1000</span>:<span class="hljs-number">6</span>               <span class="hljs-keyword">mov</span> bp,<span class="hljs-built_in">sp</span><br>                     <span class="hljs-keyword">add</span> ax,[bp]<br></code></pre></td></tr></table></figure>
<p>程序执行完后，(ax)=0bh；</p>
<h2 id="转移地址在内存中"><a href="#转移地址在内存中" class="headerlink" title="转移地址在内存中"></a>转移地址在内存中</h2><p>两种格式：</p>
<ul>
<li><code>call word ptr 内存单元地址</code> </li>
</ul>
<p>相当于：<br><br><code>push ip</code><br><code>jmp word ptr 内存单元地址</code></p>
<ul>
<li><code>call dword ptr 内存单元地址</code></li>
</ul>
<p>相当于：<br><br><br><code>push cs</code><br><br><code>push ip</code><br><br><code>jmp dword ptr 内存单元地址</code></p>
<p>eg:</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">assume</span> cs:<span class="hljs-meta">code</span><br><span class="hljs-symbol">stack</span> segment<br><span class="hljs-symbol">dw</span> <span class="hljs-number">8</span> dup (<span class="hljs-number">0</span>)<br><span class="hljs-symbol">stack</span> ends<br><span class="hljs-symbol">code</span> segment<br><span class="hljs-symbol">start:</span><br><span class="hljs-keyword">mov</span> ax,atack<br><span class="hljs-keyword">mov</span> ss,ax<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">sp</span>,<span class="hljs-number">16</span><br><span class="hljs-keyword">mov</span> ds,ax<br><span class="hljs-keyword">mov</span> ax,<span class="hljs-number">0</span><br><span class="hljs-symbol">call</span> word ptr ds:[<span class="hljs-number">0</span>EH]<br><span class="hljs-symbol">inc</span> cx      <span class="hljs-comment">;设这个地方的地址为0000:xx</span><br><span class="hljs-symbol">inc</span> cx<br><span class="hljs-symbol">inc</span> cx<br><br><span class="hljs-keyword">mov</span> ax,<span class="hljs-number">4</span>c00h<br><span class="hljs-symbol">int</span> <span class="hljs-number">21</span>h<br><br><span class="hljs-symbol">code</span> ends<br><span class="hljs-symbol">end</span> start<br></code></pre></td></tr></table></figure>
<p>程序执行到call前，堆栈段和数据段合并，执行call时(ip)=x，入栈，也是数据段ds:[0EH]处的数据为x，这是跳到x处的指令也就是<code>inc ax</code>，，三次inc后(ax)=3h；</p>
<h2 id="call和ret的配合使用"><a href="#call和ret的配合使用" class="headerlink" title="call和ret的配合使用"></a>call和ret的配合使用</h2><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">assume</span> cs:<span class="hljs-meta">code</span><br><span class="hljs-symbol">code</span> segment<br><span class="hljs-symbol">start:</span><br><span class="hljs-keyword">mov</span> ax,<span class="hljs-number">1</span><br><span class="hljs-keyword">mov</span> cx,<span class="hljs-number">3</span><br><br><span class="hljs-symbol">call</span> s<br><span class="hljs-keyword">mov</span> bx,ax<br><span class="hljs-keyword">mov</span> ax,<span class="hljs-number">4</span>c00h<br><span class="hljs-symbol">int</span> <span class="hljs-number">21</span>h<br><br>s:<br><span class="hljs-keyword">add</span> ax,ax<br><span class="hljs-symbol">loop</span> s<br><span class="hljs-symbol">ret</span><br><br><span class="hljs-symbol">code</span> ends<br><span class="hljs-symbol">end</span> start<br></code></pre></td></tr></table></figure>
<p>cpu执行的主要过程：</p>
<ul>
<li>CPU执行到<code>call s</code>指令时，ip指向后一句<code>mov bx,ax</code>处，并将其压栈，之后修改ip到s处，实现程序的跳转；</li>
<li>在s中，s实现的时求 $2^{cx}$，cx的值由最开始的指令给出；</li>
<li>执行完后，ret指令将栈中的值弹出赋给ip，程序跳转到call后的<code>mov bx,ax</code>处，最后结束；</li>
</ul>
<p><strong>子程序的框架</strong>；</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm">标号:<br>    指令<br>    ret<br></code></pre></td></tr></table></figure>
<h2 id="模块化程序的设计"><a href="#模块化程序的设计" class="headerlink" title="模块化程序的设计"></a>模块化程序的设计</h2><h3 id="伪指令proc"><a href="#伪指令proc" class="headerlink" title="伪指令proc"></a>伪指令proc</h3><p>格式：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm">子程序名 <span class="hljs-meta">PROC</span> 属性<br><span class="hljs-symbol">......</span><br>子程序名 <span class="hljs-meta">ENDP</span><br></code></pre></td></tr></table></figure>
<h2 id="过程属性"><a href="#过程属性" class="headerlink" title="过程属性"></a>过程属性</h2><ul>
<li>属性分为NEAR属性和FAR属性，默认为NEAR，主程序和子程序在 <strong>同一个代码短</strong> 使用 <strong>NEAR</strong> 属性，否则使用 <strong>FAR</strong> 属性；</li>
<li>call执行时，系统根据子程序名的属性决定保存断点的段地址和偏移地址；</li>
</ul>
<h4 id="近程调用NEAR"><a href="#近程调用NEAR" class="headerlink" title="近程调用NEAR"></a>近程调用NEAR</h4><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">code</span> segment<br>    main <span class="hljs-meta">proc</span> far<br>        ...<br>        call subr1<br>        ...<br><br><br>    subr1 <span class="hljs-meta">proc</span> near<br>        ...<br>        ret<br>    subr1 <span class="hljs-meta">endp</span><br><br><br>    main <span class="hljs-meta">endp</span><br><br><span class="hljs-symbol">code</span> ends<br></code></pre></td></tr></table></figure>
<p>或<br><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">code</span> segment<br>    main prco far<br>        ...<br>        call sunr1<br>        ...<br>    main <span class="hljs-meta">endp</span><br><br>    subr1 <span class="hljs-meta">proc</span> near<br>        ...<br>        ret<br>    subr1 endr<br><br><span class="hljs-symbol">code</span> ends<br></code></pre></td></tr></table></figure></p>
<h4 id="远程调用NEAR"><a href="#远程调用NEAR" class="headerlink" title="远程调用NEAR"></a>远程调用NEAR</h4><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">code1</span> segment<br>    main <span class="hljs-meta">proc</span> far<br>        ...<br>        call subrx<br>        ...<br>        <span class="hljs-keyword">mov</span> ah,<span class="hljs-number">4</span>ch<br>        int <span class="hljs-number">21</span>h<br>    main <span class="hljs-meta">endp</span><br><span class="hljs-symbol">code1</span> ends<br><br><span class="hljs-symbol">code2</span> segment<br>    ...<br>    call subrx<br>    ...<br><br>    subrx <span class="hljs-meta">proc</span> far<br>        ...<br>        ret<br>    subrx <span class="hljs-meta">endp</span><br><br><span class="hljs-symbol">code2</span> ends<br></code></pre></td></tr></table></figure>
<h3 id="现场保护"><a href="#现场保护" class="headerlink" title="现场保护"></a>现场保护</h3><p>主程序调用子程序时可能寄存器的值会被改变，需要保存此时的值后再进入子程序，一般的实现是利用栈来保存可能改变的寄存器的值，退出子程序时pop恢复现场；</p>
<h2 id="mul指令"><a href="#mul指令" class="headerlink" title="mul指令"></a>mul指令</h2><ul>
<li>mul是无符号数乘法指令；</li>
<li>格式: <br> <code>mul reg</code> <br> <code>mul 内存单元</code></li>
</ul>
<p>不同位的相乘：</p>
<ul>
<li>8位：al和9位寄存器或内存单元相乘，结果在al中；</li>
<li>16位：ax和16位寄存器或内存单元相乘，结果高位在dx中，低位在ax中；<br><br><br></li>
<li>相乘的两个数要么是8位要么是16位；</li>
</ul>
<p>内存单元可用不同的寻址方式给出：</p>
<ul>
<li><code>mul byte ptr ds:[0]</code><br>含义:<code>(ax)=(al)*((ds)*16+0)</code></li>
<li><p><code>mul word ptr [bx+si+8]</code><br>含义:<br><code>(ax)=(al)*((ds)*16+(bx)+(si)+8)</code><br><code>(dx)=(al)*((ds)*16+(bx)+(si)+8)</code></p>
</li>
<li><p>结果大于255就用16位的</p>
</li>
</ul>
<h2 id="xchg指令"><a href="#xchg指令" class="headerlink" title="xchg指令"></a>xchg指令</h2><ul>
<li>指令格式：<code>xchg oprd1,oprd2</code></li>
<li>功能：将一个字节或一个字的源操纵数和目的操作数相交换；</li>
<li>交换的指令可以在寄存器之间，寄存器与储存器之间：</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">xchg</span> reg,reg<br><span class="hljs-symbol">xchg</span> reg,mem<br><span class="hljs-symbol">xchg</span> mem,reg<br></code></pre></td></tr></table></figure>
<p>xchg 指令不允许的情况：</p>
<ul>
<li>不能同时都为内存操作数</li>
<li>任何一个操作数都不能为段寄存器</li>
<li>任何一个操作数不能为立即数</li>
<li>两个操作数的长度必须相等</li>
</ul>
<p>(end)</p>
]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编笔记_第四、五章</title>
    <url>/2018/12/26/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%9B%9B%E3%80%81%E4%BA%94%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="第四章-第一个程序"><a href="#第四章-第一个程序" class="headerlink" title="第四章 第一个程序"></a>第四章 第一个程序</h1><h2 id="程序执行的基本过程"><a href="#程序执行的基本过程" class="headerlink" title="程序执行的基本过程"></a>程序执行的基本过程</h2><p>编写-&gt;编译-&gt;连接-&gt;执行</p>
<p>编程-&gt;1.asm-&gt;编译-&gt;1.obj-&gt;连接-&gt;1.exe-&gt;加载-&gt;内存中的程序</p>
<h2 id="程序的基本结构"><a href="#程序的基本结构" class="headerlink" title="程序的基本结构"></a>程序的基本结构</h2><h3 id="伪指令"><a href="#伪指令" class="headerlink" title="伪指令"></a>伪指令</h3><p>汇编语言源程序中，包含两种指令， <strong>汇编指令</strong> 和 <strong>伪指令</strong>；</p>
<ul>
<li>汇编指令是对应的机器码的指令，可以被编译为机器指令；</li>
<li>伪指令没有对应的机器指令，由编译器来执行。</li>
</ul>
<span id="more"></span>
<p>伪指令有：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm">段名 segment<br><span class="hljs-symbol">...</span><span class="hljs-comment">//定义一个段</span><br>段名 ends<br></code></pre></td></tr></table></figure>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">end</span><span class="hljs-comment">//汇编程序的结束标记</span><br></code></pre></td></tr></table></figure>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">assume</span> <span class="hljs-comment">//编译程序将段寄存器和某一具体的段相联系</span><br><span class="hljs-symbol">assume</span> cs:codesg<br></code></pre></td></tr></table></figure>
<h3 id="标号"><a href="#标号" class="headerlink" title="标号"></a>标号</h3><ul>
<li>一个标号指代了一个地址</li>
<li>codesg:放在segment前，作为一个段名称，最终编译连接处理后为 <strong>一个段的段地址</strong>；</li>
</ul>
<h3 id="程序的基本结构-1"><a href="#程序的基本结构-1" class="headerlink" title="程序的基本结构"></a>程序的基本结构</h3><ul>
<li>定义一个段</li>
<li>实现处理任务</li>
<li>程序结束</li>
<li><strong>段与寄存器关联</strong></li>
</ul>
<p>eg:</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">assume</span> cs:abc<br><br><span class="hljs-symbol">abc</span> segment<br><br><span class="hljs-keyword">mov</span> ax,<span class="hljs-number">2</span><br><span class="hljs-keyword">add</span> ax,ax<br><span class="hljs-keyword">add</span> ax,ax<br><br><span class="hljs-symbol">abc</span> ends<br><br><span class="hljs-symbol">end</span><br></code></pre></td></tr></table></figure>
<h3 id="程序返回"><a href="#程序返回" class="headerlink" title="程序返回"></a>程序返回</h3><p>在程序的末尾添加 <strong>返回的程序段</strong></p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mov</span> ax,<span class="hljs-number">4</span>c00H<br><span class="hljs-symbol">int</span> <span class="hljs-number">21</span>H<br></code></pre></td></tr></table></figure>
<h3 id="与结束相关的概念"><a href="#与结束相关的概念" class="headerlink" title="与结束相关的概念"></a>与结束相关的概念</h3><div class="table-container">
<table>
<thead>
<tr>
<th>目的</th>
<th>相关指令</th>
<th style="text-align:center">指令性质</th>
<th>指令执行者</th>
</tr>
</thead>
<tbody>
<tr>
<td>通知编译器一个段结束</td>
<td>段名 ends</td>
<td style="text-align:center">伪指令</td>
<td>编译时，由编译器执行</td>
</tr>
<tr>
<td>通知编译器程序结束</td>
<td>end</td>
<td style="text-align:center">伪指令</td>
<td>编译时，由编译器执行</td>
</tr>
<tr>
<td>程序返回</td>
<td>mov ax,4c00H int 21H</td>
<td style="text-align:center">汇编指令</td>
<td>执行时，由CPU执行</td>
</tr>
</tbody>
</table>
</div>
<h2 id="程序的运行"><a href="#程序的运行" class="headerlink" title="程序的运行"></a>程序的运行</h2><ul>
<li>在dos中直接执行1.exe时，正在运行的command将1.exe中的程序加载如内存；</li>
<li>command设置CPU的CS:IP指向程序的第一条指令（及程序的入口），从而使程序得以运行；</li>
<li>程序运行结束后，返回到command中，CPU继续运行command；</li>
</ul>
<h2 id="程序的执行和过程的跟踪"><a href="#程序的执行和过程的跟踪" class="headerlink" title="程序的执行和过程的跟踪"></a>程序的执行和过程的跟踪</h2><ul>
<li>可以用Debug来跟踪一个程序的运行过程；</li>
<li>Debug不放弃对CPU的控制；</li>
<li><p>R命令查看个寄存器的设置情况，cx保存程序的长度；</p>
</li>
<li><p>程序加载后，ds保存着程序所在的内存区的段地址，之后256个字节为PSP，为程序和dos进行通讯，之后的空间存放程序，也就是说，程序的地址为SA+10H:0；</p>
</li>
<li>要使用P命令执行int 21H；</li>
<li>加载的顺序为：command加载debug加载1.exe；</li>
<li>返回的顺序为：1.exe返回到debug返回到command；</li>
</ul>
<h1 id="第五章-bx-和loop指令"><a href="#第五章-bx-和loop指令" class="headerlink" title="第五章 [bx]和loop指令"></a>第五章 [bx]和loop指令</h1><h2 id="bx-和内存的单元的描述"><a href="#bx-和内存的单元的描述" class="headerlink" title="[bx]和内存的单元的描述"></a>[bx]和内存的单元的描述</h2><ul>
<li>[bx]表示一个内存单元，它的偏移地址在bx中；</li>
<li>要完整的描述一个内存单元，需要两种信息：内存单元的地址、内存单元的长度（类型）；</li>
<li><code>mov ax,[bx]</code>相当于<code>(ax)=(ds*16 + (bx))</code>这里的(ax)表示ax中的内容；</li>
</ul>
<h2 id="loop指令"><a href="#loop指令" class="headerlink" title="loop指令"></a>loop指令</h2><ul>
<li>指令格式：<code>loop 标号</code>；</li>
<li>CPU执行loop指令时，进行两步操作：1、<code>(cx)=(cx)-1</code>，2、判断cx中的值，不为零则转至标号出执行程序，为零则向下执行，即cx为循环的次数；</li>
</ul>
<h2 id="段前缀"><a href="#段前缀" class="headerlink" title="段前缀"></a>段前缀</h2><p>显式的指明内存单元的段地址的：ds: , cs: , ss: , es:，在汇编中称为段前缀；</p>
<h2 id="指令的不同处理"><a href="#指令的不同处理" class="headerlink" title="指令的不同处理"></a>指令的不同处理</h2><ul>
<li>debug中<code>mov al,[0]</code>指的就是将ds:[0]处的数据送到al中；</li>
<li>编译器中则解释为将al赋值为0；</li>
<li>只有<code>mov al,[bx]</code>这样的才能解释为将ds:[bx]处的数据送到al里；</li>
</ul>
<h2 id="一段安全的空间"><a href="#一段安全的空间" class="headerlink" title="一段安全的空间"></a>一段安全的空间</h2><ul>
<li>一般情况下，dos和其他合法程序都不会使用0:200H~0:2FFH 256个字节的空间；</li>
</ul>
<p>(end)</p>
]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>深搜和广搜1</title>
    <url>/2018/05/19/%E6%B7%B1%E6%90%9C%E5%92%8C%E5%B9%BF%E6%90%9C1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>2018.5.19</p>
<p>这一篇主要是关于深搜和广搜实现的一些总结，因为一些模板和数据结构还未学习，，所以这一篇深搜广搜都是使用基本的方法，，虽然便于理解，，但是如要解决问题acm之类还是使用带有模板的更高效的方法。。。。</p>
<p>搜索是一种求解的方法，通常来说就是将所有情况探索一遍，找出其中符合要求的情况作为最后的解。按照 <strong>生成解的顺序</strong> 有两种基本的求解顺序：<strong>深度优先搜索（Depth-first Search）</strong> 和 <strong>广度优先搜索（Breadth-first search）</strong>。^—&gt;<br><span id="more"></span></p>
<h1 id="深搜"><a href="#深搜" class="headerlink" title="深搜:"></a>深搜:</h1><h2 id="思想"><a href="#思想" class="headerlink" title="思想:"></a>思想:</h2><ul>
<li>深搜主要依靠递归实现，通常的方法就是把每一种可能都尝试一遍,比如类似迷宫里的多个方向按某一顺序进行尝试，可以使用for循环遍历，bfs()函数是为了解决当前这一步，，而下一步怎么做就交给bfs(step+1)就可以了，下一步的解决方法和当前这一步的解决方法是完全一样的;</li>
<li>bfs()适用于需要求解出所有可能解的问题，在到达问题界限之前会一直递归下去,所以要在bfs()里增加条件判断;^—&gt;</li>
<li>一般使用搜索的问题都需要两个数组，一个是问题所给的地图map[][]，一个则是标记用的flag[][];</li>
</ul>
<h2 id="基本实现模板"><a href="#基本实现模板" class="headerlink" title="基本实现模板:"></a>基本实现模板:</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">dfs(每一次尝试的参数表 , step)<br>&#123;<br>    <span class="hljs-comment">//判断当前尝试是否超出问题的界限</span><br>    <span class="hljs-keyword">if</span> (...)    <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-comment">//尝试当前状态下的每一种可能性，，，使用递归方法</span><br>    <span class="hljs-keyword">for</span> (i i&lt;n i++)<br>    &#123;<br>        <span class="hljs-comment">//判断当前尝试是否已经被搜索过，，，(此判断不一定在for循环里)</span><br>        <span class="hljs-keyword">if</span>(i还未被搜索过) <br>        &#123;<br>            标记一下...flag[][]<br>            <span class="hljs-comment">//没有搜索过就尝试下一步</span><br>            dfs(step+<span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//还原标记(将flag[][]置为尝试前的值，，，(与广搜的不同处，，，，))</span><br>        &#125;  <br>    &#125;<br>    <span class="hljs-keyword">return</span>; <br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><ul>
<li>依靠于递归的深搜大体结构是不会变化的。需要注意的点有：</li>
<li>参数记录的状态(递归时要更新参数表，，也就是要更新尝试的参数)、</li>
<li>过滤掉不可能的状态(例如问题的界限、已经被搜索过的地方)、</li>
<li>状态的保存和还原(在一次尝试前要标记flag，代表这一步走过了，，在尝试后要还原flag保存的值，代表这次的尝试全部完成)。^—&gt;</li>
</ul>
<h1 id="广搜"><a href="#广搜" class="headerlink" title="广搜:"></a>广搜:</h1><h2 id="思想-1"><a href="#思想-1" class="headerlink" title="思想:"></a>思想:</h2><ul>
<li>广搜与深搜不同的地方在于，后者主要运用了递归的思想来遍历每一种可能性，，而前者则是层层递进的思想即层级遍历每一种可能性;</li>
<li>广搜使用到了<a href="http://www.31415.cf/2018/03/29/%E9%98%9F%E5%88%97%E3%80%81%E9%93%BE%E8%A1%A8/">队列</a>,用队列将每一种可能性保存下来,优先选择看似最优的状态进行拓展，以达到最先扩展到目标位置的目的;</li>
<li>与深搜一样，广搜也可能需要两个数组，一个保存地图信息，一个保存标记信息(迷宫问题);此外大多数情况下需要一个结构体数组作为队列来保存状态(就目前我所学的方法来说，，，Σ( ° △ °|||)︴)，，，(当然应该使用#include &lt; queue &gt;来的更快一些，，，哪天再学习一下，，，ʅ（´◔౪◔）ʃ)</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现:"></a>实现:</h2><h3 id="基本实现模板-1"><a href="#基本实现模板-1" class="headerlink" title="基本实现模板:"></a>基本实现模板:</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">bfs()<br>&#123;<br>    <span class="hljs-comment">//队列初始化，，，</span><br>    <span class="hljs-comment">//比如head,tail,起始点等等</span><br>    <span class="hljs-comment">/************************/</span><br>    <span class="hljs-keyword">while</span> (head &lt; tail)     <span class="hljs-comment">//队列非空时;</span><br>    &#123;<br>        <span class="hljs-comment">//枚举当前位置下的所有可能性</span><br>        <span class="hljs-keyword">for</span> (...)<br>        &#123;<br>            <span class="hljs-comment">//判断当前尝试是否超出问题的界限,超出继续下一个尝试</span><br>            <span class="hljs-keyword">if</span> (...)    <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-comment">//当该位置合法且未被搜索过时入队(记得更新步数和tail,并将f指向head即f=head)</span><br>            <span class="hljs-comment">//如果该点被搜索过，则说明从此路径来该位置不是最短的方法，，</span><br>            <span class="hljs-comment">//这是因为广搜对每个位置的处理时，对应的距离是严格递增的&lt;(ˉ^ˉ)&gt;</span><br><br>            <span class="hljs-comment">//判断是否此次尝试找到了所找的</span><br>            <span class="hljs-comment">//若找到flag = 1,并且跳出for循环</span><br>        &#125;<br><br>        <span class="hljs-comment">//判断flag真假</span><br>        <span class="hljs-comment">//若真说明找到了题解,退出while循环</span><br>        **若假说明这一层还未找到题解，队列头增head++;继续对后面的点扩展**  Σ(｀д′*ノ)ノ<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="结构体实现队列"><a href="#结构体实现队列" class="headerlink" title="结构体实现队列:"></a>结构体实现队列:</h3><ul>
<li>如要使用结构体实现队列，，可以这样:(针对迷宫问题)<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">note</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> x;<br>    <span class="hljs-keyword">int</span> y;<br>    <span class="hljs-keyword">int</span> f;      <span class="hljs-comment">//父亲在队列中的编号,由此可以输出题解路径</span><br>    <span class="hljs-keyword">int</span> step;   <span class="hljs-comment">//该支路中该点的步数,</span><br>                <span class="hljs-comment">//对于题解来说queue[tail-1].step即为题解的最短长度</span><br>&#125;;<br></code></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="结构体-路径的输出"><a href="#结构体-路径的输出" class="headerlink" title="结构体-路径的输出:"></a>结构体-路径的输出:</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//遍历一遍队列</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> , j = <span class="hljs-number">0</span>; i &lt; tail; i++)<br>        <span class="hljs-comment">//当遍历所对应位置的f等于该路径中上一个点的f也就是j时输出</span><br>        <span class="hljs-keyword">if</span>(que[i].f == j)<br>        &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; que[i].x &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; que[i].y &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            j = i;      <span class="hljs-comment">//更新j为当前节点，，为下次查找做准备</span><br>        &#125;   <br></code></pre></td></tr></table></figure>
<ul>
<li>自我感觉这种输出有些笨，，应该有更好的方法，，但是目前想不出来啊啊啊，，，→)╥﹏╥)</li>
</ul>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结:"></a>总结:</h2><ul>
<li>bfs主要思路是对下一个状态的选取和状态的遍历，在遍历树的时候，节点会按照层次以此添加到队列中，在处理完一层之后，下一层也自然而然的添加到了队列中;^—&gt;</li>
<li>广搜大致思路:                             ^—&gt;&gt;</li>
</ul>
<p>1.从起点开始，先将其加入队列，设置距离为0;</p>
<p>2.从队列首端取出位置，将从这个位置能够到达的位置加入队列，并且让这些位置的距离为上一个位置的距离加上1;</p>
<p>3.循环2直到将终点添加到队列中，这说明我们已经找到了路径;</p>
<p>注意到在这个过程中，<strong>每次处理的位置所对应的距离是严格递增的，因此一旦找到终点，当时的距离就是最短距离</strong>;</p>
<p>同样基于这个原因，搜索可移动到的位置所使用的判断条件中不仅仅是不碰墙壁、不超过边界，还有一个就是没有到达过，因为<strong>如果已经到达了这个位置，这说明已经有更短的路径到达这个位置，这次到达这个位置的路径是更差的，不可能得到更好的最终解</strong>;</p>
<ul>
<li>广搜不需要像深搜一样在每次尝试后将标记复原;</li>
<li>适用于找最短路径，最少操作数;</li>
</ul>
<h1 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目:"></a>相关题目:</h1><p><a href="http://poj.org/problem?id=2386">___1</a><br><a href="http://poj.org/problem?id=3984">___2</a></p>
<h1 id="总结-2"><a href="#总结-2" class="headerlink" title="总结:"></a>总结:</h1><ul>
<li>深搜广搜属于图的搜索,目前见到的题大多都是迷宫问题:给一个m*n的图中有障碍和路径什么的，寻找最短的路径或者时最短的步数，，再者是对图中的某些点搜索，，寻找集合等等;</li>
<li>个人感觉深搜广搜主要是理解算法，，记住大概的模板就行，，实现什么的还是在基础的知识大致掌握后以及根据题目具体分析吧，，，(我可没说实现不重要，，，不然怎么做出题…..((/- -)/)</li>
<li>大概就这样，，，以后有啥想法再补充，，，不然为啥题目有个1，，，，(‾◡◝)</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h1><p>^—&gt;<a href="http://sumygg.com/2017/09/11/breadth-first-search-and-depth-first-search-one-two-three/#%E6%80%BB%E7%BB%93">参考dalao的博文_1</a></p>
<p>^—&gt;&gt;<a href="https://blog.csdn.net/baidu_35643793/article/details/55099472">参考dalao的博文_2</a></p>
<ul>
<li>算法好难啊，，，acm好费精力呐，，，写博客也是T_T，，，一天就写了这一个，，，，(逃，，，，</li>
</ul>
]]></content>
      <tags>
        <tag>acm</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客小白月赛12</title>
    <url>/2019/03/10/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%99%BD%E6%9C%88%E8%B5%9B12/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p><a href="https://ac.nowcoder.com/acm/contest/392#question">https://ac.nowcoder.com/acm/contest/392#question</a></p>
<p>学到很多东西，，，</p>
<span id="more"></span>
<h1 id="A华华听月月唱歌"><a href="#A华华听月月唱歌" class="headerlink" title="A华华听月月唱歌"></a>A华华听月月唱歌</h1><p>排序然后枚举左端点，，，区间的题总是不怎么会，，，</p>
<blockquote>
<p>将所有区间按照左端点排序，从左往右遍历。用一个变量维护我们当前最远可以够到的右端点，然后枚举左端点不超过右端点+1的所有区间，选择右端点最靠右的一个即可。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> l, r;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> node &amp;rr)<span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(l == rr.l)<span class="hljs-keyword">return</span> r &lt; rr.r;<br>        <span class="hljs-keyword">return</span> l &lt; rr.l;<br>    &#125;<br>&#125;node[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; node[i].l &gt;&gt; node[i].r;<br>    sort(node + <span class="hljs-number">1</span>, node + <span class="hljs-number">1</span> + m);<br>    <span class="hljs-keyword">int</span> r = <span class="hljs-number">0</span>, ans = <span class="hljs-number">0</span>, mx = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(node[i].l &lt;= mx + <span class="hljs-number">1</span>)r = max(r, node[i].r);<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            mx = r;<br>            r = <span class="hljs-number">0</span>;<br>            ++ans;<br>            <span class="hljs-keyword">if</span>(node[i].l &lt;= mx + <span class="hljs-number">1</span>)<br>            &#123;<br>                r = max(r, node[i].r);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(mx != n)<br>    &#123;<br>        ++ans;<br>        mx = r;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(mx != n)<br>        ans = <span class="hljs-number">-1</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="B华华教月月做数学"><a href="#B华华教月月做数学" class="headerlink" title="B华华教月月做数学"></a>B华华教月月做数学</h1><p>求$A^B(mod)$，，第一反应是快速幂，，然后一看样例，，好大的数，，直接上java，，，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.math.*;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 31415926535x</span><br><span class="hljs-comment"> * acm_java</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>		Scanner input = <span class="hljs-keyword">new</span> Scanner(System.in);<br>		<span class="hljs-keyword">int</span> t = input.nextInt();<br>		<span class="hljs-keyword">while</span>(t &gt; <span class="hljs-number">0</span>) &#123;<br>			BigInteger a = input.nextBigInteger();<br>			BigInteger b = input.nextBigInteger();<br>			BigInteger c = input.nextBigInteger();<br>			BigInteger ans = a.modPow(b, c);<br>			System.out.println(ans);<br>			--t;<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="C华华给月月出题"><a href="#C华华给月月出题" class="headerlink" title="C华华给月月出题"></a>C华华给月月出题</h1><p>新知识点get，，，积性函数+线性筛，，</p>
<p>对于函数 $f(x)=x^n$他是一个完全积性函数，，什么是积性函数呢，，就是满足 $f(xy)=f(x)*f(y)$的函数其中xy满足 $(x, y)=1(gcd(x,y)=1)$，，，完全积性函数就是对于任意的xy都满足上式的函数，，，</p>
<p>对于素数的n次幂直接用快速幂求就行了，，对于其他的合数 num 可以表示成  $num = i <em> prime[j]$ ，，，这样它的n次幂就可以用积性函数换成后面这两个数的n次幂的积来求得，，也就是 $a[i </em> prime[j]]=a[i] * a[prime[j]] \% mod$ ，，</p>
<p>对于一个合数只要用它的最小的质因数和一个数的积求出来就行了，，不然一直算下去浪费时间会T</p>
<p>求出所有1~n的数n次幂后异或和就行了</p>
<p><a href="https://blog.csdn.net/consciousman/article/details/77888386">具体的积性函数的内容看这里</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1.3e7</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c = getchar(); <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; c = getchar();&#125;<br>    <span class="hljs-keyword">while</span>(c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = getchar();<br>    <span class="hljs-keyword">return</span> x * f;<br>&#125;<br>ll a[maxn], prime[maxn], tot;<br><span class="hljs-keyword">bool</span> isprime[maxn];<br><span class="hljs-function">ll <span class="hljs-title">pow_</span><span class="hljs-params">(ll a, ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ret = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b &amp; <span class="hljs-number">1</span>)ret = (ret * a) % mod;<br>        a = (a * a) % mod;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)isprime[i] = <span class="hljs-literal">true</span>;<br>    a[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    tot = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(isprime[i])                  <span class="hljs-comment">//对于质数来说</span><br>        &#123;<br>            prime[++tot] = i;           <span class="hljs-comment">//加一个质数</span><br>            a[i] = pow_(i, n);          <span class="hljs-comment">//素数直接快速幂求就行了</span><br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= tot &amp;&amp; i * prime[j] &lt;= n; ++j)<br>        &#123;<br>            isprime[i * prime[j]] = <span class="hljs-literal">false</span>;                  <span class="hljs-comment">//标记为合数</span><br>            a[i * prime[j]] = (a[i] * a[prime[j]]) % mod;   <span class="hljs-comment">//积性函数的性质</span><br>            <span class="hljs-keyword">if</span>(!(i % prime[j]))<span class="hljs-keyword">break</span>;           <span class="hljs-comment">//对于每个合数用它最小的质因数求出来就行了，，否则会重复计算会T</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    ll n; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;n);<br>    init(n);<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        ans ^= a[i];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="E华华给月月准备礼物"><a href="#E华华给月月准备礼物" class="headerlink" title="E华华给月月准备礼物"></a>E华华给月月准备礼物</h1><p>哇，这是签到题啊，，，我当时没看出来，，没思路就跑去做图论的题了，，（最后图论的题也没出来，，，菜的真实，，，</p>
<p>二分答案判断一下去最值就行了，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> a[maxn], n, k;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>, r = a[max_element(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n) - a];<br>    <span class="hljs-keyword">while</span>(l &lt;= r)<br>    &#123;<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            sum += a[i] / mid;<br>        <span class="hljs-keyword">if</span>(sum &gt;= k)<br>            ans = max(ans, mid);<br>        <span class="hljs-keyword">if</span>(sum &lt; k)<br>            r = mid - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>            l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="G华华对月月的忠诚"><a href="#G华华对月月的忠诚" class="headerlink" title="G华华对月月的忠诚"></a>G华华对月月的忠诚</h1><p>当时看这样例推了两下，猜测 $(F_{n-1},F{n})=(A,B)$，，而且n还那么大，，，肯定不是吧这两项算出来的，，，果断交了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a, ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(b == <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> gcd(b, a % b);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    ll a, b;<br>    <span class="hljs-built_in">string</span> s;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; s;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; gcd(a, b) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="I华华和月月逛公园"><a href="#I华华和月月逛公园" class="headerlink" title="I华华和月月逛公园"></a>I华华和月月逛公园</h1><p>用tarjan求桥的个数就行了，，当时没看出来，，中午看了一会割点桥的内容（在上一篇博客</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c = getchar(); <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; c = getchar();&#125;<br>    <span class="hljs-keyword">while</span>(c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = getchar();<br>    <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, next;<br>    <span class="hljs-keyword">bool</span> cut;   <span class="hljs-comment">//</span><br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> head[maxn], tot;<br><span class="hljs-keyword">int</span> low[maxn], dfn[maxn], sta[maxn];<br><span class="hljs-keyword">int</span> idx, top;<br><span class="hljs-keyword">bool</span> insta[maxn];<br><span class="hljs-keyword">bool</span> cut[maxn];<br><span class="hljs-keyword">int</span> add_block[maxn];<br><span class="hljs-keyword">int</span> bridge;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].cut = <span class="hljs-literal">false</span>;<br>    edge[tot].next = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> pre)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> v;<br>    low[u] = dfn[u] = ++idx;<br>    sta[top++] = u;<br>    insta[u] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">int</span> son = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> pre_cnt = <span class="hljs-number">0</span>;        <span class="hljs-comment">//</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>    &#123;<br>        v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(v == pre &amp;&amp; pre_cnt == <span class="hljs-number">0</span>)<br>        &#123;<br>            ++pre_cnt;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!dfn[v])<br>        &#123;<br>            ++son;<br>            tarjan(v, u);<br>            <span class="hljs-keyword">if</span>(low[u] &gt; low[v])low[u] = low[v];<br>            <span class="hljs-keyword">if</span>(low[v] &gt; dfn[u])<br>            &#123;<br>                ++bridge;<br>                edge[i].cut = <span class="hljs-literal">true</span>;<br>                edge[i ^ <span class="hljs-number">1</span>].cut = <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(u != pre &amp;&amp; low[v] &gt;= dfn[u])<br>            &#123;<br>                cut[u] = <span class="hljs-literal">true</span>;<br>                ++add_block[u];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(low[u] &gt; dfn[v])<br>            low[u] = dfn[v];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(u == pre &amp;&amp; son &gt; <span class="hljs-number">1</span>)cut[u] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span>(u == pre)add_block[u] = son - <span class="hljs-number">1</span>;<br>    insta[u] = <span class="hljs-literal">false</span>;<br>    --top;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dfn, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dfn);<br>    <span class="hljs-built_in">memset</span>(insta, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> insta);<br>    <span class="hljs-built_in">memset</span>(add_block, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> add_block);<br>    <span class="hljs-built_in">memset</span>(cut, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> cut);<br>    idx = top = bridge = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span>(!dfn[i])<br>            tarjan(i, i);<br><span class="hljs-comment">//    int ans = 0;</span><br><span class="hljs-comment">//    for(int u = 1; u &lt;= n; ++u)</span><br><span class="hljs-comment">//        for(int i = head[u]; ~i; i = edge[i].next)</span><br><span class="hljs-comment">//            if(edge[i].cut &amp;&amp; edge[i].to &gt; u)</span><br><span class="hljs-comment">//            ++ans;</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, m - bridge);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">int</span> u, v;<br>    init();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>        addedge(u, v);<br>        addedge(v, u);<br>    &#125;<br>    solve(n, m);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="J月月查华华的手机"><a href="#J月月查华华的手机" class="headerlink" title="J月月查华华的手机"></a>J月月查华华的手机</h1><p>当时做这道题的时候以为是调用n次的LCS，，，然后显示MLE然后一直T，，，</p>
<p>后来看了题解才知道是序列自动机，，，（应该在上上篇博客，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c = getchar(); <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; c = getchar();&#125;<br>    <span class="hljs-keyword">while</span>(c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = getchar();<br>    <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><span class="hljs-keyword">int</span> nxt[maxn][<span class="hljs-number">30</span>];<br><span class="hljs-keyword">int</span> now[<span class="hljs-number">30</span>];<br><span class="hljs-keyword">char</span> s[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//序列自动机预处理</span><br>    <span class="hljs-built_in">memset</span>(now, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> now);            <span class="hljs-comment">//mow_i表示第i个字母在原串中从后向前最晚出现的位置</span><br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(s);<br>    --len;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = len; ~i; --i)               <span class="hljs-comment">//处理每一个字符</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">26</span>; ++j)        <span class="hljs-comment">//找出第i个字符后面的26个字母最早出现的字符的位置</span><br>            nxt[i][j] = now[j];<br>        now[s[i] - <span class="hljs-string">&#x27;a&#x27;</span>] = i;                <span class="hljs-comment">//用当前字符更新当前字符在原串中从后向前最晚出现的位置</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">char</span> ss[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>    <span class="hljs-keyword">int</span> n; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    init();<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, ss);<br>        <span class="hljs-keyword">int</span> loc = now[ss[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;a&#x27;</span>];             <span class="hljs-comment">//没有以子串第一个字符出现的子序列时</span><br>        <span class="hljs-keyword">if</span>(!~loc)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(ss);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; len; ++i)<br>            &#123;<br>                loc = nxt[loc][ss[i] - <span class="hljs-string">&#x27;a&#x27;</span>];    <span class="hljs-comment">//寻找母串中子串第i个字符下一次出现的位置</span><br>                <span class="hljs-keyword">if</span>(!~loc)                       <span class="hljs-comment">//没有就退出</span><br>                &#123;<br>                    flag = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>            <span class="hljs-keyword">else</span>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>深搜和广搜2</title>
    <url>/2018/07/23/%E6%B7%B1%E6%90%9C%E5%92%8C%E5%B9%BF%E6%90%9C2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>来来来，，，补票了，，，</p>
<p>前几个月看了一些bfs , dfs ， 自以为自己学会了搜索的基本算法，，但今天的集训练习水的啊真是一把把我浇醒了，，，不能再这样自以为学过的东西就全会了，，，</p>
<span id="more"></span>
<h2 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h2><p>今天的集训首先一个收获就是两个模板，，，首先是dfs的。。。</p>
<p>代码如下:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> Size =  <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> Map[Size][Size];<br><span class="hljs-keyword">bool</span> book[Size][Size];<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f3f3f</span>;<br><span class="hljs-comment">//int d[4][2] = &#123;1 , 0 ,    0 , 1 ,    -1 , 0 ,    0 , -1&#125;;</span><br><span class="hljs-keyword">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span> , <span class="hljs-number">-1</span> , <span class="hljs-number">0</span> , <span class="hljs-number">0</span>&#125;;                                   <span class="hljs-comment">//四个方向的控制数组，，，感觉还是分开写好一些，，，直观，，虽然写的麻烦</span><br><span class="hljs-keyword">int</span> dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span> , <span class="hljs-number">0</span> , <span class="hljs-number">1</span> , <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">step</span>                                                     //每一步的结构体，，<span class="hljs-title">x</span> ，<span class="hljs-title">y</span>表示当前步的坐标，，<span class="hljs-title">step_count</span>表示在这一步的总步数</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> x , y;<br>    <span class="hljs-keyword">int</span> step_count;<br>&#125;Start , End;                                                   <span class="hljs-comment">//起始和结束的两个点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">can_move</span><span class="hljs-params">(step s)</span>                                           <span class="hljs-comment">//判断移动是否合法</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> s.x &gt;= <span class="hljs-number">0</span> &amp;&amp; s.y &gt;= <span class="hljs-number">0</span> &amp;&amp; s.x &lt;= Size &amp;&amp; s.y &lt;= Size &amp;&amp; !book[s.x][s.y] ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">int</span> ans = inf;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span> <span class="hljs-params">(step now)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (now.x == End.x &amp;&amp; now.y == End.y)                       <span class="hljs-comment">//边界值，，表示找到，，回溯上一层</span><br>    &#123;<br>        ans = min(ans , now.step_count);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    step next;                                                  <span class="hljs-comment">//搜索每一种可能</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>    &#123;<br>        book[now.x][now.y] = <span class="hljs-literal">true</span>;                              <span class="hljs-comment">//标记为已经走过</span><br>        next.x = now.x + d[i][<span class="hljs-number">0</span>];<br>        next.y = now.y + d[i][<span class="hljs-number">1</span>];<br>        next.step_count = now.step_count + <span class="hljs-number">1</span>;                   <span class="hljs-comment">//向下每一步搜索步数增一</span><br>        <span class="hljs-keyword">if</span> (can_move(next))<br>            dfs(next);<br>        next.step_count--;<br>        book[now.x][now.y] = <span class="hljs-literal">false</span>;                             <span class="hljs-comment">//取消标记</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="bfs"><a href="#bfs" class="headerlink" title="bfs"></a>bfs</h2><p>广搜的模板：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    book[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-literal">false</span>;                                     <br>    <span class="hljs-built_in">queue</span>&lt;step&gt; q;                                              <span class="hljs-comment">//每一层的队列</span><br>    q.push(Start);                                              <span class="hljs-comment">//起点入队</span><br>    book[Start.x][Start.y] = <span class="hljs-literal">true</span>;                              <span class="hljs-comment">//标记为已走</span><br>    <span class="hljs-keyword">while</span> (!q.empty())                                          <span class="hljs-comment">//当队列不为空时循环搜索</span><br>    &#123;<br>         step now = q.front();                                  <span class="hljs-comment">//对每一层的每一种情况分析</span><br>         q.pop();                                           <br>         <span class="hljs-keyword">if</span> (now.x == End.x &amp;&amp; now.y == End.y)                  <span class="hljs-comment">//满足条件跳出搜索返回步数(已经最小))</span><br>            <span class="hljs-keyword">return</span> now.step_count;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)                             <span class="hljs-comment">//搜索每一种可能性</span><br>        &#123;<br>            step t;<br>            t.x = now.x + d[i][<span class="hljs-number">0</span>];<br>            t.y = now.y + d[i][<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (can_move(t))<br>            &#123;<br>                book[t.x][t.y] = <span class="hljs-literal">true</span>;                          <span class="hljs-comment">//标记为已走</span><br>                node next;<br>                next.x = t.x;<br>                next.y = t.y;<br>                next.step_count = now.step_count + <span class="hljs-number">1</span>;<br>                q.push(next);                                   <span class="hljs-comment">//可能的情况入队</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="集训的题"><a href="#集训的题" class="headerlink" title="集训的题:"></a>集训的题:</h2><h3 id="Problem-A-AveryBoy与连连看"><a href="#Problem-A-AveryBoy与连连看" class="headerlink" title="Problem A: AveryBoy与连连看"></a>Problem A: AveryBoy与连连看</h3><blockquote>
<p>Description</p>
<p>AveryBoy最近迷上了连连看游戏，于是他自己写了一个程序来玩，不过由于他学艺不精导致他写的连连看游戏连线不能从外面绕过。</p>
<p>游戏规则：在一个棋盘中，放了很多的棋子。如果某两个相同的棋子，可以通过一条线连起来（这条线不能经过其它棋子），而且线的转折次数不超过两次，那么这两个棋子就可以在棋盘上消去。玩家鼠标先后点击两块棋子，试图将他们消去，然后游戏的后台判断这两个方格能不能消去。现在你的任务就是写这个后台程序。</p>
<p>Input</p>
<p>输入数据有多组。每组数据的第一行有两个正整数n,m(0&lt;n&lt;=1000,0&lt;m&lt;1000)，分别表示棋盘的行数与列数。</p>
<p>在接下来的n行中，每行有m个非负整数描述棋盘的方格分布。0表示这个位置没有棋子，正整数表示棋子的类型。接下来的一行是一个正整数q(0&lt;q&lt;50)，表示下面有q次询问。在接下来的q行里，每行有四个正整数x1,y1,x2,y2,表示询问第x1行y1列的棋子与第x2行y2列的棋子能不能消去。n=0,m=0时，输入结束。</p>
<p>Output</p>
<p>每一组输入数据对应一行输出。如果能消去则输出”YES”,不能则输出”NO”。</p>
</blockquote>
<p>Sample Input<br>3 4<br>1 2 3 4<br>0 0 0 0<br>4 3 2 1<br>4<br>1 1 3 4<br>1 1 2 4<br>1 1 3 3<br>2 1 2 4<br>3 4<br>0 1 4 3<br>0 2 4 1<br>0 0 0 0<br>2<br>1 1 2 4<br>1 3 2 3<br>0 0<br>Sample Output<br>YES<br>NO<br>NO<br>NO<br>NO<br>YES<br>HINT<br>注意：询问之间无先后关系，都是针对当前状态的！</p>
<p>我的做法，，，开始被边界判断卡死QAQ心累，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> Size1 = <span class="hljs-number">1005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> Size2 = <span class="hljs-number">1005</span>;<br><span class="hljs-keyword">int</span> Map[Size1][Size2];<br><span class="hljs-keyword">bool</span> book[Size1][Size2];<br><span class="hljs-keyword">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span> , <span class="hljs-number">0</span> , <span class="hljs-number">0</span> , <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-keyword">int</span> dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span> , <span class="hljs-number">1</span> , <span class="hljs-number">-1</span> , <span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">int</span> n , m;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">step</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> x , y;<br>    <span class="hljs-keyword">int</span> lx , ly;<br>    <span class="hljs-comment">//int step_count;</span><br>&#125;Start , End;<br><span class="hljs-keyword">int</span> step_count;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">can_move</span><span class="hljs-params">(step s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> s.x &gt;= <span class="hljs-number">1</span> &amp;&amp; s.y &gt;= <span class="hljs-number">1</span> &amp;&amp; s.x &lt;= n &amp;&amp; s.y &lt;= m &amp;&amp; !book[s.x][s.y] ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_turn</span><span class="hljs-params">(step now , step next)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (now.lx == next.x + <span class="hljs-number">1</span> &amp;&amp; now.ly == next.y - <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (now.lx == next.x - <span class="hljs-number">1</span> &amp;&amp; now.ly == next.y + <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (now.lx == next.x + <span class="hljs-number">1</span> &amp;&amp; now.ly == next.y + <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (now.lx == next.x - <span class="hljs-number">1</span> &amp;&amp; now.ly == next.y - <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span> <span class="hljs-params">(step now)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (step_count &gt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (step_count &lt;= <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (now.x == End.x &amp;&amp; now.y == End.y)<br>        &#123;<br>            flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (Map[now.x][now.y] != <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">if</span> (now.x != End.x || now.y != End.y)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (now.x != Start.x || now.y != Start.y)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    step next;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>    &#123;<br>        book[now.x][now.y] = <span class="hljs-literal">true</span>;<br>        next.x = now.x + dx[i];<br>        next.y = now.y + dy[i];<br>        next.lx = now.x;<br>        next.ly = now.y;<br><br>        <span class="hljs-keyword">if</span> (is_turn(now , next))<br>        &#123;<br>            step_count++;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (can_move(next))<br>            dfs(next);<br>        <span class="hljs-keyword">if</span> (flag)   <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span> (is_turn(now , next))<br>            step_count--;<br><br>        book[now.x][now.y] = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;A.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;test.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span> , &amp;n , &amp;m) &amp;&amp; n &amp;&amp; m)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;Map[i][j]);<br>            &#125;<br><br>        <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;t);<br>        <span class="hljs-built_in">memset</span>(book , <span class="hljs-literal">false</span> , <span class="hljs-keyword">sizeof</span>(book));<br>        <span class="hljs-keyword">while</span> (t--)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span> , &amp;Start.x , &amp;Start.y , &amp;End.x , &amp;End.y);<br>            Start.lx = Start.x;Start.ly = Start.y;step_count = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (Map[Start.x][Start.y] != Map[End.x][End.y] || Map[Start.x][Start.y] == <span class="hljs-number">0</span> || Map[End.x][End.y] == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (dfs(Start))<br>                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            flag = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//4 4</span><br><span class="hljs-comment">//1 2 3 4</span><br><span class="hljs-comment">//0 0 0 0</span><br><span class="hljs-comment">//1 0 1 0</span><br><span class="hljs-comment">//1 0 1 0</span><br><span class="hljs-comment">//5</span><br>不过这个没有好好剪枝，，，集训学长造的数据过了，，，杭电上的没过，，，QAQ，，，<br></code></pre></td></tr></table></figure>
<p><del>鸽了，，，2018-7-23-22-52</del><br>学长的代码:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// hdu 1175</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br> <br><span class="hljs-keyword">int</span> maze[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>];<br><span class="hljs-keyword">bool</span> vis[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>];<br><span class="hljs-keyword">int</span> sx,sy,ex,ey;<br><span class="hljs-keyword">bool</span> flag;<br><span class="hljs-keyword">int</span> n,m,q;<br><span class="hljs-keyword">int</span> dicx[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">int</span> dicy[]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;;<br> <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> dic,<span class="hljs-keyword">int</span> turns)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(turns&gt;<span class="hljs-number">2</span>||flag) <span class="hljs-keyword">return</span>;<span class="hljs-comment">//转弯次数大于2或者已经找到就终止 </span><br>    <span class="hljs-keyword">if</span>(turns==<span class="hljs-number">2</span>&amp;&amp;(x-ex)!=<span class="hljs-number">0</span>&amp;&amp;(y-ey)!=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<span class="hljs-comment">//剪枝：判断两次转弯后是否与目标在同一直线上 </span><br>    <span class="hljs-keyword">if</span>(x==ex&amp;&amp;y==ey&amp;&amp;turns&lt;=<span class="hljs-number">2</span>)&#123;<span class="hljs-comment">//搜索终点 </span><br>        flag=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;++i)&#123;<span class="hljs-comment">//搜索四个方向 </span><br>        <span class="hljs-keyword">int</span> xx=x+dicx[i];<br>        <span class="hljs-keyword">int</span> yy=y+dicy[i];<br>        <span class="hljs-keyword">if</span>(xx&lt;<span class="hljs-number">1</span>||xx&gt;n||yy&lt;<span class="hljs-number">1</span>||yy&gt;m||vis[xx][yy]) <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//边界情况 </span><br>        <span class="hljs-keyword">if</span>(maze[xx][yy]==<span class="hljs-number">0</span>||(xx==ex&amp;&amp;yy==ey))&#123;<br>            vis[xx][yy]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(dic==<span class="hljs-number">-1</span>||dic==i)<span class="hljs-comment">//如果在起点或者同向的情况turns不变及不转向,并将当前方向记为i </span><br>                dfs(xx,yy,i,turns);<br>            <span class="hljs-keyword">else</span><br>                dfs(xx,yy,i,turns+<span class="hljs-number">1</span>);<span class="hljs-comment">//否则turns+1 </span><br>            vis[xx][yy]=<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m))&#123;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>&amp;&amp;m==<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-built_in">memset</span>(maze,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(maze));<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;++j)<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;maze[i][j]);<br>        <br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;q;++i)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;sx,&amp;sy,&amp;ex,&amp;ey);<br>            <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis));<br>            <br>            flag=<span class="hljs-number">0</span>;<span class="hljs-comment">//初始化 </span><br>            <span class="hljs-keyword">if</span>(maze[sx][sy]==maze[ex][ey]&amp;&amp;maze[sx][sy]) <br>                dfs(sx,sy,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">//将初始方向设为-1 </span><br>                <br>            <span class="hljs-keyword">if</span>(flag) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p>
<h3 id="Problem-C-AveryBoy与迷宫2"><a href="#Problem-C-AveryBoy与迷宫2" class="headerlink" title="Problem C: AveryBoy与迷宫2"></a>Problem C: AveryBoy与迷宫2</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1253">杭电链接</a></p>
<blockquote>
<p>Description</p>
<p>这次AveryBoy被困在一个三维迷宫中，他必须想办法在T分钟内离开迷宫（包括T）。迷宫是一个A<em>B</em>C的立方体，起点在（0，0，0）位置，终点在（A-1，B-1，C-1）位置。如果他能离开迷宫，输出离开迷宫所需最短时间，否则输出-1。</p>
<p>Input</p>
<p>输入数据的第一行是一个正整数K,表明测试数据的数量.每组测试数据的第一行是四个正整数A,B,C和T(1&lt;=A,B,C&lt;=50,1&lt;=T&lt;=1000),它们分别代表迷宫的大小和离开的时间.然后是A块输入数据(先是第0块,然后是第1块,第2块……),每块输入数据有B行,每行有C个正整数,代表迷宫的布局,其中0代表路,1代表墙.</p>
<p>Output</p>
<p>对于每组测试数据,如果AveryBoy能离开迷宫,那么请输出他最少需要多少分钟,否则输出-1.</p>
<p>Sample Input</p>
</blockquote>
<p>1<br>3 3 4 20<br>0 1 1 1<br>0 0 1 1<br>0 1 1 1<br>1 1 1 1<br>1 0 0 1<br>0 1 1 1<br>0 0 0 0<br>0 1 1 0<br>0 1 1 0</p>
<blockquote>
<p>Sample Output</p>
</blockquote>
<p>11</p>
<p>我的代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">55</span>;<br><span class="hljs-keyword">int</span> a , b , c , T;<br><span class="hljs-keyword">int</span> Map[N][N][N];<br><span class="hljs-keyword">bool</span> book[N][N][N];<br><span class="hljs-keyword">int</span> dx[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">1</span> , <span class="hljs-number">-1</span> , <span class="hljs-number">0</span> , <span class="hljs-number">0</span> , <span class="hljs-number">0</span> , <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">int</span> dy[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">0</span> , <span class="hljs-number">0</span> , <span class="hljs-number">1</span> , <span class="hljs-number">-1</span> , <span class="hljs-number">0</span> , <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">int</span> dz[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">0</span> , <span class="hljs-number">0</span> , <span class="hljs-number">0</span> , <span class="hljs-number">0</span> , <span class="hljs-number">1</span> , <span class="hljs-number">-1</span> &#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">step</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> x , y , z , t;<br>&#125;Start , End;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">can_move</span><span class="hljs-params">(step t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (t.x &gt;= <span class="hljs-number">1</span> &amp;&amp; t.y &gt;= <span class="hljs-number">1</span> &amp;&amp; t.z &gt;= <span class="hljs-number">1</span> &amp;&amp; t.x &lt;= a &amp;&amp; t.y &lt;= b &amp;&amp; t.z &lt;= c)<br>        <span class="hljs-keyword">if</span> (!book[t.x][t.y][t.z] &amp;&amp; !Map[t.x][t.y][t.z])<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(t.x - a) + <span class="hljs-built_in">fabs</span>(t.y - b) + <span class="hljs-built_in">fabs</span>(t.z - c) + t.t &lt;= T)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    book[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">queue</span>&lt;step&gt; q;<br>    q.push(Start);<br>    book[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">while</span> (!q.empty())<br>    &#123;<br>        step now = q.front();<br>        q.pop();<br>        <span class="hljs-keyword">if</span> (now.x == End.x &amp;&amp; now.y == End.y &amp;&amp; now.z == End.z &amp;&amp; now.t &lt;= T)<br>            <span class="hljs-keyword">return</span> now.t;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>        &#123;<br>            step temp;<br>            temp.x = now.x + dx[i];temp.y = now.y + dy[i];temp.z = now.z + dz[i];temp.t = now.t + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (can_move(temp))<br>            &#123;<br>                book[temp.x][temp.y][temp.z] = <span class="hljs-literal">true</span>;<br>                q.push(temp);<br>            &#125;<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> k;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;k);<br>    <span class="hljs-keyword">while</span> (k--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span> , &amp;a , &amp;b , &amp;c , &amp;T);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= a; i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= b; j++)<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>; l &lt;= c; l++)<br>                    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;Map[i][j][l]);<br>        Start.x = Start.y = Start.z = <span class="hljs-number">1</span>;Start.t = <span class="hljs-number">0</span>;<br>        End.x = a;<br>        End.y = b;<br>        End.z = c;<br>        <span class="hljs-built_in">memset</span>(book , <span class="hljs-literal">false</span> , <span class="hljs-keyword">sizeof</span>(book));<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span> , bfs());<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>学长的代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// hdu 1253</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> sz[<span class="hljs-number">55</span>][<span class="hljs-number">55</span>][<span class="hljs-number">55</span>],vis[<span class="hljs-number">55</span>][<span class="hljs-number">55</span>][<span class="hljs-number">55</span>];<br><span class="hljs-keyword">int</span> dir[<span class="hljs-number">6</span>][<span class="hljs-number">3</span>]=&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;;<br><span class="hljs-keyword">int</span> a,b,c,k;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,y,z,m;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Node p,tmp;<br>    <span class="hljs-built_in">queue</span>&lt;Node&gt;q;<br>    p.x=<span class="hljs-number">1</span>,p.y=<span class="hljs-number">1</span>,p.z=<span class="hljs-number">1</span>,p.m=<span class="hljs-number">0</span>;<br>    vis[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    q.push(p);<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        p=q.front(),q.pop();<br>        <span class="hljs-keyword">if</span>(p.x==a&amp;&amp;p.y==b&amp;&amp;p.z==c&amp;&amp;p.m&lt;=k) <span class="hljs-keyword">return</span> p.m;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)<br>        &#123;<br><br>            tmp.x=p.x+dir[i][<span class="hljs-number">0</span>],tmp.y=p.y+dir[i][<span class="hljs-number">1</span>],tmp.z=p.z+dir[i][<span class="hljs-number">2</span>],tmp.m=p.m+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(tmp.x&lt;<span class="hljs-number">1</span>||tmp.x&gt;a||tmp.y&lt;<span class="hljs-number">1</span>||tmp.y&gt;b||tmp.z&lt;<span class="hljs-number">1</span>||tmp.z&gt;c) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(sz[tmp.x][tmp.y][tmp.z]||vis[tmp.x][tmp.y][tmp.z]) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(tmp.x-a)+<span class="hljs-built_in">abs</span>(tmp.y-b)+<span class="hljs-built_in">abs</span>(tmp.z-c)+tmp.m&gt;k) <span class="hljs-keyword">continue</span>;<br>            vis[tmp.x][tmp.y][tmp.z]=<span class="hljs-number">1</span>;<br>            q.push(tmp);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> T;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;T);<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c,&amp;k);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=a;i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=b;j++)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> s=<span class="hljs-number">1</span>;s&lt;=c;s++)<br>                &#123;<br>                    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;sz[i][j][s]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,bfs());<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>还有一道 <em>蓝桥杯-历届试题-九宫重排</em>，，不过还没做，，，QAQ，，先放着吧，，，，</p>
]]></content>
      <tags>
        <tag>acm</tag>
        <tag>算法</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-JVM学习</title>
    <url>/2021/05/19/%E7%AC%94%E8%AE%B0-JVM%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><hr>
<p>typora-root-url: ./</p>
<hr>
<p>[toc]</p>
<h1 id="JVM学习前言"><a href="#JVM学习前言" class="headerlink" title="JVM学习前言"></a>JVM学习前言</h1><p><a href="https://www.bilibili.com/video/BV1iJ411d7jS">学习视频地址</a></p>
<ul>
<li>谈谈你对JVM的理解；Java8虚拟机与之前等待变化</li>
<li>OOM，栈溢出StackOverFlowError，如何分析</li>
<li>JVM的常用调优参数</li>
<li>内存快照如何抓取，如何分析Dump文件</li>
<li>JVM中类加载器</li>
</ul>
<h1 id="JVM体系结构"><a href="#JVM体系结构" class="headerlink" title="JVM体系结构"></a>JVM体系结构</h1><p><img src="https://img-blog.csdnimg.cn/2021051920414595.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>更加详细的结构为：</p>
<p><img src="https://img-blog.csdnimg.cn/20210519204201327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p>
<h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><p>作用：加载.class文件</p>
<p>流程大致为：<img src="https://img-blog.csdnimg.cn/2021051920422179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p>
<p>分类：按照从低到高可分为：</p>
<ul>
<li>虚拟机加载器（引导类加载器）</li>
<li>扩展类加载器</li>
<li>系统类（启动类）加载器</li>
<li>应用类加载器</li>
</ul>
<h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><p>某个特定的类加载器在接到加载类的请求时，首先将加载任务委托给父类加载器，依次递归，如果父类加载器可以完成类加载任务，就成功返回；只有父类加载器无法完成此加载任务时，才自己去加载。</p>
<p>全都找不到报： <code>Class Not Found</code> </p>
<h2 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a>沙箱安全机制</h2><p><img src="https://img-blog.csdnimg.cn/20210519204237272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p>
<p>在早期的jvm中，对于本地代码信任，可以直接运行，而远程代码是放置在沙箱中运行，限制对系统资源的访问。</p>
<p><img src="https://img-blog.csdnimg.cn/20210519204249762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p>
<p>此后增加了 <strong>安全策略</strong>，可以在给定一些权限后对本地资源访问。</p>
<p><img src="https://img-blog.csdnimg.cn/20210519204308442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p>
<p>然后又增加了 <strong>代码签名</strong>，按照用户的安全策略设定，又类加载器来加载道虚拟机中权限不同的运行空间运行</p>
<p><img src="https://img-blog.csdnimg.cn/20210519204321181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p>
<p>现在的安全机制引入 <strong>域</strong> 的概念，虚拟机将所有的代加载不同的系统域和应用域中，系统域负责关键资源，应用域通过系统域的部分代理来操作资源。不同的受保护域对应不同的权限。</p>
<p>组成沙箱的基本条件：</p>
<ul>
<li><p><strong>字节码校验器</strong>： 确保Java文件遵循Java语言规范，帮助Java程序实现内存保护，但不是所有的类文件都会经过节码校验（核心类）</p>
</li>
<li><p><strong>类装载器</strong>： 类装载器在3个地方对Java沙箱起作用：</p>
<ul>
<li><p>放置恶意代码干涉善意代码</p>
</li>
<li><p>守护被信任的类库边界</p>
</li>
<li><p>将代码归入保护域</p>
<p>虚拟机为不同的类加载器提供不同的命名空间，有唯一的标识，且由Java虚拟机的每一个类装载器维护，相互不可见</p>
</li>
</ul>
</li>
</ul>
<p>​    类加载器使用的是双亲委派机制：    </p>
<ul>
<li><p>从最内层jvm自带类加载器开始加载，外层恶意同名类得不到加载从而无法使用</p>
</li>
<li><p>由于严格通过包来区分访问域，外层恶意的类通过内置代码也无法获得权限访问道内层类，破坏代码自然无法生效</p>
</li>
</ul>
<ul>
<li><strong>存取控制器</strong>： 存取控制器可以控制核心API对操作系统的存取权限，控制的策略可以通过用户指定</li>
<li><strong>安全管理器</strong>：是核心API和操作系统之间的主要接口。实现权限控制，比存取控制器优先级高</li>
<li><strong>安全软件包</strong>： <code>java.security</code> 下的类和扩展包下的类，允许用户为自己的应用增加新的安全特性：<ul>
<li>安全提供者</li>
<li>消息摘要</li>
<li>数字签名</li>
<li>加密</li>
<li>鉴别</li>
</ul>
</li>
</ul>
<h1 id="Native"><a href="#Native" class="headerlink" title="Native"></a>Native</h1><p>native：凡是使用 <code>native</code> 关键字修饰的，说明Java的作用范围达不到，会调用底层C/C++的库文件等等</p>
<p>调用 <code>native</code> 修饰的方法会进入 <strong>本地方法栈</strong> ，然后通过 <strong>本地方法接口JNI</strong> 调用本地方法。</p>
<p>所以JNI的作用就是扩展Java的使用，融合不同的编程语言为Java使用。jvm会在内存区域中开辟一个标记区域，即<strong>本地方法栈</strong>，登记所有的native方法，在最终执行时通过JNI加载本地方法库中的方法。（不同虚拟机这里会有所不同）</p>
<h1 id="PC"><a href="#PC" class="headerlink" title="PC"></a>PC</h1><p>程序计数器</p>
<h1 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h1><p>方法区是被所有线程共享，所有字段和方法字节码，以及一些特殊方法（构造函数、接口代码）都在此定义。所有定义的方法的信息都保存在此区域，<strong>此区域属于共享区间</strong></p>
<p>==静态变量(static)、常量(final)、类信息(class)（构造方法、接口）、运行使得常量池 都存放在方法区中，但是，实例变量存在堆中，不是方法区==</p>
<p><img src="https://img-blog.csdnimg.cn/2021051920435444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p>
<p>（最下方就是方法区，存储上面提到的东西）</p>
<p><img src="https://img-blog.csdnimg.cn/20210519204951106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p>
<h1 id="栈（虚拟机栈）"><a href="#栈（虚拟机栈）" class="headerlink" title="栈（虚拟机栈）"></a>栈（虚拟机栈）</h1><p>栈内存，主管程序的运行，生命周期和线程同步</p>
<p>线程结束，栈内存也释放，对于栈来说，不存在垃圾回收问题</p>
<p>栈中的类型：8大基本类型+对象类型+实例方法</p>
<p>实际的栈中存储的是一个个的栈帧，结构大致如下：</p>
<p><img src="https://img-blog.csdnimg.cn/20210519204412241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="三种JVM"><a href="#三种JVM" class="headerlink" title="三种JVM"></a>三种JVM</h1><ul>
<li>sun： HotSpot （openjdk）</li>
<li>BEA JRockit</li>
<li>IBM J9 VM</li>
</ul>
<h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>Heap，一个JVM仅有一个堆内存，可调节大小</p>
<p>堆中保存的是 实例化的类及方法、常量、变量等</p>
<p>堆内存分为：</p>
<ul>
<li>新生区（伊甸园区）young</li>
<li>老年区 old </li>
<li>永久区 perm（1.8改为元空间）</li>
</ul>
<p>GC垃圾回收，主要是在伊甸园区和养老区，，如果内存满了就会出现OOM</p>
<p><a href="https://www.processon.com/view/60a25c38f346fb1df41ec011">具体的结构可以看这里：https://www.processon.com/view/60a25c38f346fb1df41ec011</a></p>
<h2 id="新生区和老年区"><a href="#新生区和老年区" class="headerlink" title="新生区和老年区"></a>新生区和老年区</h2><ul>
<li>所有实例化 诞生和成长的地方，甚至死亡</li>
<li>主要分为 <strong>伊甸园区</strong>，<strong>幸存者区(S0, S1)</strong> </li>
</ul>
<p>当伊甸园区满后，会进行一次轻量级垃圾回收，对于还存在的对象将转到幸存者区。如果新生区老年区满了会进行一次重量级垃圾回收，将存活的转到老年区，全部满了表示没有内存空间，即OOM</p>
<p>整个流程大致如下：<img src="https://img-blog.csdnimg.cn/20210519204431577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p>
<h2 id="永久区（元空间）"><a href="#永久区（元空间）" class="headerlink" title="永久区（元空间）"></a>永久区（元空间）</h2><p>常驻内存，用来存放JDK自身携带的Class对象。Interface元数据，存储的是Java运行时的一些环境或类信息，不存在垃圾回收，仅在关闭虚拟机时释放</p>
<p>一个启动类，如果加载大量的第三方jar包，如Tomcat部署太多应用，大量动态生成反射类等，会导致OOM</p>
<ul>
<li>1.6前： 永久代，常量池在方法区</li>
<li>1.7： 永久代，但是退化 <em>去永久代</em> ，常量池在堆中</li>
<li>1.8： 无永久代，常量池在元空间</li>
</ul>
<p><code>Runtime.getRuntime().maxMemroy()</code> 和 <code>Runtime.getRuntime().totalMemroy()</code> 可以获取jvm可以使用的最大内存以及当前初始化的内存大小。</p>
<p><code>Xms1024m -Xmx1024m -XX:+PrintGCDetails</code> 可以设置初始化内存大小(1/64)与最大内存大小(1/4)。</p>
<p>初始内存大小=新生区+老年区，元数据区在另一个地方</p>
<p>出现OOM的尝试解决方法：</p>
<ul>
<li>Debug分析</li>
<li>内存快照工具分析Dump文件：MAT、Jprofiler</li>
</ul>
<p><strong>MAT Jprofiler的作用</strong>：</p>
<ul>
<li>分析Dump内存文件，快速定位内存泄漏</li>
<li>获得堆中的数据</li>
<li>获得大的对象</li>
<li>。。。</li>
</ul>
<p>Java虚拟机dump： <code>-Xms1m -Xmx8m -XX:+HeapDumpOnOutOfMemoryError[path]</code>  </p>
<h1 id="GC：垃圾回收"><a href="#GC：垃圾回收" class="headerlink" title="GC：垃圾回收"></a>GC：垃圾回收</h1><p>gc作用于方法区和堆</p>
<p>gc分类：轻GC(YGC)、重GC(Full GC)</p>
<p><strong>gc的算法</strong>：标记清除法、标记整理、复制算法、分代收集，</p>
<p><strong>判断对象是否存活的方法</strong>：引用计数法和可达性分析</p>
<h2 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h2><p>顾名思义，记录每一个对象的引用数，对于没有引用的清理即可</p>
<h2 id="可达性分析"><a href="#可达性分析" class="headerlink" title="可达性分析"></a>可达性分析</h2><h2 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h2><p>新生区中，伊甸园区和两个幸存区间中非空的将存活的对象复制到空的幸存区。其中为空的是 to ，另一个是 from </p>
<p>当一个对象经历15次gc仍存活进入老年区，通过 <code>-XX:MaxTenuringThreshold=5</code> 可以设置进入老年区的时间</p>
<ul>
<li>好处： 没有内存碎片</li>
<li>坏处：浪费了一部分空间，to是空的</li>
</ul>
<p>最佳使用场景：对象存活度较低时。</p>
<h2 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h2><p>对存活对象标记，然后清除</p>
<ul>
<li>优点：不需要额外空间</li>
<li>缺点：两次扫描费时、内存碎片</li>
</ul>
<h2 id="标记整理"><a href="#标记整理" class="headerlink" title="标记整理"></a>标记整理</h2><p>对标记清除后的整理压缩，，减少碎片</p>
<h2 id="分代收集"><a href="#分代收集" class="headerlink" title="分代收集"></a>分代收集</h2><p>对于新生代：使用复制算法</p>
<p>对于老年代：使用标记清除（整理）算法</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>内存效率：复制算法&gt;标记清除&gt;标记整理</p>
<p>内存整齐度：复制算法=标记整理&gt;标记清除</p>
<p>内存利用率：标记整理=标记清除&gt;复制算法</p>
<p>所以使用分代收集算法，尽可能的提高性能</p>
<p>（JMM指的是Java的内存模型，主要与多线程有关系，就是那8种方式）</p>
<p><strong>一些比较好的总结</strong>：</p>
<p><a href="https://www.processon.com/view/5ec5d7c60791290fe0768668">https://www.processon.com/view/5ec5d7c60791290fe0768668</a></p>
<p><a href="https://www.processon.com/view/60a25c38f346fb1df41ec011">https://www.processon.com/view/60a25c38f346fb1df41ec011</a></p>
<p><img src="https://img-blog.csdnimg.cn/20210519200638618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p>
<p><a href="https://blog.csdn.net/qq_42261668/article/details/109149428">对于CMS的学习</a></p>
<p><a href="https://www.processon.com/view/603709716376896cd606078d#map">以上内容的总结</a></p>
]]></content>
  </entry>
  <entry>
    <title>笔记-Java注解反射</title>
    <url>/2021/03/19/%E7%AC%94%E8%AE%B0-Java%E6%B3%A8%E8%A7%A3%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>本文为自学 Java注解和反射机制的个人学习笔记，因个人习惯和时间关系，仅记录了本人为曾了解和和认为重要的知识点，所以如要学习建议<a href="https://www.bilibili.com/video/BV1p4411P7V3">观看原视频学习</a></p>
<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>基础的注解概念的解释可以查看<a href="https://www.runoob.com/w3cnote/java-annotation.html">这里</a>：</p>
<p>一个简单的自实现的注解如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAnnotation1 &#123;<br>	<span class="hljs-function">String <span class="hljs-title">name</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>其中，参数的格式是 <code>类型 名字()</code> 。</p>
<ul>
<li><p><code>@interface</code> 来定义一个注解</p>
</li>
<li><p><code>@Target</code> 描述了注解的使用范围</p>
</li>
<li><code>@Retention</code> 表述需要在什么级别保存该注释信息，用于描述注解的生命周期，其中 (<code>SOURCE&lt;CLASS&lt;RUNTIME</code>)</li>
<li><code>@Document</code> 说明该注解将包含在 javadoc中</li>
</ul>
<p>（具体注解实际使用方式可以看最后一节章关于 使用反射对象来获取所注解对象的注解信息的介绍。）</p>
<h1 id="反射-reflection"><a href="#反射-reflection" class="headerlink" title="反射 reflection"></a>反射 reflection</h1><h2 id="反射概述"><a href="#反射概述" class="headerlink" title="反射概述"></a>反射概述</h2><p>反射机制    允许程序执行期间借助 <code>Reflection API</code> 来获取任何类的内部属性和方法。</p>
<p>正常方式    ： 引入“包类”的名称-&gt;new实例化-&gt;获得实例化对象<br>反射方式： 实例化对象-&gt;getClass()方法-&gt;获得完整的“包类”名称</p>
<h2 id="获得反射对象"><a href="#获得反射对象" class="headerlink" title="获得反射对象"></a>获得反射对象</h2><h3 id="java反射机制提供的功能："><a href="#java反射机制提供的功能：" class="headerlink" title="java反射机制提供的功能："></a>java反射机制提供的功能：</h3><ul>
<li>在运行时判断任意一个对象所属的类</li>
<li>在运行时构造任意一个类的对象</li>
<li>在运行时判断任意一个类所具有的成员变量和方法</li>
<li>在运行时获取泛型信息</li>
<li>在运行时调用任意一个对象的成员变量和方法</li>
<li>在运行时处理 <strong>注解</strong></li>
<li><strong>生成动态代理</strong> (AOP)</li>
</ul>
<h3 id="反射的优缺点"><a href="#反射的优缺点" class="headerlink" title="反射的优缺点:"></a>反射的优缺点:</h3><ul>
<li>优点： 可以实现动态创建对象和编译，灵活</li>
<li>缺点：对性能有影响。反射实际上是一种<em>解释操作</em>，需要告诉JVM需要做什么和要求，要慢于直接(new)执行相同的操作。</li>
</ul>
<h4 id="反射相关的API"><a href="#反射相关的API" class="headerlink" title="反射相关的API"></a>反射相关的API</h4><ul>
<li><code>java.lang.Class</code> 代表一个类</li>
<li><code>java.lang.reflect.Method</code> 代表类的方法</li>
<li><code>java.lang.reflect.Field</code> 代表类的成员变量</li>
<li><code>java.lang.reflect.Constructor</code> 代表类的构造器</li>
</ul>
<h4 id="获得反射对象-1"><a href="#获得反射对象-1" class="headerlink" title="获得反射对象"></a>获得反射对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> reflection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reflection0</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//  通过反射来获取类的class对象</span><br>        Class cl1 = Class.forName(<span class="hljs-string">&quot;reflection.User&quot;</span>);<br>        <span class="hljs-comment">// Class cl2 = Class.forName(&quot;reflection.Reflection0&quot;);</span><br>        Class cl2 = User.class;<br>        <span class="hljs-comment">// Class cl3 = Class.forName(&quot;reflection.Reflection0&quot;);</span><br>        Class cl3 = (<span class="hljs-keyword">new</span> User()).getClass();<br><br>        <span class="hljs-comment">// 一个类在内存中只有一个Class对象</span><br>        <span class="hljs-comment">// 一个类被加载后，类的整个结构都会被封装在Class对象中</span><br>        System.out.println(cl1.hashCode());<br>        System.out.println(cl2.hashCode());<br>        System.out.println(cl3.hashCode());<br><br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-comment">// pojo:</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    String name;<br>    <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">int</span> id;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age, <span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br><span class="hljs-comment">//    getter setter方法</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>一切类的父类 <code>Object</code> 中的 <code>getClass()</code> 方法返回值即为Java反射的源头，所以可以通过对象反射来求出类的名称。</p>
<p>任何一个对象都有一个自己的class对象，提供了该类的属性、方法、构造器、实现的接口。且对象仅能通过系统创建、在JVM中只有一个Class实例、一个Class对象对应一个加载到JVM中的.class文件、每个类的实例都记着自己是由那个Class对象生成、通过Class对象可以完整的获取到一个类被加载的结构、<strong>Class对象是Reflection的根源，获取相应的Class对象后才能动态加载和运行某个类</strong></p>
<p>Class类的常用方法：<br><img src="https://img-blog.csdnimg.cn/20210318153739618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p>
<h4 id="那些类型可以有Class对象："><a href="#那些类型可以有Class对象：" class="headerlink" title="那些类型可以有Class对象："></a>那些类型可以有Class对象：</h4><ul>
<li>class :外部类、成员、局部内部类、匿名内部类</li>
<li>interface：</li>
<li>[]</li>
<li>enum</li>
<li>annotation</li>
<li>primitive type: 基本数据类型</li>
<li>void</li>
</ul>
<p><strong>只要元素类型和维度一致，class就相同</strong></p>
<h3 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h3><p>只有在 <strong>类的主动引用</strong> 会发生类的初始化，如：</p>
<ul>
<li>main</li>
<li>new </li>
<li>调用非常量的静态资源</li>
<li>reflect包中的反射调用</li>
<li>当初始化一个类时，父类未被初始化会先初始化父类</li>
</ul>
<p><strong>类的被动引用</strong> 不会发生类的初始化， 如果：</p>
<ul>
<li>访问静态域，仅真正声明该域的类会初始化（通过子类调用父类的静态变量，子类不初始化）</li>
<li>数组引用</li>
<li>引用常量（常量在链接阶段就已存入到调用类的 常量池中了）</li>
</ul>
<h3 id="类加载器的作用"><a href="#类加载器的作用" class="headerlink" title="类加载器的作用"></a>类加载器的作用</h3><p>类加载的作用：将class文件字节码内容加载到内存中，并将这些静态数据转化为方法区的运行时的数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口</p>
<p>加载的类会进行类缓存</p>
<p>类加载器的类型：</p>
<ul>
<li>引导类加载器：C++编写，JVM自带加载器，<strong>负责Java平台核心库</strong> 用来装载核心类库。该加载器无法直接获取</li>
<li>扩展类加载器：负责jre/lib/ext下的jar包或者 <code>-D java.ext.dirs</code> 指定的jar包装入工作库</li>
<li>系统类加载器：负责 <code>java -classpath</code> 或 <code>-D java.class.path</code> 所指目录下的类与jar包装入工作，是最常用的加载器</li>
</ul>
<p>查看方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> reflection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassLoaderTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">// 获取 系统类加载器</span><br>        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();<br>        System.out.println(systemClassLoader);<br><br>        <span class="hljs-comment">// 获取 系统类加载器的父类加载器： 扩展类加载器</span><br>        ClassLoader parent = systemClassLoader.getParent();<br>        System.out.println(parent);<br><br>        <span class="hljs-comment">// 获取 扩展类的父类加载器：根加载器：引导类加载器（C/C++）</span><br>        ClassLoader parentParent = parent.getParent();<br>        System.out.println(parentParent);<br><br><br>        <span class="hljs-comment">// 测试当前类是哪个加载器加载的</span><br>        ClassLoader classLoader = Class.forName(<span class="hljs-string">&quot;reflection.ClassLoaderTest&quot;</span>).getClassLoader();<br>        System.out.println(classLoader);<br>        <span class="hljs-comment">// 显然，该类是用户自定义类，故为系统类加载器加载</span><br><br>        <span class="hljs-comment">// 测试JDK内置类是哪个加载器加载的</span><br>        ClassLoader classLoader1 = Class.forName(<span class="hljs-string">&quot;java.lang.Object&quot;</span>).getClassLoader();<br>        System.out.println(classLoader1);<br>        <span class="hljs-comment">// 显然是核心加载的</span><br><br>        <span class="hljs-comment">// 系统类加载器可以加载的路径：</span><br>        System.out.println(System.getProperty(<span class="hljs-string">&quot;java.class.path&quot;</span>));<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            D:\JavaDevelopmentKit8\jre\lib\charsets.jar;</span><br><span class="hljs-comment">            D:\JavaDevelopmentKit8\jre\lib\deploy.jar;</span><br><span class="hljs-comment">            ...</span><br><span class="hljs-comment">            D:\JavaDevelopmentKit8\jre\lib\rt.jar;</span><br><span class="hljs-comment">            G:\learning\spring\annotation&amp;reflection\target\classes;</span><br><span class="hljs-comment">            D:\JetBrains\IntelliJ IDEA 2020.1.3\lib\idea_rt.jar</span><br><span class="hljs-comment">         */</span><br>        <br>        <span class="hljs-comment">// 其次 双亲委派机制 可以保证类的加载的安全有效性</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sun</span>.misc.Launcher$AppClassLoader@<span class="hljs-number">18</span>b<span class="hljs-number">4</span>aac<span class="hljs-number">2</span><br><span class="hljs-attribute">sun</span>.misc.Launcher$ExtClassLoader@<span class="hljs-number">1</span>b<span class="hljs-number">6</span>d<span class="hljs-number">3586</span><br><span class="hljs-attribute">null</span><br><span class="hljs-attribute">sun</span>.misc.Launcher$AppClassLoader@<span class="hljs-number">18</span>b<span class="hljs-number">4</span>aac<span class="hljs-number">2</span><br><span class="hljs-attribute">null</span><br></code></pre></td></tr></table></figure>
<h3 id="通过反射来操作对象：（实例化、调用方法、访问属性等"><a href="#通过反射来操作对象：（实例化、调用方法、访问属性等" class="headerlink" title="通过反射来操作对象：（实例化、调用方法、访问属性等"></a>通过反射来操作对象：（实例化、调用方法、访问属性等</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> reflection;<br><br><span class="hljs-keyword">import</span> pojo.User;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * date: 2021/3/19 14:51</span><br><span class="hljs-comment"> * author: 31415926535x</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 动态创建对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DynamicInstance</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException </span>&#123;<br>        <span class="hljs-comment">// 通过包名路径获得Class对象</span><br>        Class cl = Class.forName(<span class="hljs-string">&quot;pojo.User&quot;</span>);<br><br>        <span class="hljs-comment">// 使用newInstance()构造对象</span><br>        <span class="hljs-comment">// 本质是调用类的无参构造器</span><br>        User user = (User)cl.newInstance();<br>        System.out.println(user);<br><br>        System.out.println(<span class="hljs-string">&quot;=================&quot;</span>);<br><br>        <span class="hljs-comment">// 通过构造器创建对象</span><br><br>        Constructor constructor = cl.getConstructor(String.class, <span class="hljs-keyword">int</span>.class, <span class="hljs-keyword">int</span>.class);<br>        user = (User)constructor.newInstance(<span class="hljs-string">&quot;2333&quot;</span>, <span class="hljs-number">233</span>, <span class="hljs-number">666</span>);<br>        System.out.println(user);<br><br>        System.out.println(<span class="hljs-string">&quot;=================&quot;</span>);<br><br>        <span class="hljs-comment">// 通过反射调用普通方法</span><br>        <span class="hljs-comment">// 即 method.invoke(对象， 方法的值) 调用普通方法</span><br>        User user2 = (User)cl.newInstance();<br>        cl.getDeclaredMethod(<span class="hljs-string">&quot;setName&quot;</span>, String.class).invoke(user2, <span class="hljs-string">&quot;emmmm&quot;</span>);<br>        System.out.println(user2);<br><br>        System.out.println(<span class="hljs-string">&quot;=================&quot;</span>);<br><br>        <span class="hljs-comment">// 通过反射操作属性</span><br>        <span class="hljs-comment">// private属性不能访问</span><br>        <span class="hljs-comment">// 可以通过设置setAccessible为true</span><br>        <span class="hljs-comment">// 参数值为true指示反射的对象在使用时应该取消Java语言访问检查，可以使得提高反射的效率，并能访问私有成员</span><br>        <br>        User user3 = (User)cl.newInstance();<br>        <span class="hljs-keyword">try</span> &#123;<br>            cl.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>).set(user3, <span class="hljs-string">&quot;user3&quot;</span>);<br>            System.out.println(user3);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;不能直接修改private属性&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;=================&quot;</span>);<br><br>        Field name = cl.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        name.setAccessible(<span class="hljs-keyword">true</span>);<br>        name.set(user3, <span class="hljs-string">&quot;user3&quot;</span>);<br>        System.out.println(user3);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">User&#123;name=<span class="hljs-emphasis">&#x27;null&#x27;</span>, age=0, id=0&#125;<br>=================<br>User&#123;name=<span class="hljs-emphasis">&#x27;2333&#x27;</span>, age=233, id=666&#125;<br>=================<br>User&#123;name=<span class="hljs-emphasis">&#x27;emmmm&#x27;</span>, age=0, id=0&#125;<br>=================<br>不能直接修改private属性<br>=================<br>User&#123;name=<span class="hljs-emphasis">&#x27;user3&#x27;</span>, age=0, id=0&#125;<br>java.lang.IllegalAccessException: Class reflection.DynamicInstance can not access a member of class pojo.User with modifiers &quot;&quot;<br><span class="hljs-code">	at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:102)</span><br><span class="hljs-code">	at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(AccessibleObject.java:296)</span><br><span class="hljs-code">	at java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:288)</span><br><span class="hljs-code">	at java.lang.reflect.Field.set(Field.java:761)</span><br><span class="hljs-code">	at reflection.DynamicInstance.main(DynamicInstance.java:49)</span><br></code></pre></td></tr></table></figure>
<h4 id="效率分析"><a href="#效率分析" class="headerlink" title="效率分析"></a>效率分析</h4><p>理论上，直接new实例化 &gt; 关闭检测setAcessible(true) &gt; 不关闭的反射方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> reflection;<br><br><span class="hljs-keyword">import</span> pojo.User;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.sql.Time;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * date: 2021/3/19 15:18</span><br><span class="hljs-comment"> * author: 31415926535x</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SetAccessibleTest</span> </span>&#123;<br><br>    <span class="hljs-comment">// 普通方式调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        <span class="hljs-keyword">long</span> st = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000000</span>; i++) &#123;<br>            user.getName();<br>        &#125;<br>        <span class="hljs-keyword">long</span> et = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;普通方式调用: &quot;</span> + (et - st) + <span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-comment">// 反射方式调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        Class cl = Class.forName(<span class="hljs-string">&quot;pojo.User&quot;</span>);<br>        Method getName = cl.getDeclaredMethod(<span class="hljs-string">&quot;getName&quot;</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-keyword">long</span> st = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000000</span>; i++) &#123;<br>            getName.invoke(user, <span class="hljs-keyword">null</span>);<br>        &#125;<br>        <span class="hljs-keyword">long</span> et = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;反射方式调用: &quot;</span> + (et - st) + <span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 关闭检测</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        Class cl = Class.forName(<span class="hljs-string">&quot;pojo.User&quot;</span>);<br>        Method getName = cl.getDeclaredMethod(<span class="hljs-string">&quot;getName&quot;</span>, <span class="hljs-keyword">null</span>);<br>        getName.setAccessible(<span class="hljs-keyword">true</span>);<br><br>        <span class="hljs-keyword">long</span> st = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000000</span>; i++) &#123;<br>            getName.invoke(user, <span class="hljs-keyword">null</span>);<br>        &#125;<br>        <span class="hljs-keyword">long</span> et = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;反射方式调用: &quot;</span> + (et - st) + <span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException </span>&#123;<br>        test1();<br>        test2();<br>        test3();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight makefile"><table><tr><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">普通方式调用: 0ms</span><br><span class="hljs-section">反射方式调用: 171ms</span><br>反射方式调用 关闭检测: 125ms<br></code></pre></td></tr></table></figure>
<h3 id="获取泛型信息"><a href="#获取泛型信息" class="headerlink" title="获取泛型信息"></a>获取泛型信息</h3><p>对于反射获取到的一个方法method，可以通过 <code>getGenericParameterTypes</code>等方法来获取到参数、返回值等泛型数据的信息。（泛型数据信息会在编译器被丢弃，故可以通过此方法来重新获取到） </p>
<h2 id="通过反射对象来获取注解信息"><a href="#通过反射对象来获取注解信息" class="headerlink" title="通过反射对象来获取注解信息"></a>通过反射对象来获取注解信息</h2><p>通过反射获取的class对象可以获取其身上所标注的注解的值，通过此即可达到使用注解来设定某些对象的属性值，即各种框架中注解的执行机制：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> reflection;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * date: 2021/3/19 15:34</span><br><span class="hljs-comment"> * author: 31415926535x</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 反射操作注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationAndReflection</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;<br>        Class cl = Class.forName(<span class="hljs-string">&quot;reflection.Student&quot;</span>);<br><br>        <span class="hljs-comment">// 通过反射的方式获取注解</span><br>        Annotation[] annotations = cl.getAnnotations();<br>        <span class="hljs-keyword">for</span> (Annotation annotation : annotations) &#123;<br>            System.out.println(annotation);<br>        &#125;<br><br>        <span class="hljs-comment">// 获取注解的值</span><br>        TableClassAnnotation tableClassAnnotation = (TableClassAnnotation) cl.getAnnotation(TableClassAnnotation.class);<br>        System.out.println(tableClassAnnotation.value());<br>        <span class="hljs-comment">// 这里的操作即可解释各种框架中的注解所设定的 value 值的作用机制了</span><br>        <span class="hljs-comment">// 即，通过设定注解的值，如 Controller(value=&quot;./static&quot;) 即制定了Controller这个注解对象的值</span><br>        <span class="hljs-comment">// 相关框架即可通过以上方式获取值，进而实现指定注解值来设置相关类的某个（类、属性）的值</span><br><br><br>        <span class="hljs-comment">// 获得类指定的注解</span><br>        Field name = cl.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        TableFieldAnnotation annotation = name.getAnnotation(TableFieldAnnotation.class);<br>        System.out.println(annotation.columnName());<br>        System.out.println(annotation.type());<br>        System.out.println(annotation.length());<br>    &#125;<br><br><br>&#125;<br><br><br><span class="hljs-comment">// 自定义注解</span><br><br><span class="hljs-comment">// 类名注解</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@interface</span> TableClassAnnotation&#123;<br>    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">// 属性的注解</span><br><span class="hljs-comment">// 可以理解为对应数据库中每个字段的属性</span><br><span class="hljs-meta">@Target(ElementType.FIELD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@interface</span> TableFieldAnnotation&#123;<br>    <span class="hljs-function">String <span class="hljs-title">columnName</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">String <span class="hljs-title">type</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-meta">@TableClassAnnotation(&quot;db_studnet&quot;)</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span></span>&#123;<br>    <span class="hljs-meta">@TableFieldAnnotation(columnName = &quot;db_name&quot;, type = &quot;varchar&quot;, length = 20)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@TableFieldAnnotation(columnName = &quot;db_age&quot;, type = &quot;int&quot;, length = 10)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-meta">@TableFieldAnnotation(columnName = &quot;db_id&quot;, type = &quot;int&quot;, length = 10)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age, <span class="hljs-keyword">int</span> id)</span> </span>&#123;<br><br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br><span class="hljs-comment">//     get set tostring方法：</span><br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">@reflection.<span class="hljs-constructor">TableClassAnnotation(<span class="hljs-params">value</span>=<span class="hljs-params">db_studnet</span>)</span><br>db_studnet<br>db_name<br>varchar<br><span class="hljs-number">20</span><br></code></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>笔记-onedrive-cf配置记录</title>
    <url>/2021/06/14/%E7%AC%94%E8%AE%B0-onedrive-cf%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>本文主要记录一下配置OneDrive的东西，<a href="https://github.com/spencerwooo/onedrive-cf-index/blob/main/README-CN.md">具体可见此处</a></p>
<p>OneDrive提供一个开发者账号，可以白嫖1T+的空间，所以可以将其作为一个网盘，本文搭建一个基于cf的网页网盘项目，而保证账号的存活需要参看有关e5自动续费的配置。</p>
<h1 id="获取OneDrive的各种token"><a href="#获取OneDrive的各种token" class="headerlink" title="获取OneDrive的各种token"></a>获取OneDrive的各种token</h1><ul>
<li>打开 <a href="https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade">Microsoft Azure App registrations</a> 创建一个api，（貌似长时间不调用，api就会失效）</li>
<li><a href="https://github.com/spencerwooo/onedrive-cf-index/blob/main/README-CN.md">直接按照这个来，一步到位</a></li>
</ul>
<p>(以下为备份：）</p>
<p>生成 OneDrive API 令牌<br>访问此 URL 创建新的 Blade app：Microsoft Azure App registrations（普通版 OneDrive）或 Microsoft Azure.cn App registrations（OneDrive 世纪互联版本），建议将语言设置为「英语」以保证以下步骤中提到的模块和按钮的名称一致：</p>
<p>使用你的 Microsoft 账户登录，选择 New registration；<br>在 Name 处设置 Blade app 的名称，比如 my-onedrive-cf-index；<br>将 Supported account types 设置为 Accounts in any organizational directory (Any Azure AD directory - Multitenant) and personal Microsoft accounts (e.g. Skype, Xbox)。OneDrive 世纪互联用户设置为：任何组织目录（任何 Azure AD 目录 - 多租户）中的帐户；<br>将 Redirect URI (optional) 设置为 Web（下拉选项框）以及 <a href="http://localhost（URL">http://localhost（URL</a> 地址）；<br>点击 Register.</p>
<p>在 Overview 面板获取你的 Application (client) ID - client_id：</p>
<p>打开 Certificates &amp; secrets 面板，点击 New client secret，创建一个新的叫做 client_secret 的 Client secret，并将 Expires 设置为 Never。点击 Add 并复制 client_secret 的 Value 并保存下来 （仅有此一次机会）：</p>
<p>打开 API permissions 面板，选择 Microsoft Graph，选择 Delegated permissions，并搜索 offline_access, Files.Read, Files.Read.All 这三个权限，选择这三个权限，并点击 Add permissions：</p>
<p>你应该成功开启这三个权限：</p>
<p>获取 refresh_token，在本机（需要 Node.js 和 npm 环境，安装和推荐配置请参考 准备工作）上面执行如下命令：</p>
<p>npx @beetcb/ms-graph-cli<br>demo gif<br>根据你自己的情况选择合适的选项，并输入我们上面获取到的一系列 token 令牌配置等，其中 redirect_url 可以直接设置为 <a href="http://localhost。有关命令行工具的具体使用方法请参考：beetcb/ms-graph-cli。">http://localhost。有关命令行工具的具体使用方法请参考：beetcb/ms-graph-cli。</a></p>
<p>最后，在我们的 OneDrive 中创建一个公共分享文件夹，比如 /Public 即可。建议不要直接分享根目录!</p>
<p>最后，这么折腾完，我们应该成功拿到如下的几个凭证：</p>
<p>refresh_token<br>client_id<br>client_secret<br>redirect_uri<br>base：默认为 /Public。</p>
<p><strong>说明：</strong></p>
<ul>
<li>client_secret 的 Value 现在只能设置最长2年了</li>
</ul>
<h1 id="cf配置"><a href="#cf配置" class="headerlink" title="cf配置"></a>cf配置</h1><p>获取到以上的token后，<code>wrangler login</code> 登录cf</p>
<p>修改 src/config/default.js：</p>
<p>client_id：刚刚获取的 OneDrive client_id；</p>
<p>使用 wrangler 添加 Cloudflare Workers 环境变量</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 添加我们的 refresh_token 和 client_secret</span><br>wrangler secret put REFRESH_TOKEN<br><span class="hljs-meta"># ... 并在这里粘贴我们的 refresh_token</span><br><br>wrangler secret put CLIENT_SECRET<br><span class="hljs-meta"># ... 并在这里粘贴我们的 client_secret</span><br><br>wrangler secret put AUTH_PASSWORD<br><span class="hljs-meta"># ... 在这里输入我们自己设置的认证密码</span><br></code></pre></td></tr></table></figure>
<p>发布： <code>wrangler publish</code></p>
]]></content>
  </entry>
  <entry>
    <title>笔记-从量化宽松到当今世界的金融游戏</title>
    <url>/2021/05/16/%E7%AC%94%E8%AE%B0-%E4%BB%8E%E9%87%8F%E5%8C%96%E5%AE%BD%E6%9D%BE%E5%88%B0%E5%BD%93%E4%BB%8A%E4%B8%96%E7%95%8C%E7%9A%84%E9%87%91%E8%9E%8D%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="58c11c1ea371ab02bf55c5dca2678e3a3e6ba033c8bae2499a6b12a11f11c7d8">351fea9dffbb0cf1ff6c6b27295278ba964573ac3f9c1c2b81d357804ee9a3b63deed544aea779b1f5f5fb347342e231ccb28751fedd70754c5bac472aaa11c836c8cf38fc8ba8be3ff6fa26d28b71c9c9d14279fc361045978362034fbcd869c9a268710118709d1ddba4d5096221d1ae7e6b34948534e47251dcf7a739905049f0cca2328add89b9c3e82d5cfb2563ca4e075a374879fcb3fff85468582881410e35f8c7341cc43d6383dbd8adfb15a591e80df994bf9e944a7b8de29e37c82ba6a7468345de04c98cb9559859fab4c1f52eb847dea06829a485a93916890a605ff79f12bfbeaabf2dbc8609574406ca53dc90589cd58ce5444ddd83a7d6260b6a758d9323c2102502f5a1d7337ed4fcb83c4e91472e09233527057faf024e9697baa9a974fc0b9bbdd427107762268383d99ed19031bedc60e855e2b8f586c5822ae31070d7a098f86aa583c8620b241df603575eb587fa6a2cc83d61610019a04379a41f36958952fea8b6b73b54d55fbcaaa144b58d7c78a5a1a042a45d6f938c44241e3bb084f46257a1c8dd8414f4e7661a35f2d3e95e67710279c9cc8a4efe6fe0f5c23dcb961d1c12bb612fd4810bc4db759ec2bb62e74229d5ccd9a7fd8a16b9539af0b55dcc35f9fe3ed48a5dc2c447e51402faba7570a60d1abd609ecbde3aa1360eed52c93174eda68f4384b22f238e768eec8959a15a0bf18ca03ecbfebec158312da71c061566867a4d695e2e915a150516a237ab20556a740531ef0890fa1739e3e8522b7270a2fa97fba2a663e4ef98476826b9fdefaf492609560d3a5ebb338e099e51283d5223c934344bed6194990683f5f734ef0bbbb1d19fc26d77a03dc6820fcd5bfae95ad78ffdefb1eb47a3a73236ca1f5f2bddd987e92a86ab4e0f462140d6b10e0b233ea119be5c5c1c079278a17dbe4a19bf9e4ec12787eec1952209ec674dfacc9b630fee50822c849b51538e4f37d7e479bb0bf3d47e363e3a394ebdf44305e322b250ee5ee35844a3df5e7415e3d36ab7428549ff8e6b8165859828c15a0bd5cfecd8c5c04bdfc5bc15b9806fc291f5130493089122bec2e8a349d38ecb884ecd2ff0d003de2e7daec18f06ab8e7698f1591799c2148d2ad222b049b8008699e60994d138419235d918322ab5a8d5dc7c9fc0a8c396683d54666bfe41a52e744d133d6afddb5a54e54a5ae92374af707ff33aac3f7f36384d918da299f546bdf5c9f6970b2e5c7ed173617f238c9b031d2cbc84d28988fdd2bcd84d9c8bb79605137314355fcd48209a6f87f04e63e1d45f35bf36e9809a1f7947be7349729ac4134d9a35b13162f9b8290085e0d9e2858cd73d8644858b647c6152bf9f8b333040670eded42afc4260f675955da6e1a75345bcd73e686117e6cc6c9ceb161cf36d39f5a0e03ab041fdf298f279c5c659a6f6e37a6cd13264b7c991a844755d092bbf72c2fa349ee2de8edd0268f82d34d4a534c1c11911b8b1323372821fb6d60336e6d7d3280fcab6a81a1590a4766e0f1416ee0d80ec05a34a3500397f4fbd1e0b71bf483d4313c7a9c7d906605a425961a9c79aa771d8adc5b22cd83e49f1446d430e003dba2ccd8f1864cbceec272a2a3ab58b8d7fa6f6b09f5f90bda0ba6ff08d634d11a2c13c6ab589adca3c12957d7a8b02dea2c84f9f0ca003cc14700dc4077272bd5385f0f3da6dd0db918d25f32164be6e0c3cebe245498d0ae5c4ad9fbf2fb2a865490800691c9fbdb2f60c7bb94ce10de07e5a72dd3ef564dcd0bdb9366626b148de359833517d5c0fd814f770277b8f157b59d39d61d795a34d2d4e3af9968ac40eeec2e1cb160998e6fbada59c9314d30c7ab72d511767e9362683d2ccfa8cb5e5491dced9e5d33463a649390a61fc6aad92c78ce734a8e79eafd2248b726225011a1edd0808b6071c70b2ef1fe7a682f86848e69396b4da4426c64751eb45658fe38a700455801f50900a8cc19f9b07a8e59aa51f85cd618bbb8eb32142b8f85b1bfd297494e201de30ccaddcaf7ddc6f7c10b996e9c0b536ae2f1ebefed3d20140430757749fde2c4a78ecf4274f02b0b55f7b1b8a77b7b4760eaad0e26ff6b6d4cb1b211b5440d2f5992ccd81f3ca55e05259ab50d9c66b15854b328efa354d03290909dc54a85883100596cf55f5a472a8fd8dfbe46fe3b3feccdac3fb8a6e8604f115dda0641d95c1ceb4db26907188095272b0fffd8eb2c76301cd4cfbed348857ae9164d42caff18532518da6c650a98b64f5ba23ab201bb6fee17f10522d3d17747d462b30d3f8ae1db65bca255b545df8dc9422f6aaca4b1a1a5274b0de28f9abb7d9b97caca4302fe3d5c2689004b668e60d226edab99a096c83cca539f4eb786b64a6ef3d0a873565005c92b324e98bea55b9677f236f0e5eebb6aee091b20fc8091b97c901313e6b34e9bbf2a44194b83d2ea9904321f9840aeedad0e666013f36a16e5f14d6664231b356e66ae21d84d3e16a2f35f75f15ade26c2fb137be5017bff01def4e82156b52644dafd8931626b3767e9bfcdb20d503d56dc62671753dc41341cd2a1536d96d93e7d02867363c63f4649cd5d21c5d07c011f2dce9a624087e0caaf291d5258e5f3eebfe226eb3259c7df77ed0c4deaa72c3e864e386f0a6b7c6db58e5547259c12b4a804bb9981555178aceac9fd6a7c65d6875d8deac1d80bc49bace8c6defd18401f313d0ff62ad7ba1965b139894b38509b5003672949ff823e40651598a705a8f8baa41468b566abb3565f6944f6d2dfbfde213a739036b175b9cd1c3fd0c09abba24b3321ac95bfe5b739f5198ac6c5c23f467c0172d2a544ec4a7304e16dd2eb33baee5bb8377e46cf59ce0f7a3a0a0ff9590a2d9e609b3ebe6a02e4b3e407d8c02ace05b6a32c7307ca5b75101eb020bb865155fc062ac914c9c70a73460f26f9dcfbff28f0626ef391b3f5ae7225a2670ec75037ac14ff924ffb3bb72fb625e700d95d2ab3d5e2a4649ce4c89a4c06ba8eb99ce035ebd5d41770b0b96110026c01dd8ac4f51f2348158c0956cc41aed875ae3d86ff3b29a5821c627439408d1ca72a173c5c0be7769f050f123caf38126845dd946d0534c56623a8d0fa43e14d890defdc4b7cf235e15917b9c62c4105ffd22c8f54545630151f895cfff80e1962076a3a72928842eb8d9765c8a1cee26e3cb7e75a8a0ffbb6bcd9606485610e509755de2d0e568e93527215680fc053a888513666286c0ebf325603b191d960f6d2104dd873df6cfae762396c73b491f57f6c91092ae10aea911c42093beae9d9e9bb91ca3cc3b5016bfd170308370cdb2cb347bb9658b64f97850740e0dbaec2c2c428b1110ef382751a80cdfad5db4d541bb61e469080a62060dcc4073a5495dc38cc778d37a4953acb8b918a12b99ba7782c380a577351ceb2efa6ca0093e6bbc4fff1514ff59de452dea733e8c4d69b2377e90a0a713df8205f2c62c9f5ca42c4d9d71ab6436824196a37aa67f324bda20de3661fb11d12bdfba16ec76ba5e267ca91759c4b3bad10fbd91afe7405baccf50f436500860a1127869ef7f908b1e2752f64f05ff122e5f92340299f12f65d86731813710aacc44b1d835da8e9a57cbb0e066eb3e5a1cc83a7164452e4bd1e777226dc8e828ea2071b4e254911ef173dadcf2e266b68ef3c562c0e88f7342a294930e878c1f6f9d76d137e2e41f50c64b42db2cf96e625ed4e100b40541c9d9ace57dd5ba872c253c6fc72eaf4722d4b57a891e60217fe174f83a856a58a59ba7467ae866b6d7e3014de0327b8b721cb221a3c0adf2b86052f2b27058f1dec892aad4d1dc2c7ed9be7a5ee22f95c22dbcec4b52c004f2e93b628b5b35e9584f28b1c5dc874d2730686cc17177baf88bfcaa4e3af0a8e6636ce754cd27b80be475543cf4908797f8ad64bd0b32559358ce88f1c7f4296257fb98b812465256d4f0d32ba9380e279c712abe6db2da4af283bd020078032560af3c51e12d8ee74f95afe6c49c7856618b5e9c9fe7985f0a6afcc756b5027e5c9309037af7be80c149a41bece6d423e979857d9b388db39a299b5e4e075f3c26670be7db41a1754c1a0d397584419f515028b171201478629accbf789af87a51d323cf48613bb281b4b623f9d9c7cd47bd16a63c6d0782c9825acb4c961a4817b161978dd8dd71343f39e118bf58871f933a112caf2f9c505c1e447704aac93e5c581bfaa2201dd974619b0cf16b9901ebffbcf587d01c9ea77848ec3008c82d3f9aea16fe5358aab94ce7108349b72e3c0951f1260a624ecfd9cb3a69228a4344560d9922b86ef2923e6c459becf7b4efc4d8169e11c45e40511e4bbefec068d192d405c2eddfb3f76936a529ca9f29db69ed589c4165bbf4147f05e6ff66b673c5793537db741b1279a49b6ad887fbd426ad6559a6b950c9c5ad5ac30d003cefc01e773394f2446067436b2a144fabe736fc3ad1d2827443660048f6974147afc239a0dbc99429d2f3167fb1edb8f4b84a9aefb8e56a34717e4adb1d0b70b123d05397b345aa73aa6f06722d0c4082a965f480240547a8c837b50d71a13c26b5b1bfa02504149344e8ce1ba90cf9668dadb464b5c7e5d7d65a44c7ea6420520454358ee619e673fdbd90ccf5c2a6850844eb99885b0769c461aca1fc4b2d1b7296ca34515bb1240f905aa1f959f30b29bb244f38cb259da9a1416bd6cbe3f5f9179a7f122d2bee24ef527207b629a6a369b3b90558ee5329321e421f4650cd8c12a5bd01d312d69dc35f885c2d0988e28d7df452069608d68e318ca74f620f256d1c731e19030412cccf11f64e1fa653a77e050d4a0895d743b3ae1258ba1cf575c8cf6efbe1b64ca8a685ce46e4cc59e91feb1be5eaa45e27278f814daeb42e9e8038629d012b01d667452604698e338801d0de02def8d5ade0908e8c02b39b3cb1acfd5c47cf86a2a0de70ac04ec995f9251899b4f236c2d678f4196601c4f3cac26ef848b46c4d187c4ed66c471f7a8cdcb9ccdddd1c1e4e52757f14e8c25af48843cc2548bbdb58de7786a09e4544bc7de9a870ccbd41de6f37b41fb333fe0810a0e7665fd00d822d6406c37555e778ba7c2232588a2d81ef413b43e9c913eb9ab65332f11042c89f3c9430a72f83dfe4c4cfdefbb6519a2784bee09364ee9711b1ca2e36dc22ac8a86c9bd19376a80bb6900840480b9c2c461943f8fbf1f5908379ed0702693acffaa2976cfa7b0b89ac0dc22b2903110f983fd500b6d12c356cb98eb781e93d72bd64e06419bacf4d02f33401e2a2dc5b8b183382ca11ecec8289bde5f591456ec9629b4000c3990b51b06ce195a12477b08f037db2984aed4b15346efa25764020506d420152b8b199841cbb5789922ff05d7e7c28dc9aee6baa340d3bb731885b8a842063cadc6e47954df3ae87e581d511a73ba344f686c01cdc5d2d35</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>[笔记]应用写作</title>
    <url>/2019/12/21/%E7%AC%94%E8%AE%B0-%E5%BA%94%E7%94%A8%E5%86%99%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><ul>
<li>写作的分类： <strong>文学创作</strong> 艺术写作、 <strong>应用写作</strong> 实用写作；</li>
<li>应用写作的发展： <strong>萌芽期</strong> ： 上古至先秦时期（周易·系辞、尚书（典、谟、训、诰、誓、命）） <strong>初步形成时期</strong> ： 秦汉时期（李斯 《谏逐客书》 晁盖 《论贵粟书》 司马迁 《报任安书》）<strong>发展期</strong> ： 三国魏晋南北朝 （曹操 《求贤令》 诸葛亮《出师表》 <strong>成熟期</strong> ： 唐宋时期（苏轼《答刘巨济书》） <strong>完善期</strong> ：元明清 分上行、平行、下行文 <strong>改革期</strong> ： 辛亥革命至今</li>
<li>应用写作的特点： 功能实用性、内容的真实性、体式的规定性、表述的简约性、运作的时效性</li>
<li>学习应用写作的原因： 社会-需要杰出的表达者、个人-个人基本素质，技能之一、自身特点发展趋势</li>
</ul>
<span id="more"></span>
<h1 id="系统写作理论"><a href="#系统写作理论" class="headerlink" title="系统写作理论"></a>系统写作理论</h1><h2 id="系统写作理论-1"><a href="#系统写作理论-1" class="headerlink" title="系统写作理论"></a>系统写作理论</h2><ul>
<li>系统论的核心思想是 <strong>系统的整体观念</strong> ，分析系统的结构功能， 研究系统、要素、环境 三者的相互关系和变动规律</li>
<li>基本内容： 考察系统的 <strong>语境、功能、结构及其演化规律</strong></li>
<li><strong>文体分类</strong> ： 认知功能文体、行事功能文体、人际功能文体</li>
</ul>
<h2 id="文本语境"><a href="#文本语境" class="headerlink" title="文本语境"></a>文本语境</h2><ul>
<li>文本的非语言语境：指不以文本文字形式存在的语境因素，包括 <strong>情景语境</strong> 和 <strong>文化语境</strong></li>
<li>情景语境： 指构成说话和写作活动的现实条件，包括 <strong>语篇范围（写作对象）</strong> 、 <strong>语篇方式（写作方式）</strong> 、 <strong>语篇基调（写作主体）</strong> 、写作时间和场所</li>
<li>语篇基调（写作主体）： 作者、协作者、读者</li>
<li>语言语境： 指以语言文字形式存在的语境因素，包括 <strong>篇际语境</strong> 和 <strong>篇内语境</strong></li>
<li>篇际语境： 即生产的文本与 <strong>其他</strong> 文本之间的语境关系</li>
<li>篇内语境： 包括 <strong>篇 与 各部分的语境</strong> 和 **篇中各部分的语境（上下文关系）</li>
</ul>
<h2 id="文本功能与结构"><a href="#文本功能与结构" class="headerlink" title="文本功能与结构"></a>文本功能与结构</h2><ul>
<li>文本的三大功能： 知行功能（写作对象）、人际功能（写作主体）、语篇功能（写作方式）</li>
</ul>
<h2 id="文本生产过程"><a href="#文本生产过程" class="headerlink" title="文本生产过程"></a>文本生产过程</h2><ul>
<li>文本生产过程阶段划分： <strong>准备阶段</strong> 、 <strong>起草阶段</strong> 、 <strong>修改阶段</strong></li>
<li>文本生产策略： <strong>认知图式策略</strong> 、 <strong>主体互动策略</strong> 、 <strong>创新思维策略</strong> 、</li>
</ul>
<h1 id="新闻写作"><a href="#新闻写作" class="headerlink" title="新闻写作"></a>新闻写作</h1><h2 id="新闻文体"><a href="#新闻文体" class="headerlink" title="新闻文体"></a>新闻文体</h2><p>新闻的定义：</p>
<ul>
<li>反映说： 新闻是新近发生事实的反映；</li>
<li>功能说： 新闻是报道或评述重要事实以影响舆论的特殊手段；</li>
<li>事实说： 新闻是一种新的重要事实；</li>
<li><strong>公认定义</strong> ：新闻是 向社会成员传递具有新闻价值的真实信息；</li>
</ul>
<p>新闻的原则：追求真实的原则、公正报道的原则、准确报道的原则、客观报道的原则</p>
<p>消息一词最早出现在 《易经》</p>
<p>消息的特点： 短、快、新、真、社会价值</p>
<p>消息=事实+价值+传播</p>
<p>反映新闻价值的要素： 时间性、显著性、接近性、新奇性、重要性、人情味</p>
<h2 id="消息写作"><a href="#消息写作" class="headerlink" title="消息写作"></a>消息写作</h2><ul>
<li>消息的结构： 标题、<strong>消息头</strong> 、导语、主体、结尾</li>
<li>消息头是消息前面那段： <strong><em>出版社</em></strong>电（记者<em>*</em>） 作用：声明版权、发稿来源、时间等</li>
<li>消息的经典结构： 倒金字塔结构，其他结构： 悬念式结构（金字塔结构）、时间循序结构</li>
<li>倒金字塔结构： 标题、导语、主体</li>
</ul>
<h2 id="消息标题的写作"><a href="#消息标题的写作" class="headerlink" title="消息标题的写作"></a>消息标题的写作</h2><ul>
<li>多行标题： 引题/眉题、正题/主题、副题/辅题</li>
<li>双行标题、虚实结合： 引题+正题、正题+副题</li>
</ul>
<h2 id="消息导语、主体、背景的写作"><a href="#消息导语、主体、背景的写作" class="headerlink" title="消息导语、主体、背景的写作"></a>消息导语、主体、背景的写作</h2><p>消息的导语： </p>
<ul>
<li>位置： 消息的第一段</li>
<li>功能： 简短笔墨反映要点、为整篇报道定下基调、唤起读者的注意</li>
<li><strong>写法</strong> ：叙述式、描写式、引用式、评论式等</li>
</ul>
<p>消息的主体：</p>
<ul>
<li>位置： 导语之后展开的部分</li>
<li>功能： 对新闻事实做充分而具体的报道和说明，或对导语进行解释、深化，或补充新的事实</li>
<li>注意： 紧扣主题；具体充实；避免重复</li>
</ul>
<p>消息的背景：</p>
<ul>
<li>解释、烘托和深化主题，帮助读者理解新闻事实</li>
<li>代替记者发表议论，使报的现得客观</li>
<li>补充情况、介绍知识</li>
</ul>
<h1 id="调查报告"><a href="#调查报告" class="headerlink" title="调查报告"></a>调查报告</h1><h2 id="何为调查"><a href="#何为调查" class="headerlink" title="何为调查"></a>何为调查</h2><ul>
<li>调查的过程： 确立调查主题、设计调查方案、实施调查方案、统计分析调查资料、撰写并修改调查报告</li>
</ul>
<h2 id="调查的主要方法"><a href="#调查的主要方法" class="headerlink" title="调查的主要方法"></a>调查的主要方法</h2><ul>
<li>主要方法： 文件调查、实验研究、实地考察、文献查阅</li>
</ul>
<h2 id="调查的功能、分类、写作"><a href="#调查的功能、分类、写作" class="headerlink" title="调查的功能、分类、写作"></a>调查的功能、分类、写作</h2><ul>
<li>功能： 通过定量和定性的分析方法，获取真实的信息反映客观情况、经验、问题或者规律性的东西，满足读者的认知需求</li>
<li>类型： <strong>情况调查型、典型分析型、探讨研究型</strong></li>
<li>写作的结构： 标题、概要、正文、结尾、附件</li>
<li>写作过程： 确定选题并不断优化、科学分析、结构合理、论证充分、深化研究成果</li>
</ul>
<h1 id="演讲稿与求职信"><a href="#演讲稿与求职信" class="headerlink" title="演讲稿与求职信"></a>演讲稿与求职信</h1><h2 id="演讲与演讲稿"><a href="#演讲与演讲稿" class="headerlink" title="演讲与演讲稿"></a>演讲与演讲稿</h2><ul>
<li>演讲稿的特点： 使人信（记叙、描述）、使人知（修辞）、使人行（议论）</li>
<li>演讲稿的突出特点： 针对性、鲜明性、通俗性、鼓动性</li>
<li>写作特点： 因时而发、因事而发、因景而发、因情而发</li>
<li>演讲稿的结构： 标题、开头、主体、结尾</li>
<li>标题的分类： 概括式、设问式、鼓动式、比喻式</li>
<li>开头的分类： 开门见山式、提出问题式、引用名句式、实例导入式、现场引入式</li>
<li>主体的分类： 并列式、递进式、时间顺序式</li>
<li>结尾的分类： 发出号召、提出建议、展望未来、总结要点</li>
</ul>
<h2 id="求职信"><a href="#求职信" class="headerlink" title="求职信"></a>求职信</h2><ul>
<li>求职信的基本内容： 求职目标、求职缘起、求职条件</li>
<li>求职信的结构： 称呼、开头、主体、结尾、落款、附件</li>
</ul>
<h1 id="规章制度"><a href="#规章制度" class="headerlink" title="规章制度"></a>规章制度</h1><h1 id="党政机关公文"><a href="#党政机关公文" class="headerlink" title="党政机关公文"></a>党政机关公文</h1><h2 id="党政机关公文-1"><a href="#党政机关公文-1" class="headerlink" title="党政机关公文"></a>党政机关公文</h2><ul>
<li>党政机关公文的概念： 党政机关公文是 党政机关实施领导、履行职能、处理事务 的具有 <strong>特定效力</strong> 和 <strong>规范体式</strong> 的文书；</li>
<li>特点： 权威性、规范性</li>
<li>分类：按行文关系和行文方向： 下行文（11种）、平行文（4种）、上行文（3种），其中意见三个都有，通知是下行文和平行文都有</li>
<li>决议： 适用于 会议讨论通过的重大决策事项</li>
<li>决定： 适用于 对重要事项作出决策和部署、奖惩有关单位和人员、变更或者撤销下级机关不适当的决定</li>
<li>命令： 适用于 公布行政法规和规章、宣布实施重大强制性措施、批准授予和晋级衔级、嘉奖有关单位和人员</li>
<li>公报： 适用于 公布重要决议或重大事项</li>
<li>公告： 适用于 向国内外宣布重要事项或者法定事项</li>
<li>通告： 适用于 在一定范围内公布应当遵守或周知的事项</li>
<li>党政机关公文的格式： 项目和版式</li>
<li>格式类型： 文件格式、信函格式、命令格式、纪要格式</li>
<li>文件格式要素三部分： 版头、主体、版记</li>
</ul>
<h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><ul>
<li>通知的功能： 适用于发布、传达要求 <strong>下级</strong> 机关执行和有关单位周知或者执行的事项，批转、转发公文</li>
<li>通知的特征： 广泛性、指示性、知照性、时效性</li>
<li>通知的分类： 发布性通知（印发性通知、批转性通知、转发性通知）、 指示性通知（向下级机关安排工作）、 会议通知 、 知照性通知</li>
<li>发布性通知的结构： 被发布文件、发布根据、发布语、执行要求</li>
<li>指示性通知： 缘由（用过度语句引起下文）、事项、结尾</li>
<li>会议通知： 缘由、事项、结尾</li>
<li>知照性通知： 缘由、事项、结尾</li>
</ul>
<h2 id="通报"><a href="#通报" class="headerlink" title="通报"></a>通报</h2><ul>
<li>通报的文种特征： 实例的典型性、重要性，内容的知照性，教育的知晓性</li>
<li>通报的分类： 表彰性通报、批评性通报、传达性通报</li>
</ul>
<h1 id="报告"><a href="#报告" class="headerlink" title="报告"></a>报告</h1><ul>
<li>报告的功能： 适用于向上级汇报工作、反映情况、回复上级机关的询问</li>
<li>报告的特点： 陈述性</li>
<li>报告的分类： 工作报告、情况报告、答复报告、报送报告</li>
<li>工作报告的结构： 报告前言、报告主体、报告结语</li>
</ul>
<h1 id="请示与批复"><a href="#请示与批复" class="headerlink" title="请示与批复"></a>请示与批复</h1><ul>
<li>请示的功能： 向上级机关请求指示、批准； 祈请性</li>
<li>请示的分类： 请求指示性请示、请求批准性请示</li>
<li>批复的功能： 答复下级机关请示事项； 针对性、政策性</li>
<li>批复的分类： 指示性批复、审批性批复</li>
<li>批复的结构： 批复缘由、批复意见、结语</li>
</ul>
<h1 id="函"><a href="#函" class="headerlink" title="函"></a>函</h1><ul>
<li>函的分类： 两类六种： <strong>发函</strong> ：商洽性发函、询问性发函、审批性发函； <strong>复函</strong> ： 商洽性复函、答复性复函、审批性复函</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-观视频-未曾设想的道路</title>
    <url>/2020/03/01/%E7%AC%94%E8%AE%B0-%E8%A7%82%E8%A7%86%E9%A2%91-%E6%9C%AA%E6%9B%BE%E8%AE%BE%E6%83%B3%E7%9A%84%E9%81%93%E8%B7%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>观视频-未曾设想的道路-笔记<br><a href="https://www.bilibili.com/video/av92679623">https://www.bilibili.com/video/av92679623</a><br>制度变迁有两种道路：1. （传统的历史唯物主义，生产力的变化引致生产关系的变化）生产力决定生产关系，经济基础决定上层建筑，自下而上的进行制度的变迁，例如：封建领主向封建地主制的变化为何会发生在战国末期，发生在秦国？结合考古史料来看，就是秦国的农业生产出现了升级，主要是铁器和耕牛的使用，使得小农经济的出现成为可能，从而为商鞅变法等一系列改革提供了土壤。 2. 完全反过来，通过先改变生产关系，从而促进了生产力，自上而下的进行制度的变迁，也就是一条“未曾设想的道路”。但是这种道路是在偶然性和机遇之下才会形成的，比如，英国当年会走上资本主义，其实就是一条英国人“未曾设想的道路”</p>
<span id="more"></span>
<p>列宁在《论我国革命》提出两个问题：1.世界历史是由一般性和特殊性共同组成，所以第二国际的批评家片面的强调了一般性，而忽略了世界历史的特殊的原则。2.凭什么不能够先夺取上层建筑，然后在文化上或者在生产力上赶上先进国家的水平呢。（是对传统的历史唯物主义的一个创造性的解释。）</p>
<p>葛兰西讲 十月革命 是一场反对资本论的革命，是一场反对历史唯物主义的革命。</p>
<p>生产力水平的质的提高是 崭新的经济社会形态确立的前提。</p>
<p>铁器和牛耕的使用使一家一户的小农经济有可能存在，所以这是商鞅变法中采取 <strong>析户</strong> 政策的生产力基础。</p>
<p>美国UCLA的历史学家：罗伯特·保罗·布伦纳的研究：14世纪到16世纪欧洲三个不同地区的制度变迁的轨迹：英格兰、法国、易北河以东的东欧地区。14世纪时期，三个地区的生产力水平大体一致，并且农奴制都已经出现解体。而16世纪后，</p>
<ul>
<li>英格兰：黑死病造成农奴大量死亡，（8:06为阻止文艺蔓延至北方“鼠疫小镇”亚姆村民拒绝逃离）、封建君主间的兼并战争导致英国贵族数量大量减少，后果是 <em>大土地所有制</em> —圈地运动（兰开斯特家族和约克家族为了争夺王位而引发内战，又称“玫瑰战争”）。英格兰由农奴制转向农业的资本主义生产关系的雏形：贵族将土地租给善于重点的农奴，农奴之间为土地的租约进行竞争，拿到地的农奴雇佣其他的农奴—&gt; 马克思在资本论中研究过的一种阶级结构：土地所有者、租地的农场主、农业的雇佣工人。原因：特殊历史形势造成阶级斗争形势的变化。所有人为了利益的最大化，导致农业的技术进步也就是生产力的发展。布伦纳提出英国资本主义的农业起源的理论。</li>
<li>东欧：三十年战争和德国农民起义导致东欧工商业大量破坏，使农奴制得以复辟，绝对主义集权的君主制。</li>
<li>法国：法国资产阶级革命摧毁了旧的土地关系，将贵族和教会的土地分给农民，使得广泛建立起小生产者个体经济。传统的农奴关系向一种汪洋大海般的小农经济过渡</li>
</ul>
<p>布伦纳归结为三个地区阶级斗争的具体形势，不同阶级力量斗争关系对比的变化。属于第二条道路，变革的动力来自上层建筑</p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>思想记录</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>[纪录片笔记]-华尔街</title>
    <url>/2019/08/29/%E7%BA%AA%E5%BD%95%E7%89%87%E7%AC%94%E8%AE%B0-%E5%8D%8E%E5%B0%94%E8%A1%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>本文只是无聊时在看纪录片 <em>华尔街</em> 时遇到的一些没听说过的知识的记录，，<a href="https://www.bilibili.com/video/av13814927?">视频地址</a> ，，，虽然不是学金融的，但是一直对金融感兴趣，，，2333</p>
<span id="more"></span>
<h1 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h1><ul>
<li>华尔街最早是由荷兰人在 新阿姆斯特丹 建立的一道墙，，Wall Streat</li>
<li>新阿姆斯特丹后来在 英荷战争之后，，英国占领了之后更名为 新约克</li>
<li>现在的交易所、银行都是由荷兰人所提出建立的，最早的股份制也是荷兰成立的荷兰东印度公司所建立的</li>
<li>英国： 光荣革命： 英国议会与英国国王的一场权力的斗争，标志着英国君主立宪制的建立</li>
<li>英荷战争之后，伦敦取代了纽约</li>
<li>最早的成功的跨国银行： 罗斯柴尔德银行</li>
<li>第一个现代意义上的中央银行(center bank)： 英格兰银行</li>
<li>现在的华尔街指18世纪90年代的《梧桐树协议》</li>
<li>美国的第一任财政部部长： 亚历山大.汉密尔顿</li>
<li>旋转门计划：美国建国初期，有许多的债券以及旧的货币，政府发行新货币一比一换取人们手上的旧货币，市场上就全为新货币，然后发行新债券，新债券用新货币购买，新货币回流到政府，然后用这笔钱回购所有的旧债券，旧债变新债，目的保住政府信用， 外债变内债</li>
<li>杰斐逊和汉密尔顿的分歧=&gt; 美国的民主党和共和党， 政府是否应该进入市场</li>
<li>《制宪会议》，汉密尔顿作为主要的召集人</li>
<li>盐铁论争论的核心是桑弘羊之首的倡导的是国营垄断和自由经济之争论</li>
<li>纽交所成立后，华尔街出现第一个工程债券，伊利运河债券</li>
<li>黑球航线： 纽约到英国利物浦的定期邮轮</li>
<li>牛市与熊市是股票市场行情预料的两种不同趋势。牛市是预料股市行情看涨，前景乐观的专门术语，熊市是预料股市行情看跌，前景悲观的专门术语</li>
<li>库克发售战争债券：将5亿的债券分成小债券，呼吁爱国主义来使人民来购买债券，获得资金，（爱国热情-&gt;战争债券</li>
<li><a href="https://zhidao.baidu.com/question/1240393995521832699.html">四种垄断组织：</a> 卡特尔、辛迪加、托拉斯、康采恩</li>
<li><a href="https://blog.csdn.net/kk55guang2/article/details/82082313">https://blog.csdn.net/kk55guang2/article/details/82082313</a></li>
</ul>
]]></content>
      <tags>
        <tag>纪录片</tag>
        <tag>经济</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>线段树-最小逆序数</title>
    <url>/2018/10/12/%E7%BA%BF%E6%AE%B5%E6%A0%91-%E6%9C%80%E5%B0%8F%E9%80%86%E5%BA%8F%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这是一道简单的线段树的题，，，当然还有很多其他的做法，，，甚至时暴力都可以，，，</p>
<p>用线段树主要是为了在练一练线段树的使用，，，而且这次，，我换了一种写线段树的方法，，，</p>
<p>貌似也是很多大佬都在用的一种写法，，，</p>
<p>之前一直用的入门时为了好理解的一种写法：节点用结构体node表示，，，并且为了理解还添了每一个节点所对应的左右边界，，，</p>
<p>但实际上，，这些信息是没有用的，，，或者说是多余的，，，直接在使用时计算或者直接作为函数的形参传递就行了，，，，</p>
<p>这样的写法代码量更加的少而写写起来也方便，，，占用的空间也少了些，，，</p>
<span id="more"></span>
<h1 id="题目的分析"><a href="#题目的分析" class="headerlink" title="题目的分析"></a>题目的分析</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1394">这道题不像之前做的线段树的题那样所维护的值就是最终要求的答案，，，而是中间的某一过程量，，，</a></p>
<p>首先，，题目的意思就是对于一个给定的数列 $a<em>0 , a_1 , a_2 , ,,, ,a</em>{n-1}$,,,每次将第一个数移动到后面，，，这样一共有n种序列，，，然后对于每一种序列都有一个 <strong>逆序数</strong> ，，问你在这些逆序数中最小的那个是多小，，，，</p>
<ul>
<li><p>这道题只要知道其中一个序列的逆序数，，它的相邻一个逆序数也就可以推出来，，，具体是这样的：</p>
<p>   $当已知第i个序列的逆序数sum_i时，，$</p>
<p>   $第i+1个序列的逆序数为sum_{i+1}=sum_i + n - a[i] - 1 - a[i],,,,$</p>
<p>   $就是说当将第一个数移到最后前，，，$</p>
<p>   $它以前的逆序数有 a[i] 个所以要减去这些，，$</p>
<p>   $而当它被移到最后时，，，$</p>
<p>   $前面又多了 n - a[i] - 1 个，，，$</p>
<p>   $最后的sum就求出来了，，，$</p>
</li>
<li><p>当知道上面这个递推式后，，，我们的任务就是求出所输入出的数列的逆序数，，，然后再根据递推式找出最小的那一个输出就行了，，，</p>
</li>
<li>对于求这个数列的逆序数用线段树的方法是，，，先建一个空的数，，，然后每输入一个数，，标记一下，，不过标记在最后的更新完成，，，先求出它之前所输入的所有数中比它大的数(也就是看这个数到n-1一共有几个出现在之前的输入中，，，也就是看标记的和)，，，也就是以它构成的逆序列，，，然后把它加(标记)到这个树里（更新），，，可以看出如果把标记改为存放这个数，，纳闷这棵树的叶子节点就是排序好的1~n-1数列，，，，这一段画个图就好理解了，，，</li>
</ul>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>code:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lson rt&lt;&lt;1,l,mid</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rson rt&lt;&lt;1|1,mid+1,r</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">5005</span>;<br><span class="hljs-keyword">int</span> sum[maxn &lt;&lt; <span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt)</span></span><br><span class="hljs-function"></span>&#123;<br>    sum[rt] = sum[rt &lt;&lt; <span class="hljs-number">1</span>] + sum[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> l , <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    sum[rt] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(l == r)<br>        <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br><br>    build(lson);<br>    build(rson);<br>    pushup(rt);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> l , <span class="hljs-keyword">int</span> r , <span class="hljs-keyword">int</span> loc)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l == r)<br>    &#123;<br>        ++sum[rt];<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(loc &lt;= mid)  update(lson , loc);<br>    <span class="hljs-keyword">else</span>            update(rson , loc);<br>    pushup(rt);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> l , <span class="hljs-keyword">int</span> r , <span class="hljs-keyword">int</span> L , <span class="hljs-keyword">int</span> R)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)<br>        <span class="hljs-keyword">return</span> sum[rt];<br><br>    <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(L &lt;= mid)    ans += query(lson , L , R);<br>    <span class="hljs-keyword">if</span>(R &gt;  mid)    ans += query(rson , L , R);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;n) != EOF)<br>    &#123;<br>        build(<span class="hljs-number">1</span> , <span class="hljs-number">0</span> , n);<br><br>        <span class="hljs-keyword">int</span> sm = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;a[i]);<br>            sm += query(<span class="hljs-number">1</span> , <span class="hljs-number">0</span> , n - <span class="hljs-number">1</span> , a[i] , n - <span class="hljs-number">1</span>);<br>            update(<span class="hljs-number">1</span> , <span class="hljs-number">0</span> , n - <span class="hljs-number">1</span> , a[i]);<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> ret = sm;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        &#123;<br>            sm += n - a[i] - <span class="hljs-number">1</span> - a[i];<br>            ret = min(sm , ret);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span> , ret);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ACM-线段树</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>线性筛素数</title>
    <url>/2018/07/19/%E7%BA%BF%E6%80%A7%E7%AD%9B%E7%B4%A0%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>2018-7-19</p>
<p>这篇主要是关于数论中素数的筛法的知识点总结，，，其中我感受最深的就是线筛以及对某一个整数n求其所有的质因数及其个数的模板了，，，一定要理解好，，并且是适合自己的模板，，，清楚每一个变量，，不然在做题时套模板可能出现各种各样的错误，，，</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>一般来说，求素数的方法有很多，，，有 <strong>直接遍历</strong> ， <strong>埃筛</strong> ， <strong>线筛</strong>，，其中线筛我认为最为重要，，，</p>
<span id="more"></span>
<h2 id="直接遍历的方法"><a href="#直接遍历的方法" class="headerlink" title="直接遍历的方法"></a>直接遍历的方法</h2><p>根据素数的定义，，，我们很容易就想到一种方法。。从1到n遍历一遍，，，假若n能整除其中的某一个数，，，那么n就是合数 ，，，反之，，假若遍历到n-1都没有数被整除，，，那么就说明n即为素数，，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">prime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-comment">//判断x是不是质数，是返回true，不是返回false </span><br>    <span class="hljs-keyword">if</span>(x &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; x; i ++)&#123;<br>        <span class="hljs-keyword">if</span>(x % i == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>其中，，，我们还可以再优化一下，，只遍历到根号n即可，，，因为验证根号n之前的一个数的同时也就验证了根号n之后对应的一个数，，，这样时间复杂度就是O(√n)，，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">prime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-comment">//判断x是不是质数，是返回true，不是返回false </span><br>    <span class="hljs-keyword">if</span>(x &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-built_in">sqrt</span>(x + <span class="hljs-number">0.5</span>); i ++)&#123;<span class="hljs-comment">//0.5是防止根号的精度误差 </span><br>        <span class="hljs-keyword">if</span>(x % i == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">//另一种方法，不需要根号 </span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">prime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-comment">//判断x是不是质数，是返回true，不是返回false </span><br>    <span class="hljs-keyword">if</span>(x &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i * i &lt;= x; i ++)&#123;<span class="hljs-comment">//用乘法避免根号的精度误差 </span><br>        <span class="hljs-keyword">if</span>(x % i == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">//根据题目不同，如果i*i会爆int，记得开longlong</span><br></code></pre></td></tr></table></figure>
<p>但是，，，对于大多数情况下，，，我们并不仅仅要知道n这一个数是否为素数，，，通常情况下是要判断[1 , n]所有数那些时素数，，，这样就得再来一个循环来遍历一遍，，，这样的时间复杂度就是O(n*√n)，，，<br><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100000</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">bool</span> prime[N];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_prime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i * i &lt;= x; i ++)&#123;<br>        <span class="hljs-keyword">if</span>(x % i == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i ++)&#123;<br>        prime[i] = is_prime(i);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    init();<br>&#125;<br></code></pre></td></tr></table></figure><br>但这样的算法还是很慢的，，，所以我们有下面这个算法，，，，</p>
<h2 id="埃筛"><a href="#埃筛" class="headerlink" title="埃筛"></a>埃筛</h2><p>我个人的对埃筛的理解是这样的，，，用一个数组prime[n]来表示[1 , n]所有数，，，然后从2开始，，,2标记为true，，，，2的所有倍数标记为false，，，同样3也是这样，，，5也是这样，，，等等，，，同时标记过的合数不再标记跳过，，，<br>代码如下：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100000</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">bool</span> prime[N];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; N; i ++) prime[i] = <span class="hljs-literal">true</span>;<span class="hljs-comment">//先全部初始化为质数 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; N; i ++)&#123;<br>        <span class="hljs-keyword">if</span>(prime[i])&#123;                           <span class="hljs-comment">//如果i是质数 </span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>*i; j &lt; N; j += i)&#123;    <span class="hljs-comment">//从i的两倍开始的所有倍数 </span><br>                prime[j] = <span class="hljs-literal">false</span>; <br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    init();<br>&#125;<br></code></pre></td></tr></table></figure><br>埃筛的时间复杂度是O(nloglogn)，，，接近O(n)，，，，</p>
<h2 id="线筛"><a href="#线筛" class="headerlink" title="线筛"></a>线筛</h2><p><del>鸽，，，</del><br>线筛可以保证每个 <strong>合数</strong> 都被他的最小 <strong>质因数</strong> 筛去，，，所以每个数之经历一次，，，时间复杂度为O(n)<br>代码如下：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100000</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">bool</span> prime[N];                                      <span class="hljs-comment">//prime[i]表示i是不是质数 </span><br><span class="hljs-keyword">int</span> p[N], tot;                                      <span class="hljs-comment">//p[N]用来存质数 </span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; N; i ++) prime[i] = <span class="hljs-literal">true</span>;    <span class="hljs-comment">//初始化为质数 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; N; i++)&#123;<br>        <span class="hljs-keyword">if</span>(prime[i]) p[tot ++] = i;                 <span class="hljs-comment">//把质数存起来 </span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; tot &amp;&amp; i * p[j] &lt; N; j++)&#123;<br>            prime[i * p[j]] = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span>(i % p[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;                <span class="hljs-comment">//保证每个合数被它最小的质因数筛去 </span><br>        &#125;<br>    &#125;    <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    init();<br>&#125;<br></code></pre></td></tr></table></figure></p>
<h2 id="其他应用"><a href="#其他应用" class="headerlink" title="其他应用"></a>其他应用</h2><p>基于素数的筛法，，我们可以干其他的一些事，，，</p>
<h3 id="处理某个数的质因数及其个数"><a href="#处理某个数的质因数及其个数" class="headerlink" title="处理某个数的质因数及其个数"></a>处理某个数的质因数及其个数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> num;<br>    <span class="hljs-keyword">int</span> p;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        num = p = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;a[N];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init_3</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span>          <span class="hljs-comment">//用埃筛线筛处理之后的质数数组</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        a[i].init();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (prime_2[i] &amp;&amp; n % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            a[i].p = i;<br>            a[i].num++;<br>            n /= i;<br>        &#125;<br>        cnt++;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="预处理每个数的所有质因数"><a href="#预处理每个数的所有质因数" class="headerlink" title="预处理每个数的所有质因数"></a>预处理每个数的所有质因数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100000</span> + <span class="hljs-number">5</span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span> &gt; prime_factor[N];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; N; i ++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(prime_factor[i].size() == <span class="hljs-number">0</span>)<br>        &#123;                                   <span class="hljs-comment">//如果i是质数 </span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i; j &lt; N; j += i)<br>            &#123;<br>                prime_factor[j].push_back(i); <br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    init();<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="预处理每个数的所有因数"><a href="#预处理每个数的所有因数" class="headerlink" title="预处理每个数的所有因数"></a>预处理每个数的所有因数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100000</span> + <span class="hljs-number">5</span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span> &gt; factor[N];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; N; i ++)<br>    &#123; <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i; j &lt; N; j += i)<br>        &#123;<br>            factor[j].push_back(i); <br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    init();<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="预处理每个数的质因数分解"><a href="#预处理每个数的质因数分解" class="headerlink" title="预处理每个数的质因数分解"></a>预处理每个数的质因数分解</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100000</span> + <span class="hljs-number">5</span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span> &gt; prime_factor[N];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> temp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; N; i ++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(prime_factor[i].size() == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i; j &lt; N; j += i)<br>            &#123;<br>                temp = j;<br>                <span class="hljs-keyword">while</span>(temp % i == <span class="hljs-number">0</span>)<br>                &#123;<br>                    prime_factor[j].push_back(i);<br>                    temp /= i;<br>                &#125;  <br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    init();<br>&#125;<br></code></pre></td></tr></table></figure>
<p>嗯，，，就这了吧 ，，，博客也不是好水的，，，，还有一堆的坑没补QAQ</p>
<p><a href="https://www.cnblogs.com/linyujun/p/5198832.html">参考的dalao博客</a></p>
<h2 id="有关素数的几个定理"><a href="#有关素数的几个定理" class="headerlink" title="有关素数的几个定理"></a>有关素数的几个定理</h2><ul>
<li><p>每一个大于$1$的正整数$n$都可以表示成素数之积的形式:<br>$n = p_1^{a1}p_2^{a2}p_3^{a3}p_4^{a4}$…..</p>
</li>
<li><p>设$d(n)$是$n$的正因子的个数，$sum(n)$是$n$的所有因子之和:</p>
<p>  $d(n) = (a_1 + 1)<em>(a_2 + 1)</em>(a_3 + 1)…$</p>
<p>  $Sum(n) = (1 + p_1 + p_1^2 + … + p_1 ^ {a_1}) * (1 + p_2 + p_2^2 + … + p_2^{a_2})…$</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>acm</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>线段树</title>
    <url>/2018/07/17/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>2018-7-17</p>
<p>这篇主要是关于树里的 <strong>线段树</strong> 的一些东西，，，</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>首先，，线段树的使用场景主要是对于一个线性的点(可能代表数，也可能是其他))，，多次求区间[l , r]之间的和，最值，奇偶和什么的，，，同时要能够修改某个点的同时更新上述所求，，，</li>
<li>如果用普通数组实现时，，当面对较大的数据量时往往会tle，，，此时可以使用线段树来维护这段数据，，，</li>
<li>原理就是将区间为[1 , n]二分为若干个子区间，，，（数量不超过4 <em> n），将区间[l , r]都分成特定子区间，，然后对这些子区间进行 <strong>修改</strong> 和 <em>*统计</em></em> 以实现对[l , r]区间的修改和统计，，，</li>
<li>线段树对编号连续的点进行修改或者统计操作的时间复杂度都是O($log_2$n)，，，</li>
</ul>
<span id="more"></span>
<ul>
<li>线段树的统计的东西必须满足 <strong>区间可加性</strong> ，否则不能通过分成的子区间来得到[l , r]的统计的结果，，</li>
</ul>
<blockquote>
<ul>
<li>符合 <strong>区间加法</strong> 的例子：</li>
<li>数字之和——总数字之和 = 左区间数字之和 + 右区间数字之和</li>
<li>最大公因数(GCD)——总GCD = gcd( 左区间GCD , 右区间GCD );</li>
<li>最大值——总最大值=max(左区间最大值，右区间最大值)</li>
<li><strong>不符合区间加法</strong> 的例子：</li>
<li>众数——只知道左右区间的众数，没法求总区间的众数</li>
<li>01序列的最长连续零——只知道左右区间的最长连续零，没法知道总的最长连续零</li>
</ul>
<p><a href="https://blog.csdn.net/yitongjun/article/details/53193724">参考博文</a></p>
</blockquote>
<h2 id="基础实现"><a href="#基础实现" class="headerlink" title="基础实现"></a>基础实现</h2><h3 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h3><p>建树之前先得构建一个节点数组，，根据我们的需求，，节点要有两个值l , r来保存该节点的区间，，同时，，，根据题目的不同节点里也要有sum—用来保存该区间的和或差，，，max,min来保存该区间内的最值，odd,even保存该区间的奇偶和等等，，，总之节点里的东西要灵活的根据题意来变通，，，<br>基于以上，，我们大多数情况下的节点构建如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> a[MAXN];                                 <span class="hljs-comment">//a[MAXN]是待处理的数据</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tree</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> l;<br>    <span class="hljs-keyword">int</span> r;<br>    <span class="hljs-keyword">int</span> sum;<br>&#125;Node[MAXN &lt;&lt; <span class="hljs-number">2</span>];                            <span class="hljs-comment">//其中MAXN &lt;&lt; 2的意思是开4倍的MAXN的数组，，，</span><br></code></pre></td></tr></table></figure>
<p>节点有了，，之后便是建树哩，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//build(1 , 1 , n)                          //调用方式</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> l , <span class="hljs-keyword">int</span> r)</span>         <span class="hljs-comment">//rt指的是根节点即当前节点，l , r即左右区间值</span></span><br><span class="hljs-function"></span>&#123;<br>    Node[rt].l = l;                         <span class="hljs-comment">//记录当前的左区间</span><br>    Node[rt].r = r;                         <span class="hljs-comment">//记录当前的右区间</span><br>    Node[rt].sum = <span class="hljs-number">0</span>;                       <span class="hljs-comment">//将该区间的区间和初始化为0</span><br>    <span class="hljs-keyword">if</span> (l == r)                             <span class="hljs-comment">//当左右区间值相等时，说明现在访问到了叶子节点，即该节点保存数据的值</span><br>    &#123;<br>        Node[rt].sum = a[l];<br>        <span class="hljs-keyword">return</span>;                             <span class="hljs-comment">//记得return到上一层，，跳出这一条线</span><br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = l + r;                        <span class="hljs-comment">//计算区间中点值</span><br>    mid /= <span class="hljs-number">2</span>;<br>    build (rt &lt;&lt; <span class="hljs-number">1</span> , l , mid);              <span class="hljs-comment">//向左半支递归建树</span><br>    build ((rt &lt;&lt; <span class="hljs-number">1</span>) | <span class="hljs-number">1</span> , mid + <span class="hljs-number">1</span> , r);    <span class="hljs-comment">//向右半支建树</span><br>    pushUp (rt);                            <span class="hljs-comment">//更新节点rt的sum值</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="pushUp-函数的实现"><a href="#pushUp-函数的实现" class="headerlink" title="pushUp()函数的实现:"></a>pushUp()函数的实现:</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushUp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt)</span>                         <span class="hljs-comment">//更新节点的sum的值</span></span><br><span class="hljs-function"></span>&#123;<br>    Node[rt].sum = Node[rt &lt;&lt; <span class="hljs-number">1</span>].sum + Node[(rt &lt;&lt; <span class="hljs-number">1</span>) | <span class="hljs-number">1</span>].sum;<br>&#125;<br></code></pre></td></tr></table></figure>
<ul>
<li>注意：建树的模板终究是模板，，不要死套，，要根据具体的问题具体分析，，更改中间的代码，，，一般来说有关sum的地方改动比较大，，，</li>
<li>rt &lt;&lt; 1指的是rt * 2，也就是左儿子，对应的rt &lt;&lt; 1 | 1指的是右儿子，，，</li>
<li>建树的主要思想是递归实现，，，对左右分支分别递归，，，当区间值相等时便储存数据值，，，当然也可以用循环从下向上实现实现，，</li>
<li>对于所建立的树，，每一个根节点Node[rt]的左儿子为Node[rt &lt;&lt; 1]，右儿子为Node[rt &lt;&lt; 1 | 1]，，同时，，，我们的树的实现是建立在一个一维数组基础上的，，，</li>
</ul>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p><del>+ 太晚了，，，先鸽了，，，(<em>´ω<code>)人(´ω</code></em>)，，，，2018-7-17-22-50，，，，，，，</del></p>
<ul>
<li>线段树最重要的两个操作就是 <strong>更新</strong> 和 <strong>查询</strong>，， 先看插入：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//update(1, loc , value)</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> loc , <span class="hljs-keyword">int</span> value)</span>  <span class="hljs-comment">//更新某一位置处loc的值</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (Node[rt].l == Node[rt].r)           <span class="hljs-comment">//当左右节点值相等说明找到要找的叶子节点</span><br>    &#123;<br>        Node[rt].sum = value;               <span class="hljs-comment">//改变该叶子节点的值，并返回上一层</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (loc &lt;= (Node[rt].l + Node[rt].r) &gt;&gt; <span class="hljs-number">1</span>)    update (rt &lt;&lt; <span class="hljs-number">1</span> , loc , value);                                 <span class="hljs-comment">//从左半支递归</span><br>    <span class="hljs-keyword">else</span>                                          update (rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , loc , value);                           <span class="hljs-comment">//从右半支递归</span><br>    pushUp (rt);                            <span class="hljs-comment">//更新该节点的值</span><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>更新操作一般的调用方式是update(1 , loc , value)，，即从根节点递归进行更新操作</p>
<p>大致的思路就是利用带更新的位置loc和当前根节点所储存的区间端点的中间值进行比较，，小于就意味着从左半支递归，，大于就意味着从右半支递归，，相等就意味着找到待更新的叶子节点，，，然后返回到上一层，，，由下向上的进行区间更新，，，</p>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>查询主要是指查询某个区间[l , r]的某个数据，，如区间和，，区间最值等等，，，<br>代码如下：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//query(1 , l , r)</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> l , <span class="hljs-keyword">int</span> r)</span>          <span class="hljs-comment">//rt当前节点,l,r左右区间端点</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l == Node[rt].l &amp;&amp; r == Node[rt].r) <span class="hljs-comment">//叶子节点直接返回其值</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> Node[rt].sum;                <br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = Node[rt].l + Node[rt].r;      <br>    mid /= <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (r &lt;= mid)     <span class="hljs-keyword">return</span> query(rt &lt;&lt; <span class="hljs-number">1</span> , l , r);    <span class="hljs-comment">//左右支分别查找</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l &gt; mid) <span class="hljs-keyword">return</span> query(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , l , r);<br>    <span class="hljs-keyword">else</span>                                                <span class="hljs-comment">//跨支拆分查找各自的，最后相加</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> query(rt &lt;&lt; <span class="hljs-number">1</span> , l , mid) + query(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , mid + <span class="hljs-number">1</span> , r);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p>
<h2 id="最后合起来的模板"><a href="#最后合起来的模板" class="headerlink" title="最后合起来的模板"></a>最后合起来的模板</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> a[MAXN];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tree</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> l;<br>    <span class="hljs-keyword">int</span> r;<br>    <span class="hljs-keyword">int</span> sum;<br>&#125;Node[MAXN &lt;&lt; <span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushUp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt)</span></span><br><span class="hljs-function"></span>&#123;<br>    Node[rt].sum = Node[rt &lt;&lt; <span class="hljs-number">1</span>].sum + Node[(rt &lt;&lt; <span class="hljs-number">1</span>) | <span class="hljs-number">1</span>].sum;<br>&#125;<br><span class="hljs-comment">//build(1 , 1 , n)</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> l , <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    Node[rt].l = l;<br>    Node[rt].r = r;<br>    Node[rt].sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l == r)<br>    &#123;<br>        Node[rt].sum = a[l];<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = l + r;<br>    mid /= <span class="hljs-number">2</span>;<br>    build (rt &lt;&lt; <span class="hljs-number">1</span> , l , mid);<br>    build ((rt &lt;&lt; <span class="hljs-number">1</span>) | <span class="hljs-number">1</span> , mid + <span class="hljs-number">1</span> , r);<br>    pushUp (rt);<br>&#125;<br><span class="hljs-comment">//update(1, loc , value)</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> loc , <span class="hljs-keyword">int</span> value)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (Node[rt].l == Node[rt].r)<br>    &#123;<br>        Node[rt].sum = value;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (loc &lt;= (Node[rt].l + Node[rt].r) &gt;&gt; <span class="hljs-number">1</span>)    update (rt &lt;&lt; <span class="hljs-number">1</span> , loc , value);<br>    <span class="hljs-keyword">else</span>                                          update (rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , loc , value);<br>    pushUp (rt);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> l , <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l == Node[rt].l &amp;&amp; r == Node[rt].r)<br>    &#123;<br>        <span class="hljs-keyword">return</span> Node[rt].sum;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = Node[rt].l + Node[rt].r;<br>    mid /= <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (r &lt;= mid)     <span class="hljs-keyword">return</span> query(rt &lt;&lt; <span class="hljs-number">1</span> , l , r);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l &gt; mid) <span class="hljs-keyword">return</span> query(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , l , r);<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> query(rt &lt;&lt; <span class="hljs-number">1</span> , l , mid) + query(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , mid + <span class="hljs-number">1</span> , r);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>    build(<span class="hljs-number">1</span> , <span class="hljs-number">1</span> , n);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; query(<span class="hljs-number">1</span> , <span class="hljs-number">3</span> , <span class="hljs-number">5</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; a[<span class="hljs-number">2</span>];<br>    update(<span class="hljs-number">1</span> , <span class="hljs-number">2</span> , a[<span class="hljs-number">2</span>]);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; query(<span class="hljs-number">1</span>, <span class="hljs-number">1</span> , <span class="hljs-number">4</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>线段树的基本内容就是这些，，，做题的时候套模板然后根据题意改一改就行了，，，</p>
<p>end~~2018-7-23-11-06</p>
]]></content>
      <tags>
        <tag>acm</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>线段树延迟更新</title>
    <url>/2018/10/10/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%BB%B6%E8%BF%9F%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>暑假集训的时候好多东西只学了个皮毛，，，对付模板题还能试试，，，但是一看一些稍难的一些题时，，，肯定单纯的套模板是不行得了，，，那样多没意思啊，，，</p>
<p>延迟更新之前就看到过，，，当初的映像就是在普通的线段树里加一个lazy，，，然后可以延迟更新区间，，，这在对区间整段的更新很有用，，，因为不用对更新区间的每一个点更新，，这样就能省下很多时间，，，</p>
<p>但是，，那时没时间也看不懂，，，跟别提怎么操作了，，，，</p>
<span id="more"></span>
<p>国庆的时候专门看看了看这块知识，，，大概了解了lazy的作用以及该怎么使用他，，</p>
<p><a href="https://www.cnblogs.com/AC-King/p/7789013.html">当时是看这篇博客的</a></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>单纯的线段树主要是 <strong>单点修改，区间查询</strong> ，，，</p>
<p>若是不更改进行区间的修改时，，，只能对区间里的每一个数进行单点修改，，，当数据量很大时，，这样的操作很费时间，，，</p>
<p>所以可以对每一个节点都加一个lazy标记，，，当这一段要更新时，，父节点的lazy更新，，然后区间所维护的sum加上相应的几倍的lazy，，，，这样该节点对上时更新后的值，，向上正确，，，而对于它的两个子节点，，，只将lazy更新表明这里需要更新，，，但是并没有继续向下更新，，，这一段的操作由pushdown()函数完成，，，</p>
<h1 id="实现和练习"><a href="#实现和练习" class="headerlink" title="实现和练习"></a>实现和练习</h1><p>看个具体的例子:<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1698">题目链接</a>，，，</p>
<p>题目意思很简单，，，就是初始长度为n的一个数列值全为1，，</p>
<p>然后对某些区间进行赋为1 , 2 , 3的操作，，，最后问你在这些操作之后这一段的和是多少，，，</p>
<p>具体的实现如下:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-comment">//因为初始值全为一所以没有a[maxn]</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tree</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> l;<br>    <span class="hljs-keyword">int</span> r;<br>    ll sum;<br>    ll lazy;        <span class="hljs-comment">//lazy标记</span><br>&#125;node[maxn &lt;&lt; <span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt)</span></span><br><span class="hljs-function"></span>&#123;<br>    node[rt].sum = node[rt &lt;&lt; <span class="hljs-number">1</span>].sum + node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> nl , <span class="hljs-keyword">int</span> nr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//rt指当前节点，，，</span><br>    <span class="hljs-comment">//nl指左节点有nl个需要被赋值为lazy</span><br>    <span class="hljs-comment">//同理，，nr指右节点有nr个需要被赋值为lazy</span><br>    <span class="hljs-keyword">if</span>(node[rt].lazy)<br>    &#123;<br>        <span class="hljs-comment">//当这节点lazy不为0时，，要向下更新一下</span><br>        node[rt &lt;&lt; <span class="hljs-number">1</span>].sum = node[rt].lazy * nl; <span class="hljs-comment">//修改sum</span><br>        node[rt &lt;&lt; <span class="hljs-number">1</span>].lazy = node[rt].lazy; <span class="hljs-comment">//下推lazy</span><br><br>        node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum = node[rt].lazy * nr;<br>        node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].lazy = node[rt].lazy;<br><br>        node[rt].lazy = <span class="hljs-number">0</span>;      <span class="hljs-comment">//标记清除</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> l , <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    node[rt].l = l;<br>    node[rt].r = r;<br>    node[rt].sum = <span class="hljs-number">0</span>;<br>    node[rt].lazy = <span class="hljs-number">0</span>;      <span class="hljs-comment">//不要忘了</span><br><br>    <span class="hljs-keyword">if</span>(l == r)<br>    &#123;<br>        node[rt].sum = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> mid = node[rt].l + ((node[rt].r - node[rt].l) &gt;&gt; <span class="hljs-number">1</span>);<br><br>    build(rt &lt;&lt; <span class="hljs-number">1</span> , l , mid);<br>    build(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , mid + <span class="hljs-number">1</span> , r);<br><br>    pushup(rt);<br><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> L , <span class="hljs-keyword">int</span> R , <span class="hljs-keyword">int</span> C)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(L &lt;= node[rt].l &amp;&amp; node[rt].r &lt;= R)<br>    &#123;<br>        <span class="hljs-comment">//当该节点对应的区间在所要操作的区间里时更新</span><br>        node[rt].sum = (node[rt].r - node[rt].l + <span class="hljs-number">1</span>) * C;<br>        node[rt].lazy = C;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> mid = node[rt].l + ((node[rt].r - node[rt].l) &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//下推lazy标记，，想上保证正确</span><br>    pushdown(rt , mid - node[rt].l + <span class="hljs-number">1</span> , node[rt].r - mid);<br><br>    <span class="hljs-keyword">if</span>(L &lt;= mid)    update(rt &lt;&lt; <span class="hljs-number">1</span> , L , R , C);<br>    <span class="hljs-keyword">if</span>(R &gt;  mid)    update(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , L , R , C);<br>    pushup(rt);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt , <span class="hljs-keyword">int</span> L , <span class="hljs-keyword">int</span> R)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(L &lt;= node[rt].l &amp;&amp; node[rt].r &lt;= R)<br>    &#123;<br>        <span class="hljs-keyword">return</span> node[rt].sum;<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> mid = node[rt].l + ((node[rt].r - node[rt].l) &gt;&gt; <span class="hljs-number">1</span>);<br><br>    pushdown(rt , mid - node[rt].l + <span class="hljs-number">1</span> , node[rt].r - mid);<br><br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(L &lt;= mid)    ans += query(rt &lt;&lt; <span class="hljs-number">1</span> , L , R);<br>    <span class="hljs-keyword">if</span>(R &gt;  mid)    ans += query(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span> , L , R);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> <span class="hljs-keyword">const</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> T;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;T);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= T; ++i)<br>    &#123;<br>        <span class="hljs-keyword">int</span> n , q;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span> , &amp;n , &amp;q);<br><br>        build(<span class="hljs-number">1</span> , <span class="hljs-number">1</span> , n);<br><br>        <span class="hljs-keyword">while</span>(q--)<br>        &#123;<br>            <span class="hljs-keyword">int</span> a , b , c;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span> , &amp;a , &amp;b , &amp;c);<br><br>            update(<span class="hljs-number">1</span> , a , b , c);<br>        &#125;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d: The total value of the hook is %lld.\n&quot;</span> , i , query(<span class="hljs-number">1</span> , <span class="hljs-number">1</span> , n));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>大概就是这么多，，，只要理解了lazy的作用，，，以及下推的意思，，，基本就ok了，，，，</p>
<p>(end)</p>
]]></content>
      <categories>
        <category>ACM-线段树</category>
      </categories>
      <tags>
        <tag>acm</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>组合数学与数论</title>
    <url>/2018/07/25/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6%E4%B8%8E%E6%95%B0%E8%AE%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>这篇博客主要是一些数论里有关组合数学的一些东西，，，有 <strong>错排问题</strong> ，<strong>抽屉原理（鸽巢原理）</strong> , <strong>中国剩余定理（孙子定理）</strong> ， <strong>欧拉函数</strong></p>
<p>数论好难啊，，，</p>
<span id="more"></span>
<h2 id="错排问题"><a href="#错排问题" class="headerlink" title="错排问题"></a>错排问题</h2><blockquote>
<p>十本不同的书放在书架上。现在重新摆放，使每本书都在不同的位置上。有几种摆法？</p>
<p>推广一下，就是经典的错排问题：</p>
<p>一个有n个元素的排列，若一个排列中所有的元素都不在自己原来的位置上，那么这样的排列就称为原排列的一个错排。 n个元素的错排数记为D(n)。</p>
</blockquote>
<p>$<br>D(1)=0\<br>D(2)=1\<br>D(n)=(n-1)*(D(n-1)+D(n-2))<br>$</p>
<p>当n个编号元素放在n个编号位置，元素编号与位置编号各不对应的方法数用M(n)表示，那么M(n-1)就表示n-1个元素放在n-1个位置上的方法数</p>
<p>第一步，把第n个元素放在一个位置上，比如k，一共有n-1种方法。<br>第二步，放编号为k的元素，此时有两种情况：<br>1 放在编号为n的位置处，此时对于剩下的n-2个元素，有n-2种方法。<br>2 k号元素不放在位置n上，此时这n-1个元素有n-1个位置可以放。</p>
<p>综上：</p>
<p>$<br>D(1)=0\<br>D(2)=1\<br>D(n)=(n-1)*(D(n-1)+D(n-2))<br>$</p>
<h2 id="抽屉原理（鸽巢原理）"><a href="#抽屉原理（鸽巢原理）" class="headerlink" title="抽屉原理（鸽巢原理）"></a>抽屉原理（鸽巢原理）</h2><blockquote>
<p>n+1只鸽子飞回鸽笼至少有一个鸽笼含有不少于2只的鸽子</p>
<p>证明：设a1,a2,a3….,an是正整数的序列，试证明至少存在整数k和l，$1 &lt;= k &lt; l &lt;= n$，使得$ak+…al$是n的倍数</p>
<p>推论1： m只鸽子，n个鸽巢，则至少有一个鸽巢里有不少于$(m-1)/n+1$只鸽子</p>
<p>推论2： 若取$n(m-1)+1$个球放进n个盒子，则至少有1个盒子有m个球。</p>
<p>推论3： 若$m1,m2,…,mn$是n个整数，且<br>$(m1+m2+…+mn)/n&gt;r-1$<br>则$m1,m2,…,mn$中至少有一个数不小于r</p>
<p>有366人，那么至少有两人同一天出生</p>
<p>有13人，那么至少有两人同一月出生</p>
<p>这就是抽屉原理</p>
</blockquote>
<p>其实抽屉原理有两个</p>
<h3 id="第一抽屉原理"><a href="#第一抽屉原理" class="headerlink" title="第一抽屉原理"></a>第一抽屉原理</h3><blockquote>
<p>原理1： 把多于n+k个的物体放到n个抽屉里，则至少有一个抽屉里的东西不少于两件。</p>
<p>原理2 ：把多于mn(m乘以n)+1（n不为0）个的物体放到n个抽屉里，则至少有一个抽屉里有不少于（m+1）的物体。</p>
<p>原理3 ：把无穷多件物体放入n个抽屉，则至少有一个抽屉里 有无穷个物体。</p>
<p>原理1 、2 、3都是第一抽屉原理的表述。</p>
</blockquote>
<h3 id="第二抽屉原理"><a href="#第二抽屉原理" class="headerlink" title="第二抽屉原理"></a>第二抽屉原理</h3><blockquote>
<p>把（mn－1）个物体放入n个抽屉中，其中必有一个抽屉中至多有（m—1）个物体(例如，将3×5-1=14个物体放入5个抽屉中，则必定有一个抽屉中的物体数少于等于3-1=2)。</p>
</blockquote>
<p>集训的一道题，，，在判断优化时用到了抽屉原理，，，</p>
<blockquote>
<p>Description</p>
<p>给你一个序列，长度为n。问是否存在一个连续的子序列和是m的倍数</p>
<p>Input</p>
<p>第一行输入一个整数T（1&lt;=T&lt;=10）\<br>第一行输入n,m（1≤n≤100000, 1≤m≤5000）\<br>第二行输入n个数字x(1≤x≤100)\</p>
<p>Output</p>
<p>输出有T行，每行输出YES或者NO</p>
<p>Sample Input<br>3<br>3 3<br>1 2 3<br>4 7<br>1 2 3 4<br>4 8<br>1 2 3 4</p>
<p>Sample Output<br>YES<br>YES<br>NO</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ms(a , b) memset(a , b , sizeof(a))</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br>ll a[N];<br>ll b[N];<br>ll n , m;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;t);<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        ms(a , <span class="hljs-number">0</span>);<br>        ms(b , <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span> , &amp;n , &amp;m);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span> , &amp;a[i]);<br> <br>        <span class="hljs-keyword">if</span> (n &gt; m)                      <span class="hljs-comment">//这里注意一下</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>    <br>        b[<span class="hljs-number">1</span>] = a[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>            b[i] = b[i - <span class="hljs-number">1</span>] + a[i];<br> <br>        <span class="hljs-keyword">bool</span> ans = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (b[n] % m == <span class="hljs-number">0</span>)    ans = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n &amp;&amp; !ans; i++)<br>            &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &lt;= n; j++)<br>                    <span class="hljs-keyword">if</span> ((b[j] - b[i - <span class="hljs-number">1</span>]) % m == <span class="hljs-number">0</span>)<br>                        &#123;<br>                            ans = <span class="hljs-literal">true</span>;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-keyword">if</span> (ans)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br>        &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/linyujun/p/5210466.html">大佬如是说：</a></p>
<p>其实这题的n虽然范围大，但是我们可以加一个判断，n&gt;m的话，必然输出YES</p>
<p>为什么？根据抽屉原理呗</p>
<p>先求前缀和求余m，</p>
<p>如果有m+1个数，那么就会产生m+1个前缀和，求余完m，就会有m+1个余数</p>
<p>我们知道求余完m会产生0~m-1总共m个余数</p>
<p>那么根据抽屉原理，至少有两个相同的余数</p>
<p>那么他们之间的数的和求余m就肯定是0，所以n&gt;m的话，必然输出YES</p>
<p>比如</p>
<p>取两个下标i和j（i &lt; j）</p>
<p>(a1+a2+…+ai) % m = k</p>
<p>(a1+a2+…+aj) % m = k</p>
<p>那么(ai+…+aj) %m = 0</p>
<p>简单一点说就是在n&gt;m的时候一定会出现两个余数相同的前缀和，，，这时他们两之间的数的和就一定能被m整除，，，利用这一个就可以把复杂度降低到只有n的情况，，，</p>
<h2 id="中国剩余定理（孙子定理）"><a href="#中国剩余定理（孙子定理）" class="headerlink" title="中国剩余定理（孙子定理）"></a>中国剩余定理（孙子定理）</h2><p>存在一个数x，除以3余2，除以5余三，除以7余二，然后求这个数。</p>
<p>定理1：几个数相加，如果存在一个加数，不能被整数a整除，那么它们的和，就不能被整数a整除。<br>定理2：两数不能整除，若除数扩大（或缩小）了几倍，而被除数不变，则其商和余数也同时扩大（或缩小）相同的倍数（余数必小于除数）。</p>
<p>那么假如我们先求出这样的3个数k1,k2,k3，满足k1与3互质且是5和7的倍数，k2与5互质也是3和7的倍数，k3与7互质且是3和5的倍数。那么根据定理2，一定有k1<em>2+k2</em>3+k3*2满足条件。</p>
<p>求出3,5,7的最小公倍数105<br>令$x1=105/3=35,x2=105/5=21,x3=105/7=15$<br>然后求解以下方程</p>
<p>$<br>a<em>x_1\%3=1\<br>b</em>x_2\%5=1\<br>c*x_3\%7=1<br>$</p>
<p>那么$ans=(a<em>x1</em>2+b<em>x2</em>3+c<em>x3</em>2)\%lcm$<br>推广一下：<br>设正整数m1,m2,…,mk两两互素，则同余方程组：</p>
<p>$<br>x≡a_1(mod m_1)\<br>x≡a_2(mod m_2)\<br>x≡a_3(mod m_3)\<br>x≡a_4(mod m_4)\<br>…\<br>x≡a_n(mod m_k)\<br>$</p>
<p>有整数解。令$M=m_1<em>m_2</em>m_3*…m_k$</p>
<p>$M_1=M/m1,M2=M/m2….$</p>
<p>$x≡(a_1<em>M_1</em>M_1^{-1}+a_2<em>M_2</em>M_2^{-1}+…)mod M$</p>
<p>$M_1*M_1^{-1} ≡1 mod m_1$</p>
<p>那么现在如果a,b,c不互质怎么办？</p>
<p>$X=a_1*x_1+b_1$</p>
<p>$X=a_2*x_2+b_2$</p>
<p>合并：$ax<em>x_1+a_2</em>x_2=b_2-x_1$ 不定方程出现了！！<br>求出最小正整数解$x_1$</p>
<p>求出最小正整数解x1   $X’=a1<em>x1+b1$。k是一个特解，X是通解，所以有方程：<br>$X=X’+k</em>lcm(a_1,a_2)$<br>如此进行下去即可。<br>代码如何写：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">LL <span class="hljs-title">work</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123; <br>     LL M=m[<span class="hljs-number">1</span>],A=a[<span class="hljs-number">1</span>],t,d,x,y;<span class="hljs-keyword">int</span> i; <br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>    &#123;   <br>     d=exgcd(M,m[i],x,y);<span class="hljs-comment">//解方程 </span><br>     <span class="hljs-keyword">if</span>((a[i]-A)%d)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//无解 </span><br>     x*=(a[i]-A)/d,t=m[i]/d,x=(x%t+t)%t;<span class="hljs-comment">//求x       </span><br>     A=M*x+A,M=M/d*m[i],A%=M;<br>    &#125;<br>     A=(A%M+M)%M; <br>     <span class="hljs-keyword">return</span> A; <br>&#125;<br></code></pre></td></tr></table></figure></p>
<h2 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h2><p>对于正整数n，欧拉函数是小于n的正整数与n互质的个数。<br>$φ(1)=1$</p>
<p>欧拉函数公式：</p>
<p>$euler(x) = x*(1-1/p1)(1-1/p2)……(1-1/pn)$,p为x的质因数</p>
<p>根据这个公式，写下代码</p>
<p>如何求出前n个数的欧拉函数？</p>
<p>最后，，，就是鸽，，，，，2018-7-25-22-56</p>
]]></content>
      <tags>
        <tag>acm</tag>
        <tag>数论</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>继承与派生</title>
    <url>/2018/05/21/%E7%BB%A7%E6%89%BF%E4%B8%8E%E6%B4%BE%E7%94%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="类的继承与派生"><a href="#类的继承与派生" class="headerlink" title="类的继承与派生:"></a>类的继承与派生:</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介:"></a>简介:</h2><ul>
<li>类的继承机制允许程序员在保持原有类特性的基础上，进行更具体、更详细的类的定义;</li>
<li>派生新类的过程一般包括: 1)<strong>吸收已有类的成员</strong> 、 2)<strong>调整已有类成员</strong> 、 3)<strong>添加新的成员</strong>;</li>
<li><strong>原有的类</strong> 成为 <strong>基类</strong> 或 <strong>父类</strong>，<strong>产生的新类</strong> 称为 <strong>派生类</strong> 或 <strong>子类</strong>;</li>
</ul>
<span id="more"></span>
<h2 id="派生类的定义"><a href="#派生类的定义" class="headerlink" title="派生类的定义:"></a>派生类的定义:</h2><ul>
<li>派生类的一般定义语法:<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> 派生类名:</span>继承方式  基类名<span class="hljs-number">1</span> , 继承方式  基类名<span class="hljs-number">2</span> , ··· , 继承方式  基类名n<br>&#123;<br>    派生类成员声明;<br>&#125;;<br></code></pre></td></tr></table></figure></li>
<li>一个类从父类继承来的特征也可以被其他新的类所继承，一个父类的特征，可以同时被多个子类继承，这样就形成类一个相互关联的家族，有时也称为 <strong>类族</strong>;</li>
<li>在类族中，直接参与派生出某类的基类成为 <strong>直接基类</strong>;</li>
<li>基类的基类甚至更高层的基类称为 <strong>间接基类</strong>;</li>
<li><strong>继承方式</strong>: 继承方式规定了如何访问从基类继承的成员;</li>
<li>继承方式的关键字为: <em>public</em> , <em>protected</em> , <em>private</em>;</li>
<li>如果不显式地给出继承方式关键字，系统默认值就认为是 <strong>私有继承(private)</strong>;</li>
<li>类的继承方式指定了派生类成员以及类外对象对于从基类继承来的成员的访问权限;</li>
<li><strong>派生类成员</strong> 是指除了从基类继承来的所有成员之外，新增加的 <strong>数据</strong> 和 <strong>函数成员</strong>;</li>
</ul>
<h2 id="派生类生成过程"><a href="#派生类生成过程" class="headerlink" title="派生类生成过程:"></a>派生类生成过程:</h2><ul>
<li>继承与派生的主要目的是 <strong>实现代码的重用和扩充</strong>;</li>
<li>派生新类的步骤：1)<strong>吸收基类成员</strong> 、 2)<strong>改造基类成员</strong>  、 3)<strong>添加新的成员</strong>;</li>
<li><ol>
<li><strong>吸收基类成员</strong>: 类继承中，第一步是 <strong>将基类的成员全盘接收</strong>，除了基类中的 <strong>构造和析构函数</strong>;    </li>
<li><strong>改造基类成员</strong>: 对基类成员的改造包括两个方面，一个是 <strong>基类成员的访问控制问题</strong> 主要依靠派生类定义时的继承方式来控制；另一个是对 <strong>基类数据或函数成员的覆盖或隐藏</strong>，覆盖的概念在 <em>多态性</em> 中，隐藏就是简单的在派生类中声明一个和基类数据或函数同名的成员;</li>
</ol>
<ul>
<li>如果派生类声明了一个和基类成员同名的新成员（若果是 <strong>成员函数</strong>，则参数表也要相同， <strong>参数不同的情况属于重载</strong> ），派生的新成员就隐藏了外层同名成员; <em>(括号里那句话有毒，，，慢慢理解)</em>;</li>
<li>这时在派生类中或者通过派生类的对象，直接使用成员名就只能访问到派生类中声明的同名成员，，称为 <strong>同名隐藏</strong>;</li>
</ul>
<ol>
<li><strong>添加新的成员</strong>: 可以在派生类中添加适当的数据和函数成员，同时，因为继承中不会继承基类的构造和析构函数，所以有时要在派生类中添加新的构造和析构函数;</li>
</ol>
</li>
</ul>
<h1 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制:"></a>访问控制:</h1><ul>
<li>类的继承方式有： <strong>public(公有继承)</strong> 、 <strong>protected(保护继承)</strong> 、 **private(私有继承);</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">基类的访问特性</th>
<th style="text-align:center">类的继承特性</th>
<th style="text-align:center">子类的访问特性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">public</td>
<td style="text-align:center">public</td>
<td style="text-align:center">public</td>
</tr>
<tr>
<td style="text-align:center">protected</td>
<td style="text-align:center">public</td>
<td style="text-align:center">protected</td>
</tr>
<tr>
<td style="text-align:center">private</td>
<td style="text-align:center">public</td>
<td style="text-align:center">No access</td>
</tr>
<tr>
<td style="text-align:center">—</td>
<td style="text-align:center">—</td>
<td style="text-align:center">—</td>
</tr>
<tr>
<td style="text-align:center">public</td>
<td style="text-align:center">protected</td>
<td style="text-align:center">protected</td>
</tr>
<tr>
<td style="text-align:center">protected</td>
<td style="text-align:center">protected</td>
<td style="text-align:center">protected</td>
</tr>
<tr>
<td style="text-align:center">private</td>
<td style="text-align:center">protected</td>
<td style="text-align:center">No access</td>
</tr>
<tr>
<td style="text-align:center">—</td>
<td style="text-align:center">—</td>
<td style="text-align:center">—</td>
</tr>
<tr>
<td style="text-align:center">public</td>
<td style="text-align:center">private</td>
<td style="text-align:center">private</td>
</tr>
<tr>
<td style="text-align:center">protected</td>
<td style="text-align:center">private</td>
<td style="text-align:center">private</td>
</tr>
<tr>
<td style="text-align:center">private</td>
<td style="text-align:center">private</td>
<td style="text-align:center">No access</td>
</tr>
<tr>
<td style="text-align:center">—</td>
<td style="text-align:center">—</td>
<td style="text-align:center">—</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>私有继承 和 保护继承 在直接的派生类中，所有的成员的访问属性都是完全相同的，但是当派生类作为新的基类继续派生时，前者的成员不再可以被访问，而后者可以;</li>
<li>保护成员可能被他的 派生类 访问，但是绝不可能被其他外部使用者访问：</li>
</ul>
<h1 id="类型兼容规则"><a href="#类型兼容规则" class="headerlink" title="类型兼容规则:"></a>类型兼容规则:</h1><ul>
<li><strong>类型兼容规则</strong> 是指在需要基类对象的任何地方，都可以使用 <strong>共有派生类</strong> 的对象来替代;</li>
<li>公有派生类实际具备了基类的所有功能，凡是基类能解决的问题，公有派生类都可以解决;</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">类型兼容规则中所指的 替代 包括以下的情况:</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1.派生类的对象可以 <strong>隐含的转换为基类对象</strong></td>
</tr>
<tr>
<td style="text-align:left">2.派生类的对象可以 <strong>初始化基类的引用</strong></td>
</tr>
<tr>
<td style="text-align:left">3.派生类的指针可以 <strong>隐含的转换为基类的引用</strong></td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>在替代之后，派生类对象就可以作为基类的对象使用，但只能使用从基类继承的成员;</li>
<li>由于类型兼容规则的引入，对于基类及其公有派生类的对象，可以使用相同的函数统一进行处理;</li>
<li>因为的当函数的形参为基类的对象（或引用、指针）时，实参可以是派生了的对象（或指针），而没必要为每一个类设计单独的模块;</li>
<li>类型兼容规则是 多态性 的重要基础之一;</li>
</ul>
<h1 id="派生类的构造和析构函数"><a href="#派生类的构造和析构函数" class="headerlink" title="派生类的构造和析构函数:"></a>派生类的构造和析构函数:</h1><ul>
<li>派生类的构造函数只负责对派生类新增的成员进行初始化，对所有从基类继承下来的成员，其初始化工作还是由基类的构造函数完成;</li>
</ul>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数:"></a>构造函数:</h2><ul>
<li>派生类的成员对象由 <strong>所有基类的成员对象</strong> 与 <strong>派生类新增的成员对象</strong> 共同组成,所以 构造派生类的对象时，就要对 基类的成员对象 和 新增成员对象 进行初始化;</li>
<li>对基类成员对象的初始化工作要通过 调用基类的构造函数 完成;</li>
<li>派生类的构造函数需要已合适的初值作为参数，其中一些参数 要传递给基类的构造函数，用于初始化相应的成员，   另一些参数 用于对派生类新增的成员对象进行初始化;</li>
<li>派生类的构造函数的一般语法形式为:<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">派生类名::派生类名(参数表):基类名<span class="hljs-number">1</span>(基类<span class="hljs-number">1</span>初始化参数表) ,······, 基类名n(基类n初始化参数表) , 成员对象名<span class="hljs-number">1</span>(成员对象<span class="hljs-number">1</span>初始化参数表) ,······, 成员对象名m(成员对象m初始化参数表)<br>&#123;<br>    派生类构造函数的其他初始化操作;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li>当一个类同时由多个基类时，对于所有需要给予参数进行初始化的基类，都要显式给出基类名和参数表，对于使用默认构造函数的基类，可以不给出类名;</li>
<li>对于基类初始化时，需要调用基类的带有形参表的构造函数时，派生类就必须声明构造函数;</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">派生类构造函数执行的一般次序</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1.调用 <strong>基类构造函数</strong> ，调用顺序按照他们 被继承时 <strong>声明</strong> 的顺序(从左向右)</td>
</tr>
<tr>
<td style="text-align:left">2.对派生类新增的成员对象初始化，调用顺序按照他们在 <strong>类中声明的顺序</strong></td>
</tr>
<tr>
<td style="text-align:left">3.执行派生类的构造函数体中的内容</td>
</tr>
</tbody>
</table>
</div>
<h2 id="复制构造函数"><a href="#复制构造函数" class="headerlink" title="复制构造函数:"></a>复制构造函数:</h2><ul>
<li>派生类的复制构造函数的形式:<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//假设Derived类是Base类的派生类，</span><br>Derived::Derived(<span class="hljs-keyword">const</span> Derived &amp;v) : Base(v)&#123;···&#125;<br></code></pre></td></tr></table></figure></li>
<li>这里使用了类的兼容规则，即用 <strong>派生类的对象</strong> 去 <strong>初始化基类的引用</strong>，因此当函数的形参是基类的引用时，实参可以是派生类的对象;</li>
</ul>
<h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数:"></a>析构函数:</h2><ul>
<li>派生类的析构函数的声明方法与没有继承关系的类中析构函数的声明方法相同， <strong>只需在函数体中负责把派生类新增的非对象成员的清理工作做好就行</strong> ，系统会自己调用基类及对象成员的析构函数来对基类及对象成员进行清理;</li>
<li>析构函数的执行次序与构造函数完全相反，1.首先 执行析构函数的函数体，2.然后 对派生类新增的类类型的成员的对象进行清理，3.最后 对所有基类继承来的成员进行清理;</li>
<li>这些清理工作分别调用 派生类析构函数体 、 调用类类型的派生类对象成员所在类的析构函数 和 调用基类析构函数;</li>
</ul>
<h1 id="派生类成员的标识和访问"><a href="#派生类成员的标识和访问" class="headerlink" title="派生类成员的标识和访问:"></a>派生类成员的标识和访问:</h1><ul>
<li>在派生类中，成员可以按 <strong>访问属性</strong> 划为以下四种:</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">特点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">不可访问成员</td>
<td style="text-align:center">从基类私有成员继承，派生类或建立派生列对象的模块都无法访问他们 如果继续派生新类，仍无法访问</td>
</tr>
<tr>
<td style="text-align:center">私有成员</td>
<td style="text-align:center">包括从基类继承来的成员以及新增加的成员，派生类内部可访问，但在建立派生类对象的模块中无法访问，继续派生，就变成类新的派生类中的不可访问成员</td>
</tr>
<tr>
<td style="text-align:center">保护成员</td>
<td style="text-align:center">可能是新增亦或从基类继承过来的，派生类内部成员可以访问，建立派生类对象的模板无法访问，进一步派生后，在新的派生类中可能成为 私有成员 或者是 保护性成员</td>
</tr>
<tr>
<td style="text-align:center">公有成员</td>
<td style="text-align:center">派生类、建立派生类的模块都可以访问，继续派生，可以是新派生类中的私有、保护或者公有成员</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>在对派生类的访问中。有两个问题需要解决: <em>唯一标识问题</em> 和 <em>成员本身的属性问题(可见性问题)</em>;</li>
<li>二义性: 通过某一个表达式能引用的成员不只一个;</li>
</ul>
<h2 id="作用域分辨符"><a href="#作用域分辨符" class="headerlink" title="作用域分辨符:"></a>作用域分辨符:</h2><ul>
<li>作用域分辨符是指: ‘ :: ‘ , 可以用来限定要访问的成员所在的类的名称;</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">类名::成员名            <span class="hljs-comment">//数据成员</span><br>类名::成员名(参数表)    <span class="hljs-comment">//函数成员</span><br></code></pre></td></tr></table></figure>
<ul>
<li>可见性原则: 如果存在两个或多个具有包含关系的作用域，外层声明了一个标识符，而内层没有再次声明同名标识符，那么外层标识符在内层仍然可见;</li>
<li>隐藏规则: 如果在内层声明了同名标识符，则外层标识符在内层不可见，这时称内层标识符隐藏类外层同名标识符;</li>
<li>在类的派生层次结构中，基类和派生类新增的成员都具有类作用域，二者的作用范围不同，是互相包含的两个层， <strong>派生类在内层</strong> ；这时如果派生类声明类一个和某个基类成员同名的新成员， <strong>派生类的新成员就隐藏了外层同名成员</strong> ， <strong>直接使用成员名只能访问到派生类的成员</strong>;</li>
<li>如果派生类中声明类与基类成员同名的新函数，即使函数的参数表不同，从基类继承的同名函数的所有重载形式也都会被隐藏，如果要访问被隐藏的成员，就需要使用 <strong>作用域分辨符</strong> 和 <strong>基类</strong> 命来限定;</li>
<li>对于多继承情况，，当所有基类都没有上级基类时，，如果多个基类拥有同名成员，派生类也新增这样的同名成员，派生类成员将隐藏所有基类的同名成员，，这时可以使用 “对象名.成员名” 或 “对象指针-&gt;成员名”  的方式来访问新增成员，，基类的而同名成员可以使用 <strong>基类名</strong> 和 <strong>作用域分辨符</strong> 访问;但如果派生类中没有同名成成员，上述方法就无法唯一标识成员，必须通过基类名和作用域分辨符来标识成员;</li>
<li>如果子类中定义的函数与父类的函数同名但具有不同的 <strong>参数数量或参数类型(形参表不同)</strong> ， 不属于 <strong>函数重载</strong>。这时子类中的函数将使父类中的函数隐藏，调用父类中的函数必须使用父类名称来限定， <strong>只用在相同的作用域中定义的函数才可以重载</strong> ;</li>
<li><strong>using 关键字</strong>: using的一般功能是将一个作用域中的名字引入到另一个作用域中，它还有一个非常有用的用法: 将using用域基类中的函数名，这样派生类中如果定义同名但参数不同的函数，基类的函数就不会被隐藏，两个重载的函数将会并存在派生类的作用域中;例如:</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Derived2</span>:</span> <span class="hljs-keyword">public</span> Base1<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> Base1::fun;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;,,,&#125;<br>&#125;;<br></code></pre></td></tr></table></figure>
<p>这时，使用Derived2的对象，既可以直接调用无参数的fun函数，又可以直接调用带int型参数的fun参数;</p>
<ul>
<li>如果某个派生类的部分或全部直接基类时从另一个共同的基类派生而来，在这些直接基类中，从上一级基类继承来的成员就拥有相同的名称，因此派生类中也就会产生同名的现象，对这种类型的同名成员也要使用作用域分辨符来唯一标识，而且必须用直接基类来进行限定;</li>
<li></li>
</ul>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>c++</tag>
        <tag>类</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>网络流-预流推进 和 最高标号预流推进HLPP</title>
    <url>/2019/08/02/%E7%BD%91%E7%BB%9C%E6%B5%81-%E9%A2%84%E6%B5%81%E6%8E%A8%E8%BF%9B-%E5%92%8C-%E6%9C%80%E9%AB%98%E6%A0%87%E5%8F%B7%E9%A2%84%E6%B5%81%E6%8E%A8%E8%BF%9BHLPP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>2019.8.2。。。。。于是，去年的网络流的后续学习就这么的拖到了一年后的今天，，曾经的懒，如今的泪，，几次校赛出现的网络流签到题都因为曾今没有好好的刷题，空有一身概念而没有实际的做题经验，面对经典模板题无从下手，，没办法，欠下的总要找时间补，，于是，，，，</p>
<span id="more"></span>
<p>下面的内容部分借鉴 <a href="https://www.luogu.org/blog/ONE-PIECE/jiu-ji-di-zui-tai-liu-suan-fa-isap-yu-hlpp">这篇博客</a> 以及 <a href="https://www.luogu.org/blog/105496/solution-p4722">这篇博客</a></p>
<h1 id="预流推进算法"><a href="#预流推进算法" class="headerlink" title="预流推进算法"></a>预流推进算法</h1><p>网络流的解法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">int</span> MAXN, <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span> =</span> <span class="hljs-keyword">int</span>&gt;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HLPP</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">const</span> T INF = numeric_limits&lt;T&gt;::max();<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">    &#123;</span><br>        <span class="hljs-keyword">int</span> to, nxt;<br>        T flow;<br>        edge(<span class="hljs-keyword">int</span> _to, <span class="hljs-keyword">int</span> _nxt, T _flow):to(_to), nxt(_nxt), flow(_flow)&#123;&#125;<br>    &#125;;<br>    <span class="hljs-keyword">int</span> s = MAXN - <span class="hljs-number">1</span>, t = MAXN - <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">vector</span>&lt;edge&gt; g[MAXN];<br>    <span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; lst[MAXN];<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; gap[MAXN];<br>    <span class="hljs-keyword">int</span> ptr[MAXN];<br>    T excess[MAXN];<br>    <span class="hljs-keyword">int</span> highest, height[MAXN], cnt[MAXN], work;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, T flow, <span class="hljs-keyword">bool</span> isDirected = <span class="hljs-literal">true</span>)</span></span><br><span class="hljs-function">    </span>&#123;<br>        g[u].push_back(edge(v, g[v].size(), flow));<br>        g[v].push_back(edge(u, g[u].size() - <span class="hljs-number">1</span>, isDirected ? <span class="hljs-number">0</span> : flow));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upHeight</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> nh)</span></span><br><span class="hljs-function">    </span>&#123;<br>        ++work;<br>        <span class="hljs-keyword">if</span>(height[v] != MAXN)--cnt[height[v]];<br>        height[v] = nh;<br>        <span class="hljs-keyword">if</span>(nh == MAXN)<span class="hljs-keyword">return</span>;<br>        ++cnt[nh]; highest = nh;<br>        gap[nh].push_back(v);<br>        <span class="hljs-keyword">if</span>(excess[v] &gt; <span class="hljs-number">0</span>)lst[nh].push_back(v), ++ptr[nh];<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">globalRelabel</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        work = <span class="hljs-number">0</span>;<br>        fill(begin(height), end(height), MAXN);<br>        fill(begin(cnt), end(cnt), <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= highest; ++i)lst[i].clear(), gap[i].clear();<br>        height[t] = <span class="hljs-number">0</span>;<br>        <span class="hljs-function"><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">q</span><span class="hljs-params">(&#123;t&#125;)</span></span>;<br>        <span class="hljs-keyword">while</span>(!q.empty())<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = q.front(); q.pop();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;e: g[v])<br>                <span class="hljs-keyword">if</span>(height[e.to] == MAXN &amp;&amp; g[e.to][e.nxt].flow &gt; <span class="hljs-number">0</span>)<br>                    q.push(e.to), upHeight(e.to, height[v] + <span class="hljs-number">1</span>);<br>            highest = height[v];<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v, edge &amp;e)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(excess[e.to] == <span class="hljs-number">0</span>)lst[height[e.to]].push_back(e.to), ++ptr[height[e.to]];<br>        T df = min(excess[v], e.flow);<br>        e.flow -= df; g[e.to][e.nxt].flow += df;<br>        excess[v] -= df; excess[e.to] += df;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">discharge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">int</span> nh = MAXN;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;e: g[v])<br>        &#123;<br>            <span class="hljs-keyword">if</span>(e.flow &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(height[v] == height[e.to] + <span class="hljs-number">1</span>)<br>                &#123;<br>                    push(v, e);<br>                    <span class="hljs-keyword">if</span>(excess[v] &lt;= <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <br>                    nh = min(nh, height[e.to] + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cnt[height[v]] &gt; <span class="hljs-number">1</span>)upHeight(v, nh);<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = height[v]; i &lt; MAXN; ++i)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> j: gap[i])upHeight(j, MAXN);<br>                gap[i].clear(); ptr[i] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function">T <span class="hljs-title">MaxFlow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> heur_n = MAXN)</span></span><br><span class="hljs-function">    </span>&#123;<br>        fill(begin(excess), end(excess), <span class="hljs-number">0</span>);<br>        excess[s] = INF; excess[t] = -INF;<br>        globalRelabel();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;e: g[s])push(s, e);<br>        <span class="hljs-keyword">for</span>(; highest &gt;= <span class="hljs-number">0</span>; --highest)<br>        &#123;<br>            <span class="hljs-keyword">while</span>(!lst[highest].empty())<br>            &#123;<br>                <span class="hljs-keyword">int</span> v = lst[highest].back();<br>                lst[highest].pop_back();<br>                discharge(v);<br>                <span class="hljs-keyword">if</span>(work &gt; heur_n &lt;&lt; <span class="hljs-number">2</span>)globalRelabel();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> excess[t] + INF;<br>    &#125;<br>&#125;;<br><br>HLPP&lt;maxn, <span class="hljs-keyword">int</span>&gt; hlpp;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>  <br>    <span class="hljs-keyword">int</span> n, m, s, t;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;<br>    hlpp.s = s; hlpp.t = t;<br>    <span class="hljs-keyword">int</span> u, v; ll f;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; f;<br>        hlpp.addedge(u, v, f, <span class="hljs-literal">true</span>);<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; hlpp.MaxFlow() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>[资源]一些电子书下载集合</title>
    <url>/2020/09/30/%E8%B5%84%E6%BA%90-%E4%B8%80%E4%BA%9B%E7%94%B5%E5%AD%90%E4%B9%A6%E4%B8%8B%E8%BD%BD%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>(仅罗列资源，不代表任何立场）</p>
<ul>
<li><a href="https://github.com/sxcool1024/Machinery-Industry-Press">https://github.com/sxcool1024/Machinery-Industry-Press</a> 文件提取码：2014 文件解压密码：1024</li>
<li><a href="https://github.com/fuhmmin/it-ebooks-cn">https://github.com/fuhmmin/it-ebooks-cn</a> <a href="http://it-ebooks.flygon.net/">http://it-ebooks.flygon.net/</a></li>
<li><a href="https://github.com/programthink/books">https://github.com/programthink/books</a></li>
<li><a href="https://jikbook.com/">https://jikbook.com/</a> 缺点：百度云</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>随机生成中文姓名</title>
    <url>/2019/09/25/%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E4%B8%AD%E6%96%87%E5%A7%93%E5%90%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>做项目的时候有时会用到自己造一个数据库，数值信息都可以随便rand出来，，但是中文姓名不太好处理，，<a href="https://www.cnblogs.com/kindom/p/3963610.html">最后借鉴了这篇博客</a> ，， 把他的一些东西改了改，够用了，，</p>
<span id="more"></span>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;random&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function">mt19937 <span class="hljs-title">rnd</span><span class="hljs-params">(time(<span class="hljs-number">0</span>))</span></span>;<br><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">NAME</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	srand(time(<span class="hljs-literal">NULL</span>));<br>	<span class="hljs-comment">//百家姓-单姓</span><br>	<span class="hljs-built_in">string</span> NA1[<span class="hljs-number">444</span>] = &#123; <span class="hljs-string">&quot;赵&quot;</span>, <span class="hljs-string">&quot;钱&quot;</span>, <span class="hljs-string">&quot;孙&quot;</span>, <span class="hljs-string">&quot;李&quot;</span>, <span class="hljs-string">&quot;周&quot;</span>, <span class="hljs-string">&quot;吴&quot;</span>, <span class="hljs-string">&quot;郑&quot;</span>, <span class="hljs-string">&quot;王&quot;</span>, <span class="hljs-string">&quot;冯&quot;</span>, <span class="hljs-string">&quot;陈&quot;</span>, <span class="hljs-string">&quot;褚&quot;</span>, <span class="hljs-string">&quot;卫&quot;</span>, <span class="hljs-string">&quot;蒋&quot;</span>, <span class="hljs-string">&quot;沈&quot;</span>, <span class="hljs-string">&quot;韩&quot;</span>, <span class="hljs-string">&quot;杨&quot;</span>, <span class="hljs-string">&quot;朱&quot;</span>, <span class="hljs-string">&quot;秦&quot;</span>, <span class="hljs-string">&quot;尤&quot;</span>, <span class="hljs-string">&quot;许&quot;</span>, <span class="hljs-string">&quot;何&quot;</span>, <span class="hljs-string">&quot;吕&quot;</span>, <span class="hljs-string">&quot;施&quot;</span>, <span class="hljs-string">&quot;张&quot;</span>, <span class="hljs-string">&quot;孔&quot;</span>, <span class="hljs-string">&quot;曹&quot;</span>, <span class="hljs-string">&quot;严&quot;</span>, <span class="hljs-string">&quot;华&quot;</span>, <span class="hljs-string">&quot;金&quot;</span>, <span class="hljs-string">&quot;魏&quot;</span>, <span class="hljs-string">&quot;陶&quot;</span>, <span class="hljs-string">&quot;姜&quot;</span>, <span class="hljs-string">&quot;戚&quot;</span>, <span class="hljs-string">&quot;谢&quot;</span>, <span class="hljs-string">&quot;邹&quot;</span>, <span class="hljs-string">&quot;喻&quot;</span>, <span class="hljs-string">&quot;柏&quot;</span>, <span class="hljs-string">&quot;水&quot;</span>, <span class="hljs-string">&quot;窦&quot;</span>, <span class="hljs-string">&quot;章&quot;</span>, <span class="hljs-string">&quot;云&quot;</span>, <span class="hljs-string">&quot;苏&quot;</span>, <span class="hljs-string">&quot;潘&quot;</span>, <span class="hljs-string">&quot;葛&quot;</span>, <span class="hljs-string">&quot;奚&quot;</span>, <span class="hljs-string">&quot;范&quot;</span>, <span class="hljs-string">&quot;彭&quot;</span>, <span class="hljs-string">&quot;郎&quot;</span>, <span class="hljs-string">&quot;鲁&quot;</span>, <span class="hljs-string">&quot;韦&quot;</span>, <span class="hljs-string">&quot;昌&quot;</span>, <span class="hljs-string">&quot;马&quot;</span>, <span class="hljs-string">&quot;苗&quot;</span>, <span class="hljs-string">&quot;凤&quot;</span>, <span class="hljs-string">&quot;花&quot;</span>, <span class="hljs-string">&quot;方&quot;</span>, <span class="hljs-string">&quot;俞&quot;</span>, <span class="hljs-string">&quot;任&quot;</span>, <span class="hljs-string">&quot;袁&quot;</span>, <span class="hljs-string">&quot;柳&quot;</span>, <span class="hljs-string">&quot;酆&quot;</span>, <span class="hljs-string">&quot;鲍&quot;</span>, <span class="hljs-string">&quot;史&quot;</span>, <span class="hljs-string">&quot;唐&quot;</span>, <span class="hljs-string">&quot;费&quot;</span>, <span class="hljs-string">&quot;廉&quot;</span>, <span class="hljs-string">&quot;岑&quot;</span>, <span class="hljs-string">&quot;薛&quot;</span>, <span class="hljs-string">&quot;雷&quot;</span>, <span class="hljs-string">&quot;贺&quot;</span>, <span class="hljs-string">&quot;倪&quot;</span>, <span class="hljs-string">&quot;汤&quot;</span>, <span class="hljs-string">&quot;滕&quot;</span>, <span class="hljs-string">&quot;殷&quot;</span>, <span class="hljs-string">&quot;罗&quot;</span>, <span class="hljs-string">&quot;毕&quot;</span>, <span class="hljs-string">&quot;郝&quot;</span>, <span class="hljs-string">&quot;邬&quot;</span>, <span class="hljs-string">&quot;安&quot;</span>, <span class="hljs-string">&quot;常&quot;</span>, <span class="hljs-string">&quot;乐&quot;</span>, <span class="hljs-string">&quot;于&quot;</span>, <span class="hljs-string">&quot;时&quot;</span>, <span class="hljs-string">&quot;傅&quot;</span>, <span class="hljs-string">&quot;皮&quot;</span>, <span class="hljs-string">&quot;卞&quot;</span>, <span class="hljs-string">&quot;齐&quot;</span>, <span class="hljs-string">&quot;康&quot;</span>, <span class="hljs-string">&quot;伍&quot;</span>, <span class="hljs-string">&quot;余&quot;</span>, <span class="hljs-string">&quot;元&quot;</span>, <span class="hljs-string">&quot;卜&quot;</span>, <span class="hljs-string">&quot;顾&quot;</span>, <span class="hljs-string">&quot;孟&quot;</span>, <span class="hljs-string">&quot;平&quot;</span>, <span class="hljs-string">&quot;黄&quot;</span>, <span class="hljs-string">&quot;和&quot;</span>, <span class="hljs-string">&quot;穆&quot;</span>, <span class="hljs-string">&quot;萧&quot;</span>, <span class="hljs-string">&quot;尹&quot;</span>, <span class="hljs-string">&quot;姚&quot;</span>, <span class="hljs-string">&quot;邵&quot;</span>, <span class="hljs-string">&quot;湛&quot;</span>, <span class="hljs-string">&quot;汪&quot;</span>, <span class="hljs-string">&quot;祁&quot;</span>, <span class="hljs-string">&quot;毛&quot;</span>, <span class="hljs-string">&quot;禹&quot;</span>, <span class="hljs-string">&quot;狄&quot;</span>, <span class="hljs-string">&quot;米&quot;</span>, <span class="hljs-string">&quot;贝&quot;</span>, <span class="hljs-string">&quot;明&quot;</span>, <span class="hljs-string">&quot;臧&quot;</span>, <span class="hljs-string">&quot;计&quot;</span>, <span class="hljs-string">&quot;伏&quot;</span>, <span class="hljs-string">&quot;成&quot;</span>, <span class="hljs-string">&quot;戴&quot;</span>, <span class="hljs-string">&quot;谈&quot;</span>, <span class="hljs-string">&quot;宋&quot;</span>, <span class="hljs-string">&quot;茅&quot;</span>, <span class="hljs-string">&quot;庞&quot;</span>, <span class="hljs-string">&quot;熊&quot;</span>, <span class="hljs-string">&quot;纪&quot;</span>, <span class="hljs-string">&quot;舒&quot;</span>, <span class="hljs-string">&quot;屈&quot;</span>, <span class="hljs-string">&quot;项&quot;</span>, <span class="hljs-string">&quot;祝&quot;</span>, <span class="hljs-string">&quot;董&quot;</span>, <span class="hljs-string">&quot;梁&quot;</span>, <span class="hljs-string">&quot;杜&quot;</span>, <span class="hljs-string">&quot;阮&quot;</span>, <span class="hljs-string">&quot;蓝&quot;</span>, <span class="hljs-string">&quot;闵&quot;</span>, <span class="hljs-string">&quot;席&quot;</span>, <span class="hljs-string">&quot;季&quot;</span>, <span class="hljs-string">&quot;麻&quot;</span>, <span class="hljs-string">&quot;强&quot;</span>, <span class="hljs-string">&quot;贾&quot;</span>, <span class="hljs-string">&quot;路&quot;</span>, <span class="hljs-string">&quot;娄&quot;</span>, <span class="hljs-string">&quot;危&quot;</span>, <span class="hljs-string">&quot;江&quot;</span>, <span class="hljs-string">&quot;童&quot;</span>, <span class="hljs-string">&quot;颜&quot;</span>, <span class="hljs-string">&quot;郭&quot;</span>, <span class="hljs-string">&quot;梅&quot;</span>, <span class="hljs-string">&quot;盛&quot;</span>, <span class="hljs-string">&quot;林&quot;</span>, <span class="hljs-string">&quot;刁&quot;</span>, <span class="hljs-string">&quot;钟&quot;</span>, <span class="hljs-string">&quot;徐&quot;</span>, <span class="hljs-string">&quot;邱&quot;</span>, <span class="hljs-string">&quot;骆&quot;</span>, <span class="hljs-string">&quot;高&quot;</span>, <span class="hljs-string">&quot;夏&quot;</span>, <span class="hljs-string">&quot;蔡&quot;</span>, <span class="hljs-string">&quot;田&quot;</span>, <span class="hljs-string">&quot;樊&quot;</span>, <span class="hljs-string">&quot;胡&quot;</span>, <span class="hljs-string">&quot;凌&quot;</span>, <span class="hljs-string">&quot;霍&quot;</span>, <span class="hljs-string">&quot;虞&quot;</span>, <span class="hljs-string">&quot;万&quot;</span>, <span class="hljs-string">&quot;支&quot;</span>, <span class="hljs-string">&quot;柯&quot;</span>, <span class="hljs-string">&quot;昝&quot;</span>, <span class="hljs-string">&quot;管&quot;</span>, <span class="hljs-string">&quot;卢&quot;</span>, <span class="hljs-string">&quot;莫&quot;</span>, <span class="hljs-string">&quot;经&quot;</span>, <span class="hljs-string">&quot;房&quot;</span>, <span class="hljs-string">&quot;裘&quot;</span>, <span class="hljs-string">&quot;缪&quot;</span>, <span class="hljs-string">&quot;干&quot;</span>, <span class="hljs-string">&quot;解&quot;</span>, <span class="hljs-string">&quot;应&quot;</span>, <span class="hljs-string">&quot;宗&quot;</span>, <span class="hljs-string">&quot;丁&quot;</span>, <span class="hljs-string">&quot;宣&quot;</span>, <span class="hljs-string">&quot;贲&quot;</span>, <span class="hljs-string">&quot;邓&quot;</span>, <span class="hljs-string">&quot;郁&quot;</span>, <span class="hljs-string">&quot;单&quot;</span>, <span class="hljs-string">&quot;杭&quot;</span>, <span class="hljs-string">&quot;洪&quot;</span>, <span class="hljs-string">&quot;包&quot;</span>, <span class="hljs-string">&quot;诸&quot;</span>, <span class="hljs-string">&quot;左&quot;</span>, <span class="hljs-string">&quot;石&quot;</span>, <span class="hljs-string">&quot;崔&quot;</span>, <span class="hljs-string">&quot;吉&quot;</span>, <span class="hljs-string">&quot;钮&quot;</span>, <span class="hljs-string">&quot;龚&quot;</span>, <span class="hljs-string">&quot;程&quot;</span>, <span class="hljs-string">&quot;嵇&quot;</span>, <span class="hljs-string">&quot;邢&quot;</span>, <span class="hljs-string">&quot;滑&quot;</span>, <span class="hljs-string">&quot;裴&quot;</span>, <span class="hljs-string">&quot;陆&quot;</span>, <span class="hljs-string">&quot;荣&quot;</span>, <span class="hljs-string">&quot;翁&quot;</span>, <span class="hljs-string">&quot;荀&quot;</span>, <span class="hljs-string">&quot;羊&quot;</span>, <span class="hljs-string">&quot;於&quot;</span>, <span class="hljs-string">&quot;惠&quot;</span>, <span class="hljs-string">&quot;甄&quot;</span>, <span class="hljs-string">&quot;麴&quot;</span>, <span class="hljs-string">&quot;家&quot;</span>, <span class="hljs-string">&quot;封&quot;</span>, <span class="hljs-string">&quot;芮&quot;</span>, <span class="hljs-string">&quot;羿&quot;</span>, <span class="hljs-string">&quot;储&quot;</span>, <span class="hljs-string">&quot;靳&quot;</span>, <span class="hljs-string">&quot;汲&quot;</span>, <span class="hljs-string">&quot;邴&quot;</span>, <span class="hljs-string">&quot;糜&quot;</span>, <span class="hljs-string">&quot;松&quot;</span>, <span class="hljs-string">&quot;井&quot;</span>, <span class="hljs-string">&quot;段&quot;</span>, <span class="hljs-string">&quot;富&quot;</span>, <span class="hljs-string">&quot;巫&quot;</span>, <span class="hljs-string">&quot;乌&quot;</span>, <span class="hljs-string">&quot;焦&quot;</span>, <span class="hljs-string">&quot;巴&quot;</span>, <span class="hljs-string">&quot;弓&quot;</span>, <span class="hljs-string">&quot;牧&quot;</span>, <span class="hljs-string">&quot;隗&quot;</span>, <span class="hljs-string">&quot;山&quot;</span>, <span class="hljs-string">&quot;谷&quot;</span>, <span class="hljs-string">&quot;车&quot;</span>, <span class="hljs-string">&quot;侯&quot;</span>, <span class="hljs-string">&quot;宓&quot;</span>, <span class="hljs-string">&quot;蓬&quot;</span>, <span class="hljs-string">&quot;全&quot;</span>, <span class="hljs-string">&quot;郗&quot;</span>, <span class="hljs-string">&quot;班&quot;</span>, <span class="hljs-string">&quot;仰&quot;</span>, <span class="hljs-string">&quot;秋&quot;</span>, <span class="hljs-string">&quot;仲&quot;</span>, <span class="hljs-string">&quot;伊&quot;</span>, <span class="hljs-string">&quot;宫&quot;</span>, <span class="hljs-string">&quot;宁&quot;</span>, <span class="hljs-string">&quot;仇&quot;</span>, <span class="hljs-string">&quot;栾&quot;</span>, <span class="hljs-string">&quot;暴&quot;</span>, <span class="hljs-string">&quot;甘&quot;</span>, <span class="hljs-string">&quot;钭&quot;</span>, <span class="hljs-string">&quot;厉&quot;</span>, <span class="hljs-string">&quot;戎&quot;</span>, <span class="hljs-string">&quot;祖&quot;</span>, <span class="hljs-string">&quot;武&quot;</span>, <span class="hljs-string">&quot;符&quot;</span>, <span class="hljs-string">&quot;刘&quot;</span>, <span class="hljs-string">&quot;景&quot;</span>, <span class="hljs-string">&quot;詹&quot;</span>, <span class="hljs-string">&quot;束&quot;</span>, <span class="hljs-string">&quot;龙&quot;</span>, <span class="hljs-string">&quot;叶&quot;</span>, <span class="hljs-string">&quot;幸&quot;</span>, <span class="hljs-string">&quot;司&quot;</span>, <span class="hljs-string">&quot;韶&quot;</span>, <span class="hljs-string">&quot;郜&quot;</span>, <span class="hljs-string">&quot;黎&quot;</span>, <span class="hljs-string">&quot;蓟&quot;</span>, <span class="hljs-string">&quot;薄&quot;</span>, <span class="hljs-string">&quot;印&quot;</span>, <span class="hljs-string">&quot;宿&quot;</span>, <span class="hljs-string">&quot;白&quot;</span>, <span class="hljs-string">&quot;怀&quot;</span>, <span class="hljs-string">&quot;蒲&quot;</span>, <span class="hljs-string">&quot;邰&quot;</span>, <span class="hljs-string">&quot;从&quot;</span>, <span class="hljs-string">&quot;鄂&quot;</span>, <span class="hljs-string">&quot;索&quot;</span>, <span class="hljs-string">&quot;咸&quot;</span>, <span class="hljs-string">&quot;籍&quot;</span>, <span class="hljs-string">&quot;赖&quot;</span>, <span class="hljs-string">&quot;卓&quot;</span>, <span class="hljs-string">&quot;蔺&quot;</span>, <span class="hljs-string">&quot;屠&quot;</span>, <span class="hljs-string">&quot;蒙&quot;</span>, <span class="hljs-string">&quot;池&quot;</span>, <span class="hljs-string">&quot;乔&quot;</span>, <span class="hljs-string">&quot;阴&quot;</span>, <span class="hljs-string">&quot;郁&quot;</span>, <span class="hljs-string">&quot;胥&quot;</span>, <span class="hljs-string">&quot;能&quot;</span>, <span class="hljs-string">&quot;苍&quot;</span>, <span class="hljs-string">&quot;双&quot;</span>, <span class="hljs-string">&quot;闻&quot;</span>, <span class="hljs-string">&quot;莘&quot;</span>, <span class="hljs-string">&quot;党&quot;</span>, <span class="hljs-string">&quot;翟&quot;</span>, <span class="hljs-string">&quot;谭&quot;</span>, <span class="hljs-string">&quot;贡&quot;</span>, <span class="hljs-string">&quot;劳&quot;</span>, <span class="hljs-string">&quot;逄&quot;</span>, <span class="hljs-string">&quot;姬&quot;</span>, <span class="hljs-string">&quot;申&quot;</span>, <span class="hljs-string">&quot;扶&quot;</span>, <span class="hljs-string">&quot;堵&quot;</span>, <span class="hljs-string">&quot;冉&quot;</span>, <span class="hljs-string">&quot;宰&quot;</span>, <span class="hljs-string">&quot;郦&quot;</span>, <span class="hljs-string">&quot;雍&quot;</span>, <span class="hljs-string">&quot;舄&quot;</span>, <span class="hljs-string">&quot;璩&quot;</span>, <span class="hljs-string">&quot;桑&quot;</span>, <span class="hljs-string">&quot;桂&quot;</span>, <span class="hljs-string">&quot;濮&quot;</span>, <span class="hljs-string">&quot;牛&quot;</span>, <span class="hljs-string">&quot;寿&quot;</span>, <span class="hljs-string">&quot;通&quot;</span>, <span class="hljs-string">&quot;边&quot;</span>, <span class="hljs-string">&quot;扈&quot;</span>, <span class="hljs-string">&quot;燕&quot;</span>, <span class="hljs-string">&quot;冀&quot;</span>, <span class="hljs-string">&quot;郏&quot;</span>, <span class="hljs-string">&quot;浦&quot;</span>, <span class="hljs-string">&quot;尚&quot;</span>, <span class="hljs-string">&quot;农&quot;</span>, <span class="hljs-string">&quot;温&quot;</span>, <span class="hljs-string">&quot;别&quot;</span>, <span class="hljs-string">&quot;庄&quot;</span>, <span class="hljs-string">&quot;晏&quot;</span>, <span class="hljs-string">&quot;柴&quot;</span>, <span class="hljs-string">&quot;瞿&quot;</span>, <span class="hljs-string">&quot;阎&quot;</span>, <span class="hljs-string">&quot;充&quot;</span>, <span class="hljs-string">&quot;慕&quot;</span>, <span class="hljs-string">&quot;连&quot;</span>, <span class="hljs-string">&quot;茹&quot;</span>, <span class="hljs-string">&quot;习&quot;</span>, <span class="hljs-string">&quot;宦&quot;</span>, <span class="hljs-string">&quot;艾&quot;</span>, <span class="hljs-string">&quot;鱼&quot;</span>, <span class="hljs-string">&quot;容&quot;</span>, <span class="hljs-string">&quot;向&quot;</span>, <span class="hljs-string">&quot;古&quot;</span>, <span class="hljs-string">&quot;易&quot;</span>, <span class="hljs-string">&quot;慎&quot;</span>, <span class="hljs-string">&quot;戈&quot;</span>, <span class="hljs-string">&quot;廖&quot;</span>, <span class="hljs-string">&quot;庾&quot;</span>, <span class="hljs-string">&quot;终&quot;</span>, <span class="hljs-string">&quot;暨&quot;</span>, <span class="hljs-string">&quot;居&quot;</span>, <span class="hljs-string">&quot;衡&quot;</span>, <span class="hljs-string">&quot;步&quot;</span>, <span class="hljs-string">&quot;都&quot;</span>, <span class="hljs-string">&quot;耿&quot;</span>, <span class="hljs-string">&quot;满&quot;</span>, <span class="hljs-string">&quot;弘&quot;</span>, <span class="hljs-string">&quot;匡&quot;</span>, <span class="hljs-string">&quot;国&quot;</span>, <span class="hljs-string">&quot;文&quot;</span>, <span class="hljs-string">&quot;寇&quot;</span>, <span class="hljs-string">&quot;广&quot;</span>, <span class="hljs-string">&quot;禄&quot;</span>, <span class="hljs-string">&quot;阙&quot;</span>, <span class="hljs-string">&quot;东&quot;</span>, <span class="hljs-string">&quot;殴&quot;</span>, <span class="hljs-string">&quot;殳&quot;</span>, <span class="hljs-string">&quot;沃&quot;</span>, <span class="hljs-string">&quot;利&quot;</span>, <span class="hljs-string">&quot;蔚&quot;</span>, <span class="hljs-string">&quot;越&quot;</span>, <span class="hljs-string">&quot;夔&quot;</span>, <span class="hljs-string">&quot;隆&quot;</span>, <span class="hljs-string">&quot;师&quot;</span>, <span class="hljs-string">&quot;巩&quot;</span>, <span class="hljs-string">&quot;厍&quot;</span>, <span class="hljs-string">&quot;聂&quot;</span>, <span class="hljs-string">&quot;晁&quot;</span>, <span class="hljs-string">&quot;勾&quot;</span>, <span class="hljs-string">&quot;敖&quot;</span>, <span class="hljs-string">&quot;融&quot;</span>, <span class="hljs-string">&quot;冷&quot;</span>, <span class="hljs-string">&quot;訾&quot;</span>, <span class="hljs-string">&quot;辛&quot;</span>, <span class="hljs-string">&quot;阚&quot;</span>, <span class="hljs-string">&quot;那&quot;</span>, <span class="hljs-string">&quot;简&quot;</span>, <span class="hljs-string">&quot;饶&quot;</span>, <span class="hljs-string">&quot;空&quot;</span>, <span class="hljs-string">&quot;曾&quot;</span>, <span class="hljs-string">&quot;毋&quot;</span>, <span class="hljs-string">&quot;沙&quot;</span>, <span class="hljs-string">&quot;乜&quot;</span>, <span class="hljs-string">&quot;养&quot;</span>, <span class="hljs-string">&quot;鞠&quot;</span>, <span class="hljs-string">&quot;须&quot;</span>, <span class="hljs-string">&quot;丰&quot;</span>, <span class="hljs-string">&quot;巢&quot;</span>, <span class="hljs-string">&quot;关&quot;</span>, <span class="hljs-string">&quot;蒯&quot;</span>, <span class="hljs-string">&quot;相&quot;</span>, <span class="hljs-string">&quot;查&quot;</span>, <span class="hljs-string">&quot;後&quot;</span>, <span class="hljs-string">&quot;荆&quot;</span>, <span class="hljs-string">&quot;红&quot;</span>, <span class="hljs-string">&quot;游&quot;</span>, <span class="hljs-string">&quot;竺&quot;</span>, <span class="hljs-string">&quot;权&quot;</span>, <span class="hljs-string">&quot;逯&quot;</span>, <span class="hljs-string">&quot;盖&quot;</span>, <span class="hljs-string">&quot;益&quot;</span>, <span class="hljs-string">&quot;桓&quot;</span>, <span class="hljs-string">&quot;公&quot;</span>, <span class="hljs-string">&quot;仉&quot;</span>, <span class="hljs-string">&quot;督&quot;</span>, <span class="hljs-string">&quot;晋&quot;</span>, <span class="hljs-string">&quot;楚&quot;</span>, <span class="hljs-string">&quot;闫&quot;</span>, <span class="hljs-string">&quot;法&quot;</span>, <span class="hljs-string">&quot;汝&quot;</span>, <span class="hljs-string">&quot;鄢&quot;</span>, <span class="hljs-string">&quot;涂&quot;</span>, <span class="hljs-string">&quot;钦&quot;</span>, <span class="hljs-string">&quot;归&quot;</span>, <span class="hljs-string">&quot;海&quot;</span>, <span class="hljs-string">&quot;岳&quot;</span>, <span class="hljs-string">&quot;帅&quot;</span>, <span class="hljs-string">&quot;缑&quot;</span>, <span class="hljs-string">&quot;亢&quot;</span>, <span class="hljs-string">&quot;况&quot;</span>, <span class="hljs-string">&quot;后&quot;</span>, <span class="hljs-string">&quot;有&quot;</span>, <span class="hljs-string">&quot;琴&quot;</span>, <span class="hljs-string">&quot;商&quot;</span>, <span class="hljs-string">&quot;牟&quot;</span>, <span class="hljs-string">&quot;佘&quot;</span>, <span class="hljs-string">&quot;佴&quot;</span>, <span class="hljs-string">&quot;伯&quot;</span>, <span class="hljs-string">&quot;赏&quot;</span>, <span class="hljs-string">&quot;墨&quot;</span>, <span class="hljs-string">&quot;哈&quot;</span>, <span class="hljs-string">&quot;谯&quot;</span>, <span class="hljs-string">&quot;笪&quot;</span>, <span class="hljs-string">&quot;年&quot;</span>, <span class="hljs-string">&quot;爱&quot;</span>, <span class="hljs-string">&quot;阳&quot;</span>, <span class="hljs-string">&quot;佟&quot;</span>, <span class="hljs-string">&quot;言&quot;</span>, <span class="hljs-string">&quot;福&quot;</span> &#125;;<br><br>	<span class="hljs-comment">//百家姓-复姓</span><br>	<span class="hljs-built_in">string</span> NA2[<span class="hljs-number">59</span>] = &#123; <span class="hljs-string">&quot;万俟&quot;</span>, <span class="hljs-string">&quot;司马&quot;</span>, <span class="hljs-string">&quot;上官&quot;</span>, <span class="hljs-string">&quot;欧阳&quot;</span>, <span class="hljs-string">&quot;夏侯&quot;</span>, <span class="hljs-string">&quot;诸葛&quot;</span>, <span class="hljs-string">&quot;闻人&quot;</span>, <span class="hljs-string">&quot;东方&quot;</span>, <span class="hljs-string">&quot;赫连&quot;</span>, <span class="hljs-string">&quot;皇甫&quot;</span>, <span class="hljs-string">&quot;尉迟&quot;</span>, <span class="hljs-string">&quot;公羊&quot;</span>, <span class="hljs-string">&quot;澹台&quot;</span>, <span class="hljs-string">&quot;公冶&quot;</span>, <span class="hljs-string">&quot;宗政&quot;</span>, <span class="hljs-string">&quot;濮阳&quot;</span>, <span class="hljs-string">&quot;淳于&quot;</span>, <span class="hljs-string">&quot;单于&quot;</span>, <span class="hljs-string">&quot;太叔&quot;</span>, <span class="hljs-string">&quot;申屠&quot;</span>, <span class="hljs-string">&quot;公孙&quot;</span>, <span class="hljs-string">&quot;仲孙&quot;</span>, <span class="hljs-string">&quot;轩辕&quot;</span>, <span class="hljs-string">&quot;令狐&quot;</span>, <span class="hljs-string">&quot;钟离&quot;</span>, <span class="hljs-string">&quot;宇文&quot;</span>, <span class="hljs-string">&quot;长孙&quot;</span>, <span class="hljs-string">&quot;慕容&quot;</span>, <span class="hljs-string">&quot;鲜于&quot;</span>, <span class="hljs-string">&quot;闾丘&quot;</span>, <span class="hljs-string">&quot;司徒&quot;</span>, <span class="hljs-string">&quot;司空&quot;</span>, <span class="hljs-string">&quot;亓官&quot;</span>, <span class="hljs-string">&quot;司寇&quot;</span>, <span class="hljs-string">&quot;子车&quot;</span>, <span class="hljs-string">&quot;颛孙&quot;</span>, <span class="hljs-string">&quot;端木&quot;</span>, <span class="hljs-string">&quot;巫马&quot;</span>, <span class="hljs-string">&quot;公西&quot;</span>, <span class="hljs-string">&quot;漆雕&quot;</span>, <span class="hljs-string">&quot;乐正&quot;</span>, <span class="hljs-string">&quot;壤驷&quot;</span>, <span class="hljs-string">&quot;公良&quot;</span>, <span class="hljs-string">&quot;拓跋&quot;</span>, <span class="hljs-string">&quot;夹谷&quot;</span>, <span class="hljs-string">&quot;宰父&quot;</span>, <span class="hljs-string">&quot;谷梁&quot;</span>, <span class="hljs-string">&quot;百里&quot;</span>, <span class="hljs-string">&quot;东郭&quot;</span>, <span class="hljs-string">&quot;南门&quot;</span>, <span class="hljs-string">&quot;呼延&quot;</span>, <span class="hljs-string">&quot;羊舌&quot;</span>, <span class="hljs-string">&quot;微生&quot;</span>, <span class="hljs-string">&quot;梁丘&quot;</span>, <span class="hljs-string">&quot;左丘&quot;</span>, <span class="hljs-string">&quot;东门&quot;</span>, <span class="hljs-string">&quot;西门&quot;</span>, <span class="hljs-string">&quot;南宫&quot;</span>, <span class="hljs-string">&quot;第五&quot;</span> &#125;;<br><br>	<span class="hljs-comment">//男性常用名</span><br>	<span class="hljs-built_in">string</span> ME1m[<span class="hljs-number">140</span>] = &#123; <span class="hljs-string">&quot;伟&quot;</span>, <span class="hljs-string">&quot;刚&quot;</span>, <span class="hljs-string">&quot;勇&quot;</span>, <span class="hljs-string">&quot;毅&quot;</span>, <span class="hljs-string">&quot;俊&quot;</span>, <span class="hljs-string">&quot;峰&quot;</span>, <span class="hljs-string">&quot;强&quot;</span>, <span class="hljs-string">&quot;军&quot;</span>, <span class="hljs-string">&quot;平&quot;</span>, <span class="hljs-string">&quot;保&quot;</span>, <span class="hljs-string">&quot;东&quot;</span>, <span class="hljs-string">&quot;文&quot;</span>, <span class="hljs-string">&quot;辉&quot;</span>, <span class="hljs-string">&quot;力&quot;</span>, <span class="hljs-string">&quot;明&quot;</span>, <span class="hljs-string">&quot;永&quot;</span>, <span class="hljs-string">&quot;健&quot;</span>, <span class="hljs-string">&quot;世&quot;</span>, <span class="hljs-string">&quot;广&quot;</span>, <span class="hljs-string">&quot;志&quot;</span>, <span class="hljs-string">&quot;义&quot;</span>, <span class="hljs-string">&quot;兴&quot;</span>, <span class="hljs-string">&quot;良&quot;</span>, <span class="hljs-string">&quot;海&quot;</span>, <span class="hljs-string">&quot;山&quot;</span>, <span class="hljs-string">&quot;仁&quot;</span>, <span class="hljs-string">&quot;波&quot;</span>, <span class="hljs-string">&quot;宁&quot;</span>, <span class="hljs-string">&quot;贵&quot;</span>, <span class="hljs-string">&quot;福&quot;</span>, <span class="hljs-string">&quot;生&quot;</span>, <span class="hljs-string">&quot;龙&quot;</span>, <span class="hljs-string">&quot;元&quot;</span>, <span class="hljs-string">&quot;全&quot;</span>, <span class="hljs-string">&quot;国&quot;</span>, <span class="hljs-string">&quot;胜&quot;</span>, <span class="hljs-string">&quot;学&quot;</span>, <span class="hljs-string">&quot;祥&quot;</span>, <span class="hljs-string">&quot;才&quot;</span>, <span class="hljs-string">&quot;发&quot;</span>, <span class="hljs-string">&quot;武&quot;</span>, <span class="hljs-string">&quot;新&quot;</span>, <span class="hljs-string">&quot;利&quot;</span>, <span class="hljs-string">&quot;清&quot;</span>, <span class="hljs-string">&quot;飞&quot;</span>, <span class="hljs-string">&quot;彬&quot;</span>, <span class="hljs-string">&quot;富&quot;</span>, <span class="hljs-string">&quot;顺&quot;</span>, <span class="hljs-string">&quot;信&quot;</span>, <span class="hljs-string">&quot;子&quot;</span>, <span class="hljs-string">&quot;杰&quot;</span>, <span class="hljs-string">&quot;涛&quot;</span>, <span class="hljs-string">&quot;昌&quot;</span>, <span class="hljs-string">&quot;成&quot;</span>, <span class="hljs-string">&quot;康&quot;</span>, <span class="hljs-string">&quot;星&quot;</span>, <span class="hljs-string">&quot;光&quot;</span>, <span class="hljs-string">&quot;天&quot;</span>, <span class="hljs-string">&quot;达&quot;</span>, <span class="hljs-string">&quot;安&quot;</span>, <span class="hljs-string">&quot;岩&quot;</span>, <span class="hljs-string">&quot;中&quot;</span>, <span class="hljs-string">&quot;茂&quot;</span>, <span class="hljs-string">&quot;进&quot;</span>, <span class="hljs-string">&quot;林&quot;</span>, <span class="hljs-string">&quot;有&quot;</span>, <span class="hljs-string">&quot;坚&quot;</span>, <span class="hljs-string">&quot;和&quot;</span>, <span class="hljs-string">&quot;彪&quot;</span>, <span class="hljs-string">&quot;博&quot;</span>, <span class="hljs-string">&quot;诚&quot;</span>, <span class="hljs-string">&quot;先&quot;</span>, <span class="hljs-string">&quot;敬&quot;</span>, <span class="hljs-string">&quot;震&quot;</span>, <span class="hljs-string">&quot;振&quot;</span>, <span class="hljs-string">&quot;壮&quot;</span>, <span class="hljs-string">&quot;会&quot;</span>, <span class="hljs-string">&quot;思&quot;</span>, <span class="hljs-string">&quot;群&quot;</span>, <span class="hljs-string">&quot;豪&quot;</span>, <span class="hljs-string">&quot;心&quot;</span>, <span class="hljs-string">&quot;邦&quot;</span>, <span class="hljs-string">&quot;承&quot;</span>, <span class="hljs-string">&quot;乐&quot;</span>, <span class="hljs-string">&quot;绍&quot;</span>, <span class="hljs-string">&quot;功&quot;</span>, <span class="hljs-string">&quot;松&quot;</span>, <span class="hljs-string">&quot;善&quot;</span>, <span class="hljs-string">&quot;厚&quot;</span>, <span class="hljs-string">&quot;庆&quot;</span>, <span class="hljs-string">&quot;磊&quot;</span>, <span class="hljs-string">&quot;民&quot;</span>, <span class="hljs-string">&quot;友&quot;</span>, <span class="hljs-string">&quot;裕&quot;</span>, <span class="hljs-string">&quot;河&quot;</span>, <span class="hljs-string">&quot;哲&quot;</span>, <span class="hljs-string">&quot;江&quot;</span>, <span class="hljs-string">&quot;超&quot;</span>, <span class="hljs-string">&quot;浩&quot;</span>, <span class="hljs-string">&quot;亮&quot;</span>, <span class="hljs-string">&quot;政&quot;</span>, <span class="hljs-string">&quot;谦&quot;</span>, <span class="hljs-string">&quot;亨&quot;</span>, <span class="hljs-string">&quot;奇&quot;</span>, <span class="hljs-string">&quot;固&quot;</span>, <span class="hljs-string">&quot;之&quot;</span>, <span class="hljs-string">&quot;轮&quot;</span>, <span class="hljs-string">&quot;翰&quot;</span>, <span class="hljs-string">&quot;朗&quot;</span>, <span class="hljs-string">&quot;伯&quot;</span>, <span class="hljs-string">&quot;宏&quot;</span>, <span class="hljs-string">&quot;言&quot;</span>, <span class="hljs-string">&quot;若&quot;</span>, <span class="hljs-string">&quot;鸣&quot;</span>, <span class="hljs-string">&quot;朋&quot;</span>, <span class="hljs-string">&quot;斌&quot;</span>, <span class="hljs-string">&quot;梁&quot;</span>, <span class="hljs-string">&quot;栋&quot;</span>, <span class="hljs-string">&quot;维&quot;</span>, <span class="hljs-string">&quot;启&quot;</span>, <span class="hljs-string">&quot;克&quot;</span>, <span class="hljs-string">&quot;伦&quot;</span>, <span class="hljs-string">&quot;翔&quot;</span>, <span class="hljs-string">&quot;旭&quot;</span>, <span class="hljs-string">&quot;鹏&quot;</span>, <span class="hljs-string">&quot;泽&quot;</span>, <span class="hljs-string">&quot;晨&quot;</span>, <span class="hljs-string">&quot;辰&quot;</span>, <span class="hljs-string">&quot;士&quot;</span>, <span class="hljs-string">&quot;以&quot;</span>, <span class="hljs-string">&quot;建&quot;</span>, <span class="hljs-string">&quot;家&quot;</span>, <span class="hljs-string">&quot;致&quot;</span>, <span class="hljs-string">&quot;树&quot;</span>, <span class="hljs-string">&quot;炎&quot;</span>, <span class="hljs-string">&quot;德&quot;</span>, <span class="hljs-string">&quot;行&quot;</span>, <span class="hljs-string">&quot;时&quot;</span>, <span class="hljs-string">&quot;泰&quot;</span>, <span class="hljs-string">&quot;盛&quot;</span> &#125;;<br>	<span class="hljs-built_in">string</span> ME2m[<span class="hljs-number">140</span>] = &#123; <span class="hljs-string">&quot;伟&quot;</span>, <span class="hljs-string">&quot;刚&quot;</span>, <span class="hljs-string">&quot;勇&quot;</span>, <span class="hljs-string">&quot;毅&quot;</span>, <span class="hljs-string">&quot;俊&quot;</span>, <span class="hljs-string">&quot;峰&quot;</span>, <span class="hljs-string">&quot;强&quot;</span>, <span class="hljs-string">&quot;军&quot;</span>, <span class="hljs-string">&quot;平&quot;</span>, <span class="hljs-string">&quot;保&quot;</span>, <span class="hljs-string">&quot;东&quot;</span>, <span class="hljs-string">&quot;文&quot;</span>, <span class="hljs-string">&quot;辉&quot;</span>, <span class="hljs-string">&quot;力&quot;</span>, <span class="hljs-string">&quot;明&quot;</span>, <span class="hljs-string">&quot;永&quot;</span>, <span class="hljs-string">&quot;健&quot;</span>, <span class="hljs-string">&quot;世&quot;</span>, <span class="hljs-string">&quot;广&quot;</span>, <span class="hljs-string">&quot;志&quot;</span>, <span class="hljs-string">&quot;义&quot;</span>, <span class="hljs-string">&quot;兴&quot;</span>, <span class="hljs-string">&quot;良&quot;</span>, <span class="hljs-string">&quot;海&quot;</span>, <span class="hljs-string">&quot;山&quot;</span>, <span class="hljs-string">&quot;仁&quot;</span>, <span class="hljs-string">&quot;波&quot;</span>, <span class="hljs-string">&quot;宁&quot;</span>, <span class="hljs-string">&quot;贵&quot;</span>, <span class="hljs-string">&quot;福&quot;</span>, <span class="hljs-string">&quot;生&quot;</span>, <span class="hljs-string">&quot;龙&quot;</span>, <span class="hljs-string">&quot;元&quot;</span>, <span class="hljs-string">&quot;全&quot;</span>, <span class="hljs-string">&quot;国&quot;</span>, <span class="hljs-string">&quot;胜&quot;</span>, <span class="hljs-string">&quot;学&quot;</span>, <span class="hljs-string">&quot;祥&quot;</span>, <span class="hljs-string">&quot;才&quot;</span>, <span class="hljs-string">&quot;发&quot;</span>, <span class="hljs-string">&quot;武&quot;</span>, <span class="hljs-string">&quot;新&quot;</span>, <span class="hljs-string">&quot;利&quot;</span>, <span class="hljs-string">&quot;清&quot;</span>, <span class="hljs-string">&quot;飞&quot;</span>, <span class="hljs-string">&quot;彬&quot;</span>, <span class="hljs-string">&quot;富&quot;</span>, <span class="hljs-string">&quot;顺&quot;</span>, <span class="hljs-string">&quot;信&quot;</span>, <span class="hljs-string">&quot;子&quot;</span>, <span class="hljs-string">&quot;杰&quot;</span>, <span class="hljs-string">&quot;涛&quot;</span>, <span class="hljs-string">&quot;昌&quot;</span>, <span class="hljs-string">&quot;成&quot;</span>, <span class="hljs-string">&quot;康&quot;</span>, <span class="hljs-string">&quot;星&quot;</span>, <span class="hljs-string">&quot;光&quot;</span>, <span class="hljs-string">&quot;天&quot;</span>, <span class="hljs-string">&quot;达&quot;</span>, <span class="hljs-string">&quot;安&quot;</span>, <span class="hljs-string">&quot;岩&quot;</span>, <span class="hljs-string">&quot;中&quot;</span>, <span class="hljs-string">&quot;茂&quot;</span>, <span class="hljs-string">&quot;进&quot;</span>, <span class="hljs-string">&quot;林&quot;</span>, <span class="hljs-string">&quot;有&quot;</span>, <span class="hljs-string">&quot;坚&quot;</span>, <span class="hljs-string">&quot;和&quot;</span>, <span class="hljs-string">&quot;彪&quot;</span>, <span class="hljs-string">&quot;博&quot;</span>, <span class="hljs-string">&quot;诚&quot;</span>, <span class="hljs-string">&quot;先&quot;</span>, <span class="hljs-string">&quot;敬&quot;</span>, <span class="hljs-string">&quot;震&quot;</span>, <span class="hljs-string">&quot;振&quot;</span>, <span class="hljs-string">&quot;壮&quot;</span>, <span class="hljs-string">&quot;会&quot;</span>, <span class="hljs-string">&quot;思&quot;</span>, <span class="hljs-string">&quot;群&quot;</span>, <span class="hljs-string">&quot;豪&quot;</span>, <span class="hljs-string">&quot;心&quot;</span>, <span class="hljs-string">&quot;邦&quot;</span>, <span class="hljs-string">&quot;承&quot;</span>, <span class="hljs-string">&quot;乐&quot;</span>, <span class="hljs-string">&quot;绍&quot;</span>, <span class="hljs-string">&quot;功&quot;</span>, <span class="hljs-string">&quot;松&quot;</span>, <span class="hljs-string">&quot;善&quot;</span>, <span class="hljs-string">&quot;厚&quot;</span>, <span class="hljs-string">&quot;庆&quot;</span>, <span class="hljs-string">&quot;磊&quot;</span>, <span class="hljs-string">&quot;民&quot;</span>, <span class="hljs-string">&quot;友&quot;</span>, <span class="hljs-string">&quot;裕&quot;</span>, <span class="hljs-string">&quot;河&quot;</span>, <span class="hljs-string">&quot;哲&quot;</span>, <span class="hljs-string">&quot;江&quot;</span>, <span class="hljs-string">&quot;超&quot;</span>, <span class="hljs-string">&quot;浩&quot;</span>, <span class="hljs-string">&quot;亮&quot;</span>, <span class="hljs-string">&quot;政&quot;</span>, <span class="hljs-string">&quot;谦&quot;</span>, <span class="hljs-string">&quot;亨&quot;</span>, <span class="hljs-string">&quot;奇&quot;</span>, <span class="hljs-string">&quot;固&quot;</span>, <span class="hljs-string">&quot;之&quot;</span>, <span class="hljs-string">&quot;轮&quot;</span>, <span class="hljs-string">&quot;翰&quot;</span>, <span class="hljs-string">&quot;朗&quot;</span>, <span class="hljs-string">&quot;伯&quot;</span>, <span class="hljs-string">&quot;宏&quot;</span>, <span class="hljs-string">&quot;言&quot;</span>, <span class="hljs-string">&quot;若&quot;</span>, <span class="hljs-string">&quot;鸣&quot;</span>, <span class="hljs-string">&quot;朋&quot;</span>, <span class="hljs-string">&quot;斌&quot;</span>, <span class="hljs-string">&quot;梁&quot;</span>, <span class="hljs-string">&quot;栋&quot;</span>, <span class="hljs-string">&quot;维&quot;</span>, <span class="hljs-string">&quot;启&quot;</span>, <span class="hljs-string">&quot;克&quot;</span>, <span class="hljs-string">&quot;伦&quot;</span>, <span class="hljs-string">&quot;翔&quot;</span>, <span class="hljs-string">&quot;旭&quot;</span>, <span class="hljs-string">&quot;鹏&quot;</span>, <span class="hljs-string">&quot;泽&quot;</span>, <span class="hljs-string">&quot;晨&quot;</span>, <span class="hljs-string">&quot;辰&quot;</span>, <span class="hljs-string">&quot;士&quot;</span>, <span class="hljs-string">&quot;以&quot;</span>, <span class="hljs-string">&quot;建&quot;</span>, <span class="hljs-string">&quot;家&quot;</span>, <span class="hljs-string">&quot;致&quot;</span>, <span class="hljs-string">&quot;树&quot;</span>, <span class="hljs-string">&quot;炎&quot;</span>, <span class="hljs-string">&quot;德&quot;</span>, <span class="hljs-string">&quot;行&quot;</span>, <span class="hljs-string">&quot;时&quot;</span>, <span class="hljs-string">&quot;泰&quot;</span>, <span class="hljs-string">&quot;盛&quot;</span> &#125;;<br><br><br>	<span class="hljs-comment">//女性常用名</span><br>	<span class="hljs-built_in">string</span> ME1f[<span class="hljs-number">165</span>] = &#123; <span class="hljs-string">&quot;秀&quot;</span>, <span class="hljs-string">&quot;娟&quot;</span>, <span class="hljs-string">&quot;英&quot;</span>, <span class="hljs-string">&quot;华&quot;</span>, <span class="hljs-string">&quot;慧&quot;</span>, <span class="hljs-string">&quot;巧&quot;</span>, <span class="hljs-string">&quot;美&quot;</span>, <span class="hljs-string">&quot;娜&quot;</span>, <span class="hljs-string">&quot;静&quot;</span>, <span class="hljs-string">&quot;淑&quot;</span>, <span class="hljs-string">&quot;惠&quot;</span>, <span class="hljs-string">&quot;珠&quot;</span>, <span class="hljs-string">&quot;翠&quot;</span>, <span class="hljs-string">&quot;雅&quot;</span>, <span class="hljs-string">&quot;芝&quot;</span>, <span class="hljs-string">&quot;玉&quot;</span>, <span class="hljs-string">&quot;萍&quot;</span>, <span class="hljs-string">&quot;红&quot;</span>, <span class="hljs-string">&quot;娥&quot;</span>, <span class="hljs-string">&quot;玲&quot;</span>, <span class="hljs-string">&quot;芬&quot;</span>, <span class="hljs-string">&quot;芳&quot;</span>, <span class="hljs-string">&quot;燕&quot;</span>, <span class="hljs-string">&quot;彩&quot;</span>, <span class="hljs-string">&quot;春&quot;</span>, <span class="hljs-string">&quot;菊&quot;</span>, <span class="hljs-string">&quot;兰&quot;</span>, <span class="hljs-string">&quot;凤&quot;</span>, <span class="hljs-string">&quot;洁&quot;</span>, <span class="hljs-string">&quot;梅&quot;</span>, <span class="hljs-string">&quot;琳&quot;</span>, <span class="hljs-string">&quot;素&quot;</span>, <span class="hljs-string">&quot;云&quot;</span>, <span class="hljs-string">&quot;莲&quot;</span>, <span class="hljs-string">&quot;真&quot;</span>, <span class="hljs-string">&quot;环&quot;</span>, <span class="hljs-string">&quot;雪&quot;</span>, <span class="hljs-string">&quot;荣&quot;</span>, <span class="hljs-string">&quot;爱&quot;</span>, <span class="hljs-string">&quot;妹&quot;</span>, <span class="hljs-string">&quot;霞&quot;</span>, <span class="hljs-string">&quot;香&quot;</span>, <span class="hljs-string">&quot;月&quot;</span>, <span class="hljs-string">&quot;莺&quot;</span>, <span class="hljs-string">&quot;媛&quot;</span>, <span class="hljs-string">&quot;艳&quot;</span>, <span class="hljs-string">&quot;瑞&quot;</span>, <span class="hljs-string">&quot;凡&quot;</span>, <span class="hljs-string">&quot;佳&quot;</span>, <span class="hljs-string">&quot;嘉&quot;</span>, <span class="hljs-string">&quot;琼&quot;</span>, <span class="hljs-string">&quot;勤&quot;</span>, <span class="hljs-string">&quot;珍&quot;</span>, <span class="hljs-string">&quot;贞&quot;</span>, <span class="hljs-string">&quot;莉&quot;</span>, <span class="hljs-string">&quot;桂&quot;</span>, <span class="hljs-string">&quot;娣&quot;</span>, <span class="hljs-string">&quot;叶&quot;</span>, <span class="hljs-string">&quot;璧&quot;</span>, <span class="hljs-string">&quot;璐&quot;</span>, <span class="hljs-string">&quot;娅&quot;</span>, <span class="hljs-string">&quot;琦&quot;</span>, <span class="hljs-string">&quot;晶&quot;</span>, <span class="hljs-string">&quot;妍&quot;</span>, <span class="hljs-string">&quot;茜&quot;</span>, <span class="hljs-string">&quot;秋&quot;</span>, <span class="hljs-string">&quot;珊&quot;</span>, <span class="hljs-string">&quot;莎&quot;</span>, <span class="hljs-string">&quot;锦&quot;</span>, <span class="hljs-string">&quot;黛&quot;</span>, <span class="hljs-string">&quot;青&quot;</span>, <span class="hljs-string">&quot;倩&quot;</span>, <span class="hljs-string">&quot;婷&quot;</span>, <span class="hljs-string">&quot;姣&quot;</span>, <span class="hljs-string">&quot;婉&quot;</span>, <span class="hljs-string">&quot;娴&quot;</span>, <span class="hljs-string">&quot;瑾&quot;</span>, <span class="hljs-string">&quot;颖&quot;</span>, <span class="hljs-string">&quot;露&quot;</span>, <span class="hljs-string">&quot;瑶&quot;</span>, <span class="hljs-string">&quot;怡&quot;</span>, <span class="hljs-string">&quot;婵&quot;</span>, <span class="hljs-string">&quot;雁&quot;</span>, <span class="hljs-string">&quot;蓓&quot;</span>, <span class="hljs-string">&quot;纨&quot;</span>, <span class="hljs-string">&quot;仪&quot;</span>, <span class="hljs-string">&quot;荷&quot;</span>, <span class="hljs-string">&quot;丹&quot;</span>, <span class="hljs-string">&quot;蓉&quot;</span>, <span class="hljs-string">&quot;眉&quot;</span>, <span class="hljs-string">&quot;君&quot;</span>, <span class="hljs-string">&quot;琴&quot;</span>, <span class="hljs-string">&quot;蕊&quot;</span>, <span class="hljs-string">&quot;薇&quot;</span>, <span class="hljs-string">&quot;菁&quot;</span>, <span class="hljs-string">&quot;梦&quot;</span>, <span class="hljs-string">&quot;岚&quot;</span>, <span class="hljs-string">&quot;苑&quot;</span>, <span class="hljs-string">&quot;筠&quot;</span>, <span class="hljs-string">&quot;柔&quot;</span>, <span class="hljs-string">&quot;竹&quot;</span>, <span class="hljs-string">&quot;霭&quot;</span>, <span class="hljs-string">&quot;凝&quot;</span>, <span class="hljs-string">&quot;晓&quot;</span>, <span class="hljs-string">&quot;欢&quot;</span>, <span class="hljs-string">&quot;霄&quot;</span>, <span class="hljs-string">&quot;枫&quot;</span>, <span class="hljs-string">&quot;芸&quot;</span>, <span class="hljs-string">&quot;菲&quot;</span>, <span class="hljs-string">&quot;寒&quot;</span>, <span class="hljs-string">&quot;欣&quot;</span>, <span class="hljs-string">&quot;滢&quot;</span>, <span class="hljs-string">&quot;伊&quot;</span>, <span class="hljs-string">&quot;亚&quot;</span>, <span class="hljs-string">&quot;宜&quot;</span>, <span class="hljs-string">&quot;可&quot;</span>, <span class="hljs-string">&quot;姬&quot;</span>, <span class="hljs-string">&quot;舒&quot;</span>, <span class="hljs-string">&quot;影&quot;</span>, <span class="hljs-string">&quot;荔&quot;</span>, <span class="hljs-string">&quot;枝&quot;</span>, <span class="hljs-string">&quot;思&quot;</span>, <span class="hljs-string">&quot;丽&quot;</span>, <span class="hljs-string">&quot;秀&quot;</span>, <span class="hljs-string">&quot;飘&quot;</span>, <span class="hljs-string">&quot;育&quot;</span>, <span class="hljs-string">&quot;馥&quot;</span>, <span class="hljs-string">&quot;琦&quot;</span>, <span class="hljs-string">&quot;晶&quot;</span>, <span class="hljs-string">&quot;妍&quot;</span>, <span class="hljs-string">&quot;茜&quot;</span>, <span class="hljs-string">&quot;秋&quot;</span>, <span class="hljs-string">&quot;珊&quot;</span>, <span class="hljs-string">&quot;莎&quot;</span>, <span class="hljs-string">&quot;锦&quot;</span>, <span class="hljs-string">&quot;黛&quot;</span>, <span class="hljs-string">&quot;青&quot;</span>, <span class="hljs-string">&quot;倩&quot;</span>, <span class="hljs-string">&quot;婷&quot;</span>, <span class="hljs-string">&quot;宁&quot;</span>, <span class="hljs-string">&quot;蓓&quot;</span>, <span class="hljs-string">&quot;纨&quot;</span>, <span class="hljs-string">&quot;苑&quot;</span>, <span class="hljs-string">&quot;婕&quot;</span>, <span class="hljs-string">&quot;馨&quot;</span>, <span class="hljs-string">&quot;瑗&quot;</span>, <span class="hljs-string">&quot;琰&quot;</span>, <span class="hljs-string">&quot;韵&quot;</span>, <span class="hljs-string">&quot;融&quot;</span>, <span class="hljs-string">&quot;园&quot;</span>, <span class="hljs-string">&quot;艺&quot;</span>, <span class="hljs-string">&quot;咏&quot;</span>, <span class="hljs-string">&quot;卿&quot;</span>, <span class="hljs-string">&quot;聪&quot;</span>, <span class="hljs-string">&quot;澜&quot;</span>, <span class="hljs-string">&quot;纯&quot;</span>, <span class="hljs-string">&quot;毓&quot;</span>, <span class="hljs-string">&quot;悦&quot;</span>, <span class="hljs-string">&quot;昭&quot;</span>, <span class="hljs-string">&quot;冰&quot;</span>, <span class="hljs-string">&quot;爽&quot;</span>, <span class="hljs-string">&quot;琬&quot;</span>, <span class="hljs-string">&quot;茗&quot;</span>, <span class="hljs-string">&quot;羽&quot;</span>, <span class="hljs-string">&quot;希&quot;</span> &#125;;<br>	<span class="hljs-built_in">string</span> ME2f[<span class="hljs-number">165</span>] = &#123; <span class="hljs-string">&quot;秀&quot;</span>, <span class="hljs-string">&quot;娟&quot;</span>, <span class="hljs-string">&quot;英&quot;</span>, <span class="hljs-string">&quot;华&quot;</span>, <span class="hljs-string">&quot;慧&quot;</span>, <span class="hljs-string">&quot;巧&quot;</span>, <span class="hljs-string">&quot;美&quot;</span>, <span class="hljs-string">&quot;娜&quot;</span>, <span class="hljs-string">&quot;静&quot;</span>, <span class="hljs-string">&quot;淑&quot;</span>, <span class="hljs-string">&quot;惠&quot;</span>, <span class="hljs-string">&quot;珠&quot;</span>, <span class="hljs-string">&quot;翠&quot;</span>, <span class="hljs-string">&quot;雅&quot;</span>, <span class="hljs-string">&quot;芝&quot;</span>, <span class="hljs-string">&quot;玉&quot;</span>, <span class="hljs-string">&quot;萍&quot;</span>, <span class="hljs-string">&quot;红&quot;</span>, <span class="hljs-string">&quot;娥&quot;</span>, <span class="hljs-string">&quot;玲&quot;</span>, <span class="hljs-string">&quot;芬&quot;</span>, <span class="hljs-string">&quot;芳&quot;</span>, <span class="hljs-string">&quot;燕&quot;</span>, <span class="hljs-string">&quot;彩&quot;</span>, <span class="hljs-string">&quot;春&quot;</span>, <span class="hljs-string">&quot;菊&quot;</span>, <span class="hljs-string">&quot;兰&quot;</span>, <span class="hljs-string">&quot;凤&quot;</span>, <span class="hljs-string">&quot;洁&quot;</span>, <span class="hljs-string">&quot;梅&quot;</span>, <span class="hljs-string">&quot;琳&quot;</span>, <span class="hljs-string">&quot;素&quot;</span>, <span class="hljs-string">&quot;云&quot;</span>, <span class="hljs-string">&quot;莲&quot;</span>, <span class="hljs-string">&quot;真&quot;</span>, <span class="hljs-string">&quot;环&quot;</span>, <span class="hljs-string">&quot;雪&quot;</span>, <span class="hljs-string">&quot;荣&quot;</span>, <span class="hljs-string">&quot;爱&quot;</span>, <span class="hljs-string">&quot;妹&quot;</span>, <span class="hljs-string">&quot;霞&quot;</span>, <span class="hljs-string">&quot;香&quot;</span>, <span class="hljs-string">&quot;月&quot;</span>, <span class="hljs-string">&quot;莺&quot;</span>, <span class="hljs-string">&quot;媛&quot;</span>, <span class="hljs-string">&quot;艳&quot;</span>, <span class="hljs-string">&quot;瑞&quot;</span>, <span class="hljs-string">&quot;凡&quot;</span>, <span class="hljs-string">&quot;佳&quot;</span>, <span class="hljs-string">&quot;嘉&quot;</span>, <span class="hljs-string">&quot;琼&quot;</span>, <span class="hljs-string">&quot;勤&quot;</span>, <span class="hljs-string">&quot;珍&quot;</span>, <span class="hljs-string">&quot;贞&quot;</span>, <span class="hljs-string">&quot;莉&quot;</span>, <span class="hljs-string">&quot;桂&quot;</span>, <span class="hljs-string">&quot;娣&quot;</span>, <span class="hljs-string">&quot;叶&quot;</span>, <span class="hljs-string">&quot;璧&quot;</span>, <span class="hljs-string">&quot;璐&quot;</span>, <span class="hljs-string">&quot;娅&quot;</span>, <span class="hljs-string">&quot;琦&quot;</span>, <span class="hljs-string">&quot;晶&quot;</span>, <span class="hljs-string">&quot;妍&quot;</span>, <span class="hljs-string">&quot;茜&quot;</span>, <span class="hljs-string">&quot;秋&quot;</span>, <span class="hljs-string">&quot;珊&quot;</span>, <span class="hljs-string">&quot;莎&quot;</span>, <span class="hljs-string">&quot;锦&quot;</span>, <span class="hljs-string">&quot;黛&quot;</span>, <span class="hljs-string">&quot;青&quot;</span>, <span class="hljs-string">&quot;倩&quot;</span>, <span class="hljs-string">&quot;婷&quot;</span>, <span class="hljs-string">&quot;姣&quot;</span>, <span class="hljs-string">&quot;婉&quot;</span>, <span class="hljs-string">&quot;娴&quot;</span>, <span class="hljs-string">&quot;瑾&quot;</span>, <span class="hljs-string">&quot;颖&quot;</span>, <span class="hljs-string">&quot;露&quot;</span>, <span class="hljs-string">&quot;瑶&quot;</span>, <span class="hljs-string">&quot;怡&quot;</span>, <span class="hljs-string">&quot;婵&quot;</span>, <span class="hljs-string">&quot;雁&quot;</span>, <span class="hljs-string">&quot;蓓&quot;</span>, <span class="hljs-string">&quot;纨&quot;</span>, <span class="hljs-string">&quot;仪&quot;</span>, <span class="hljs-string">&quot;荷&quot;</span>, <span class="hljs-string">&quot;丹&quot;</span>, <span class="hljs-string">&quot;蓉&quot;</span>, <span class="hljs-string">&quot;眉&quot;</span>, <span class="hljs-string">&quot;君&quot;</span>, <span class="hljs-string">&quot;琴&quot;</span>, <span class="hljs-string">&quot;蕊&quot;</span>, <span class="hljs-string">&quot;薇&quot;</span>, <span class="hljs-string">&quot;菁&quot;</span>, <span class="hljs-string">&quot;梦&quot;</span>, <span class="hljs-string">&quot;岚&quot;</span>, <span class="hljs-string">&quot;苑&quot;</span>, <span class="hljs-string">&quot;筠&quot;</span>, <span class="hljs-string">&quot;柔&quot;</span>, <span class="hljs-string">&quot;竹&quot;</span>, <span class="hljs-string">&quot;霭&quot;</span>, <span class="hljs-string">&quot;凝&quot;</span>, <span class="hljs-string">&quot;晓&quot;</span>, <span class="hljs-string">&quot;欢&quot;</span>, <span class="hljs-string">&quot;霄&quot;</span>, <span class="hljs-string">&quot;枫&quot;</span>, <span class="hljs-string">&quot;芸&quot;</span>, <span class="hljs-string">&quot;菲&quot;</span>, <span class="hljs-string">&quot;寒&quot;</span>, <span class="hljs-string">&quot;欣&quot;</span>, <span class="hljs-string">&quot;滢&quot;</span>, <span class="hljs-string">&quot;伊&quot;</span>, <span class="hljs-string">&quot;亚&quot;</span>, <span class="hljs-string">&quot;宜&quot;</span>, <span class="hljs-string">&quot;可&quot;</span>, <span class="hljs-string">&quot;姬&quot;</span>, <span class="hljs-string">&quot;舒&quot;</span>, <span class="hljs-string">&quot;影&quot;</span>, <span class="hljs-string">&quot;荔&quot;</span>, <span class="hljs-string">&quot;枝&quot;</span>, <span class="hljs-string">&quot;思&quot;</span>, <span class="hljs-string">&quot;丽&quot;</span>, <span class="hljs-string">&quot;秀&quot;</span>, <span class="hljs-string">&quot;飘&quot;</span>, <span class="hljs-string">&quot;育&quot;</span>, <span class="hljs-string">&quot;馥&quot;</span>, <span class="hljs-string">&quot;琦&quot;</span>, <span class="hljs-string">&quot;晶&quot;</span>, <span class="hljs-string">&quot;妍&quot;</span>, <span class="hljs-string">&quot;茜&quot;</span>, <span class="hljs-string">&quot;秋&quot;</span>, <span class="hljs-string">&quot;珊&quot;</span>, <span class="hljs-string">&quot;莎&quot;</span>, <span class="hljs-string">&quot;锦&quot;</span>, <span class="hljs-string">&quot;黛&quot;</span>, <span class="hljs-string">&quot;青&quot;</span>, <span class="hljs-string">&quot;倩&quot;</span>, <span class="hljs-string">&quot;婷&quot;</span>, <span class="hljs-string">&quot;宁&quot;</span>, <span class="hljs-string">&quot;蓓&quot;</span>, <span class="hljs-string">&quot;纨&quot;</span>, <span class="hljs-string">&quot;苑&quot;</span>, <span class="hljs-string">&quot;婕&quot;</span>, <span class="hljs-string">&quot;馨&quot;</span>, <span class="hljs-string">&quot;瑗&quot;</span>, <span class="hljs-string">&quot;琰&quot;</span>, <span class="hljs-string">&quot;韵&quot;</span>, <span class="hljs-string">&quot;融&quot;</span>, <span class="hljs-string">&quot;园&quot;</span>, <span class="hljs-string">&quot;艺&quot;</span>, <span class="hljs-string">&quot;咏&quot;</span>, <span class="hljs-string">&quot;卿&quot;</span>, <span class="hljs-string">&quot;聪&quot;</span>, <span class="hljs-string">&quot;澜&quot;</span>, <span class="hljs-string">&quot;纯&quot;</span>, <span class="hljs-string">&quot;毓&quot;</span>, <span class="hljs-string">&quot;悦&quot;</span>, <span class="hljs-string">&quot;昭&quot;</span>, <span class="hljs-string">&quot;冰&quot;</span>, <span class="hljs-string">&quot;爽&quot;</span>, <span class="hljs-string">&quot;琬&quot;</span>, <span class="hljs-string">&quot;茗&quot;</span>, <span class="hljs-string">&quot;羽&quot;</span>, <span class="hljs-string">&quot;希&quot;</span> &#125;;<br><br>	<span class="hljs-keyword">int</span> NA1Roll = rnd() % <span class="hljs-number">444</span>;<span class="hljs-comment">//单姓</span><br>	<span class="hljs-keyword">int</span> NA2Roll = rnd() % <span class="hljs-number">59</span>;<span class="hljs-comment">//复姓</span><br>	<span class="hljs-keyword">int</span> ME1mRoll = rnd() % <span class="hljs-number">140</span>;<span class="hljs-comment">//男名</span><br>	<span class="hljs-keyword">int</span> ME2mRoll = rnd() % <span class="hljs-number">140</span>;<span class="hljs-comment">//男名</span><br>	<span class="hljs-keyword">int</span> ME1fRoll = rnd() % <span class="hljs-number">165</span>;<span class="hljs-comment">//女名</span><br>	<span class="hljs-keyword">int</span> ME2fRoll = rnd() % <span class="hljs-number">165</span>;<span class="hljs-comment">//女名</span><br><br>	<span class="hljs-comment">//单姓单名男</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; NA1[NA1Roll] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ME1m[ME1mRoll] &lt;&lt; <span class="hljs-string">&quot; 男&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	NA1Roll = rnd() % <span class="hljs-number">444</span>;<span class="hljs-comment">//单姓</span><br>	ME1mRoll = rnd() % <span class="hljs-number">140</span>;<span class="hljs-comment">//男名</span><br>	<span class="hljs-comment">//单姓单名女</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; NA1[NA1Roll] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ME1f[ME1fRoll] &lt;&lt; <span class="hljs-string">&quot; 女&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	NA1Roll = rnd() % <span class="hljs-number">444</span>;<span class="hljs-comment">//单姓</span><br>	ME1mRoll = rnd() % <span class="hljs-number">140</span>;<span class="hljs-comment">//男名</span><br>	ME2mRoll = rnd() % <span class="hljs-number">140</span>;<span class="hljs-comment">//男名</span><br>	<span class="hljs-comment">//单姓双名男</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; NA1[NA1Roll] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ME1m[ME1mRoll] &lt;&lt; ME1m[ME2mRoll] &lt;&lt; <span class="hljs-string">&quot; 男&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	NA1Roll = rnd() % <span class="hljs-number">444</span>;<span class="hljs-comment">//单姓</span><br>	ME1fRoll = rnd() % <span class="hljs-number">165</span>;<span class="hljs-comment">//女名</span><br>	ME2fRoll = rnd() % <span class="hljs-number">165</span>;<span class="hljs-comment">//女名</span><br>	<span class="hljs-comment">//单姓双名女</span><br>	<span class="hljs-built_in">cout</span> &lt;&lt; NA1[NA1Roll] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ME1f[ME1fRoll] &lt;&lt; ME1f[ME2fRoll] &lt;&lt; <span class="hljs-string">&quot; 女&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>	<span class="hljs-keyword">if</span>(rnd() % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>	&#123;<br>		<br>		NA2Roll = rnd() % <span class="hljs-number">59</span>;<span class="hljs-comment">//复姓</span><br>		ME1mRoll = rnd() % <span class="hljs-number">140</span>;<span class="hljs-comment">//男名</span><br>		<span class="hljs-comment">//复姓单名男</span><br>		<span class="hljs-built_in">cout</span> &lt;&lt; NA2[NA2Roll] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ME1m[ME1mRoll] &lt;&lt; <span class="hljs-string">&quot; 男&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		NA2Roll = rnd() % <span class="hljs-number">59</span>;<span class="hljs-comment">//复姓</span><br>		ME1fRoll = rnd() % <span class="hljs-number">165</span>;<span class="hljs-comment">//女名</span><br>		<span class="hljs-comment">//复姓单名女</span><br>		<span class="hljs-built_in">cout</span> &lt;&lt; NA2[NA2Roll] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ME1f[ME1fRoll] &lt;&lt; <span class="hljs-string">&quot; 女&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">if</span>(rnd() % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>	&#123;<br>		NA2Roll = rnd() % <span class="hljs-number">59</span>;<span class="hljs-comment">//复姓</span><br>		ME1mRoll = rnd() % <span class="hljs-number">140</span>;<span class="hljs-comment">//男名</span><br>		ME2mRoll = rnd() % <span class="hljs-number">140</span>;<span class="hljs-comment">//男名</span><br>		<span class="hljs-comment">//复姓双名男</span><br>		<span class="hljs-built_in">cout</span> &lt;&lt; NA2[NA2Roll] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ME1m[ME1mRoll] &lt;&lt; ME2m[ME2mRoll] &lt;&lt; <span class="hljs-string">&quot; 男&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<br>		NA2Roll = rnd() % <span class="hljs-number">59</span>;<span class="hljs-comment">//复姓</span><br>		ME1fRoll = rnd() % <span class="hljs-number">165</span>;<span class="hljs-comment">//女名</span><br>		ME2fRoll = rnd() % <span class="hljs-number">165</span>;<span class="hljs-comment">//女名</span><br>		<span class="hljs-comment">//复姓双名女</span><br>		<span class="hljs-built_in">cout</span> &lt;&lt; NA2[NA2Roll] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ME1f[ME1fRoll] &lt;&lt; ME2f[ME2fRoll] &lt;&lt; <span class="hljs-string">&quot; 女&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>	&#125;<br>	<span class="hljs-comment">// cout &lt;&lt; &quot;\n&quot; &lt;&lt; endl;</span><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	freopen(<span class="hljs-string">&quot;name.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-built_in">stdout</span>);<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; ++i)NAME();<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>最后生成的姓名，姓、名是分开的以及对应的性别，，</p>
<p>类似这样，，，</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">包 梁 男<br>伊 苑 女<br>芮 光功 男<br>从 菊茜 女<br>澹台 纯 女<br>宗政 超德 男<br>钮 生 男<br>湛 竹 女<br>叶 泰固 男<br>仰 彩秋 女<br>太叔 芝 女<br>呼延 俊进 男<br>经 谦 男<br>宓 娥 女<br>韩 贵有 男<br></code></pre></td></tr></table></figure>
<p>(end)</p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>工程</tag>
      </tags>
  </entry>
  <entry>
    <title>随笔-对当前国际金融的“担忧”及个人看法</title>
    <url>/2021/05/11/%E9%9A%8F%E7%AC%94-%E5%AF%B9%E5%BD%93%E5%89%8D%E5%9B%BD%E9%99%85%E9%87%91%E8%9E%8D%E7%9A%84%E2%80%9C%E6%8B%85%E5%BF%A7%E2%80%9D%E5%8F%8A%E4%B8%AA%E4%BA%BA%E7%9C%8B%E6%B3%95/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="93c98b8dd8046bdc1cefb8a6778a2369e9057667ca8475125c45dcf5cf38c404">5dfd32f88e67af1fe04d89d16b439ff9a7d7b62a60e7a8824250962c12b41c55fd092a2480ff65d017c4293785d4edf162ef411d835957f9e51d8035664a3d18d13b5796aad48126b71b05668d8d9df9ac12e589a7601d64dc68414f8cf6608f028e55ac1bf2729b2a50c55c5ad3a69c637dfa296908da8683f69b4f60819ac005516a489444281690789ac65495f4073ecff343a25a5a1d05dccb22de5c4aeee66923734389fd5d975b5f8a9e05ee011b2583755c3fd140a196b748ae9ef9007bbaed9123a7288a9f0be03a1e3eeba2f6c6b8ef56971190d13e41067c965374442f442402175a46f924467830e967b928c276ecc025caf76083643380bb72d0778ae0c967a6171642dc705e4f8bb5e04b4e24b75f3311e434921ba795bc46d7d3435e4d84625d8c75e4dc59cc1af578748a05294fb15cb8dd683e2e4b75b97b643e731d511aa01dda7e1425bba559b037f13ce6d29ee6c9289166d11d227a642103bfa8285c38c03e5e657135a4896457962403e8d344a6c2732d54ea51ffc1f6526e5bfea16270f5ad5adda93ee1ac49afab63de3fae76553e285e0ebc4b60d3ca3fb2e7daa0884cadbfec0ac391cd8ecf92a87f096177eb6431e07c14bac15a178ce5c2408f7fcdd88f2cdc45650f14650c999c573083df0846dbf7895c3539935cb7b47c48ce8a4d65a8da45ad441a08215224bf4b76b62108770495fa2db0f481af564d51fc2d9430b151d5e97d290f55306f6a5397b98ceb01cad7fbf4217b95400fa809cd3dc813b2ade5cd13e195279472f6ac3854eb105e935df25a0d278fb70acea77359933b25b5cced749ac4b33aa5c15f89c537cac4bd9a3aa096bae3c34ec804ef0112637609a17c8a704feaafb0a302c71ae0d139f3609f6e772799c2427fc20c055381b6aeb984f7fbe07e25d508b995f6a5d18a4cf506a9c33ad34e5340e776a984aa66775782937d3963b39d8ff80b195d8c933fff3a37f2eacc5a6dd38bfbd5f760c92aff7d4dfd30803d661633c3dfa14f6e5484e5d7a887d3abfad168d64b79590935e8fe55ca272dee5e54e62c1a7c915d0694222ca69eaab8306f4ad6946190491cf27bc86d9d5f2f00bdd2791380ea52046bd3e9da2b9ed9c5f517c6a2713644c842dcc07e72157fd5a294117275c7119139bf281a77bc8406eda189764ccdad3ea016a78f4e87dc472e1e11ac1c20a3da11178b1d29d94b066c2f9cdfa31ca06670a99d274d1c8fb7e932169d82aac622d74e5e42cf6284cac4dbeff2ca77d2f236332250ae235fd7f29d96cde5608df6e80c346ad6f4e23dbea6f9f4c7d4389e7528372bb585c15b2d1dccffa27a5d738b6633bd2516d3299e9eae3d19ea762c769282b10741217e4a967a5250958ccff1dd6717c6b3fbb97fda9e672da18bfe0e7c1c7d88ae93ac1457a1bac10358c7e8fcfe815a35f9a6dbf2bfa7bf3b30a352b0f74a783c677219a3c435c36393c201eebbf272be6ef77239da360e6b91b2dc42a5f97f7baf352b621a9cad03c032ff83457fb35b2131ad9fa2fb0f3a489691c8fd122076e70d8dce9bd7f2a081b37f4f7f410a1bd4720f983bb5e00947a798748ebda53ce8791ab0f490b8e3d87a4d194ad69a5c090b8ab4903a46b73dc14d126b934fd5350c98ff2ace1704093be59774b64407315276775a748bb708518df18d13c4cea793c3fc8a41befd90a02c75da4e91c1193dbef41f38787bf184ad5f936097a5bb3b64f0826c122a421728f3d95c61383dae45fc6e95e53cf16dafad1803045a533704d5fa65b9656fdcf3945b29dda3ffdca1ee825cac04fbe73329ba1d74fa93f88c3a5c4155031c19c53fdb75af67d8be628d602eda78beb0f5df8f98278520b89ffae33828ae29dcbad1b82049ce8ddbacd45ce69506d049414658b29ad233fbcb6f10d1b42771f87952a158b34bee0d6ef2f8a4edeb8a75cd7b5f88144d9706162bccf79570eb80129d33b3d8adbc5400219a85b22b912011135b9ee93ff9594b00ae8bd6b393e6670e6e35dfa01a041c791dbcb45c75a62c8b9abab294dcf3cd257549079738f8fd661f0d3583f0d00517a1ec0fa4c0d930c525cb72d52f60ede267a241bd7f347fcaf2aa108d3734dc2bde0057462ea6aec4adf1d14fddb25bda4123433e512c16d52655e03e033e3c5ef7dac69c6f96fa9342a4f25950b323dce68834c85b8f3c7b6cad2cc69a2296feb131239db6dea19d9f4dc28d4d3a55118bfa759872d1e320e0293dd320da94fb75a994237cafe3563e404de2afd5390a33c52820191d807a15c100eceeb93ada2415bfc3a1c7b8914e38bdcc16e847ea1a70dfc54913becdb78ea42f2151c56c2d8b534f8072b5b2b8bcdafee32d3823ceff708ff606a815a273cbb8a40d6624ca4bb0d1345dd8e64d445892694c9314a6483ec56f9bbd7f7864d31a43b4eb183ef416f9e1589fb0c1245edd812be4a70abc1209acaaa2787b1e7a2b477b8aeade2c0087b1a0637bc2e3d8595d7e52cfced5cdcf57bbcebad713b66c874f70a44dd2bac45b8933a33808680af2035b66c91a5060a97590df895f70e7e53335754fdb28dc1737614bb5233ab9586949890cbe122191aec12efb85e8d6f6e62fc91f3e10df5c907d53916f05671a0236ba7e4f67d3a4cc4b9e156832812ae789fc17fb2ba36366885a8cdbc529d248b8ed03cd5c914fcf1152494751e434374d7fa43f4e46321b370ee6326644ddea3efac7b39457969d08dad5e38506d3edb4d155a6d8707647d62fa1ca79baf0abb31280b321bb35a79774ed041e356f2c0e012e00a7ff35b506eba9486ae2cb7cf567f32f7466f7664cd2e4ba5b5daa9499dd58411b9764ab72979456e18647ed5cd477886e0422e96e7c8e1d1c0195d498e766c3ba673e51bcd89cba4b2705c981181224abeec08e53c6d1964b4d96056dce5296ea87be26b92aa1211118b3dea82c7755cf375bae2a61b2280d4ed12ca29881527c3336bd05a9102091454fa89664a2f00d85633425117d9cca362138433897fcc36bc948b5862f7e64e023a5ebc83d443dc1bdf7ce0683f76479e1f2ccda69806f7a5a0f90654b0a9a739d8d32667cc04adb5fcd730bc712f6091fb81fefb5eeb710eb6c18f66a2e5e25a9d6b871c6fd9b6a1f2b2699dd77869b14ad98098f9e62220a20dd395c7cc0f3e6730fdde7debf76cd0188210f3ff864ebdb8d494db9e5eabf8cbadcee17a3094a0025776df7c0881782b76dedcd4efcea207ceb1e90737ec64614eaf299913c00253bce70844c4b7cd0e7c0efbf0a5b4f5c704258fcc0f6bdbb160adda5c817644ba57bdf4e92d1efb3373a47db1a52f984ef986900dabf87b078c0f388b062bb5efb410200436a6c67191592b845874d2d389582e0a15121f8370789a9ea199d2724af75826263897851c242e74cb23684f52e8bb74d7e45d4b33c283c85cb4cb28521791d96df53b482645392d9db9f420d21f4a0ffd5f46e751d1a54f1b731de87c8ce607b9262a89d0ccc7c3bfb5ae1591cfc8d7f4e94995525114f50aed0e183984f748f5955433cef9642886d0b808c3aad41be2b3d58536e1e8d4f899952bdc694aaea7a0c0cf15f572d8c2dd25157fd889997d38a99193b2c0111e07c495c09dbcc5a530ddaf951c6d6734cca81eae19529b67fc3c56ee9032ae0dc9cc8c72710eabdd7010ac1d535b4220bc70047857aa91fffe3a7667a30fa30eb2cc51a8801d19bdd416931cf22d333b42f8e5daa4bf78c9e9689b96c7cebb92af33111bdae14e8b1882f13791704622a860d0f2cbb2f37daf81ba5e924c33f46dbf709fa76d854d3362d1af9397bc11b3932be409316efa4652fc317234cc883a514ee1f910eb4153c4524d1c277ee82106f95b4156a14cbbf1f2d1fbd76f7306a7e0ecbd9e6d0dd00393f8129</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>2019-ccpc秦皇岛现场赛</title>
    <url>/2019/10/05/2019-ccpc%E7%A7%A6%E7%9A%87%E5%B2%9B%E7%8E%B0%E5%9C%BA%E8%B5%9B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>昨天和队友模拟了下今年秦皇岛的区域赛，，，<del>（我全程在演</del></p>
<p><a href="https://codeforces.com/gym/102361">题目链接</a></p>
<span id="more"></span>
<h1 id="D-Decimal"><a href="#D-Decimal" class="headerlink" title="D - Decimal"></a>D - Decimal</h1><p>签到题，，，<del>（感觉在cf上做过，，</del></p>
<p><del>（然后写反输出白白wa一发,,,,,emmmmmmmm</del></p>
<h1 id="F-Forest-Program"><a href="#F-Forest-Program" class="headerlink" title="F - Forest Program"></a>F - Forest Program</h1><p>这题我感觉是第二道签到题，，，很简单，，但是我一个人读完题后就想着怎么写代码，，，然后wa了无数发才反应过来还要考虑树边的情况，，，<del>丧失理智</del> ，，，，</p>
<p>题意就是给一个 <strong>仙人掌图</strong> ，，仙人掌图就是对于每一条边都最多属于一个简单环中，，，然后问你删去一些边使得最后的图是一片森林的方案数，，，显然答案就是每一个环至少删去一个边，，这样每一个环的贡献就是 $2^i-1$ ，，累乘每一个环便是环的情况，，，然后还要考虑剩余边的情况，，然后我就是忘记这个wa的怀疑人生，，，</p>
<p>找图的环直接dfs就可以个了，，用一个dis数组记录一下到最初的点的距离，，碰到一个环就直接相减就能得到到环的长度，，，<del>(刚好前几天见过这样的dfs判环和求环大小的问题</del></p>
<p><del>（为什么弧优化后还慢了啊，，，emmmmm</del></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">4e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">6e5</span> + <span class="hljs-number">233</span>;<br><span class="hljs-comment">// const int mod = 1e9 + 7;</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">998244353</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt;<br>    <span class="hljs-keyword">bool</span> flag;<br>&#125;edge[maxm &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxm &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].flag = <span class="hljs-literal">false</span>;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;ll&gt; ans;<br><span class="hljs-keyword">int</span> vis[maxn];<br>ll dis[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, ll len)</span></span><br><span class="hljs-function"></span>&#123;<br>    vis[u] = <span class="hljs-number">1</span>; dis[u] = len;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> &amp;i = head[u]; ~i; i = edge[i].nxt)<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(edge[i].flag)<span class="hljs-keyword">continue</span>;<br>        edge[i].flag = edge[i ^ <span class="hljs-number">1</span>].flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(vis[v] == <span class="hljs-number">1</span>)<br>        &#123;<br>            ans.push_back(len - dis[v] + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        dfs(v, len + <span class="hljs-number">1</span>);<br>    &#125;<br>    vis[u] = <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">pow_</span><span class="hljs-params">(ll a, ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ret = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b &amp; <span class="hljs-number">1</span>)ret = (ret * a) % mod;<br>        a = (a * a) % mod;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">int</span> n, m; <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    init();<br>    <span class="hljs-keyword">int</span> u, v;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;<br>        addedge(u, v);<br>        addedge(v, u);<br>    &#125;<br>    ans.clear();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)vis[i] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span>(vis[i] != <span class="hljs-number">2</span>)<br>            dfs(i, <span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-comment">// for(auto i: ans)cout &lt;&lt; i &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;</span><br><br>    ll ret = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ans.size(); ++i)<br>        ret = ret * ((pow_(<span class="hljs-number">2</span>, ans[i]) - <span class="hljs-number">1</span>) + mod) % mod;<br>    ll sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ans.size(); ++i)sum += ans[i];<br>    sum = pow_(<span class="hljs-number">2</span>, m - sum) % mod;<br>    <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">0</span>)ret = sum;<br>    <span class="hljs-keyword">else</span> ret = (ret * sum) % mod;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ret &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="I-Invoker"><a href="#I-Invoker" class="headerlink" title="I - Invoker"></a>I - Invoker</h1><p><del>（在我自闭的时候</del> ，，队友过了这题，，这题的题目很像 <del>（基本完全一致</del> 我们的新生赛，，只是求得东西反了过来，，，队友想了暴力+dp过的，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">3e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">5e5</span> + <span class="hljs-number">233</span>;<br><span class="hljs-comment">// const int mod = 1e9 + 7;</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; mp;<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">char</span>, <span class="hljs-keyword">int</span>&gt; special;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> skill[] = &#123;<span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>&#125;;<br><span class="hljs-keyword">int</span> dis[<span class="hljs-number">30</span>][<span class="hljs-number">30</span>];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; g[<span class="hljs-number">15</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">3</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">3</span>; j++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>; k&lt;<span class="hljs-number">3</span>; k++)<br>            &#123;<br>                <span class="hljs-built_in">string</span> tmp = <span class="hljs-string">&quot;&quot;</span>;<br>                tmp += skill[i];<br>                tmp += skill[j];<br>                tmp += skill[k];<br>                mp[tmp] = i*<span class="hljs-number">9</span> + j*<span class="hljs-number">3</span> + k;<br>            &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> a=<span class="hljs-number">0</span>; a&lt;<span class="hljs-number">27</span>; a++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> b=<span class="hljs-number">0</span>; b&lt;<span class="hljs-number">27</span>; b++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> i = a, j = b;<br>            <span class="hljs-built_in">string</span> tmpi = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-built_in">string</span> tmpj = <span class="hljs-string">&quot;&quot;</span>;<br>            tmpi += skill[i/<span class="hljs-number">9</span>];<br>            i %= <span class="hljs-number">9</span>;<br>            tmpi += skill[i/<span class="hljs-number">3</span>];<br>            i %= <span class="hljs-number">3</span>;<br>            tmpi += skill[i];<br>            tmpj += skill[j/<span class="hljs-number">9</span>];<br>            j %= <span class="hljs-number">9</span>;<br>            tmpj += skill[j/<span class="hljs-number">3</span>];<br>            j %= <span class="hljs-number">3</span>;<br>            tmpj += skill[j];<br>            <span class="hljs-keyword">if</span>(tmpi == tmpj)<br>                dis[a][b] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tmpi[<span class="hljs-number">1</span>] == tmpj[<span class="hljs-number">0</span>] &amp;&amp; tmpi[<span class="hljs-number">2</span>] == tmpj[<span class="hljs-number">1</span>])<br>                dis[a][b] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tmpi[<span class="hljs-number">2</span>] == tmpj[<span class="hljs-number">0</span>])<br>                dis[a][b] = <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">else</span><br>                dis[a][b] = <span class="hljs-number">3</span>;<br>        &#125;<br>    &#125;<br>    special[<span class="hljs-string">&#x27;Y&#x27;</span>] = <span class="hljs-number">0</span>;<br>    special[<span class="hljs-string">&#x27;V&#x27;</span>] = <span class="hljs-number">1</span>;<br>    special[<span class="hljs-string">&#x27;G&#x27;</span>] = <span class="hljs-number">2</span>;<br>    special[<span class="hljs-string">&#x27;C&#x27;</span>] = <span class="hljs-number">3</span>;<br>    special[<span class="hljs-string">&#x27;X&#x27;</span>] = <span class="hljs-number">4</span>;<br>    special[<span class="hljs-string">&#x27;Z&#x27;</span>] = <span class="hljs-number">5</span>;<br>    special[<span class="hljs-string">&#x27;T&#x27;</span>] = <span class="hljs-number">6</span>;<br>    special[<span class="hljs-string">&#x27;F&#x27;</span>] = <span class="hljs-number">7</span>;<br>    special[<span class="hljs-string">&#x27;D&#x27;</span>] = <span class="hljs-number">8</span>;<br>    special[<span class="hljs-string">&#x27;B&#x27;</span>] = <span class="hljs-number">9</span>;<br>    g[<span class="hljs-number">0</span>].push_back(mp[<span class="hljs-string">&quot;QQQ&quot;</span>]);<br>    g[<span class="hljs-number">1</span>].push_back(mp[<span class="hljs-string">&quot;QQW&quot;</span>]);<br>    g[<span class="hljs-number">1</span>].push_back(mp[<span class="hljs-string">&quot;QWQ&quot;</span>]);<br>    g[<span class="hljs-number">1</span>].push_back(mp[<span class="hljs-string">&quot;WQQ&quot;</span>]);<br>    g[<span class="hljs-number">2</span>].push_back(mp[<span class="hljs-string">&quot;QQE&quot;</span>]);<br>    g[<span class="hljs-number">2</span>].push_back(mp[<span class="hljs-string">&quot;QEQ&quot;</span>]);<br>    g[<span class="hljs-number">2</span>].push_back(mp[<span class="hljs-string">&quot;EQQ&quot;</span>]);<br>    g[<span class="hljs-number">3</span>].push_back(mp[<span class="hljs-string">&quot;WWW&quot;</span>]);<br>    g[<span class="hljs-number">4</span>].push_back(mp[<span class="hljs-string">&quot;QWW&quot;</span>]);<br>    g[<span class="hljs-number">4</span>].push_back(mp[<span class="hljs-string">&quot;WQW&quot;</span>]);<br>    g[<span class="hljs-number">4</span>].push_back(mp[<span class="hljs-string">&quot;WWQ&quot;</span>]);<br>    g[<span class="hljs-number">5</span>].push_back(mp[<span class="hljs-string">&quot;WWE&quot;</span>]);<br>    g[<span class="hljs-number">5</span>].push_back(mp[<span class="hljs-string">&quot;WEW&quot;</span>]);<br>    g[<span class="hljs-number">5</span>].push_back(mp[<span class="hljs-string">&quot;EWW&quot;</span>]);<br>    g[<span class="hljs-number">6</span>].push_back(mp[<span class="hljs-string">&quot;EEE&quot;</span>]);<br>    g[<span class="hljs-number">7</span>].push_back(mp[<span class="hljs-string">&quot;QEE&quot;</span>]);<br>    g[<span class="hljs-number">7</span>].push_back(mp[<span class="hljs-string">&quot;EQE&quot;</span>]);<br>    g[<span class="hljs-number">7</span>].push_back(mp[<span class="hljs-string">&quot;EEQ&quot;</span>]);<br>    g[<span class="hljs-number">8</span>].push_back(mp[<span class="hljs-string">&quot;WEE&quot;</span>]);<br>    g[<span class="hljs-number">8</span>].push_back(mp[<span class="hljs-string">&quot;EWE&quot;</span>]);<br>    g[<span class="hljs-number">8</span>].push_back(mp[<span class="hljs-string">&quot;EEW&quot;</span>]);<br>    g[<span class="hljs-number">9</span>].push_back(mp[<span class="hljs-string">&quot;QWE&quot;</span>]);<br>    g[<span class="hljs-number">9</span>].push_back(mp[<span class="hljs-string">&quot;QEW&quot;</span>]);<br>    g[<span class="hljs-number">9</span>].push_back(mp[<span class="hljs-string">&quot;WQE&quot;</span>]);<br>    g[<span class="hljs-number">9</span>].push_back(mp[<span class="hljs-string">&quot;WEQ&quot;</span>]);<br>    g[<span class="hljs-number">9</span>].push_back(mp[<span class="hljs-string">&quot;EWQ&quot;</span>]);<br>    g[<span class="hljs-number">9</span>].push_back(mp[<span class="hljs-string">&quot;EQW&quot;</span>]);<br>&#125;<br><br><span class="hljs-keyword">char</span> s[maxn];<br><span class="hljs-keyword">int</span> dp[maxn][<span class="hljs-number">6</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    init();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(s);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;len; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">6</span>; j++)<br>            dp[i][j] = inf;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;g[special[s[<span class="hljs-number">0</span>]]].size(); i++)<br>        dp[<span class="hljs-number">0</span>][i] = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;len; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>; j&lt;g[special[s[i<span class="hljs-number">-1</span>]]].size(); j++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>; k&lt;g[special[s[i]]].size(); k++)<br>            &#123;<br>                <span class="hljs-keyword">int</span> tmpj = g[special[s[i<span class="hljs-number">-1</span>]]][j];<br>                <span class="hljs-keyword">int</span> tmpk = g[special[s[i]]][k];<br>                dp[i][k] = min(dp[i][k], dp[i<span class="hljs-number">-1</span>][j] + dis[tmpj][tmpk]);<br>            &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> ans = inf;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">6</span>; i++)<br>        ans = min(ans, dp[len<span class="hljs-number">-1</span>][i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans+len);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="J-MUV-LUV-EXTRA"><a href="#J-MUV-LUV-EXTRA" class="headerlink" title="J - MUV LUV EXTRA"></a>J - MUV LUV EXTRA</h1><p>这题我读完题之后感觉是字符串的题，，不知道怎么搞，，最后队友弄出来的，，</p>
<p>枚举+kmp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LL long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br>LL a, b;<br><span class="hljs-keyword">const</span> LL inf=<span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> LL maxn=<span class="hljs-number">1e7</span>+<span class="hljs-number">7</span>;<br><span class="hljs-built_in">string</span> tem,s=<span class="hljs-string">&quot;&quot;</span>;<br>LL nex[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;tem;<br>    <span class="hljs-keyword">for</span>(LL i=tem.size()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(tem[i]!=<span class="hljs-string">&#x27;.&#x27;</span>) s+=tem[i];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    &#125;<br>    nex[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(LL i=<span class="hljs-number">1</span>;i&lt;=s.size();i++)<br>    &#123;<br>        nex[i]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> k=nex[i<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">while</span>(k!=<span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s[i<span class="hljs-number">-1</span>]==s[k]) &#123;nex[i]=k+<span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;&#125;<br>            <span class="hljs-keyword">else</span> k=nex[k];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;s.size();i++) nex[i]=nex[i+<span class="hljs-number">1</span>];<br>    <span class="hljs-comment">//for(int i =0;i&lt;s.size();i++) cout&lt;&lt;nex[i]&lt;&lt;&#x27; &#x27;;</span><br>    LL ans=-inf;<br>    <span class="hljs-keyword">for</span>(LL i=<span class="hljs-number">0</span>;i&lt;s.size();i++)<br>    &#123;<br>        LL tem=a*(i+<span class="hljs-number">1</span>)-b*(i+<span class="hljs-number">1</span>-nex[i]);<br>        ans=ans&gt;tem?ans:tem;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ans==-inf) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="E-Escape"><a href="#E-Escape" class="headerlink" title="E - Escape"></a>E - Escape</h1><p>晚上看的这题，，网络流简单题，，主要是建图的方式，，，</p>
<p>题意就是一个矩形的迷宫（或者地图），，有些障碍，，而其他的地方可以放置一个转向器，，这个转向器有4中类型，，然后地图的上方有a个机器人，，下方有b个出口，，问你在随意添加一些转向器后的地图中，，机器人能否全部进入出口，，</p>
<p><a href="https://blog.csdn.net/weixin_43826249/article/details/101616967">以下内容参考自</a></p>
<p>首先，，任意两个机器人如果在某一段的路线一致，，那么一定会进入同一个出口，，而且如果两个机器人的路线相反一定会去到对方的起点，，</p>
<p>于是，，可以看出如果一个机器人经过一个转向器，，其他的机器人是不会经过这个转向器的，，</p>
<p>因为一开始的机器人都是先下走的，，如果两个进入同一个转向器A，，那么其中一个一定之前经过一个转向器B，，而且这个转向器B会在A的一端的那个方向，，这样子的话前面那个机器人又到不了转向器A了，，，所以是矛盾的，，因此一个转向器上只会经过一个机器人，，，也就是说这个点只能经过一次，，，也就是说如果将这个点看成一个转向器的话，，他只能经过一次，，就是流量是1，，</p>
<p>再考虑某个点不是转向器的情况: 显然不是转向器的话，，这个点可以经过两次： 一次横的一次竖的，，，也就是说将这点看成两个边： 竖的一条边和横着一条边，，他们的流量都是1，，，</p>
<p>但是有了竖边和横边怎么表示转向呢，，直接将连起来不就行了，，，</p>
<p>这样，，如果一条流是经过竖边表示从这个点经过，，然后想着竖直方向走下去，，同理横边，，，而如果是经过竖边-&gt;中间边-&gt;横边，，或者反过来就表示是这个点是一个转向器，，而且，，，这样的网络也会保证每个点只可能是一个转向器或者不是，，</p>
<p>最后将机器人连向对应的最上面的点，，表示机器人只能竖直向下走，，同理出口，，加上源汇点跑最大流，，如果流量等于机器人数就是说有一种方案使得每一个机器人进入出口，，，</p>
<p>然后我第一次写的建图方式会访问到第0行和第n+1行，，只想了第0行不会产生影响，，忘记了后面的那行会被多组数据覆盖，，wa到怀疑板子抄错-&gt;建图有锅，，，</p>
<p><del>话说isap为什么会跑出 <code>998ms</code> ，，这个可怕，，，那现场赛不是会有一堆人T穿，，，hlpp 就是友好的 <code>233ms</code> ,, 好吧，，是数组开大了，，，，</del></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e6</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt, cap, flow;<br>&#125;edge[maxm];<br><span class="hljs-keyword">int</span> tot, head[maxm];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> rw = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// cout &lt;&lt; u &lt;&lt; &quot; &quot; &lt;&lt; v &lt;&lt; endl;</span><br>    edge[tot].to = v; edge[tot].cap = w; edge[tot].nxt = head[u];<br>    edge[tot].flow = <span class="hljs-number">0</span>; head[u] = tot++;<br>    edge[tot].to = u; edge[tot].cap = rw; edge[tot].nxt = head[v];<br>    edge[tot].flow = <span class="hljs-number">0</span>; head[v] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> gap[maxm], dep[maxm], pre[maxm], cur[maxm];<br><span class="hljs-keyword">int</span> que[maxm];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dep, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> dep);<br>    <span class="hljs-built_in">memset</span>(gap, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> gap);<br>    gap[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> front = <span class="hljs-number">0</span>, rear = <span class="hljs-number">0</span>;<br>    dep[t] = <span class="hljs-number">0</span>;<br>    que[rear++] = t;<br>    <span class="hljs-keyword">while</span>(front != rear)<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = que[front++];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(dep[v] != <span class="hljs-number">-1</span>)<span class="hljs-keyword">continue</span>;<br>            que[rear++] = v;<br>            dep[v] = dep[u] + <span class="hljs-number">1</span>;<br>            ++gap[dep[v]];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> sta[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">isap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    bfs(s, t);<br>    <span class="hljs-built_in">memcpy</span>(cur, head, <span class="hljs-keyword">sizeof</span> head);<br>    <span class="hljs-keyword">int</span> u = s;<br>    <span class="hljs-keyword">int</span> top = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> maxflow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(dep[s] &lt; n)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(u == t)<br>        &#123;<br>            <span class="hljs-keyword">int</span> mi = inf;<br>            <span class="hljs-keyword">int</span> inser;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(mi &gt; edge[sta[i]].cap - edge[sta[i]].flow)<br>                &#123;<br>                    mi = edge[sta[i]].cap - edge[sta[i]].flow;<br>                    inser = i;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i)<br>            &#123;<br>                edge[sta[i]].flow += mi;<br>                edge[sta[i] ^ <span class="hljs-number">1</span>].flow -= mi;<br>            &#125;<br>            maxflow += mi;<br>            top = inser;<br>            u = edge[sta[top] ^ <span class="hljs-number">1</span>].to;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">int</span> v;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = cur[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dep[v] + <span class="hljs-number">1</span> == dep[u])<br>            &#123;<br>                flag = <span class="hljs-literal">true</span>;<br>                cur[u] = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)<br>        &#123;<br>            sta[top++] = cur[u];<br>            u = v;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mi = n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dep[edge[i].to] &lt; mi)<br>            &#123;<br>                mi = dep[edge[i].to];<br>                cur[u] = i;<br>            &#125;<br>        &#125;<br>        --gap[dep[u]];<br>        <span class="hljs-keyword">if</span>(!gap[dep[u]])<span class="hljs-keyword">return</span> maxflow;<br>        dep[u] = mi + <span class="hljs-number">1</span>;<br>        ++gap[dep[u]];<br>        <span class="hljs-keyword">if</span>(u != s)u = edge[sta[--top] ^ <span class="hljs-number">1</span>].to;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxflow;<br>&#125;<br><span class="hljs-keyword">int</span> n, m, a, b;<br><span class="hljs-keyword">char</span> mp[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];<br><span class="hljs-keyword">int</span> bots[<span class="hljs-number">105</span>], exits[<span class="hljs-number">105</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-title">getidx</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> x * m + y;&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">int</span> ca; <span class="hljs-built_in">cin</span> &gt;&gt; ca;<br>    <span class="hljs-keyword">while</span>(ca--)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; a &gt;&gt; b;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; mp[i] + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= a; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; bots[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= b; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; exits[i];<br>        init();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)mp[n + <span class="hljs-number">1</span>][i] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">int</span> sum = (n + <span class="hljs-number">2</span>) * m;<br>        <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>, t = sum * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= a; ++i)addedge(s, bots[i], <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>                <span class="hljs-keyword">if</span>(mp[i][j] != <span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; mp[i + <span class="hljs-number">1</span>][j] != <span class="hljs-string">&#x27;1&#x27;</span>)<br>                    addedge(getidx(i, j), getidx(i + <span class="hljs-number">1</span>, j), <span class="hljs-number">1</span>),<br>                    addedge(getidx(i + <span class="hljs-number">1</span>, j), getidx(i, j), <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m - <span class="hljs-number">1</span>; ++j)<br>                <span class="hljs-keyword">if</span>(mp[i][j] != <span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; mp[i][j + <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;1&#x27;</span>)<br>                    addedge(getidx(i, j) + sum, getidx(i, j + <span class="hljs-number">1</span>) + sum, <span class="hljs-number">1</span>),<br>                    addedge(getidx(i, j + <span class="hljs-number">1</span>) + sum, getidx(i, j) + sum, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>                <span class="hljs-keyword">if</span>(mp[i][j] != <span class="hljs-string">&#x27;1&#x27;</span>)<br>                    addedge(getidx(i, j), getidx(i, j) + sum, <span class="hljs-number">1</span>),<br>                    addedge(getidx(i, j) + sum, getidx(i, j), <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= b; ++i)addedge(getidx(n + <span class="hljs-number">1</span>, exits[i]), t, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(isap(s, t, t + <span class="hljs-number">1</span>) == a)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;No&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>这个拆点的方式很不错，，，</p>
<p>(end)</p>
]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM-图论刷题</title>
    <url>/2019/10/01/ACM-%E5%9B%BE%E8%AE%BA%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>自称是一个图论选手，，<del>（但是到头来只是一个板子王</del>，，，稍微变一变的图论题就不怎么会解决了，，，所以决定刷一段时间的图论题，，</p>
<span id="more"></span>
<p><a href="https://codeforces.com/problemset?order=BY_RATING_ASC&amp;tags=graphs%2C2600-">ProblemsList</a></p>
<h1 id="786B-Legacy-区间图最短路"><a href="#786B-Legacy-区间图最短路" class="headerlink" title="786B Legacy 区间图最短路"></a>786B Legacy 区间图最短路</h1><p>区间图最短路板子题，，关于什么是区间图最短路上一篇博客有写，，，</p>
<h1 id="741C-Arpa’s-overnight-party-and-Mehrdad’s-silent-entering-构造-二分图染色"><a href="#741C-Arpa’s-overnight-party-and-Mehrdad’s-silent-entering-构造-二分图染色" class="headerlink" title="741C    Arpa’s overnight party and Mehrdad’s silent entering 构造+二分图染色"></a>741C    Arpa’s overnight party and Mehrdad’s silent entering 构造+二分图染色</h1><p>二分图染色吧，，二分图，，一个似懂非懂的知识点，，每次看到像二分图的题就想着那几个经典的解法，，然后发现不是就乱想其他的模型，，，就是不会利用到二分图这个东西的一些知识点，，然后搜就完事了，，，</p>
<p>这题的题意就是2*n个点，，给出n对关系，，然后要保证这n对关系的点以及相邻的三个点中至少两个是 不同的，，，类似染色，，染成两种颜色，，，</p>
<p>每次看到二分图的题总是局限到左右两边n个点，，然后求一些匹配等等的东西，，，总是忘记最基本的那些，，</p>
<p>这题要保证一些点间是不同的，，可以看成不断的染色，，一层1，一层2，，这样子，，，</p>
<p>对于第二个限制条件，，直接保证相邻的两个点不同就行了，，，</p>
<p>一条边的两端不同就是解，，</p>
<p><img src="https://img-blog.csdn.net/20161214222817695?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcnpPX0tRUF9Pcno=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>同时这样子建图可以保证形成的环是简单环，，因为显然每一个点只有题目给出的一条边，，还有我们自己建的一条边，，所以度数都是2，，，因此一定是一个二分图，，，也就是一定有解，，</p>
<p><strong>不存在奇环的图（也就是环都是偶数）一定是二分图</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">4e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> col[maxn];<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    col[s] = <span class="hljs-number">0</span>;<br>    q.push(s);<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front(); q.pop();<br>        <span class="hljs-keyword">if</span>(vis[u])<span class="hljs-keyword">continue</span>;<br>        vis[u] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(vis[v])<span class="hljs-keyword">continue</span>;<br>            col[v] = col[u] ^ <span class="hljs-number">1</span>;<br>            q.push(v);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; p[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">int</span> n; <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">int</span> u, v;<br>    init();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;<br>        p[i].first = u; p[i].second = v;<br>        addedge(u, v);<br>        addedge(v, u);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; ++i)<br>    &#123;<br>        addedge(i &lt;&lt; <span class="hljs-number">1</span>, i &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>);<br>        addedge(i &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, i &lt;&lt; <span class="hljs-number">1</span>);<br>    &#125;<br>    addedge(n &lt;&lt; <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    addedge(<span class="hljs-number">1</span>, n &lt;&lt; <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-built_in">memset</span>(col, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> col);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n; ++i)<span class="hljs-keyword">if</span>(!vis[i])bfs(i);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cout</span> &lt;&lt; col[p[i].first] + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; col[p[i].second] + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="567E-President-and-Roads-最短路-DAG必经路"><a href="#567E-President-and-Roads-最短路-DAG必经路" class="headerlink" title="567E    President and Roads 最短路+DAG必经路"></a>567E    President and Roads 最短路+DAG必经路</h1><p><a href="https://codeforces.com/contest/567/problem/E">题目</a></p>
<p>这题用到的知识点是 <strong>最短路+DAG必经路</strong> ，，，</p>
<p>必经路是什么呢，，首先单源最短路中有些点是到不了终点的，，有一些点（边）是必须要走的，，而另一些就是多条最短路中不同的分支，，，这些边是可以任意选择一条路径的，，</p>
<p>求最短路中必经边我找到两种方法，一种是在跑dijkstra时增加一个信息：当前点的最短路的数量，，另一种是将图转为无向图找桥，，</p>
<h2 id="最短路径数量解法"><a href="#最短路径数量解法" class="headerlink" title="最短路径数量解法"></a>最短路径数量解法</h2><p>我们假设正着求一边最短路的dis为 <code>dis[0][i]</code> ，，而它的反图的dis是 <code>dis[1][i]</code> ，， 利用这两个信息我们可以简单的判断一条边 <code>u-&gt;v</code> 是不是某一个最短路径中的一条边，，判断方法是： <code>dis[0][u] + w + dis[1][v] == dis[0][t]</code> 这里的w即为边权，，满足这个条件就说明这条边是最短路的一条路，，但是，，这并不能也说明他是最短路的一条必经边，，，</p>
<p>所以我们需要另一个信息： 最短路径数量，，用 <code>num[0][u]</code> 表示正图中从源点到 <code>u</code> 这个点的最短路的路径数量，，，同理对于返图用 <code>num[1][v]</code> 表示</p>
<p>我们在跑最短路的时候如果当前遍历的边 <code>u-&gt;v</code> 是可以缩小到这个点 <code>v</code> 的最短路的大小的，，那么到这个点 <code>v</code> 的最短路的数量就等于到 <code>u</code> 这个点的最短路的数量，，而对于那些从不同 <code>u</code> 到 <code>v</code> 的路径且最短路大小相同的情况，，累加即可，，，</p>
<p>当得到这些信息后，，对于任意一条边 <code>u-&gt;v</code> ，，当他满足第一个条件时，，即他是众多最短路方案中的一条边时，，如果满足到 <code>u</code> 的路径数 乘上 到 <code>v</code> 的路径数 敲好等于从原点到终点的最短路的数量时，，，说明这条边一定是必经路，，</p>
<p>注意： 最短路的路径数可能很多，，爆ll情况，，，所以可以取个模，，但是只取一次模可能 <del>（一定）</del> 被卡掉，，可以换一个不常见的模数，，或者直接双模即可，，</p>
<h2 id="判桥"><a href="#判桥" class="headerlink" title="判桥"></a>判桥</h2><p>从上面的分析也可以看出，，我们选择出的必经路一定是 <strong>最短路径</strong> 中的桥，，，删去某一座桥，，原点一定不可达终点，，（注意是最短路路径中的边组成的新的无向图中的桥，，用上面的第一个条件判断即可，，</p>
<p>所以我们可以在跑完正反图的最短路之后，，挑出最短路的边组成一个新图（最短路DAG），，跑一边 tarjan 来求出所有的桥即可，，</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>这道题的题意就是一个有向图，，首先判断一条边是不是最短路上的边，，然后对于一定要走的边输出YES，，而不一定非得走的输出一个减少的值，，使得这条边的边权减小后的最短路经过这条边，，，</p>
<h3 id="最短路路径数解法"><a href="#最短路路径数解法" class="headerlink" title="最短路路径数解法"></a>最短路路径数解法</h3><p>模数是 <code>1e9+7</code> 会冲突，，，换一个或者双模数，，</p>
<h4 id="单模"><a href="#单模" class="headerlink" title="单模"></a>单模</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-comment">// const int mod = 1e9 + 7;</span><br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">258280327</span>;<br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt; ll w;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].w = w;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">e</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> u, v; ll w;<br>&#125;e[maxn];<br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v;<br>    ll w;<br>    node()&#123;&#125;;<br>    node(<span class="hljs-keyword">int</span> _v, ll _w):v(_v), w(_w)&#123;&#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;r)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> w &gt; r.w;<br>    &#125;<br>&#125;tmp;<br>ll dis[<span class="hljs-number">2</span>][maxn];<br><span class="hljs-keyword">bool</span> vis[<span class="hljs-number">2</span>][maxn];<br>ll num[<span class="hljs-number">2</span>][maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">bool</span> flag)</span></span><br><span class="hljs-function"></span>&#123;<br>    init();<br>    <span class="hljs-keyword">int</span> u, v; ll w;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        u = e[i].u; v = e[i].v; w = e[i].w;<br>        <span class="hljs-keyword">if</span>(flag)swap(u, v);<br>        addedge(u, v, w);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dis[flag][i] = linf;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)vis[flag][i] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)num[flag][i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">priority_queue</span>&lt;node&gt; p;<br>    <span class="hljs-keyword">while</span>(!p.empty())p.pop();<br>    dis[flag][s] = <span class="hljs-number">0</span>;<br>    num[flag][s] = <span class="hljs-number">1</span>;<br>    p.push(node(s, <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">while</span>(!p.empty())<br>    &#123;<br>        tmp = p.top(); p.pop();<br>        <span class="hljs-keyword">if</span>(vis[flag][tmp.v])<span class="hljs-keyword">continue</span>;<br>        vis[flag][tmp.v] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[tmp.v]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(vis[flag][edge[i].to])<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(dis[flag][edge[i].to] &gt; dis[flag][tmp.v] + edge[i].w)<br>            &#123;<br>                dis[flag][edge[i].to] = dis[flag][tmp.v] + edge[i].w;<br>                num[flag][edge[i].to] = num[flag][tmp.v];<br>                p.push(node(edge[i].to, dis[flag][edge[i].to]));<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dis[flag][edge[i].to] == dis[flag][tmp.v] + edge[i].w)<br>            &#123;<br>                num[flag][edge[i].to] = (num[flag][edge[i].to] + num[flag][tmp.v]) % mod;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br> <br>    <span class="hljs-keyword">int</span> n, m, s, t;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].w;<br>    dijkstra(t, n, m, <span class="hljs-literal">true</span>);<br>    dijkstra(s, n, m, <span class="hljs-literal">false</span>);<br>    ll mi = dis[<span class="hljs-number">0</span>][t];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(dis[<span class="hljs-number">0</span>][e[i].u] + e[i].w + dis[<span class="hljs-number">1</span>][e[i].v] == dis[<span class="hljs-number">0</span>][t] &amp;&amp; (num[<span class="hljs-number">0</span>][e[i].u] * num[<span class="hljs-number">1</span>][e[i].v]) % mod == num[<span class="hljs-number">0</span>][t])<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dis[<span class="hljs-number">0</span>][t] - dis[<span class="hljs-number">0</span>][e[i].u] - dis[<span class="hljs-number">1</span>][e[i].v] - <span class="hljs-number">1</span> &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;CAN &quot;</span> &lt;&lt; e[i].w - (dis[<span class="hljs-number">0</span>][t] - dis[<span class="hljs-number">0</span>][e[i].u] - dis[<span class="hljs-number">1</span>][e[i].v] - <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br> <br> <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="双模"><a href="#双模" class="headerlink" title="双模"></a>双模</h3><p>双模比单模都快，，什么情况，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-comment">// const int mod = 1e9 + 7;</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod1 = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod2 = <span class="hljs-number">1e9</span> + <span class="hljs-number">9</span>;<br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt; ll w;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].w = w;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">e</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> u, v; ll w;<br>&#125;e[maxn];<br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v;<br>    ll w;<br>    node()&#123;&#125;;<br>    node(<span class="hljs-keyword">int</span> _v, ll _w):v(_v), w(_w)&#123;&#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;r)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> w &gt; r.w;<br>    &#125;<br>&#125;tmp;<br>ll dis[<span class="hljs-number">2</span>][maxn];<br><span class="hljs-keyword">bool</span> vis[<span class="hljs-number">2</span>][maxn];<br>ll num1[<span class="hljs-number">2</span>][maxn];<br>ll num2[<span class="hljs-number">2</span>][maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">bool</span> flag)</span></span><br><span class="hljs-function"></span>&#123;<br>    init();<br>    <span class="hljs-keyword">int</span> u, v; ll w;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        u = e[i].u; v = e[i].v; w = e[i].w;<br>        <span class="hljs-keyword">if</span>(flag)swap(u, v);<br>        addedge(u, v, w);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dis[flag][i] = linf;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)vis[flag][i] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)num1[flag][i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)num2[flag][i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">priority_queue</span>&lt;node&gt; p;<br>    <span class="hljs-keyword">while</span>(!p.empty())p.pop();<br>    dis[flag][s] = <span class="hljs-number">0</span>;<br>    num1[flag][s] = num2[flag][s] = <span class="hljs-number">1</span>;<br>    p.push(node(s, <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">while</span>(!p.empty())<br>    &#123;<br>        tmp = p.top(); p.pop();<br>        <span class="hljs-keyword">if</span>(vis[flag][tmp.v])<span class="hljs-keyword">continue</span>;<br>        vis[flag][tmp.v] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[tmp.v]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(vis[flag][edge[i].to])<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(dis[flag][edge[i].to] &gt; dis[flag][tmp.v] + edge[i].w)<br>            &#123;<br>                dis[flag][edge[i].to] = dis[flag][tmp.v] + edge[i].w;<br>                num1[flag][edge[i].to] = num1[flag][tmp.v];<br>                num2[flag][edge[i].to] = num2[flag][tmp.v];<br>                p.push(node(edge[i].to, dis[flag][edge[i].to]));<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dis[flag][edge[i].to] == dis[flag][tmp.v] + edge[i].w)<br>            &#123;<br>                num1[flag][edge[i].to] = (num1[flag][edge[i].to] + num1[flag][tmp.v]) % mod1;<br>                num2[flag][edge[i].to] = (num2[flag][edge[i].to] + num2[flag][tmp.v]) % mod2;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br> <br>    <span class="hljs-keyword">int</span> n, m, s, t;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].w;<br>    dijkstra(t, n, m, <span class="hljs-literal">true</span>);<br>    dijkstra(s, n, m, <span class="hljs-literal">false</span>);<br>    ll mi = dis[<span class="hljs-number">0</span>][t];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(dis[<span class="hljs-number">0</span>][e[i].u] + e[i].w + dis[<span class="hljs-number">1</span>][e[i].v] == dis[<span class="hljs-number">0</span>][t] &amp;&amp;<br>         (num1[<span class="hljs-number">0</span>][e[i].u] * num1[<span class="hljs-number">1</span>][e[i].v]) % mod1 == num1[<span class="hljs-number">0</span>][t] &amp;&amp;<br>         (num2[<span class="hljs-number">0</span>][e[i].u] * num2[<span class="hljs-number">1</span>][e[i].v]) % mod2 == num2[<span class="hljs-number">0</span>][t])<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dis[<span class="hljs-number">0</span>][t] - dis[<span class="hljs-number">0</span>][e[i].u] - dis[<span class="hljs-number">1</span>][e[i].v] - <span class="hljs-number">1</span> &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;CAN &quot;</span> &lt;&lt; e[i].w - (dis[<span class="hljs-number">0</span>][t] - dis[<span class="hljs-number">0</span>][e[i].u] - dis[<span class="hljs-number">1</span>][e[i].v] - <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br> <br> <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="求桥"><a href="#求桥" class="headerlink" title="求桥"></a>求桥</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt; ll w;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].w = w;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">e</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> u, v; ll w;<br>&#125;e[maxn];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v;<br>    ll w;<br>    node()&#123;&#125;;<br>    node(<span class="hljs-keyword">int</span> _v, ll _w):v(_v), w(_w)&#123;&#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;r)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> w &gt; r.w;<br>    &#125;<br>&#125;tmp;<br>ll dis[<span class="hljs-number">2</span>][maxn];<br><span class="hljs-keyword">bool</span> vis[<span class="hljs-number">2</span>][maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">bool</span> flag)</span></span><br><span class="hljs-function"></span>&#123;<br>    init();<br>    <span class="hljs-keyword">int</span> u, v; ll w;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        u = e[i].u; v = e[i].v; w = e[i].w;<br>        <span class="hljs-keyword">if</span>(flag)swap(u, v);<br>        addedge(u, v, w);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dis[flag][i] = linf;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)vis[flag][i] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">priority_queue</span>&lt;node&gt; p;<br>    <span class="hljs-keyword">while</span>(!p.empty())p.pop();<br>    dis[flag][s] = <span class="hljs-number">0</span>;<br>    p.push(node(s, <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">while</span>(!p.empty())<br>    &#123;<br>        tmp = p.top(); p.pop();<br>        <span class="hljs-keyword">if</span>(vis[flag][tmp.v])<span class="hljs-keyword">continue</span>;<br>        vis[flag][tmp.v] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[tmp.v]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(vis[flag][edge[i].to])<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(dis[flag][edge[i].to] &gt; dis[flag][tmp.v] + edge[i].w)<br>            &#123;<br>                dis[flag][edge[i].to] = dis[flag][tmp.v] + edge[i].w;<br>                p.push(node(edge[i].to, dis[flag][edge[i].to]));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// get bridges</span><br><span class="hljs-built_in">map</span>&lt;ll, <span class="hljs-keyword">bool</span>&gt; bridges;<br><br><span class="hljs-comment">// 无向图求桥</span><br><span class="hljs-keyword">bool</span> vist[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> low[maxn], dfn[maxn], idx;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    low[u] = dfn[u] = ++idx;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(vist[i])<span class="hljs-keyword">continue</span>;        <span class="hljs-comment">// 走过的边不再走</span><br>        vist[i] = vist[i ^ <span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;   <span class="hljs-comment">// 标记边已走过</span><br>        <span class="hljs-keyword">if</span>(!dfn[v])<br>        &#123;<br>            tarjan(v);<br>            low[u] = min(low[u], low[v]);<br>            <span class="hljs-keyword">if</span>(dfn[u] &lt; low[v])bridges[u * maxn + v] = <span class="hljs-literal">true</span>;    <span class="hljs-comment">// 桥</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(low[u] &gt; dfn[v])<br>            low[u] = dfn[v];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">int</span> n, m, s, t;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].w;<br>    dijkstra(t, n, m, <span class="hljs-literal">true</span>);<br>    dijkstra(s, n, m, <span class="hljs-literal">false</span>);<br>    <span class="hljs-comment">// for(int i = 1; i &lt;= m; ++i)addedge(e[i].v, e[i].u, e[i].w);</span><br>    init();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        <span class="hljs-keyword">if</span>(dis[<span class="hljs-number">0</span>][e[i].u] + e[i].w + dis[<span class="hljs-number">1</span>][e[i].v] == dis[<span class="hljs-number">0</span>][t])<br>            addedge(e[i].u, e[i].v, i), addedge(e[i].v, e[i].u, i);<br>    <span class="hljs-built_in">memset</span>(low, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> low);<br>    <span class="hljs-built_in">memset</span>(dfn, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dfn);<br>    <span class="hljs-built_in">memset</span>(vist, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vist);<br>    idx = <span class="hljs-number">0</span>; bridges.clear();<br>    tarjan(s);<br>    ll mi = dis[<span class="hljs-number">0</span>][t];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(dis[<span class="hljs-number">0</span>][e[i].u] + e[i].w + dis[<span class="hljs-number">1</span>][e[i].v] == dis[<span class="hljs-number">0</span>][t] &amp;&amp; bridges[e[i].u * maxn + e[i].v])<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dis[<span class="hljs-number">0</span>][t] - dis[<span class="hljs-number">0</span>][e[i].u] - dis[<span class="hljs-number">1</span>][e[i].v] - <span class="hljs-number">1</span> &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;CAN &quot;</span> &lt;&lt; e[i].w - (dis[<span class="hljs-number">0</span>][t] - dis[<span class="hljs-number">0</span>][e[i].u] - dis[<span class="hljs-number">1</span>][e[i].v] - <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><a href="https://codeforces.com/gym/101986/attachments">这道题也是这个类型的</a></p>
<p><a href="https://blog.csdn.net/u010372095/article/details/47346035">tarjan求桥的写法部分参考这个</a> kuangbin的求得东西多，，对于这道题有点繁琐，，</p>
<p><a href="https://blog.csdn.net/qq_41848675/article/details/100583051">在理解最短路径数时参考了这个</a></p>
<h1 id="527E-Data-Center-Drama-欧拉回路-弧优化"><a href="#527E-Data-Center-Drama-欧拉回路-弧优化" class="headerlink" title="527E Data Center Drama 欧拉回路+弧优化"></a>527E Data Center Drama 欧拉回路+弧优化</h1><p><del>（哇，，被这题搞得失去理智好久，，（主要是那个弧优化</del></p>
<p>题意就是预先给你一个无向图，，增加最少的边，，然后对每一条边指定一个方向 <del>（就是变成有向边）</del> 使得每一个点的出度和入度都是偶数，，</p>
<p>如果一个图是欧拉回路的话，，我们只要一奇一偶的确定方向就行了，，而如何加边就是两两的将奇度的点连起来，，对于最后如果剩下一个奇度点的话就加一个自环，，（也就是边数为奇数的情况，，</p>
<p>最后跑一边dfs，，找出所有的回路即可，，</p>
<p>但是这题边数很多，，直接dfs的话会有多次回溯访问重复边，，所以要删边，，也就是没走过一条边就使后面不会再访问： <code>for(int &amp;i = head[u]; ~i; i = edge[i].nxt)</code> ，，但是这样会有一问题，，如果某个点 <code>u</code> 经过好多次后不能再走，，这个点的所有边的 <code>edge[i].nxt</code> 都为-1了也就是说 <code>head[u] == -1</code> 了，，也就是说此时的 <code>i</code> 的值在dfs完后被修改成了 <code>-1</code> ，，这个时候进行 <code>i</code> 值的更新就成了 <code>i=edge[i == -1].nxt</code> ，，如果edge数组和编译器友好的话这时也不会报错，，也能正常的取上界溢出的值，，可能是0，，然后 <code>i==0</code> 就从这点访问第一条边去了，，，但实际上这个点是不能再走的（因为前面的dfs已经保证都走完了不能再走了，，），，应该是回退到上一层dfs的，，这样子就成了 跳到第一条边dfs，，，这样子如果在dfs中记录访问的边的话就会出错，，，<code>u-&gt;v</code> 中的 <code>v</code> 被改变了，，</p>
<p>我的解决的方法是每一次从上一层的dfs跳出的时候判断一下i是否为-1，，，是的话表示这个点是无边可走的跳出即可，，，</p>
<p>看到很多人没有管这个问题，，都是记录的回路的编号，，这样虽然可以保证不管dfs中的变化而结果是对的，，但是总感觉发现问题不解决以后会出大事，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt;<br>    <span class="hljs-keyword">bool</span> flag;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].flag = <span class="hljs-literal">false</span>;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; &gt; ans;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> &amp;i = head[u]; ~i; i = edge[i].nxt)<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(edge[i].flag)<span class="hljs-keyword">continue</span>;<br>        edge[i].flag = edge[i ^ <span class="hljs-number">1</span>].flag = <span class="hljs-literal">true</span>;<br>        dfs(v);<br>        ans.push_back(<span class="hljs-built_in">make_pair</span>(u, v));<br>        <span class="hljs-keyword">if</span>(!~i)<span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> du[maxn];<br><br><span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-keyword">int</span>&gt; p;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">int</span> n, m; <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    init();<br>    <span class="hljs-built_in">memset</span>(du, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> du);<br>    <span class="hljs-keyword">int</span> u, v;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;<br>        ++du[u]; ++du[v];<br>        addedge(u, v);<br>        addedge(v, u);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!p.empty())p.pop();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-keyword">if</span>(du[i] &amp; <span class="hljs-number">1</span>)p.push(i);<br>    <span class="hljs-keyword">while</span>(!p.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = p.top(); p.pop();<br>        <span class="hljs-keyword">if</span>(p.empty())<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">int</span> v = p.top(); p.pop();<br>        addedge(u, v); addedge(v, u);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(tot &gt;&gt; <span class="hljs-number">1</span> &amp; <span class="hljs-number">1</span>)addedge(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), addedge(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    ans.clear();<br>    dfs(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ans.size(); ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(i &amp; <span class="hljs-number">1</span>)<span class="hljs-built_in">cout</span> &lt;&lt; ans[i].second &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ans[i].first &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; ans[i].first &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ans[i].second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="1147D-Palindrome-XOR-限制关系建图找方案数"><a href="#1147D-Palindrome-XOR-限制关系建图找方案数" class="headerlink" title="1147D Palindrome XOR 限制关系建图找方案数"></a>1147D Palindrome XOR 限制关系建图找方案数</h1><p>这题有点差分约束和2sat的感觉，，但是又不像那两个模型的解决方法，，</p>
<p>首先b二进制表示一定是和s一样长的，长度为n，，然后我们对a的长度m进行枚举，，建图进行判断是否有解，并累加解的数量，，</p>
<p>建 <code>n + m + 2</code> 个点，，前面两个表示对应每一位的情况，，后面俩个一个是 <code>0点</code> , 另一个是 <code>1点</code> ，，，并且规定又两种边，，<code>0边</code> 表示 <code>u-&gt;v</code> 的两点是相同的，，反之，， <code>1边</code> 表示是不同的，，这样子建图就能保证 <code>0边</code> 的两点异或一定是0，，后者是1，，，显然对于a的m位用对应的s来判断以下连边就行了，，，这是一种限制关系，，</p>
<p>另一种是一些确定的限制关系，，比如说对于a、b来说首位一定是1，，和a对应时有一些空出位的情况也一定是确定的，，这种情况我们对应连 <code>0点</code> 和 <code>1点</code> ，，，</p>
<p>这样建图可以看出一旦一个点的取值确定，，那么与之相连的一个联通块的取值情况也是确定的（根据当前点的情况和边的类型），，也就是一个联通块的取值情况只有两种，，，根据乘法原理就可以知道m的一种取值是的方案数是 $2^C$ ，，但是因为和 <code>0点</code> 和 <code>1点</code> 的取值是确定的，，所以这些连通块是不算的，，最后的答案就是 $2^{C-1}$ ，，，同时，，如果一个联通块根据边的限制关系约束下是不满足的，，说明这种取值下的m是无解的，为零，，，</p>
<p>整个过程就是一个根据边的限制关系来染色，，并判断是否有解，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-comment">// const int mod = 1e9 + 7;</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">998244353</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt, w;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].w = w;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br><br>    edge[tot].to = u;<br>    edge[tot].w = w;<br>    edge[tot].nxt = head[v];<br>    head[v] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> col[maxn];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    col[u] = w;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(col[v] != <span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(col[v] != (edge[i].w ^ w))<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!dfs(v, edge[i].w ^ w))<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">pow_</span><span class="hljs-params">(ll a, ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ret = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b &amp; <span class="hljs-number">1</span>)ret = ret * a % mod;<br>        a = a * a % mod;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-keyword">char</span> s[<span class="hljs-number">1005</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-built_in">cin</span> &gt;&gt; (s + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);reverse(s + <span class="hljs-number">1</span>, s + <span class="hljs-number">1</span> + n);<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> m = <span class="hljs-number">1</span>; m &lt;= n - <span class="hljs-number">1</span>; ++m)<br>    &#123;<br>        init();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n / <span class="hljs-number">2</span>; ++i)addedge(i, n - i + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m / <span class="hljs-number">2</span>; ++i)addedge(n + i, n + m - i + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        addedge(n + <span class="hljs-number">1</span>, n + n + <span class="hljs-number">2</span>, <span class="hljs-number">0</span>); addedge(n + <span class="hljs-number">1</span>, n + m + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        addedge(n + m, n + n + <span class="hljs-number">2</span>, <span class="hljs-number">0</span>); addedge(n + m, n + m + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>            <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;1&#x27;</span>)addedge(i, n + i, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;0&#x27;</span>)addedge(i, n + i, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = m + <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;1&#x27;</span>)addedge(i, n + m + <span class="hljs-number">2</span>, <span class="hljs-number">0</span>), addedge(i, n + m + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;0&#x27;</span>)addedge(i, n + m + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>), addedge(i, n + m + <span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">memset</span>(col, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> col);<br>        <span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + m + <span class="hljs-number">2</span>; ++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(col[i] == <span class="hljs-number">-1</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(dfs(i, <span class="hljs-number">0</span>))++c;<br>                <span class="hljs-keyword">else</span> <br>                &#123;<br>                    c = <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(c)ans = (ans + pow_(<span class="hljs-number">2</span>, c - <span class="hljs-number">1</span>)) % mod;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id=""><a href="#" class="headerlink" title=" "></a> </h1>]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces-541div2</title>
    <url>/2019/02/23/Codeforces-541div2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>codeforces-1131A~G</p>
<p><a href="https://codeforces.com/contest/1131">这场很多题都很简单</a>，，应该是要能至少做出4道的，，但是我一道wa了懵逼一道不知道如何写代码实现链表，，又是掉分场，，QAQ，，，</p>
<span id="more"></span>
<h1 id="A-Sea-Battle"><a href="#A-Sea-Battle" class="headerlink" title="A. Sea Battle"></a>A. Sea Battle</h1><p>求两个左对齐的矩形的外围一圈的面积（方格数），，，一开始去想着一层一层的找规律去推公式去了，，，推到一半发现越来越乱，，又想了一会才想起直接分成两个矩形：红色的扩大一圈后的和去掉一层后的蓝色的矩形的面积和减去原来两个矩形的面积和就行了，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//cf</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-comment">//#include &lt;cstdio&gt;</span><br><span class="hljs-comment">//#include &lt;cstdlib&gt;</span><br><span class="hljs-comment">//#include &lt;string.h&gt;</span><br><span class="hljs-comment">//#include &lt;algorithm&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, ull&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    ll w1, w2, h1, h2;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; w1 &gt;&gt; h1 &gt;&gt; w2 &gt;&gt; h2;<br>    ll ans = (w1 + <span class="hljs-number">2</span>) * (h1 + <span class="hljs-number">2</span>) + (w2 + <span class="hljs-number">2</span>) * h2 - w1 * h1 - w2 * h2;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="B-Draw"><a href="#B-Draw" class="headerlink" title="B. Draw!"></a>B. Draw!</h1><p>这道题的题意是给你足球比赛某个时刻的比分，然后问你可能的最大平分的情况由几种，，，</p>
<p>题意很简单，，，就是我当时在做的的时候推的方法错了，，然后wa，，因为但是思路也不清晰，，继续想下去耽误时间又时错的就放弃了这道题，，（现在看来应该做完C去继续想一下B的，，，</p>
<p>显然为了出现平分的情况，对于平分x肯定满足： $a \leq x \leq c ,b \leq x \leq d$,其中(a,b),(c,d)代表相邻的两个时刻的比分，(a,b)出现的时刻早一些，这样我们就可以推出 $max(a,b) \leq x \leq min(c,d)$，，（我就这里没想出来，，当时脑袋是糊的，，，）然后介于这两个时刻的比分之间的可能平分数就是 $min(c,d)-max(a,b)+1 \ 当且仅当式子的值大于等于零$，，如果中间时刻出现一个比分相同的就意味着多加了一次，减掉，，对于最后的比分如果相等还要再加一个，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//cf</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-comment">//#include &lt;cstdio&gt;</span><br><span class="hljs-comment">//#include &lt;cstdlib&gt;</span><br><span class="hljs-comment">//#include &lt;string.h&gt;</span><br><span class="hljs-comment">//#include &lt;algorithm&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> a[maxn], b[maxn];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">int</span> n;<span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>, la, lb, a, b;<br>    la = lb = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b;<br>        <span class="hljs-keyword">if</span>(min(a, b) - max(la, lb) + <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span>)<br>            ans += min(a, b) - max(la , lb) + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(a == b)--ans;<br>        la = a;lb = b;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(la == lb)++ans;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="C-Birthday"><a href="#C-Birthday" class="headerlink" title="C. Birthday"></a>C. Birthday</h1><p>c题很简单，就是给你一组数，然后让那弄出一个序列，满足所有相邻两个数的差值的最大值最小，，</p>
<p>看样例就知道应该输出一个中间高两边低的序列就好了，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//cf</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-comment">//#include &lt;cstdio&gt;</span><br><span class="hljs-comment">//#include &lt;cstdlib&gt;</span><br><span class="hljs-comment">//#include &lt;string.h&gt;</span><br><span class="hljs-comment">//#include &lt;algorithm&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> a[maxn], b[maxn];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">int</span> n; <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>    sort(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n);<br>    <span class="hljs-keyword">if</span>(n &amp; <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">int</span> p = n / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i -= <span class="hljs-number">2</span>)<br>            b[p--] = a[i];<br>        p = n / <span class="hljs-number">2</span> + <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; i -= <span class="hljs-number">2</span>)<br>            b[p++] = a[i];<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">int</span> p = n / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i -= <span class="hljs-number">2</span>)<br>            b[p--] = a[i];<br>        p = n / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; i -= <span class="hljs-number">2</span>)<br>            b[p++] = a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cout</span> &lt;&lt; b[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="D-Gourmet-choice"><a href="#D-Gourmet-choice" class="headerlink" title="D. Gourmet choice"></a>D. Gourmet choice</h1><p>这道题在比赛的时候有人在群里说了一句“差分约束”，，看这个题面的确像是差分约束的题，，，后来又看到很多人用的是 <strong>并查集缩点+拓扑排序</strong>，，，（第一听说能用并查集缩点的，，以前值见过跑Tarjan缩点的，，）</p>
<p>题面的意思是两组菜，一组是n道一组是m道，，然后给出这些菜直接的评分关系，然后让你求出每道菜具体可能的数值是多少（要满足所给的大小关系），，输出结果</p>
<h2 id="并查集缩点-拓扑排序"><a href="#并查集缩点-拓扑排序" class="headerlink" title="并查集缩点+拓扑排序"></a>并查集缩点+拓扑排序</h2><p>首先题目要我们求一个数列，使得这n+m个数的大小关系满足题目所给的要求，，这时我们可以将题目所求看成求一个最大值最小链，链中的边(u,v)表示v所代表的值大于或等于u的值，，这样就将问题转化成了一个n+m的图，，其中当s[i][j]为’&gt;’号时，就加一条n+j-&gt;i的边，，然后判断这个图是否是DAG图，，不是的话证明有环，，无解，，没有环的情况下用 拓扑排序 求图的最长链，，同时标记每个点的值应该是上一个点的加一</p>
<p>对于相等评分的i,j，，我们将它们划在同一个集合里，，这样用一个点表示这个集合里的所有点，，它最后的评分和集合里的所有点的评分一样（缩点），，这里的缩点过程用并查集来实现，，最后的点都映射到了新的点中</p>
<p>这样我们直接对每一个用到原来1-&gt;n+m的点都求一下它所在的点集，，用并查集的 <code>_find(x)</code> 就行了，，，</p>
<p>最后遍历一遍所有的n+m个点看所在的集合是否都被标记了，，有一个没有的话就是无解的啦，，，</p>
<p>输出的时候依次输出前n个点所在点集的标号，然后后m个点所在点集的标号，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//cf</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-comment">//#include &lt;cstdio&gt;</span><br><span class="hljs-comment">//#include &lt;cstdlib&gt;</span><br><span class="hljs-comment">//#include &lt;string.h&gt;</span><br><span class="hljs-comment">//#include &lt;algorithm&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> a[maxn], b[maxn];<br><span class="hljs-keyword">int</span> fa[maxn];<br><span class="hljs-keyword">int</span> _find(<span class="hljs-keyword">int</span> x)<br>&#123;<br>    <span class="hljs-keyword">if</span>(fa[x] == x)<span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">return</span> fa[x] = _find(fa[x]);<br>&#125;<br><span class="hljs-keyword">void</span> _union(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)<br>&#123;<br>    <span class="hljs-keyword">int</span> f1 = _find(x);<br>    <span class="hljs-keyword">int</span> f2 = _find(y);<br>    <span class="hljs-keyword">if</span>(f1 &gt; f2)fa[f1] = f2;<br>    <span class="hljs-keyword">else</span>       fa[f2] = f1;<br>&#125;<br><span class="hljs-comment">//toposort</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; g[maxn];<br><span class="hljs-keyword">int</span> du[maxn], n, m, l[maxn];<br><span class="hljs-keyword">int</span> ans[maxn];      <span class="hljs-comment">//保存所有点的编号</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">toposort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> cnt)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + m; ++i)<br>        <span class="hljs-keyword">if</span>(!du[_find(i)] &amp;&amp; fa[i] == i)<br>            q.push(_find(i)), ans[_find(i)] = <span class="hljs-number">1</span>;<span class="hljs-comment">//所有入度为零的点的集合标记为1</span><br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> x = q.front(); q.pop();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; g[x].size(); ++i)<br>        &#123;<br>            <span class="hljs-keyword">int</span> t = g[x][i];<br>            --du[t];<br>            <span class="hljs-keyword">if</span>(!du[t])q.push(t), ans[t] = ans[x] + <span class="hljs-number">1</span>;<span class="hljs-comment">//这条链上的下一个点的编号比上一个大1，，也就是满足题干的&gt;</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + m; ++i)<span class="hljs-comment">//如果有一个点没有被编号，即最长链里没有它就说明无解</span><br>        <span class="hljs-keyword">if</span>(!ans[_find(i)])<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">char</span> s[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n , &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s[i] + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + m; ++i)fa[i] = i;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + m; ++i)du[i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> cnt = n + m;<br>    <span class="hljs-comment">//用并查集缩点后判断是不是DAG图</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>            <span class="hljs-keyword">if</span>(s[i][j] == <span class="hljs-string">&#x27;=&#x27;</span>)<br>                _union(i, n + j), --cnt;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s[i][j] == <span class="hljs-string">&#x27;&lt;&#x27;</span>)<br>                g[_find(i)].push_back(_find(n + j)), ++du[_find(n + j)];<br>            <span class="hljs-keyword">if</span>(s[i][j] == <span class="hljs-string">&#x27;&gt;&#x27;</span>)<br>                g[_find(n + j)].push_back(_find(i)), ++du[_find(i)];<br>        &#125;<br>    <span class="hljs-keyword">if</span>(toposort(cnt))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, ans[_find(i)]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, ans[_find(j + n)]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><a href="https://www.e-learn.cn/content/qita/2031478">参考</a></p>
<h2 id="差分约束"><a href="#差分约束" class="headerlink" title="差分约束"></a>差分约束</h2><p><del>spfa跑的时候容易t，，（哪天在补这道题吧</del></p>
<p>差分约束的话直接按题意建图就行了，，，注意一下细节，，，<a href="https://www.cnblogs.com/31415926535x/p/10463112.html">可以看这里最后的那里</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//cf</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-comment">//#include &lt;cstdio&gt;</span><br><span class="hljs-comment">//#include &lt;cstdlib&gt;</span><br><span class="hljs-comment">//#include &lt;string.h&gt;</span><br><span class="hljs-comment">//#include &lt;algorithm&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v, w;<br>    edge(<span class="hljs-keyword">int</span> _v, <span class="hljs-keyword">int</span> _w):v(_v), w(_w)&#123;&#125;<br>&#125;;<br><span class="hljs-built_in">vector</span>&lt;edge&gt; e[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[u].push_back(edge(v, w));<br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> cnt[maxn], dis[maxn], sta[maxn];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)vis[i] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)cnt[i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dis[i] = inf;<br>    vis[s] = <span class="hljs-literal">true</span>;<br>    cnt[s] = <span class="hljs-number">1</span>;<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> top = <span class="hljs-number">-1</span>;<br>    sta[++top] = s;<br>    <span class="hljs-keyword">while</span>(~top)<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = sta[top--];<br>        vis[u] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; e[u].size(); ++i)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = e[u][i].v;<br>            <span class="hljs-keyword">int</span> w = e[u][i].w;<br>            <span class="hljs-keyword">if</span>(dis[v] &gt; dis[u] + w)<br>            &#123;<br>                dis[v] = dis[u] + w;<br>                <span class="hljs-keyword">if</span>(!vis[v])<br>                &#123;<br>                    vis[v] = <span class="hljs-literal">true</span>;<br>                    sta[++top] = v;<br>                    <span class="hljs-keyword">if</span>(++cnt[v] &gt; n)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">char</span> s[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n, m; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s[i] + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s[i][j] == <span class="hljs-string">&#x27;&gt;&#x27;</span>)<br>                addedge(i, j + n, <span class="hljs-number">-1</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i][j] == <span class="hljs-string">&#x27;&lt;&#x27;</span>)<br>                addedge(j + n, i, <span class="hljs-number">-1</span>);<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                addedge(i, j + n, <span class="hljs-number">0</span>);<br>                addedge(j + n, i, <span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + m; ++i)<br>        addedge(<span class="hljs-number">0</span>, i, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(spfa(<span class="hljs-number">0</span>, n + m))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>        <span class="hljs-keyword">int</span> k = *min_element(dis + <span class="hljs-number">1</span>, dis + <span class="hljs-number">1</span> + n + m);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, dis[i] - k + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span> + n; i &lt;= n + m; ++i)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, dis[i] - k + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="E-String-Multiplication"><a href="#E-String-Multiplication" class="headerlink" title="E. String Multiplication"></a>E. String Multiplication</h1><p>留坑</p>
<h1 id="F-Asya-And-Kittens"><a href="#F-Asya-And-Kittens" class="headerlink" title="F. Asya And Kittens"></a>F. Asya And Kittens</h1><p>当时过这道题的人很多，，直接并查集+链表模拟一下就可以了，，，</p>
<p>可惜我当时不知道链表怎么实现（关键是不知道stl的list有合并两个链表的函数，，，不然就不是掉分场了QAQ</p>
<p>每添加一对猫，，判断他们是不是在一个集合里，，不在的话就把他们放在一个集合里（并查集实现），，然后合并这两只喵所在的链表，，用 <code>std::list.splice()</code> 作用是：对两个链表进行结合(三个重载函数) 结合后第二个链表清空，，， ，，记得记录下这个链表的位置，，，</p>
<p><del>蔡队用的是rope合并的，，有时间了解一下这玩意，，</del></p>
<h2 id="并查集-链表模拟"><a href="#并查集-链表模拟" class="headerlink" title="并查集+链表模拟"></a>并查集+链表模拟</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//cf</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-comment">//#include &lt;cstdio&gt;</span><br><span class="hljs-comment">//#include &lt;cstdlib&gt;</span><br><span class="hljs-comment">//#include &lt;string.h&gt;</span><br><span class="hljs-comment">//#include &lt;algorithm&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> father[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(father[x] == x)<span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> father[x] = find(father[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unionset</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> f1 = find(x);<br>    <span class="hljs-keyword">int</span> f2 = find(y);<br>    <span class="hljs-keyword">if</span>(f1 != f2)father[f2] = f1;<br>&#125;<br><span class="hljs-built_in">list</span>&lt;ll&gt; lst[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">int</span> n; <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)father[i] = i, lst[i].pb(i);<br>    <span class="hljs-keyword">int</span> a, b, ans;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b;<br>        <span class="hljs-keyword">int</span> pa = find(a);<br>        <span class="hljs-keyword">int</span> pb = find(b);<br>        lst[pa].splice(lst[pa].end(), lst[pb]);<br>        unionset(a, b);<br>        ans = pa;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> p : lst[ans])<span class="hljs-built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="并查集-rope模拟"><a href="#并查集-rope模拟" class="headerlink" title="并查集+rope模拟"></a>并查集+rope模拟</h2><p>rope是一个块状链表，，</p>
<p>需要在g++中使用，，同时加上特定的头文件：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;ext/rope&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> __gnu_cxx;<br></code></pre></td></tr></table></figure>
<p>常用操作有：</p>
<ul>
<li>pusb_back(x): 在末尾追加x</li>
<li>insert(pos, x): 在pos插入x</li>
<li>erase(pos, x): 在pos开始删除连续x个元素</li>
<li>replace(pos, x): 从pos开始替换成x</li>
<li>substr(pos, x): 提去从pos开始的x个元素</li>
<li>at(x) or [x]: 访问第x个元素</li>
</ul>
<p>insert() ,substr() 和 erase()连用可以实现对一段数据的转移：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">实现对a数组中[x, y]的数字放到最前面<br>a.insert(<span class="hljs-number">0</span>, a.substr(x - <span class="hljs-number">1</span>, y));<br>a.erase(x + y - <span class="hljs-number">1</span>, y);<br></code></pre></td></tr></table></figure>
<p>这道题貌似直接放在一个链表的后面用 “+=” ，就行了，，，（没找到介绍重载 “+=”的博客），，，</p>
<p>据说这玩意的时间复杂度是 O(玄学),,emmm，，比上面那种还慢一点，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//cf</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-comment">//#include &lt;cstdio&gt;</span><br><span class="hljs-comment">//#include &lt;cstdlib&gt;</span><br><span class="hljs-comment">//#include &lt;string.h&gt;</span><br><span class="hljs-comment">//#include &lt;algorithm&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> fa[maxn];<br><span class="hljs-keyword">int</span> _find(<span class="hljs-keyword">int</span> x)<br>&#123;<br>    <span class="hljs-keyword">if</span>(fa[x] == x)<span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">return</span> fa[x] = _find(fa[x]);<br>&#125;<br><span class="hljs-keyword">void</span> _union(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)<br>&#123;<br>    <span class="hljs-keyword">int</span> f1 = _find(x);<br>    <span class="hljs-keyword">int</span> f2 = _find(y);<br>    <span class="hljs-keyword">if</span>(f1 &gt; f2)fa[f1] = f2;<br>    <span class="hljs-keyword">else</span>       fa[f2] = f1;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ext/rope&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> __gnu_cxx;<br>rope&lt;<span class="hljs-keyword">int</span>&gt; a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">int</span> n;<span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)fa[i] = i, a[i].push_back(i);<br>    <span class="hljs-keyword">int</span> x, y;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; x &gt;&gt; y;<br>        x = _find(x); y = _find(y);<br>        fa[y] = x;<br>        a[x] += a[y];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span>(_find(i) == i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; a[i].size(); ++j)<br>                <span class="hljs-built_in">cout</span> &lt;&lt; a[i][j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="G-Most-Dangerous-Shark"><a href="#G-Most-Dangerous-Shark" class="headerlink" title="G. Most Dangerous Shark"></a>G. Most Dangerous Shark</h1><p>留坑</p>
]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 60</title>
    <url>/2019/04/08/Educational-Codeforces-Round-60/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>发现现在的我不仅仅是专门的算法知识学的不够，，平常的签到题那样的考验代码能力的题也不是很稳定的能够写出来，比如说cfdiv2的ABC题，，所以决定练一段时间的cf的题，，</p>
<p>这套题感觉重在考察思想和代码能力，</p>
<span id="more"></span>
<h1 id="A-Best-Subsegment"><a href="#A-Best-Subsegment" class="headerlink" title="A. Best Subsegment"></a>A. Best Subsegment</h1><p>题意就是求一个数组中平均值最大的子区间的长度，，有多个相同的最大平均值区间取长度最大的，，</p>
<p>一开始我想着直接枚举长度，用前缀和来求子区间的平均值，，但是这样时间复杂度是n方，t了，，</p>
<p>首先题意要要保证平均值最大，然后才是保证长度最长，所以先找到值最大的元素，，如果有连续的最大值出现，求出最长长度，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">4e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e7</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> a[maxn], n;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>    <span class="hljs-keyword">int</span> mx = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)mx = max(a[i], mx);<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i] == mx)<br>        &#123;<br>            <span class="hljs-keyword">int</span> r = i;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i; j &lt;= n; ++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(a[j] == mx)<br>                    r = j;<br>                <span class="hljs-keyword">else</span><br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>            ans = max(ans, r - i + <span class="hljs-number">1</span>);<br>            i = r;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="D-Magic-Gems"><a href="#D-Magic-Gems" class="headerlink" title="D. Magic Gems"></a>D. Magic Gems</h1><p>题意：给你一串数，然后可以重复的选取m个，但是同一个不能连续选超过k个，问你最大的选的和，，</p>
<p>既然要选和最大，那么每次选最大的，超出k个选一次第二大的，然后继续这样选，，</p>
<p>ll也不会爆，，</p>
<p>一开始推出公式换成代码还忘记乘了一数，wa了一发</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">ll n, m, k, a[maxn];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>    sort(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n);<br>    ll ans = m / (k + <span class="hljs-number">1</span>) * (k * a[n] + a[n - <span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">if</span>(m / (k + <span class="hljs-number">1</span>) * (k + <span class="hljs-number">1</span>) != m)<br>        ans += (m - m / (k + <span class="hljs-number">1</span>) * (k + <span class="hljs-number">1</span>)) * a[n];<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;       <br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="C-Magic-Ship"><a href="#C-Magic-Ship" class="headerlink" title="C. Magic Ship"></a>C. Magic Ship</h1><p>这道题很不错啊，，</p>
<p>题意：船的起点是s要到的终点是t，然后每走一步会有四个方向的风的加成，问你能到达终点时的最小时间，，风在变化完一轮之后会从一开始继续，，</p>
<p>读完题之后一点思路都没有，首先这个风向的变化就不知道怎么处理，即使看到了下面的tag是二分也不知道怎么弄，，</p>
<p>后来看了题解，大致的思路是这样的：</p>
<p>首先考虑这个风，如果要是每一步都考虑这个风的影响肯定是不行的，太麻烦了，，注意到风对船每一步的影响都相当于是一开始全都对船影响，就是把每一天的风的加成后的位置在一开始就计算出来（前缀和的思想+推公式），然后再在这个新的位置出发去终点，，</p>
<p>这样想之后，我们就可以计算出在day天后，船的位置首先因为风的影响由 $s$ 变到了 $s’$，，然后判断这day天船是否可以在 $s’$ 到达终点t，，，而且即使从这个点 $s’$ 出发到终点的最短时间比day少也没关系，因为题中说船可以选择不动，这样单独受风的影响就行了，，</p>
<p>而这个最小的day就可以二分找出来，，因为一定是day之前的都不可行，而后面的day一个比一个大，，这样满足使用二分的条件，，，（二分又写崩++，，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">4e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e7</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-built_in">pair</span>&lt;ll, ll&gt; s, t;<br><span class="hljs-built_in">string</span> str;<br>ll n;<br><span class="hljs-built_in">pair</span>&lt;ll, ll&gt; d[maxn];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(ll day)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">pair</span>&lt;ll, ll&gt; tmp;<br>    tmp.first = s.first + (day / n) * d[n].first + d[(day % n)].first;<br>    tmp.second = s.second + (day / n) * d[n].second + d[(day % n)].second;<br>    ll ans = <span class="hljs-built_in">abs</span>(tmp.first - t.first) + <span class="hljs-built_in">abs</span>(tmp.second - t.second);<br>    <span class="hljs-keyword">return</span> ans &lt;= day;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span> &gt;&gt; s.first &gt;&gt; s.second &gt;&gt; t.first &gt;&gt; t.second &gt;&gt; n &gt;&gt; str;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>    &#123;<br>        d[i + <span class="hljs-number">1</span>] = d[i];<br>        <span class="hljs-keyword">if</span>(str[i] == <span class="hljs-string">&#x27;U&#x27;</span>)++d[i + <span class="hljs-number">1</span>].second;<br>        <span class="hljs-keyword">if</span>(str[i] == <span class="hljs-string">&#x27;D&#x27;</span>)--d[i + <span class="hljs-number">1</span>].second;<br>        <span class="hljs-keyword">if</span>(str[i] == <span class="hljs-string">&#x27;L&#x27;</span>)--d[i + <span class="hljs-number">1</span>].first;<br>        <span class="hljs-keyword">if</span>(str[i] == <span class="hljs-string">&#x27;R&#x27;</span>)++d[i + <span class="hljs-number">1</span>].first;<br>    &#125;<br>    ll l = <span class="hljs-number">0</span>, r = <span class="hljs-number">1e18</span>;<br>    ll ans = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(l &lt;= r)<br>    &#123;<br>        ll mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(check(mid))<br>        &#123;<br>            ans = mid;<br>            r = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;       <br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="D-Magic-Gems-1"><a href="#D-Magic-Gems-1" class="headerlink" title="D. Magic Gems"></a>D. Magic Gems</h1><p>这题的题意很简单，，就是处理的方法我没见过，，涨知识ing，，，</p>
<p>题意就是一块魔法宝石可以变成m块普通的宝石，然后魔法宝石和普通宝石都占一个空间，给你一堆魔法宝石问你有几种情况使得占的空间正好是n，，</p>
<p>这题有两种解法，，一种是 <strong>推dp方程矩阵加速幂加速</strong> ，另一种是 <strong>直接上杜教筛</strong> ..</p>
<p><a href="https://blog.csdn.net/qq_37632935/article/details/87889975">参考1</a><br><a href="https://blog.csdn.net/moon_sky1999/article/details/87974954">参考2</a></p>
<h2 id="dp-矩阵快速幂"><a href="#dp-矩阵快速幂" class="headerlink" title="dp+矩阵快速幂"></a>dp+矩阵快速幂</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先定义 $dp_i$ 表示 <em>恰好占用i个单元空间时的选择方法个数</em> ，，</p>
<p>然后去推状态转移方程： 可以看出（emm我就没看出，，）对于每一个给定的空间有两种可以不同的选择方法，一种是 <em>不拆分魔法宝石所得</em> ， 另一种是 <em>拆分一块魔法宝石所得</em> ，，，这样的话前者就可以表示为 $dp<em>{i-1}$ ， 后者可以表示为 $dp</em>{i-m}$ ，加起来就是这个空间下所有的可能选择的方法数了，，</p>
<script type="math/tex; mode=display">
    dp_i=dp_{i-1}+dp_{i-m}</script><p>但是如果只是按照平常的dp问题去求 $dp_n$ 显然时空都会爆，，（n可能是1e18），，，所以这样做要优化，，转化成求矩阵快速幂的形式就行了，，</p>
<p>把那个状态转移方程 $dp<em>n=dp</em>{n-1}+dp_{n-m}$ 多推几项：</p>
<script type="math/tex; mode=display">
    dp_{n}=dp_{n-1}+dp_{n-m}\\
    dp_{n-1}=dp_{n-2}+dp_{n-m-1}\\
    dp_{n-2}=dp_{n-3}+dp_{n-m-2}\\
            \cdots</script><p>用矩阵快速幂进行递推式加速时的一般形式是把原递推式转化成：</p>
<script type="math/tex; mode=display">
    \begin{bmatrix}
        f[n]\\
        f[n-1]\\
        f[n-2]\\
        \vdots
    \end{bmatrix}

    = 

    A^k

    \begin{bmatrix}
        f[n-1]\\
        f[n-2]\\
        \vdots
    \end{bmatrix}</script><p>这样的形式，，对于这道题的递推方程就可以转化成：</p>
<script type="math/tex; mode=display">
    \begin{bmatrix}
        dp[n]\\
        dp[n-1]\\
        dp[n-2]\\
        \vdots\\
        dp[n-m+1]\\
    \end{bmatrix}

    =

    A

    \begin{bmatrix}
        dp[n-1]\\
        dp[n-2]\\
        dp[n-3]\\
        \vdots\\
        dp[n-m]\\
    \end{bmatrix}</script><p>根据等式间的关系，为了得到左边第一项 $dp[n]$ ，A的第一行要是 $[1,0,0,\cdots, 1]$ ，这样才能得到递推公式为我们所用，，</p>
<p>而后面那几项显然都等于对应层的上一层的值，，，也就是说A中对应的是1就可以了，，</p>
<p>实际上只用到了刚刚往后推的一两项，，</p>
<p>所以A就应该是这样的，，</p>
<script type="math/tex; mode=display">
    A=
    \begin{bmatrix}
        1 & 0 & 0 & 0 & 0 & 0 & \cdots & 1 \\
        1 & 0 & 0 & 0 & 0 & 0 & \cdots & 0 \\
        0 & 1 & 0 & 0 & 0 & 0 & \cdots & 0 \\
        \vdots & \vdots & \vdots & \vdots & \vdots & \vdots & \vdots & \vdots \\
        0 & \cdots & 0 & 0 & 0 & 0 & 1 & 0 \\
        0 & \cdots & 0 & 0 & 0 & 0 & 0 & 1 \\
    \end{bmatrix}</script><p>最后把A后面的那个矩阵转化成一个常数矩阵，，观察之后可以看出后面那个矩阵最下面最小是 $dp[1]$ 这种情况下表示空间为1时的方案数，，肯定是选择一个魔法宝石不拆啦，，，同理一直到m-1的空间都是1，，而 $dp[m]$ 就可以有两种选择，，要么都是魔法宝石，要么一个魔法宝石拆分m块普通宝石，，也就是2，，，所以最后的矩阵递推式就是：</p>
<script type="math/tex; mode=display">
    \begin{bmatrix}
        dp[n]\\
        dp[n-1]\\
        dp[n-2]\\
        \vdots\\
        dp[n-m+1]\\
    \end{bmatrix}

    = 

    A^k

    \begin{bmatrix}
        2\\
        1\\
        1\\
        \vdots\\
        1\\
    \end{bmatrix}</script><p>推一下的话就知道 $k=n-m$ 看右边矩阵的最上面那一项的变化值的差</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>上一次写矩阵快速幂还是暑假的集训队学的时候写的，，现在早就忘记了，，正好记录一下板子，，</p>
<p>最后的复杂度大概是 $O(n^3logn)$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;iostream&gt;</span><br><span class="hljs-comment">// #include &lt;cstdio&gt;</span><br><span class="hljs-comment">// #include &lt;cstdlib&gt;</span><br><span class="hljs-comment">// #include &lt;string.h&gt;</span><br><span class="hljs-comment">// #include &lt;algorithm&gt;</span><br><span class="hljs-comment">// #include &lt;set&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e10</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e7</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br>ll n, m;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> len = <span class="hljs-number">105</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">matrix</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">// int m;</span><br>    ll num[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];<br>    <span class="hljs-comment">// matrix()&#123;&#125;</span><br>    matrix()&#123;<span class="hljs-built_in">memset</span>(num, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> num);&#125;<br>    matrix <span class="hljs-keyword">operator</span> *(<span class="hljs-keyword">const</span> matrix &amp;x)<br>    &#123;<br>        matrix c;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= m; ++k)<br>                    c.num[i][j] = (c.num[i][j] + num[i][k] * x.num[k][j]) % mod;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>    matrix &amp;<span class="hljs-keyword">operator</span> =(<span class="hljs-keyword">const</span> matrix &amp;x)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>                num[i][j] = x.num[i][j];<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-function">matrix <span class="hljs-title">pow_</span><span class="hljs-params">(matrix x, ll k)</span></span><br><span class="hljs-function">    </span>&#123;<br>        matrix ans;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)ans.num[i][i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(k)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(k &amp; <span class="hljs-number">1</span>)ans = ans * x;<br>            x = x * x;<br>            k &gt;&gt;= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <br>&#125;;<br><br>ll f[len];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">if</span>(n &lt; m)<br>    &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    matrix a = matrix();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= m; ++i)a.num[i][i - <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    a.num[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = a.num[<span class="hljs-number">1</span>][m] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)f[i] = <span class="hljs-number">1</span>;<br>    f[m] = <span class="hljs-number">2</span>;<br>    a = a.pow_(a, n - m);<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        ans = (ans + a.num[<span class="hljs-number">1</span>][i] * f[m - i + <span class="hljs-number">1</span>]) % mod;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;       <br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="杜教线性筛"><a href="#杜教线性筛" class="headerlink" title="杜教线性筛"></a>杜教线性筛</h3><p>好久之前就听说过杜教筛，，但是一直没有用过，，正好遇到了，，记录一下这个强大的板子，，，这道题直接暴力算出前200项然后把结果丢到杜教筛中跑一下就行了，，，，时间复杂度好像是 $O(n^{2/3})$ ，，，上一个大概跑1s多，，这个直接30ms，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;iostream&gt;</span><br><span class="hljs-comment">// #include &lt;cstdio&gt;</span><br><span class="hljs-comment">// #include &lt;cstdlib&gt;</span><br><span class="hljs-comment">// #include &lt;string.h&gt;</span><br><span class="hljs-comment">// #include &lt;algorithm&gt;</span><br><span class="hljs-comment">// #include &lt;set&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e10</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e7</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">namespace</span> linear_seq<br>&#123;<br>    <br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i,a,n) for (int i=a;i&lt;n;++i)</span><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> per(i,a,n) for (int i=n-1;i&gt;=a;--i)</span><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> all(x) (x).begin(),(x).end();</span><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fi first</span><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> se second</span><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SZ(x) ((int)(x).size())</span><br>    <span class="hljs-keyword">typedef</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; VI;<br>    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br>    <span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; PII;<br>    <span class="hljs-keyword">const</span> ll mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">10010</span>;<br>    ll _, n;<br>    ll res[N], base[N], _c[N], _md[N];<br>    <span class="hljs-built_in">vector</span>&lt;ll&gt; Md;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mul</span><span class="hljs-params">(ll *a, ll *b, <span class="hljs-keyword">int</span> k)</span></span><br><span class="hljs-function">    </span>&#123;<br>        rep(i,<span class="hljs-number">0</span>,k+k) _c[i] = <span class="hljs-number">0</span>;<br>        rep(i,<span class="hljs-number">0</span>,k)<span class="hljs-keyword">if</span>(a[i])rep(j,<span class="hljs-number">0</span>,k)_c[i+j]=(_c[i+j]+a[i]*b[j])%mod;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=k+k<span class="hljs-number">-1</span>; i&gt;=k; --i)<span class="hljs-keyword">if</span>(_c[i])<br>            rep(j,<span class="hljs-number">0</span>,SZ(Md))_c[i-k+Md[j]]=(_c[i-k+Md[j]]-_c[i]*_md[Md[j]])%mod;<br>        rep(i,<span class="hljs-number">0</span>,k)a[i]=_c[i];<br>    &#125;<br>    <span class="hljs-function">ll <span class="hljs-title">powmod</span><span class="hljs-params">(ll a, ll b)</span></span><br><span class="hljs-function">    </span>&#123;<br>        ll res = <span class="hljs-number">1</span>;<br>        a %= mod;<br>        assert(b&gt;=<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(; b; b&gt;&gt;=<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)res=res*a%mod;<br>            a=a*a%mod;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(ll n, VI a, VI b)</span></span><br><span class="hljs-function">    </span>&#123;<br>        ll ans = <span class="hljs-number">0</span>, pnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> k = SZ(a);<br>        assert(SZ(a) == SZ(b));<br>        rep(i,<span class="hljs-number">0</span>,k) _md[k<span class="hljs-number">-1</span>-i]=-a[i];<br>        _md[k]=<span class="hljs-number">1</span>;<br>        Md.clear();<br>        rep(i,<span class="hljs-number">0</span>,k)<span class="hljs-keyword">if</span>(_md[i]!=<span class="hljs-number">0</span>)Md.push_back(i);<br>        rep(i,<span class="hljs-number">0</span>,k)res[i]=base[i]=<span class="hljs-number">0</span>;<br>        res[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>((<span class="hljs-number">1ll</span>&lt;&lt;pnt)&lt;=n)++pnt;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> p = pnt; p&gt;=<span class="hljs-number">0</span>; --p)<br>        &#123;<br>            mul(res, res, k);<br>            <span class="hljs-keyword">if</span>((n&gt;&gt;p)&amp;<span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=k<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; --i)res[i+<span class="hljs-number">1</span>]=res[i];<br>                res[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>                rep(j,<span class="hljs-number">0</span>,SZ(Md))res[Md[j]]=(res[Md[j]]-res[k]*_md[Md[j]])%mod;<br>            &#125;<br>        &#125;<br>        rep(i,<span class="hljs-number">0</span>,k)ans=(ans+res[i]*b[i])%mod;<br>        <span class="hljs-keyword">if</span>(ans&lt;<span class="hljs-number">0</span>)ans+=mod;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <span class="hljs-function">VI <span class="hljs-title">BM</span><span class="hljs-params">(VI s)</span></span><br><span class="hljs-function">    </span>&#123;<br>        VI C(1,1), B(1,1);<br>        <span class="hljs-keyword">int</span> L=<span class="hljs-number">0</span>, m=<span class="hljs-number">1</span>, b=<span class="hljs-number">1</span>;<br>        rep(n, <span class="hljs-number">0</span>, SZ(s))<br>        &#123;<br>            ll d = <span class="hljs-number">0</span>;<br>            rep(i,<span class="hljs-number">0</span>,L+<span class="hljs-number">1</span>)d=(d+(ll)C[i]*s[n-i])%mod;<br>            <span class="hljs-keyword">if</span>(d==<span class="hljs-number">0</span>) ++m;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*L&lt;=n)<br>            &#123;<br>                VI T=C;<br>                ll c=mod-d*powmod(b,mod<span class="hljs-number">-2</span>)%mod;<br>                <span class="hljs-keyword">while</span>(SZ(C)&lt;SZ(B)+m)C.pb(<span class="hljs-number">0</span>);<br>                rep(i,<span class="hljs-number">0</span>,SZ(B))C[i+m]=(C[i+m]+c*B[i])%mod;<br>                L=n+<span class="hljs-number">1</span>-L;<br>                B=T;<br>                b=d;<br>                m=<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ll c=mod-d*powmod(b,mod<span class="hljs-number">-2</span>)%mod;<br>                <span class="hljs-keyword">while</span>(SZ(C)&lt;SZ(B)+m)C.pb(<span class="hljs-number">0</span>);<br>                rep(i,<span class="hljs-number">0</span>,SZ(B))C[i+m]=(C[i+m]+c*B[i])%mod;<br>                ++m;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> C;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gao</span><span class="hljs-params">(VI a, ll n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        VI c=BM(a);<br>        c.erase(c.begin());<br>        rep(i,<span class="hljs-number">0</span>,SZ(c))c[i]=(mod-c[i])%mod;<br>        <span class="hljs-keyword">return</span> solve(n,c,VI(a.begin(),a.begin()+SZ(c)));<br>    &#125;<br>&#125;; <span class="hljs-comment">// linear_seq</span><br><br>ll f[<span class="hljs-number">205</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    ll n, m;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)f[i] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = m; i &lt;= <span class="hljs-number">200</span>; ++i)f[i] = (f[i - <span class="hljs-number">1</span>] + f[i - m]) % mod;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v;<br>    ++n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">200</span>; ++i)v.push_back(f[i]);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; linear_seq::gao(v, n - <span class="hljs-number">1</span>) % (ll)mod &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;       <br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="E-Decypher-the-String"><a href="#E-Decypher-the-String" class="headerlink" title="E. Decypher the String"></a>E. Decypher the String</h1><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>一道进制思想的交互题，，从来没有写过交互题（因为都是靠后的题，，所以以前从来没有看过，，，</p>
<p>这道题的题意是：给你一个字符串t，，t是s经过一定交换规则得到的字符串，然后你可以给交互器最多三次的三个长度一样的字符串，然后他会返回一个同样规则变换后的字符串，，然后让你根据这些信息来推断出具体的交换的规则，，然后输出原来的s，，，</p>
<p>首先看一个例子：长度不过9的s: <code>xyz</code>，，如果我们的交换规则是 <code>(1, 2), (2, 3)</code> ，也就是说变换后得到的t就是 <code>yzx</code> ，，</p>
<p>如果我们向交互器询问一个有序的字符串 <code>abc</code> ，，那么交互器就可以通过那个规则返回一个字符串 <code>bca</code> ，，而我们就可以通过这个返回的字符串和之前的那个有序的字符串得出交换的规则： 对于s <code>123</code> 变换后的t就是 <code>231</code> （意思是把第一个换成第2个，第二个换成第3个，第三个换成第1个），，，</p>
<p>这样就知道了 <code>s-&gt;t</code> 的变换规则，，而现在我们知道变换后的t，，那么就在反一次就可以得到 <code>t-&gt;s</code> 的变换规则，（也就是将t的第2个变成第一个，第3个变成第二个，第1个变成第三个，，正好和上面的变化相反，，），，也就是： <code>rev=[312]</code> ，， 这样 $s<em>i=t</em>{rev_i}$ ，，，这样基本的处理就弄明白了，，，<strong>相当于通过变换一个有序的下标序列，然后得知变换的方法</strong></p>
<p>但是如果字符串的长度大于9我们还可以用字母表示，但是当是1e4的范围时，，就不能用一个字符来表示字符串的每一个下标了，，这时就用到了进制的表示，因为每一次询问只能是小写字母，所以就用26进制来表示每一个下标的十进制，，因为三位的26进制 <code>aaa~zzz</code> 就可以表示 $26^3 &gt; 1e4$ ，，这样就可以用一个三位的字符串来表示每一个下标，，但是因为每次询问只能是长度为n的串，，所以就把这三位拆开组成三个串来询问，，因为每一个改变的下标在每次询问中都会改变的，，所以询问三次累加一下每一个下标对应的值就行了，，，最后就可以得到上面类似的变换规则，，然后反一下，，求出s就行了，，，</p>
<p><a href="https://blog.csdn.net/Mitsuha_/article/details/87794531">参考博客1</a></p>
<p><a href="https://blog.csdn.net/BUAA_Alchemist/article/details/87705287">参考博客2</a>那个小白鼠的问题不错2333，，，</p>
<h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>对了，<a href="https://codeforces.com/blog/entry/65365">评论区</a>里看到有人说这题也可以用中国剩余定理来解决 <em>(saeed_odak)</em> ，，，题目的tag里也有CRT，，，所以又看了看这种解法，，</p>
<p>这种解法的大致思想和上面那种3位26进制的思想差不多，都是用一个东西表示字符串的下标，然后询问三次，保证每一位都被询问过，然后组合起来，在反一下求出答案，，，不同的地方在于用什么表示下标，，，</p>
<p>下面的东西我是看评论区 <em>Varun_Shah</em> 这位大佬的回复大致懂得：</p>
<p>（感觉先看他的原话比较容易懂这个解法的思想，，，）</p>
<h4 id="先说一下为什么要用余数："><a href="#先说一下为什么要用余数：" class="headerlink" title="先说一下为什么要用余数："></a>先说一下为什么要用余数：</h4><p>假如给你两个数2，3，那么 $0 \% 2 = 0, 0 \% 3 = 0$，就可以看成一个对(pair): $(0, 0)$ ，，同理一共有 6 个这样的对（0~5对应的余数组成的对），<strong>而且每一个对都是不同的</strong> ，，也就是说我们可以用两个数字2，3的余数的对来表示6个数字，0~5，，$(0, 0), (1, 1), (0, 2), (1, 0), (0, 1), (1, 2)$</p>
<p>这个思想就有点像26进制每一个字符串表示不同的唯一的数字一样，，</p>
<p><strong>但是一定要保证被模数两两互质</strong> ，，</p>
<h4 id="再回到这道题上，，"><a href="#再回到这道题上，，" class="headerlink" title="再回到这道题上，，"></a>再回到这道题上，，</h4><p>当n=5时，两个字符串：</p>
<p>ababab ,循环节为2<br>abcabc ,循环节为3</p>
<p>在这第一个字符串中，a如果表示为0，b为1，，那么所有的a所处的位置就是所有模2为零的位置，，也就是0，2，4…同理b都是模2为1的位置，，</p>
<p>同理对于第二个字符串，a=0,b=1,c=2，，，</p>
<p>然后把这两个字符串发送给交互器，会得到两个改变后的字符串，，假如说对于第0个位置处的字符得到的是一个b,一个c，，我们把这两个用上面的数字来表示，第一个维度表示是第一个串中的位置，第二个维度就是第二个串中出现的位置，，也就是(1,2),,如果和上面那个对比一下，发现 (1,2)表示的是5，也就是说0位处的字符和第5位处的字符交换所得，，，</p>
<p>然后对于刚开始没有询问时，第0位处的可能交换位置是所有的位置，，</p>
<p>然后第一次询问得到b，表示可能的交换位置是 {1,3,5}，，</p>
<p>然后第二次询问得到c，可能的交换位置就只有了{5}，，，</p>
<p>也就是说，3次询问的交集就是最后这个位置和另一个位置交换的解，，</p>
<p>我们0~n-1枚举每一个字符三次询问的交集就可以得到最后 s-&gt;t 的规则，，然后就可以像上面那种解法一样处理了，，，</p>
<h4 id="为什么要选26，25，23"><a href="#为什么要选26，25，23" class="headerlink" title="为什么要选26，25，23"></a>为什么要选26，25，23</h4><p>上面那种解法选 $26^3$ 的原因是因为字符串的长度是1e4，，所以为了能够用一个字符串表示的数唯一的表示每一个位置，，所以选了长度为3的字符串，然后拆开询问3次合并这个操作，，</p>
<p>对于这个解法，，因为我们是用循环的字符串类似 <code>abcd.....xyzabc</code> , <code>abcd...xyab</code> 等等来表示每一位处的情况，，所以每一个字符串的循环节的长度就表示了这一维度所能表示的情况数，，为了能大于等于1e4，，选择三个循环节分别为 {26,25,23} 的字符串来逐一询问，，可能表示的情况数就是： $26<em>25</em>23 &gt; 1e4$ ，，，为什么不选24呢，，因为它和26不互质，，，就会出现一些相同的三元对，，这样就不能唯一表示每一个位置了，，</p>
<h4 id="中国剩余定理的作用"><a href="#中国剩余定理的作用" class="headerlink" title="中国剩余定理的作用"></a>中国剩余定理的作用</h4><p>貌似说了这么一大堆，和中国剩余定理没有关系啊，，，上面只是讨论了该怎么表示每一个位置的数字，，但是怎么把得到的三元对转化成十进制的下标数字呢，因为我们要根据这个来反推字符串啊，，</p>
<p>中国剩余定理就是干这个的，他可以求出一些形如 $x\%m_i=a_i$ 的解，，而我们求出的每一个位置处的三元组就可以看成三个 $a_i$ ，，而26，25，23 就可以看成是三个模数 &amp;m_i$ ，，，这样就可以求出每个位置处唯一的改变的下标值，，</p>
<h4 id="最后的操作步骤"><a href="#最后的操作步骤" class="headerlink" title="最后的操作步骤"></a>最后的操作步骤</h4><ul>
<li>构造三个循环节分别为 26, 25, 23 的字符串，作为后面三次询问的字符串</li>
<li>保存每一次询问后的改变的字符串</li>
<li>取三个询问后得到的字符串的值，组成三元组，利用CRT求出要改变的下表的值</li>
<li>求反规则，得出字符串s</li>
</ul>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><h3 id="3位26进制表示"><a href="#3位26进制表示" class="headerlink" title="3位26进制表示"></a>3位26进制表示</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e7</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">char</span> s[maxn], tmp[maxn];<br><span class="hljs-keyword">int</span> t[maxn], rev[maxn];     <span class="hljs-comment">//t[i] 表示s-&gt;t的变化规则，rev[i]表表示t-&gt;s的变化规则</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br>    tmp[n + <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">26</span> * <span class="hljs-number">26</span>; i *= <span class="hljs-number">26</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j)tmp[j] = j / i % <span class="hljs-number">26</span> + <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;? %s\n&quot;</span>, tmp + <span class="hljs-number">1</span>);<br>        fflush(<span class="hljs-built_in">stdout</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, tmp + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j)t[j] += (tmp[j] - <span class="hljs-string">&#x27;a&#x27;</span>) * i;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)rev[t[i]] = i; <span class="hljs-comment">//求出t-&gt;s的变化规则</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)tmp[i] = s[rev[i]];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;! &quot;</span>);<br>    <span class="hljs-built_in">puts</span>(tmp + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;       <br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="中国剩余定理表示"><a href="#中国剩余定理表示" class="headerlink" title="中国剩余定理表示"></a>中国剩余定理表示</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e7</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> n, rev[maxn], t[maxn];<br><span class="hljs-keyword">char</span> s[maxn], tmp[<span class="hljs-number">4</span>][maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mul_inv</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> b0 = b, t, q;<br>    <span class="hljs-keyword">int</span> x0 = <span class="hljs-number">0</span>, x1 = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(b == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(a &gt; <span class="hljs-number">1</span>)<br>    &#123;<br>        q = a / b;<br>        t = b; b = a % b; a = t;<br>        t = x0; x0 = x1 - q * x0; x1 = t;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(x1 &lt; <span class="hljs-number">0</span>) x1 += b0;<br>    <span class="hljs-keyword">return</span> x1;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">chinese_remainder</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; a, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; b, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> p, prod = <span class="hljs-number">1</span>, sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)prod *= b[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>    &#123;<br>        p = prod / b[i];<br>        sum += a[i] * mul_inv(p, b[i]) * p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum % prod;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);?</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">strlen</span>(s);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> m = <span class="hljs-number">26</span>, j = <span class="hljs-number">0</span>; m &gt;= <span class="hljs-number">23</span>; --m, j = <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(m == <span class="hljs-number">24</span>)<span class="hljs-keyword">continue</span>; <span class="hljs-comment">//24 is not coprime with others (26, 25)</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        &#123;<br>            <span class="hljs-comment">//abcd....xyzab</span><br>            <span class="hljs-comment">//abcd....xyabc</span><br>            <span class="hljs-comment">//abcd....wabcd</span><br>            tmp[<span class="hljs-number">26</span> - m][i] = (<span class="hljs-keyword">char</span>)(<span class="hljs-string">&#x27;a&#x27;</span> + j);<br>            ++j;<br>            j %= m;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">3</span>; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">2</span>)<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;? %s\n&quot;</span>, tmp[i]);<br>        fflush(<span class="hljs-built_in">stdout</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, tmp[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        t[i] = chinese_remainder(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&#123;tmp[<span class="hljs-number">0</span>][i] - <span class="hljs-string">&#x27;a&#x27;</span>, tmp[<span class="hljs-number">1</span>][i] - <span class="hljs-string">&#x27;a&#x27;</span>, tmp[<span class="hljs-number">3</span>][i] - <span class="hljs-string">&#x27;a&#x27;</span>&#125;, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&#123;<span class="hljs-number">26</span>, <span class="hljs-number">25</span>, <span class="hljs-number">23</span>&#125;, <span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)rev[t[i]] = i;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;! &quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, s[rev[i]]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;       <br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
        <tag>cf</tag>
      </tags>
  </entry>
  <entry>
    <title>anaconda3下配置python-3.5+tensorflow-gpu-1.9.0人脸识别项目环境</title>
    <url>/2019/03/29/anaconda3%E4%B8%8B%E9%85%8D%E7%BD%AEpython-3-5-tensorflow-gpu-1-9-0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>之前为了配置tensorflow-gpu的环境又是装cuda,又是装cudnn，还有tensoflow-gpu等等，，因为当时也是第一次搭建这个环境，所以完全是按照别人的搭建方法来一步一步的弄得，，后来我在给室友安装环境的时候，发现cuda,cudnn什么的完全不用自己安装，，，全部交给 <strong>anaconda3</strong> （好东西）就行了</p>
<span id="more"></span>
<h1 id="Anaconda3安装"><a href="#Anaconda3安装" class="headerlink" title="Anaconda3安装"></a>Anaconda3安装</h1><p>几乎最后所有的东西都是用这个完成的，，所以先去安装这玩意，，</p>
<p>直接官网下载就行了，，安装的时候记得选择 <strong>PATH</strong> 配置，，不然之后还得自己去弄环境变量，，</p>
<p>然后在 powershell 里检查一下确实配置成功就行了 <code>conda -V</code></p>
<h1 id="配置一个环境"><a href="#配置一个环境" class="headerlink" title="配置一个环境"></a>配置一个环境</h1><p>因为我的电脑是 win10x64+gtx1050，，所以选择安装 tensorflow-gpu-1.9.0版的，，gpu版的到时候训练模型的时候跑的很快，，（大概1s2-3张照片吧），如果用cpu跑的话有些慢，，1张照片可能要2s左右，，，</p>
<p>打开powsershell，，（千万不要换源，，千万不要换源，，千万不要换源，，</p>
<h2 id="创建一个环境"><a href="#创建一个环境" class="headerlink" title="创建一个环境"></a>创建一个环境</h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">conda create -n [name] python=<span class="hljs-number">3.5</span> tensorflow-gpu=<span class="hljs-number">1.9</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure>
<p>可能这一步会很慢，，但是建议不要去换源，，因为会出现下的东西不全，最后可能不能使用gpu版的tensorflow，，，</p>
<p>输完这段命令后，，等一会会出现一些要安装的东西列表，，这时主要看一下有没有python, <strong>tensorflow-gpu</strong>, <strong>cudnn</strong>, <strong>cudatoolkit</strong>,,,都有的话就y确定等就行了，，，</p>
<p>环境的名字随便起，，</p>
<h2 id="激活环境"><a href="#激活环境" class="headerlink" title="激活环境"></a>激活环境</h2><p>因为这时是powershell下，，，激活环境会不成功，，所以直接切换到cmd模式就行了，，输 <code>cmd</code>，，，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">activate [name]<br></code></pre></td></tr></table></figure>
<p>这时会发现前面多了一个 <code>([name])</code> 的东西，表示激活环境成功，，，</p>
<p>然后再测试一下python下能不能调用 tensorflow-gpu 版，，测试的方法可以参考我的上一篇博客里后面那一部分内容 ，，，</p>
<h2 id="运行简单的人脸识别的实例"><a href="#运行简单的人脸识别的实例" class="headerlink" title="运行简单的人脸识别的实例"></a>运行简单的人脸识别的实例</h2><p>前面的准备工作弄好之后就可以运行一个简单的实例看一下在这个环境下的运行情况，，，</p>
<p>下面的python程序是学长给我的，，然后我发现学长的程序是<a href="https://www.cnblogs.com/mu---mu/p/FaceRecognition-tensorflow.html">这个博主写的项目</a>，，其中也有我的一些改动，，下面会提到，，</p>
<p>下面的操作都是在刚刚创建的环境下操作的，，，否则的话会是anaconda3默认的base环境下，，，</p>
<h3 id="安装必备的库"><a href="#安装必备的库" class="headerlink" title="安装必备的库"></a>安装必备的库</h3><p>因为这个人脸识别的实现用到了 opencv, dlib等等，，所以先安装这些，，</p>
<h4 id="安装opencv"><a href="#安装opencv" class="headerlink" title="安装opencv"></a>安装opencv</h4><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">conda install opencv<br></code></pre></td></tr></table></figure>
<h4 id="安装dlib"><a href="#安装dlib" class="headerlink" title="安装dlib"></a>安装dlib</h4><p>这个玩意的安装有点坑，，有时貌似直接安装会安装不上，，会提示没有 <code>cmake</code> 这个包管理软件，，所以要先安装cmake，，建议是在anaconda3主程序（开始菜单里找 Anaconda Navigator）中找到你的那个环境，，然后再 uninstall 中找到 cmake 然后安装，，，</p>
<p>但是这样可能还是安装不了dlib，，无论是用conda还是pip安装，，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">conda install dlib<br>pip install dlib<br></code></pre></td></tr></table></figure>
<p>后来我找到一个解决方法，，去下载 <code>dlib****.whl</code> 然后本地安装，，</p>
<p><a href="https://pypi.org/project/dlib/19.1.0/#files">下载地址</a></p>
<p>再 DownloadFiles 中找到一个这个东西，，<br><code>dlib-19.1.0-cp35-cp35m-win_amd64.whl</code></p>
<p>然后放到你现在的路径下，，<code>pip install dlib-19.1.0-cp35-cp35m-win_amd64.whl</code></p>
<p>应该这样就可以安装上了dlib，，，当然你可以用其他的方法安装，，网上也有很多解决方法，，，也有可能直接用 pip 就能安装上（比如我的电脑就能，，室友的就会出现上面的错误，，得绕一个弯子）</p>
<h4 id="安装sklearn"><a href="#安装sklearn" class="headerlink" title="安装sklearn"></a>安装sklearn</h4><p>这个简单，，会在训练那一步用到</p>
<p><code>pip install sklearn</code></p>
<h3 id="运行实例"><a href="#运行实例" class="headerlink" title="运行实例"></a>运行实例</h3><p><a href="https://www.cnblogs.com/mu---mu/p/FaceRecognition-tensorflow.html">那个博主的项目分为4个部分，</a></p>
<ul>
<li>get_my_faces.py: 获取人脸并识别出来裁剪出来作为元数据</li>
<li>set_other_faces.py: 获取14000张人脸的照片作为训练所要用的数据</li>
<li>train_faces.py: 训练模型</li>
<li>is_my_face.py: 实时获取人脸，并判断是否和第一步所录入的人脸相匹配</li>
</ul>
<h4 id="get-my-faces"><a href="#get-my-faces" class="headerlink" title="get_my_faces"></a>get_my_faces</h4><p>这一步可以使用 dlib 的人脸识别裁剪，也可以使用opencv自带的来使用，，和室友试验了一下，发现opencv的虽然相对较快，但是识别不佳，而且同样大小的视频最后生成的照片个数也很少（也有可能是那里没写好），，</p>
<p>原博主的程序是拍一张照片然后识别一张裁剪一张，，这样很慢，，所以我把它改成了录一段视频，然后对于每一帧来识别裁剪，，这样贼快，，，（按q退出录制后自动进行后面的内容</p>
<p>注意复制代码后要适当的改一些参数，，比如说opencv中hear的参数等等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> dlib<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> shutil<br><br> <br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_video</span>():</span><br>    <span class="hljs-comment"># 录制视频</span><br>    shutil.rmtree(<span class="hljs-string">&#x27;./my_faces&#x27;</span>)<br>    <span class="hljs-string">&quot;&quot;&quot;使用opencv录像&quot;&quot;&quot;</span><br>    cap = cv2.VideoCapture(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 默认的摄像头</span><br>    <span class="hljs-comment"># 指定视频代码</span><br>    fourcc = cv2.VideoWriter_fourcc(*<span class="hljs-string">&quot;DIVX&quot;</span>)<br>    out = cv2.VideoWriter(<span class="hljs-string">&#x27;233.avi&#x27;</span>, fourcc, <span class="hljs-number">20.0</span>, (<span class="hljs-number">640</span>,<span class="hljs-number">480</span>))<br>    <span class="hljs-keyword">while</span>(cap.isOpened()):<br>        ret, frame = cap.read()<br>        <span class="hljs-keyword">if</span> ret:<br>            out.write(frame)<br>            <span class="hljs-comment">#</span><br>            cv2.imshow(<span class="hljs-string">&#x27;frame&#x27;</span>,frame)<br>            <span class="hljs-comment"># 等待按键q操作关闭摄像头</span><br>            <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xFF</span> == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">break</span><br>    cap.release()<br>    out.release()<br>    cv2.destroyAllWindows()<br><br><br><br><br><span class="hljs-comment"># 改变图片的亮度与对比度</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">relight</span>(<span class="hljs-params">img, light=<span class="hljs-number">1</span>, bias=<span class="hljs-number">0</span></span>):</span><br>    w = img.shape[<span class="hljs-number">1</span>]<br>    h = img.shape[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment">#image = []</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,w):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,h):<br>            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>                tmp = <span class="hljs-built_in">int</span>(img[j,i,c]*light + bias)<br>                <span class="hljs-keyword">if</span> tmp &gt; <span class="hljs-number">255</span>:<br>                    tmp = <span class="hljs-number">255</span><br>                <span class="hljs-keyword">elif</span> tmp &lt; <span class="hljs-number">0</span>:<br>                    tmp = <span class="hljs-number">0</span><br>                img[j,i,c] = tmp<br>    <span class="hljs-keyword">return</span> img<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hhh</span>():</span><br>    <span class="hljs-comment"># 利用dlib来实现</span><br>    output_dir = <span class="hljs-string">&#x27;./my_faces&#x27;</span><br>    size = <span class="hljs-number">64</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(output_dir):<br>        os.makedirs(output_dir)<br>    <span class="hljs-comment">#使用dlib自带的frontal_face_detector作为我们的特征提取器</span><br>    detector = dlib.get_frontal_face_detector()<br>    <span class="hljs-comment"># 打开摄像头 参数为输入流，可以为摄像头或视频文件</span><br>    <span class="hljs-comment">#camera = cv2.VideoCapture(0)</span><br>    camera = cv2.VideoCapture(<span class="hljs-string">&quot;233.avi&quot;</span>)<br><br>    index = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">if</span> (index &lt;= <span class="hljs-number">10000</span>):<br>            print(<span class="hljs-string">&#x27;Being processed picture %s&#x27;</span> % index)<br>            <span class="hljs-comment"># 从摄像头读取照片</span><br>            success, img = camera.read()<br>            <span class="hljs-comment"># 转为灰度图片</span><br>            gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br>            <span class="hljs-comment"># 使用detector进行人脸检测</span><br>            dets = detector(gray_img, <span class="hljs-number">1</span>)<br><br>            <span class="hljs-keyword">if</span> success == <span class="hljs-literal">False</span>:<br>                <span class="hljs-keyword">break</span><br><br>            <span class="hljs-keyword">for</span> i, d <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(dets):<br>                x1 = d.top() <span class="hljs-keyword">if</span> d.top() &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>                y1 = d.bottom() <span class="hljs-keyword">if</span> d.bottom() &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>                x2 = d.left() <span class="hljs-keyword">if</span> d.left() &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>                y2 = d.right() <span class="hljs-keyword">if</span> d.right() &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br><br>                face = img[x1:y1,x2:y2]<br>                <span class="hljs-comment"># 调整图片的对比度与亮度， 对比度与亮度值都取随机数，这样能增加样本的多样性</span><br>                face = relight(face, random.uniform(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.5</span>), random.randint(-<span class="hljs-number">50</span>, <span class="hljs-number">50</span>))<br><br>                face = cv2.resize(face, (size,size))<br><br>                cv2.imshow(<span class="hljs-string">&#x27;image&#x27;</span>, face)<br><br>                cv2.imwrite(output_dir+<span class="hljs-string">&#x27;/&#x27;</span>+<span class="hljs-built_in">str</span>(index)+<span class="hljs-string">&#x27;.jpg&#x27;</span>, face)<br><br>                index += <span class="hljs-number">1</span><br>            key = cv2.waitKey(<span class="hljs-number">30</span>) &amp; <span class="hljs-number">0xff</span><br>            <span class="hljs-keyword">if</span> key == <span class="hljs-number">27</span>:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            print(<span class="hljs-string">&#x27;Finished!&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hhhh</span>():</span><br>    <span class="hljs-comment"># 利用opencv来实现</span><br>    output_dir = <span class="hljs-string">&#x27;./my_faces&#x27;</span><br>    size = <span class="hljs-number">64</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(output_dir):<br>        os.makedirs(output_dir)                                 <br>    <span class="hljs-comment"># 获取分类器</span><br>    haar = cv2.CascadeClassifier(<span class="hljs-string">r&#x27;G:\DIP\Anaconda3\envs\test1\Library\etc\haarcascades\haarcascade_frontalface_default.xml&#x27;</span>)<br><br>    <span class="hljs-comment"># 打开摄像头 参数为输入流，可以为摄像头或视频文件</span><br>    camera = cv2.VideoCapture(<span class="hljs-string">&quot;233.avi&quot;</span>)<br><br>    n = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">10000</span>):<br>            print(<span class="hljs-string">&#x27;It`s processing %s image.&#x27;</span> % n)<br>            <span class="hljs-comment"># 读帧</span><br>            success, img = camera.read()<br><br>            gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br>            faces = haar.detectMultiScale(gray_img, <span class="hljs-number">1.3</span>, <span class="hljs-number">5</span>)<br>            <span class="hljs-keyword">for</span> f_x, f_y, f_w, f_h <span class="hljs-keyword">in</span> faces:<br>                face = img[f_y:f_y+f_h, f_x:f_x+f_w]<br>                face = cv2.resize(face, (<span class="hljs-number">64</span>,<span class="hljs-number">64</span>))<br>                <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                if n % 3 == 1:</span><br><span class="hljs-string">                    face = relight(face, 1, 50)</span><br><span class="hljs-string">                elif n % 3 == 2:</span><br><span class="hljs-string">                    face = relight(face, 0.5, 0)</span><br><span class="hljs-string">                &#x27;&#x27;&#x27;</span><br>                face = relight(face, random.uniform(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.5</span>), random.randint(-<span class="hljs-number">50</span>, <span class="hljs-number">50</span>))<br>                cv2.imshow(<span class="hljs-string">&#x27;img&#x27;</span>, face)<br>                cv2.imwrite(output_dir+<span class="hljs-string">&#x27;/&#x27;</span>+<span class="hljs-built_in">str</span>(n)+<span class="hljs-string">&#x27;.jpg&#x27;</span>, face)<br>                n+=<span class="hljs-number">1</span><br>            key = cv2.waitKey(<span class="hljs-number">30</span>) &amp; <span class="hljs-number">0xff</span><br>            <span class="hljs-keyword">if</span> key == <span class="hljs-number">27</span>:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    make_video()<br>    hhh()<br></code></pre></td></tr></table></figure>
<h4 id="set-other-faces"><a href="#set-other-faces" class="headerlink" title="set_other_faces"></a>set_other_faces</h4><p>这一步主要是识别裁剪那堆别人的照片</p>
<p><a href=":http://vis-www.cs.umass.edu/lfw/lfw.tgz">先去下那一堆照片</a>，，然后解压，重命名为 <code>input_img</code> （只是验证一下整个项目的效果的话可以删去一半的照片，，不然可能得跑个10分钟左右，，，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- codeing: utf-8 -*-</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> dlib<br><br>input_dir = <span class="hljs-string">&#x27;./input_img&#x27;</span><br>output_dir = <span class="hljs-string">&#x27;./other_faces&#x27;</span><br>size = <span class="hljs-number">64</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(output_dir):<br>    os.makedirs(output_dir)<br><br><span class="hljs-comment">#使用dlib自带的frontal_face_detector作为我们的特征提取器</span><br>detector = dlib.get_frontal_face_detector()<br><br>index = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> (path, dirnames, filenames) <span class="hljs-keyword">in</span> os.walk(input_dir):<br>    <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> filenames:<br>        <span class="hljs-keyword">if</span> filename.endswith(<span class="hljs-string">&#x27;.jpg&#x27;</span>):<br>            print(<span class="hljs-string">&#x27;Being processed picture %s&#x27;</span> % index)<br>            img_path = path+<span class="hljs-string">&#x27;/&#x27;</span>+filename<br>            <span class="hljs-comment"># 从文件读取图片</span><br>            img = cv2.imread(img_path)<br>            <span class="hljs-comment"># 转为灰度图片</span><br>            gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br>            <span class="hljs-comment"># 使用detector进行人脸检测 dets为返回的结果</span><br>            dets = detector(gray_img, <span class="hljs-number">1</span>)<br><br>            <span class="hljs-comment">#使用enumerate 函数遍历序列中的元素以及它们的下标</span><br>            <span class="hljs-comment">#下标i即为人脸序号</span><br>            <span class="hljs-comment">#left：人脸左边距离图片左边界的距离 ；right：人脸右边距离图片左边界的距离 </span><br>            <span class="hljs-comment">#top：人脸上边距离图片上边界的距离 ；bottom：人脸下边距离图片上边界的距离</span><br>            <span class="hljs-keyword">for</span> i, d <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(dets):<br>                x1 = d.top() <span class="hljs-keyword">if</span> d.top() &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>                y1 = d.bottom() <span class="hljs-keyword">if</span> d.bottom() &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>                x2 = d.left() <span class="hljs-keyword">if</span> d.left() &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>                y2 = d.right() <span class="hljs-keyword">if</span> d.right() &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>                <span class="hljs-comment"># img[y:y+h,x:x+w]</span><br>                face = img[x1:y1,x2:y2]<br>                <span class="hljs-comment"># 调整图片的尺寸</span><br>                face = cv2.resize(face, (size,size))<br>                cv2.imshow(<span class="hljs-string">&#x27;image&#x27;</span>,face)<br>                <span class="hljs-comment"># 保存图片</span><br>                cv2.imwrite(output_dir+<span class="hljs-string">&#x27;/&#x27;</span>+<span class="hljs-built_in">str</span>(index)+<span class="hljs-string">&#x27;.jpg&#x27;</span>, face)<br>                index += <span class="hljs-number">1</span><br><br>            key = cv2.waitKey(<span class="hljs-number">30</span>) &amp; <span class="hljs-number">0xff</span><br>            <span class="hljs-keyword">if</span> key == <span class="hljs-number">27</span>:<br>                sys.exit(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure>
<h4 id="train-faces"><a href="#train-faces" class="headerlink" title="train_faces"></a>train_faces</h4><p>这一步就是训练模型，，，刚开始会卡顿一会，，，之后就会跑起来，，，看一下是不是gpu跑，，cpu的话贼慢，，，gpu的话不到一分钟左右就可以了，，，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><br>my_faces_path = <span class="hljs-string">&#x27;./my_faces&#x27;</span><br>other_faces_path = <span class="hljs-string">&#x27;./other_faces&#x27;</span><br>size = <span class="hljs-number">64</span><br><br>imgs = []<br>labs = []<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getPaddingSize</span>(<span class="hljs-params">img</span>):</span><br>    h, w, _ = img.shape<br>    top, bottom, left, right = (<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br>    longest = <span class="hljs-built_in">max</span>(h, w)<br><br>    <span class="hljs-keyword">if</span> w &lt; longest:<br>        tmp = longest - w<br>        <span class="hljs-comment"># //表示整除符号</span><br>        left = tmp // <span class="hljs-number">2</span><br>        right = tmp - left<br>    <span class="hljs-keyword">elif</span> h &lt; longest:<br>        tmp = longest - h<br>        top = tmp // <span class="hljs-number">2</span><br>        bottom = tmp - top<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">return</span> top, bottom, left, right<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">readData</span>(<span class="hljs-params">path , h=size, w=size</span>):</span><br>    <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> os.listdir(path):<br>        <span class="hljs-keyword">if</span> filename.endswith(<span class="hljs-string">&#x27;.jpg&#x27;</span>):<br>            filename = path + <span class="hljs-string">&#x27;/&#x27;</span> + filename<br><br>            img = cv2.imread(filename)<br><br>            top,bottom,left,right = getPaddingSize(img)<br>            <span class="hljs-comment"># 将图片放大， 扩充图片边缘部分</span><br>            img = cv2.copyMakeBorder(img, top, bottom, left, right, cv2.BORDER_CONSTANT, value=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>])<br>            img = cv2.resize(img, (h, w))<br><br>            imgs.append(img)<br>            labs.append(path)<br><br>readData(my_faces_path)<br>readData(other_faces_path)<br><span class="hljs-comment"># 将图片数据与标签转换成数组</span><br>imgs = np.array(imgs)<br>labs = np.array([[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>] <span class="hljs-keyword">if</span> lab == my_faces_path <span class="hljs-keyword">else</span> [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> lab <span class="hljs-keyword">in</span> labs])<br><span class="hljs-comment"># 随机划分测试集与训练集</span><br>train_x,test_x,train_y,test_y = train_test_split(imgs, labs, test_size=<span class="hljs-number">0.05</span>, random_state=random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>))<br><span class="hljs-comment"># 参数：图片数据的总数，图片的高、宽、通道</span><br>train_x = train_x.reshape(train_x.shape[<span class="hljs-number">0</span>], size, size, <span class="hljs-number">3</span>)<br>test_x = test_x.reshape(test_x.shape[<span class="hljs-number">0</span>], size, size, <span class="hljs-number">3</span>)<br><span class="hljs-comment"># 将数据转换成小于1的数</span><br>train_x = train_x.astype(<span class="hljs-string">&#x27;float32&#x27;</span>)/<span class="hljs-number">255.0</span><br>test_x = test_x.astype(<span class="hljs-string">&#x27;float32&#x27;</span>)/<span class="hljs-number">255.0</span><br><br>print(<span class="hljs-string">&#x27;train size:%s, test size:%s&#x27;</span> % (<span class="hljs-built_in">len</span>(train_x), <span class="hljs-built_in">len</span>(test_x)))<br><span class="hljs-comment"># 图片块，每次取100张图片</span><br>batch_size = <span class="hljs-number">100</span><br>num_batch = <span class="hljs-built_in">len</span>(train_x) // batch_size<br><br>x = tf.placeholder(tf.float32, [<span class="hljs-literal">None</span>, size, size, <span class="hljs-number">3</span>])<br>y_ = tf.placeholder(tf.float32, [<span class="hljs-literal">None</span>, <span class="hljs-number">2</span>])<br><br>keep_prob_5 = tf.placeholder(tf.float32)<br>keep_prob_75 = tf.placeholder(tf.float32)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">weightVariable</span>(<span class="hljs-params">shape</span>):</span><br>    init = tf.random_normal(shape, stddev=<span class="hljs-number">0.01</span>)<br>    <span class="hljs-keyword">return</span> tf.Variable(init)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">biasVariable</span>(<span class="hljs-params">shape</span>):</span><br>    init = tf.random_normal(shape)<br>    <span class="hljs-keyword">return</span> tf.Variable(init)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">conv2d</span>(<span class="hljs-params">x, W</span>):</span><br>    <span class="hljs-keyword">return</span> tf.nn.conv2d(x, W, strides=[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>], padding=<span class="hljs-string">&#x27;SAME&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">maxPool</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>], strides=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>], padding=<span class="hljs-string">&#x27;SAME&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dropout</span>(<span class="hljs-params">x, keep</span>):</span><br>    <span class="hljs-keyword">return</span> tf.nn.dropout(x, keep)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cnnLayer</span>():</span><br>    <span class="hljs-comment"># 第一层</span><br>    W1 = weightVariable([<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">32</span>]) <span class="hljs-comment"># 卷积核大小(3,3)， 输入通道(3)， 输出通道(32)</span><br>    b1 = biasVariable([<span class="hljs-number">32</span>])<br>    <span class="hljs-comment"># 卷积</span><br>    conv1 = tf.nn.relu(conv2d(x, W1) + b1)<br>    <span class="hljs-comment"># 池化</span><br>    pool1 = maxPool(conv1)<br>    <span class="hljs-comment"># 减少过拟合，随机让某些权重不更新</span><br>    drop1 = dropout(pool1, keep_prob_5)<br><br>    <span class="hljs-comment"># 第二层</span><br>    W2 = weightVariable([<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">32</span>,<span class="hljs-number">64</span>])<br>    b2 = biasVariable([<span class="hljs-number">64</span>])<br>    conv2 = tf.nn.relu(conv2d(drop1, W2) + b2)<br>    pool2 = maxPool(conv2)<br>    drop2 = dropout(pool2, keep_prob_5)<br><br>    <span class="hljs-comment"># 第三层</span><br>    W3 = weightVariable([<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">64</span>,<span class="hljs-number">64</span>])<br>    b3 = biasVariable([<span class="hljs-number">64</span>])<br>    conv3 = tf.nn.relu(conv2d(drop2, W3) + b3)<br>    pool3 = maxPool(conv3)<br>    drop3 = dropout(pool3, keep_prob_5)<br><br>    <span class="hljs-comment"># 全连接层</span><br>    Wf = weightVariable([<span class="hljs-number">8</span>*<span class="hljs-number">8</span>*<span class="hljs-number">64</span>, <span class="hljs-number">512</span>])<br>    bf = biasVariable([<span class="hljs-number">512</span>])<br>    drop3_flat = tf.reshape(drop3, [-<span class="hljs-number">1</span>, <span class="hljs-number">8</span>*<span class="hljs-number">8</span>*<span class="hljs-number">64</span>])<br>    dense = tf.nn.relu(tf.matmul(drop3_flat, Wf) + bf)<br>    dropf = dropout(dense, keep_prob_75)<br><br>    <span class="hljs-comment"># 输出层</span><br>    Wout = weightVariable([<span class="hljs-number">512</span>,<span class="hljs-number">2</span>])<br>    bout = biasVariable([<span class="hljs-number">2</span>])<br>    <span class="hljs-comment">#out = tf.matmul(dropf, Wout) + bout</span><br>    out = tf.add(tf.matmul(dropf, Wout), bout)<br>    <span class="hljs-keyword">return</span> out<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cnnTrain</span>():</span><br>    out = cnnLayer()<br><br>    cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=out, labels=y_))<br><br>    train_step = tf.train.AdamOptimizer(<span class="hljs-number">0.01</span>).minimize(cross_entropy)<br>    <span class="hljs-comment"># 比较标签是否相等，再求的所有数的平均值，tf.cast(强制转换类型)</span><br>    accuracy = tf.reduce_mean(tf.cast(tf.equal(tf.argmax(out, <span class="hljs-number">1</span>), tf.argmax(y_, <span class="hljs-number">1</span>)), tf.float32))<br>    <span class="hljs-comment"># 将loss与accuracy保存以供tensorboard使用</span><br>    tf.summary.scalar(<span class="hljs-string">&#x27;loss&#x27;</span>, cross_entropy)<br>    tf.summary.scalar(<span class="hljs-string">&#x27;accuracy&#x27;</span>, accuracy)<br>    merged_summary_op = tf.summary.merge_all()<br>    <span class="hljs-comment"># 数据保存器的初始化</span><br>    saver = tf.train.Saver()<br><br>    <span class="hljs-keyword">with</span> tf.Session() <span class="hljs-keyword">as</span> sess:<br><br>        sess.run(tf.global_variables_initializer())<br><br>        summary_writer = tf.summary.FileWriter(<span class="hljs-string">&#x27;./tmp&#x27;</span>, graph=tf.get_default_graph())<br><br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>             <span class="hljs-comment"># 每次取128(batch_size)张图片</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_batch):<br>                batch_x = train_x[i*batch_size : (i+<span class="hljs-number">1</span>)*batch_size]<br>                batch_y = train_y[i*batch_size : (i+<span class="hljs-number">1</span>)*batch_size]<br>                <span class="hljs-comment"># 开始训练数据，同时训练三个变量，返回三个数据</span><br>                _,loss,summary = sess.run([train_step, cross_entropy, merged_summary_op],<br>                                           feed_dict=&#123;x:batch_x,y_:batch_y, keep_prob_5:<span class="hljs-number">0.5</span>,keep_prob_75:<span class="hljs-number">0.75</span>&#125;)<br>                summary_writer.add_summary(summary, n*num_batch+i)<br>                <span class="hljs-comment"># 打印损失</span><br>                print(n*num_batch+i, loss)<br><br>                <span class="hljs-keyword">if</span> (n*num_batch+i) % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>                    <span class="hljs-comment"># 获取测试数据的准确率</span><br>                    acc = accuracy.<span class="hljs-built_in">eval</span>(&#123;x:test_x, y_:test_y, keep_prob_5:<span class="hljs-number">1.0</span>, keep_prob_75:<span class="hljs-number">1.0</span>&#125;)<br>                    print(n*num_batch+i, acc)<br>                    <span class="hljs-comment"># 准确率大于0.98时保存并退出</span><br>                    <span class="hljs-keyword">if</span> acc &gt; <span class="hljs-number">0.98</span> <span class="hljs-keyword">and</span> n &gt; <span class="hljs-number">2</span>:<br>                        saver.save(sess, <span class="hljs-string">&#x27;./train_faces.model&#x27;</span>, global_step=n*num_batch+i)<br>                        sys.exit(<span class="hljs-number">0</span>)<br>        print(<span class="hljs-string">&#x27;accuracy less 0.98, exited!&#x27;</span>)<br><br>cnnTrain()<br></code></pre></td></tr></table></figure>
<h4 id="is-my-face"><a href="#is-my-face" class="headerlink" title="is_my_face"></a>is_my_face</h4><p>最后就是识别了，，，运行这个会出现两个窗口，一个是实时的拍摄窗口，一个是识别的窗口（会出现蓝色的框，，，</p>
<p>然后如果识别出来是之前录入的那个人的话，，cmd里会出现True的字样，，否则是False，，，如果没有识别出来有人脸在画面里的话会卡住不动，，，</p>
<p>大概之前录的时间是2-3分钟左右的准确度就很高了，，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> dlib<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><br>my_faces_path = <span class="hljs-string">&#x27;./my_faces&#x27;</span><br>other_faces_path = <span class="hljs-string">&#x27;./other_faces&#x27;</span><br>size = <span class="hljs-number">64</span><br><br>imgs = []<br>labs = []<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getPaddingSize</span>(<span class="hljs-params">img</span>):</span><br>    h, w, _ = img.shape<br>    top, bottom, left, right = (<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br>    longest = <span class="hljs-built_in">max</span>(h, w)<br><br>    <span class="hljs-keyword">if</span> w &lt; longest:<br>        tmp = longest - w<br>        <span class="hljs-comment"># //表示整除符号</span><br>        left = tmp // <span class="hljs-number">2</span><br>        right = tmp - left<br>    <span class="hljs-keyword">elif</span> h &lt; longest:<br>        tmp = longest - h<br>        top = tmp // <span class="hljs-number">2</span><br>        bottom = tmp - top<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">return</span> top, bottom, left, right<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">readData</span>(<span class="hljs-params">path , h=size, w=size</span>):</span><br>    <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> os.listdir(path):<br>        <span class="hljs-keyword">if</span> filename.endswith(<span class="hljs-string">&#x27;.jpg&#x27;</span>):<br>            filename = path + <span class="hljs-string">&#x27;/&#x27;</span> + filename<br><br>            img = cv2.imread(filename)<br><br>            top,bottom,left,right = getPaddingSize(img)<br>            <span class="hljs-comment"># 将图片放大， 扩充图片边缘部分</span><br>            img = cv2.copyMakeBorder(img, top, bottom, left, right, cv2.BORDER_CONSTANT, value=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>])<br>            img = cv2.resize(img, (h, w))<br><br>            imgs.append(img)<br>            labs.append(path)<br><br>readData(my_faces_path)<br>readData(other_faces_path)<br><span class="hljs-comment"># 将图片数据与标签转换成数组</span><br>imgs = np.array(imgs)<br>labs = np.array([[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>] <span class="hljs-keyword">if</span> lab == my_faces_path <span class="hljs-keyword">else</span> [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> lab <span class="hljs-keyword">in</span> labs])<br><span class="hljs-comment"># 随机划分测试集与训练集</span><br>train_x,test_x,train_y,test_y = train_test_split(imgs, labs, test_size=<span class="hljs-number">0.05</span>, random_state=random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>))<br><span class="hljs-comment"># 参数：图片数据的总数，图片的高、宽、通道</span><br>train_x = train_x.reshape(train_x.shape[<span class="hljs-number">0</span>], size, size, <span class="hljs-number">3</span>)<br>test_x = test_x.reshape(test_x.shape[<span class="hljs-number">0</span>], size, size, <span class="hljs-number">3</span>)<br><span class="hljs-comment"># 将数据转换成小于1的数</span><br>train_x = train_x.astype(<span class="hljs-string">&#x27;float32&#x27;</span>)/<span class="hljs-number">255.0</span><br>test_x = test_x.astype(<span class="hljs-string">&#x27;float32&#x27;</span>)/<span class="hljs-number">255.0</span><br><br>print(<span class="hljs-string">&#x27;train size:%s, test size:%s&#x27;</span> % (<span class="hljs-built_in">len</span>(train_x), <span class="hljs-built_in">len</span>(test_x)))<br><span class="hljs-comment"># 图片块，每次取128张图片</span><br>batch_size = <span class="hljs-number">128</span><br>num_batch = <span class="hljs-built_in">len</span>(train_x) // <span class="hljs-number">128</span><br><br>x = tf.placeholder(tf.float32, [<span class="hljs-literal">None</span>, size, size, <span class="hljs-number">3</span>])<br>y_ = tf.placeholder(tf.float32, [<span class="hljs-literal">None</span>, <span class="hljs-number">2</span>])<br><br>keep_prob_5 = tf.placeholder(tf.float32)<br>keep_prob_75 = tf.placeholder(tf.float32)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">weightVariable</span>(<span class="hljs-params">shape</span>):</span><br>    init = tf.random_normal(shape, stddev=<span class="hljs-number">0.01</span>)<br>    <span class="hljs-keyword">return</span> tf.Variable(init)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">biasVariable</span>(<span class="hljs-params">shape</span>):</span><br>    init = tf.random_normal(shape)<br>    <span class="hljs-keyword">return</span> tf.Variable(init)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">conv2d</span>(<span class="hljs-params">x, W</span>):</span><br>    <span class="hljs-keyword">return</span> tf.nn.conv2d(x, W, strides=[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>], padding=<span class="hljs-string">&#x27;SAME&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">maxPool</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>], strides=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>], padding=<span class="hljs-string">&#x27;SAME&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dropout</span>(<span class="hljs-params">x, keep</span>):</span><br>    <span class="hljs-keyword">return</span> tf.nn.dropout(x, keep)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cnnLayer</span>():</span><br>    <span class="hljs-comment"># 第一层</span><br>    W1 = weightVariable([<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">32</span>]) <span class="hljs-comment"># 卷积核大小(3,3)， 输入通道(3)， 输出通道(32)</span><br>    b1 = biasVariable([<span class="hljs-number">32</span>])<br>    <span class="hljs-comment"># 卷积</span><br>    conv1 = tf.nn.relu(conv2d(x, W1) + b1)<br>    <span class="hljs-comment"># 池化</span><br>    pool1 = maxPool(conv1)<br>    <span class="hljs-comment"># 减少过拟合，随机让某些权重不更新</span><br>    drop1 = dropout(pool1, keep_prob_5)<br><br>    <span class="hljs-comment"># 第二层</span><br>    W2 = weightVariable([<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">32</span>,<span class="hljs-number">64</span>])<br>    b2 = biasVariable([<span class="hljs-number">64</span>])<br>    conv2 = tf.nn.relu(conv2d(drop1, W2) + b2)<br>    pool2 = maxPool(conv2)<br>    drop2 = dropout(pool2, keep_prob_5)<br><br>    <span class="hljs-comment"># 第三层</span><br>    W3 = weightVariable([<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">64</span>,<span class="hljs-number">64</span>])<br>    b3 = biasVariable([<span class="hljs-number">64</span>])<br>    conv3 = tf.nn.relu(conv2d(drop2, W3) + b3)<br>    pool3 = maxPool(conv3)<br>    drop3 = dropout(pool3, keep_prob_5)<br><br>    <span class="hljs-comment"># 全连接层</span><br>    Wf = weightVariable([<span class="hljs-number">8</span>*<span class="hljs-number">16</span>*<span class="hljs-number">32</span>, <span class="hljs-number">512</span>])<br>    bf = biasVariable([<span class="hljs-number">512</span>])<br>    drop3_flat = tf.reshape(drop3, [-<span class="hljs-number">1</span>, <span class="hljs-number">8</span>*<span class="hljs-number">16</span>*<span class="hljs-number">32</span>])<br>    dense = tf.nn.relu(tf.matmul(drop3_flat, Wf) + bf)<br>    dropf = dropout(dense, keep_prob_75)<br><br>    <span class="hljs-comment"># 输出层</span><br>    Wout = weightVariable([<span class="hljs-number">512</span>,<span class="hljs-number">2</span>])<br>    bout = biasVariable([<span class="hljs-number">2</span>])<br>    out = tf.add(tf.matmul(dropf, Wout), bout)<br>    <span class="hljs-keyword">return</span> out<br><br>output = cnnLayer()  <br>predict = tf.argmax(output, <span class="hljs-number">1</span>)  <br>   <br>saver = tf.train.Saver()  <br>sess = tf.Session()  <br>saver.restore(sess, tf.train.latest_checkpoint(<span class="hljs-string">&#x27;.&#x27;</span>))   <br>   <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_my_face</span>(<span class="hljs-params">image</span>):</span>  <br>    res = sess.run(predict, feed_dict=&#123;x: [image/<span class="hljs-number">255.0</span>], keep_prob_5:<span class="hljs-number">1.0</span>, keep_prob_75: <span class="hljs-number">1.0</span>&#125;)  <br>    <span class="hljs-keyword">if</span> res[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span>:  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>  <br>    <span class="hljs-keyword">else</span>:  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>  <br><br><span class="hljs-comment">#使用dlib自带的frontal_face_detector作为我们的特征提取器</span><br>detector = dlib.get_frontal_face_detector()<br><br>cam = cv2.VideoCapture(<span class="hljs-number">0</span>)  <br>   <br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:  <br>    time.sleep(<span class="hljs-number">0.2</span>) <br>    _, img = cam.read()  <br>    gray_image = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br>    dets = detector(gray_image, <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">len</span>(dets):<br>        <span class="hljs-comment">#print(&#x27;Can`t get face.&#x27;)</span><br>        cv2.imshow(<span class="hljs-string">&#x27;img&#x27;</span>, img)<br>        key = cv2.waitKey(<span class="hljs-number">30</span>) &amp; <span class="hljs-number">0xff</span>  <br>        <span class="hljs-keyword">if</span> key == <span class="hljs-number">27</span>:<br>            sys.exit(<span class="hljs-number">0</span>)<br>            <br>    <span class="hljs-keyword">for</span> i, d <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(dets):<br>        x1 = d.top() <span class="hljs-keyword">if</span> d.top() &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>        y1 = d.bottom() <span class="hljs-keyword">if</span> d.bottom() &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>        x2 = d.left() <span class="hljs-keyword">if</span> d.left() &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>        y2 = d.right() <span class="hljs-keyword">if</span> d.right() &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>        face = img[x1:y1,x2:y2]<br>        <span class="hljs-comment"># 调整图片的尺寸</span><br>        face = cv2.resize(face, (size,size))<br>        print(<span class="hljs-string">&#x27;Is this my face? %s&#x27;</span> % is_my_face(face))<br><br>        cv2.rectangle(img, (x2,x1),(y2,y1), (<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>),<span class="hljs-number">3</span>)<br>        cv2.imshow(<span class="hljs-string">&#x27;image&#x27;</span>,img)<br>        key = cv2.waitKey(<span class="hljs-number">30</span>) &amp; <span class="hljs-number">0xff</span><br>        <span class="hljs-keyword">if</span> key == <span class="hljs-number">27</span>:<br>            sys.exit(<span class="hljs-number">0</span>)<br>  <br>sess.close() <br></code></pre></td></tr></table></figure>
<h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>后面就没了，，建议弄过一个遍之后，代码还是自己再重写一别吧，，这样能理解里面的细节的内容，，，</p>
<p>装了4、5遍多的环境感觉每一次都有收获，，虽然每次都会遇到一些问题，，但是都也能靠自己来解决，，，hhh，，，</p>
<p>(end)</p>
]]></content>
      <categories>
        <category>人脸识别</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
        <tag>环境配置</tag>
        <tag>anaconda3</tag>
      </tags>
  </entry>
  <entry>
    <title>cf-786B区间图最短路</title>
    <url>/2019/09/29/cf-786B%E5%8C%BA%E9%97%B4%E5%9B%BE%E6%9C%80%E7%9F%AD%E8%B7%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>偶然看到的这个东西，可以说是第一次见到图论+数据结构的题了，，<a href="https://codeforces.com/problemset/problem/786/B">这题</a>代码很简单，细节处理一下就没啥了，，，主要是一步一步的思路的推导很不错，，</p>
<span id="more"></span>
<h1 id="cf-786-Legacy"><a href="#cf-786-Legacy" class="headerlink" title="cf-786 Legacy"></a><a href="https://codeforces.com/problemset/problem/786/B">cf-786 Legacy</a></h1><p><a href="https://codeforces.com/problemset/problem/786/B">cf-786 Legacy</a></p>
<p>以前做过的图论题就只是图论题，从来没想过和数据结构-线段树扯上关系，，</p>
<p>这题也算是一个经典的例题了吧，，应该就是那种知道的做过的就会做出来的类型，，</p>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>题意很简单，就是一个简单的图，，给出一些建图的方式，，但是，和以往不同的是，以前的边的关系给的都是点与点间的关系，，这种题给的方式是区间，，比如说 <code>u-&gt;[l, r]</code> 表示的就是u和这个区间的所有点间都有一条边，，因为一个点也可以看成一个只有自己的区间，，所以我们可以将这类关系统一看成 $[l_1, r_1]-&gt;[l_2, r_2]$ ，，</p>
<p>容易想到的方法就是直接两个 for 上去，，建出每一条边，，数据很小的时候没问题，，，但是当n 很大时，，显然建图的复杂度可能就是 $O(n^2m)$ 这样不管求最短路就炸了，，，</p>
<p>一种优化的方法是我们在这两个区间之间加一个点，，这样前面的区间（成为出区间）和后面的一个区间（称为入区间）都和这个点 $p$ 连，，也就是 $\forall u \in [l_1, r_1]: addedge(u, p, w)$ 而 $\forall v \in [l_2, r_2]: addedge(p, v, 0)$ （ $[l_1, r_1]-_u&gt;p-_0&gt;[l_2, r_2]$ ） 这样子就可以降一维的建图，，复杂度就是 $O(2nm)$ ，，但是这样还是很高，，</p>
<p>这时的建图是线性的建图方式，，线性+区间==线段树？？！！，，这是我做这道题学习到的最有价值的一个处理方式，，在降了一维之后，虽然是线性的建图，，但是点还是很多，，而线段树恰好可以用很少的子区间来表示原来的区间，，，如果将线段树中的每一个表示的区间看成一个点，，那么我们就可以用很少的点来建图，，，这样就可以将上面的n次的建图降下去，，，</p>
<p>那么这时的问题就变成了该如何利用线段树来处理，，</p>
<p>我们需要两棵线段树，，一棵看成 <strong>入树</strong> 另一棵看成 <strong>出树</strong> ，，</p>
<p><img src="https://img-blog.csdn.net/20170723135435553" alt=""></p>
<p>首先我们的目的是用少量的区间来表示原来的很大的区间，以达到用很少的点来表示原来的所有点，，优化的问题用线段树解决了，，但是，如何正确的表示原来的所有点呢，，，</p>
<p>线段树的每一个节点表示一个区间，，这个节点可以表示他下面的所有点，，也就是说，，我们可以从上向下的看，，定义选择了一个节点，，就选择了下面的所有点，，，按照这个思想，入树中的一个节点要向其儿子连一条指向儿子的有向边，，也就是说，，入树中所有的边指向下，，用 <code>down</code> 表示</p>
<p>同理，，对于出树，，我们要保证在一个节点要能表示所有的点，，于是就是一个节点下的所有节点都要指向它，，，这样看这棵树就是一个向上的树，，用 <code>up</code> 表示，，</p>
<p>这个样子的：</p>
<p><img src="https://img-blog.csdn.net/20170723140149120" alt=""></p>
<p>这样最后在这样初始图加上题目给的一些条件的边跑一边最短路就可以了，，</p>
<p>加上题目的边后的图大致是这样的：</p>
<p><img src="https://img-blog.csdn.net/20170723141642088" alt=""></p>
<p>实际上，，这里的线段树的作用只是一个建树和查询其子区间的作用，，这个思想有点像是分块，，，只要能找到一个合理的区间分块，，用一些合理的、数量少的区间表示原来的区间，，就能达到减少点数的作用，，，，而线段树恰好是一个熟悉的、好操作的区间划分模型，，所以很多人都对于 区间图的最短路问题都是套一个线段树的板子，，</p>
<p>回到这道题，，题目的加边方式只有 点对区间 和 区间对点 两种，，所以我们可以先预留出那n个点，，可以想象成放在这两棵树之间的一排点（不用再将两棵树的叶子节点相连，，），，，</p>
<p>然后再处理出出树、入树的边后，，对于 <code>u-&gt;[l, r]</code> 和 <code>u-&gt;v</code> 的边，，从点 <code>u</code> 向入树的符合条件的节点连边即可，，因为之前说的入树保证了每一个节点是可以到其下面的叶子节点的，，所以我们这样连边就相当于是点 <code>u</code> 向区间的每一个点连边，，，</p>
<p>同理对于 <code>[l, r]-&gt;u</code> 这样的边，，我们将入树的对应的节点和点 <code>u</code> 相连，，这样就保证入树中这个区间下的叶子节点可以通过这些区间到点 <code>u</code> ，，这样也满足了题意的同时减少的连边的复杂度，，，</p>
<p>最后跑最短路，，前n个点的 <code>dis[i]</code> 即为源图的那些点的最短路，，，</p>
<p>于是我们通过加点减边的方式减小了建图的时间复杂度，，</p>
<p>关于处理出树、入树的操作，，也就是线段树的建树过程，，其实线段树并不维护任何信息，，我们只是用它自己每个节点表示一个区间这个自身的性质，，所以为了建图，，，我们需要对每一个节点连一些边，，，也就是用一个 <code>id[rt]</code> 标记一下每一个节点的标号即可，，，</p>
<h2 id="最后的代码："><a href="#最后的代码：" class="headerlink" title="最后的代码："></a>最后的代码：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Dijkstra</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">    &#123;</span><br>        <span class="hljs-keyword">int</span> to, nxt; ll w;<br>    &#125;edge[maxm];<br>    <span class="hljs-keyword">int</span> tot, head[maxm];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        tot = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll w)</span></span><br><span class="hljs-function">    </span>&#123;<br>        edge[tot].to = v;<br>        edge[tot].w = w;<br>        edge[tot].nxt = head[u];<br>        head[u] = tot++;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">    &#123;</span><br>        <span class="hljs-keyword">int</span> v; ll w;<br>        node()&#123;&#125;<br>        node(<span class="hljs-keyword">int</span> _v, ll _w):v(_v), w(_w)&#123;&#125;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;r)<span class="hljs-keyword">const</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> w &gt; r.w;<br>        &#125;        <br>    &#125;;<br>    <span class="hljs-keyword">bool</span> vis[maxn];<br>    ll dis[maxn];<br>    <span class="hljs-built_in">priority_queue</span>&lt;node&gt; pq;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>        <span class="hljs-built_in">memset</span>(dis, inf, <span class="hljs-keyword">sizeof</span> dis);<br>        <span class="hljs-keyword">while</span>(!pq.empty())pq.pop();<br>        pq.push(node(s, <span class="hljs-number">0</span>));<br>        dis[s] = <span class="hljs-number">0</span>;<br>        node t;<br>        <span class="hljs-keyword">int</span> u;<br>        <span class="hljs-keyword">while</span>(!pq.empty())<br>        &#123;<br>            t = pq.top(); pq.pop();<br>            u = t.v;<br>            <span class="hljs-keyword">if</span>(vis[u])<span class="hljs-keyword">continue</span>;<br>            vis[u] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>            &#123;<br>                <span class="hljs-keyword">int</span> v = edge[i].to;<br>                ll w = edge[i].w;<br>                <span class="hljs-keyword">if</span>(dis[v] &gt; t.w + w)<br>                &#123;<br>                    dis[v] = t.w + w;<br>                    pq.push(node(v, dis[v]));<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cout</span> &lt;&lt; (dis[i] == linf ? <span class="hljs-number">-1</span> : dis[i]) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;dijkstra;<br><br><span class="hljs-keyword">int</span> cnt;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">segmentTree</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> id[maxn];           <span class="hljs-comment">// 节点标记数组，，记录线段树中每一个节点的标号，，从 n+1 开始，，前面的n个是原来的点</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">bool</span> flag)</span>     <span class="hljs-comment">// 建树（建图，，flag == false 表示是一棵入树，边向下，节点指向儿子</span></span><br><span class="hljs-function">    </span>&#123;<br>        id[rt] = ++cnt;<br>        <span class="hljs-keyword">if</span>(l == r)<br>        &#123;<br>            <span class="hljs-keyword">int</span> u = id[rt];<br>            <span class="hljs-keyword">int</span> v = l;<br>            <span class="hljs-keyword">if</span>(flag)swap(u, v);<br>            dijkstra.addedge(u, v, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        build(rt &lt;&lt; <span class="hljs-number">1</span>, l, mid, flag);<br>        build(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, flag);<br>        <span class="hljs-comment">// pushup</span><br>        <span class="hljs-keyword">int</span> u = id[rt];<br>        <span class="hljs-keyword">int</span> v = id[rt &lt;&lt; <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span>(flag)swap(u, v);<br>        dijkstra.addedge(u, v, <span class="hljs-number">0</span>);<br>        u = id[rt];<br>        v = id[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span>(flag)swap(u, v);<br>        dijkstra.addedge(u, v, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> U, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R, ll w, <span class="hljs-keyword">bool</span> flag)</span>    <span class="hljs-comment">// flag == false 表示 u-&gt;[l, r] ，，</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(l &gt; R || L &gt; r)<span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)<br>        &#123;<br>            <span class="hljs-keyword">int</span> u = U;<br>            <span class="hljs-keyword">int</span> v = id[rt];<br>            <span class="hljs-keyword">if</span>(flag)swap(u, v);<br>            dijkstra.addedge(u, v, w);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(L &lt;= mid)addedge(rt &lt;&lt; <span class="hljs-number">1</span>, l, mid, U, L, R, w, flag);<br>        <span class="hljs-keyword">if</span>(R &gt;  mid)addedge(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, U, L, R, w, flag);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;down, up;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">int</span> n, q, s;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; q &gt;&gt; s;<br>    cnt = n;                <span class="hljs-comment">// 出树、入树等的辅助点的标记从n+1开始</span><br>    dijkstra.init();<br>    down.build(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, <span class="hljs-literal">false</span>);<br>    up.build(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, <span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">int</span> t, u, v, w, l, r;<br>    <span class="hljs-keyword">while</span>(q--)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; t;<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>            l = r = v;<br>            t = <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <br>            <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; l &gt;&gt; r &gt;&gt; w;<br>        <br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">2</span>)<br>            down.addedge(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, u, l, r, w, <span class="hljs-literal">false</span>);   <span class="hljs-comment">// u -&gt; [l, r]</span><br>        <span class="hljs-keyword">else</span><br>            up.addedge(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, u, l, r, w, <span class="hljs-literal">true</span>);      <span class="hljs-comment">// [l, r] -&gt; u</span><br>    &#125;<br>    dijkstra.dijkstra(s, cnt);<br>    dijkstra.print(n);<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/linkfqy/article/details/75907444">以上的一些内容和图片参考这个dalao的博客</a></p>
<p><a href="https://github.com/4thcalabash/ACM-Code-Library/blob/master/Graph/Dijkstra_interval_graph.cpp">最后的AC代码的大致思路是参考葫芦爷大佬的板子</a></p>
<h1 id="hdu-5361In-Touch"><a href="#hdu-5361In-Touch" class="headerlink" title="hdu-5361In Touch"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5361">hdu-5361In Touch</a></h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5361">hdu-5361In Touch</a></p>
<p>差不多的题，，貌似解法有很多，，如果用这种方法来解的话，，只用一棵入树就行了，，，还有可能得改一改写的姿势，，，<del>（重载w爆int一晚上没看出来的怕不是只有我一个了吧，，，emmmm</del></p>
<h2 id="AC-1"><a href="#AC-1" class="headerlink" title="AC_1"></a>AC_1</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;iostream&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;cstring&gt;</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span>   <span class="hljs-comment">//快读</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))<br>        ch=getchar();<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))<br>        ans=(ans&lt;&lt;<span class="hljs-number">3</span>)+(ans&lt;&lt;<span class="hljs-number">1</span>)+(ch^<span class="hljs-number">48</span>),ch=getchar();<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt;<br>    ll w;<br>&#125;edge[maxm];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">3</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)head[i] = <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ADDEDGE</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].w = w;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v; <br>    ll w;<br>    node()&#123;&#125;;<br>    node(<span class="hljs-keyword">int</span> _v, ll _w): v(_v), w(_w)&#123;&#125;;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;r)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> w &gt; r.w;<br>    &#125;<br>&#125;tmp;<br><span class="hljs-keyword">bool</span> vis[maxn &lt;&lt; <span class="hljs-number">3</span>];<br>ll dis[maxn &lt;&lt; <span class="hljs-number">3</span>];<br><span class="hljs-built_in">priority_queue</span>&lt;node&gt; pq;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dis[i] = linf;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)vis[i] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">while</span>(!pq.empty())pq.pop();<br>    pq.push(node(s, <span class="hljs-number">0</span>));<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!pq.empty())<br>    &#123;<br>        tmp = pq.top(); pq.pop();<br>        <span class="hljs-keyword">if</span>(vis[tmp.v])<span class="hljs-keyword">continue</span>;<br>        vis[tmp.v] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[tmp.v]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(dis[v] &gt; dis[tmp.v] + edge[i].w)<br>            &#123;<br>                dis[v] = dis[tmp.v] + edge[i].w;<br>                pq.push(node(v, dis[v]));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">int</span> cnt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l == r)<br>    &#123;<br>        cnt = max(cnt, rt + n);<br>        ADDEDGE(rt + n, l, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    build(rt &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    build(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    ADDEDGE(rt + n, (rt &lt;&lt; <span class="hljs-number">1</span>) + n, <span class="hljs-number">0</span>);<br>    ADDEDGE(rt + n, (rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>) + n, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">int</span> L, R, W, U;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(L &gt; r || l &gt; R)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)<br>    &#123;<br>        ADDEDGE(U, rt + n, W);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(L &lt;= mid)addedge(rt &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    <span class="hljs-keyword">if</span>(R &gt;  mid)addedge(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>&#125;<br><span class="hljs-keyword">int</span> l[maxn], r[maxn], c[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br><br>    <span class="hljs-comment">// int t; cin &gt;&gt; t;</span><br>    <span class="hljs-comment">// int t; scanf(&quot;%d&quot;, &amp;t);</span><br>    <span class="hljs-keyword">int</span> t; t = read();<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-comment">// cin &gt;&gt; n;</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)l[i] = read();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)r[i] = read();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)c[i] = read();<br>        init(n &lt;&lt; <span class="hljs-number">3</span>);<br>        cnt = <span class="hljs-number">0</span>;<br>        build(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            U = i;<br>            L = i + l[i]; R = i + r[i]; W = c[i];<br>            addedge(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>            L = i - r[i]; R = i - l[i];<br>            addedge(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>        &#125;<br>        dijkstra(<span class="hljs-number">1</span>, cnt);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %lld&quot;</span>, (dis[i] == linf ? <span class="hljs-number">-1</span> : dis[i]));<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="AC-2"><a href="#AC-2" class="headerlink" title="AC_2"></a>AC_2</h2><p><del>（不加快读也没事，，，就是不能memset，，，卡memset好恶心，，，，</del></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span>   <span class="hljs-comment">//快读</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))<br>        ch=getchar();<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))<br>        ans=(ans&lt;&lt;<span class="hljs-number">3</span>)+(ans&lt;&lt;<span class="hljs-number">1</span>)+(ch^<span class="hljs-number">48</span>),ch=getchar();<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Dijkstra</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">    &#123;</span><br>        <span class="hljs-keyword">int</span> to, nxt;<br>        ll w;<br>    &#125;edge[maxm];<br>    <span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">3</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        tot = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// memset(head, -1, sizeof head);</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)head[i] = <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll w)</span></span><br><span class="hljs-function">    </span>&#123;<br>        edge[tot].to = v;<br>        edge[tot].w = w;<br>        edge[tot].nxt = head[u];<br>        head[u] = tot++;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">    &#123;</span><br>        <span class="hljs-keyword">int</span> v; ll w;<br>        node()&#123;&#125;<br>        node(<span class="hljs-keyword">int</span> _v, ll _w):v(_v), w(_w)&#123;&#125;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;r)<span class="hljs-keyword">const</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> w &gt; r.w;<br>        &#125;<br>    &#125;;<br>    <span class="hljs-keyword">bool</span> vis[maxn &lt;&lt; <span class="hljs-number">3</span>];<br>    ll dis[maxn &lt;&lt; <span class="hljs-number">3</span>];<br>    <span class="hljs-built_in">priority_queue</span>&lt;node&gt; pq;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// memset(vis, false, sizeof vis);</span><br>        <span class="hljs-comment">// memset(dis, inf, sizeof dis);</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)vis[i] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dis[i] = linf;<br>        <span class="hljs-keyword">while</span>(!pq.empty())pq.pop();<br>        pq.push(node(s, <span class="hljs-number">0</span>));<br>        dis[s] = <span class="hljs-number">0</span>;<br>        node t; <span class="hljs-keyword">int</span> u;<br>        <span class="hljs-keyword">while</span>(!pq.empty())<br>        &#123;<br>            t = pq.top(); pq.pop();<br>            u = t.v;<br>            <span class="hljs-keyword">if</span>(vis[u])<span class="hljs-keyword">continue</span>;<br>            vis[u] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>            &#123;<br>                <span class="hljs-keyword">int</span> v = edge[i].to;<br>                ll w = edge[i].w;<br>                <span class="hljs-keyword">if</span>(dis[v] &gt; t.w + w)<br>                &#123;<br>                    dis[v] = t.w + w;<br>                    pq.push(node(v, dis[v]));<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %lld&quot;</span>, (dis[i] == linf ? <span class="hljs-number">-1</span> : dis[i]));<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;dijkstra;<br><br><span class="hljs-keyword">int</span> cnt;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">segmentTree</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> id[maxn &lt;&lt; <span class="hljs-number">3</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">bool</span> flag)</span></span><br><span class="hljs-function">    </span>&#123;<br>        id[rt] = ++cnt;<br>        <span class="hljs-keyword">if</span>(l == r)<br>        &#123;<br>            <span class="hljs-keyword">int</span> u = id[rt];<br>            <span class="hljs-keyword">int</span> v = l; <br>            <span class="hljs-keyword">if</span>(flag)swap(u, v);<br>            dijkstra.addedge(u, v, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        build(rt &lt;&lt; <span class="hljs-number">1</span>, l, mid, flag);<br>        build(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, flag);<br>        <span class="hljs-keyword">int</span> u = id[rt];<br>        <span class="hljs-keyword">int</span> v = id[rt &lt;&lt; <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span>(flag)swap(u, v);<br>        dijkstra.addedge(u, v, <span class="hljs-number">0</span>);<br>        u = id[rt];<br>        v = id[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span>(flag)swap(u, v);<br>        dijkstra.addedge(u, v, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> U, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R, ll w, <span class="hljs-keyword">bool</span> flag)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(L &gt; r || R &lt; l)<span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)<br>        &#123;<br>            <span class="hljs-keyword">int</span> u = U;<br>            <span class="hljs-keyword">int</span> v = id[rt];<br>            <span class="hljs-keyword">if</span>(flag)swap(u, v);<br>            dijkstra.addedge(u, v, w);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(L &lt;= mid)addedge(rt &lt;&lt; <span class="hljs-number">1</span>, l, mid, U, L, R, w, flag);<br>        <span class="hljs-keyword">if</span>(R &gt;  mid)addedge(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, U, L, R, w, flag);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;down; <span class="hljs-comment">//, up;</span><br><br><span class="hljs-keyword">int</span> l[maxn], r[maxn], c[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br><br>    <span class="hljs-keyword">int</span> t; t = read();<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> n; n = read();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)l[i] = read();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)r[i] = read();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)c[i] = read();<br>        cnt = n;<br>        dijkstra.init(n &lt;&lt; <span class="hljs-number">3</span>);<br>        down.build(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, <span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">// up.build(1, 1, n, true);</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            down.addedge(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, i, l[i] + i, r[i] + i, c[i], <span class="hljs-literal">false</span>);<br>            down.addedge(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, i, max(<span class="hljs-number">1</span>, i - r[i]), max(<span class="hljs-number">1</span>, i - l[i]), c[i], <span class="hljs-literal">false</span>);<br>        &#125;<br>        dijkstra.dijkstra(<span class="hljs-number">1</span>, cnt);<br>        dijkstra.print(n);<br>    &#125;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>(end)</p>
]]></content>
      <categories>
        <category>ACM-最短路</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>刷题</tag>
        <tag>最短路</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>kaungbin_简单搜索专题</title>
    <url>/2019/03/14/kaungbin-%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B8%93%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>基本的搜索不怎么熟练，，有时做题的时候感觉很坑，，现在来练习一下，，</p>
<p>这个专题是<a href="https://vjudge.net/contest/287864">kuangbin简单搜索专题</a></p>
<span id="more"></span>
<h1 id="A-棋盘问题-POJ-1321"><a href="#A-棋盘问题-POJ-1321" class="headerlink" title="A - 棋盘问题 POJ - 1321"></a>A - 棋盘问题 POJ - 1321</h1><p>我一开始的思路是记录下所有的可以放棋子的坐标，，然后搜索判断每一个棋子，判断是否有解，，但这样好像会算重复解，，</p>
<p>然后的解法就是搜索每一层中的可以放棋子的点，，然后判断是否合法，，找出可行解</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c = getchar(); <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; c = getchar();&#125;<br>    <span class="hljs-keyword">while</span>(c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = getchar();<br>    <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><span class="hljs-keyword">bool</span> mp[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>];<br><span class="hljs-keyword">bool</span> vis[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>];<br><span class="hljs-keyword">int</span> n, k;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span>(i != y &amp;&amp; vis[x][i])<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span>(i != x &amp;&amp; vis[i][y])<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">int</span> ans;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> row, <span class="hljs-keyword">int</span> num)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(num == k)<br>    &#123;<br>        ++ans;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(row &gt; n)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(mp[row][i] &amp;&amp; !vis[row][i] &amp;&amp; check(row, i))<br>        &#123;<br>            vis[row][i] = <span class="hljs-literal">true</span>;<br>            dfs(row + <span class="hljs-number">1</span>, num + <span class="hljs-number">1</span>);<br>            vis[row][i] = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    dfs(row + <span class="hljs-number">1</span>, num);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;k))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">-1</span> &amp;&amp; n == k)<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">char</span> s[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(s[j] == <span class="hljs-string">&#x27;#&#x27;</span>)<br>                    mp[i][j] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">else</span><br>                    mp[i][j] = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>        ans = <span class="hljs-number">0</span>;<br>        dfs(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="B-Dungeon-Master-POJ-2251"><a href="#B-Dungeon-Master-POJ-2251" class="headerlink" title="B - Dungeon Master POJ - 2251"></a>B - Dungeon Master POJ - 2251</h1><p>题意很简单就是一个三维的迷宫问题，，，dfs会T，，，上bfs</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c = getchar(); <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; c = getchar();&#125;<br>    <span class="hljs-keyword">while</span>(c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = getchar();<br>    <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><span class="hljs-keyword">bool</span> mp[<span class="hljs-number">35</span>][<span class="hljs-number">35</span>][<span class="hljs-number">35</span>];<br><span class="hljs-keyword">bool</span> vis[<span class="hljs-number">35</span>][<span class="hljs-number">35</span>][<span class="hljs-number">35</span>];<br><span class="hljs-keyword">int</span> last_min[<span class="hljs-number">35</span>][<span class="hljs-number">35</span>][<span class="hljs-number">35</span>];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> x, y, z;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> k)</span></span><br><span class="hljs-function">    </span>&#123;<br>        x = i;<br>        y = j;<br>        z = k;<br>    &#125;<br>&#125;s, t;<br><span class="hljs-keyword">int</span> l, c, r;<br><span class="hljs-keyword">char</span> str[<span class="hljs-number">35</span>];<br><span class="hljs-keyword">int</span> ans;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(node t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t.x &gt;= <span class="hljs-number">1</span> &amp;&amp; t.y &gt;= <span class="hljs-number">1</span> &amp;&amp; t.z &gt;= <span class="hljs-number">1</span> &amp;&amp; t.x &lt;= l &amp;&amp; t.y &lt;= r &amp;&amp; t.z &lt;= c &amp;&amp; !vis[t.x][t.y][t.z] &amp;&amp; mp[t.x][t.y][t.z])<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">int</span> nxt[<span class="hljs-number">7</span>][<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>                 <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>                <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>                 <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>,<br>                 <span class="hljs-number">0</span>,<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>,<br>                 <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>,<br>                 <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(node tmp, <span class="hljs-keyword">int</span> anst)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(tmp.x == t.x &amp;&amp; tmp.y == t.y &amp;&amp; tmp.z == t.z)<br>    &#123;<br>        ans = min(ans, anst);<br>        <span class="hljs-comment">//cout &lt;&lt; tmp.x &lt;&lt; tmp.y &lt;&lt; tmp.z &lt;&lt; endl;</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(anst &gt;= ans)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(anst &gt;= last_min[tmp.x][tmp.y][tmp.z])<span class="hljs-keyword">return</span>;<br>    last_min[tmp.x][tmp.y][tmp.z] = anst;<br>    node tt;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">6</span>; ++i)<br>    &#123;<br>        tt.init(tmp.x + nxt[i][<span class="hljs-number">0</span>], tmp.y + nxt[i][<span class="hljs-number">1</span>], tmp.z + nxt[i][<span class="hljs-number">2</span>]);<br>        <span class="hljs-keyword">if</span>(check(tt))<br>        &#123;<br>            <span class="hljs-comment">//cout &lt;&lt; tt.x &lt;&lt; tt.y &lt;&lt; tt.z &lt;&lt; endl;</span><br>            vis[tt.x][tt.y][tt.z] = <span class="hljs-literal">true</span>;<br>            dfs(tt, anst + <span class="hljs-number">1</span>);<br>            vis[tt.x][tt.y][tt.z] = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-built_in">memset</span>(last_min, inf, <span class="hljs-keyword">sizeof</span> last_min);<br>    ans = inf;<br>    node tt;<br>    <span class="hljs-built_in">queue</span>&lt;node&gt; q;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    q.push(s);<br>    vis[s.x][s.y][s.z] = <span class="hljs-literal">true</span>;<br>    last_min[s.x][s.y][s.z] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        node tmp = q.front(); q.pop();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">6</span>; ++i)<br>        &#123;<br>            tt.init(tmp.x + nxt[i][<span class="hljs-number">0</span>], tmp.y + nxt[i][<span class="hljs-number">1</span>], tmp.z + nxt[i][<span class="hljs-number">2</span>]);<br>            <span class="hljs-keyword">if</span>(check(tt))<br>            &#123;<br>                vis[tt.x][tt.y][tt.z] = <span class="hljs-literal">true</span>;<br>                q.push(tt);<br>                last_min[tt.x][tt.y][tt.z] = last_min[tmp.x][tmp.y][tmp.z] + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    ans = last_min[t.x][t.y][t.z];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;c) &amp;&amp; l + r + c)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(mp, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> mp);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= l; ++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= r; ++j)<br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str + <span class="hljs-number">1</span>);getchar();<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= c; ++k)<br>                    <span class="hljs-keyword">if</span>(str[k] == <span class="hljs-string">&#x27;.&#x27;</span>)<br>                        mp[i][j][k] = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str[k] == <span class="hljs-string">&#x27;S&#x27;</span>)<br>                        s.init(i, j, k), mp[i][j][k] = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str[k] == <span class="hljs-string">&#x27;E&#x27;</span>)<br>                        t.init(i, j, k), mp[i][j][k] = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-comment">//dfs(s, 0);</span><br>        bfs();<br>        <span class="hljs-keyword">if</span>(ans != inf)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Escaped in %d minute(s).\n&quot;</span>, ans);<br>        <span class="hljs-keyword">else</span>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Trapped!\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="C-Catch-That-Cow-POJ-3278"><a href="#C-Catch-That-Cow-POJ-3278" class="headerlink" title="C - Catch That Cow POJ - 3278"></a>C - Catch That Cow POJ - 3278</h1><p>题意很简单，，如果用dfs的话，，正的解决可能出现各种错误，，反着想就行了，，注意在0的情况</p>
<p>如果用bfs的话，，注意起点终点一样的情况，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;vector&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c = getchar(); <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; c = getchar();&#125;<br>    <span class="hljs-keyword">while</span>(c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = getchar();<br>    <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><span class="hljs-keyword">int</span> ans;<br><span class="hljs-keyword">int</span> n, k;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(n &gt;= k)<span class="hljs-keyword">return</span> n - k;<br>    <span class="hljs-keyword">if</span>(k &amp; <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> min(dfs(n, k + <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>, dfs(n, k - <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> min(k - n, dfs(n, k / <span class="hljs-number">2</span>) + <span class="hljs-number">1</span>);<br>    <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> loc, num;<br>&#125;;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-built_in">queue</span>&lt;node&gt; q;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    node s;<br>    s.loc = n;<br>    s.num = <span class="hljs-number">0</span>;<br>    q.push(s);<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        node now = q.front(); q.pop();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; ++i)<br>        &#123;<br>            node nxt;<br>            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">1</span>)nxt.loc = now.loc + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">2</span>)nxt.loc = now.loc - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">3</span>)nxt.loc = now.loc &lt;&lt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(nxt.loc &gt;= <span class="hljs-number">0</span> &amp;&amp; nxt.loc &lt;= maxn &amp;&amp; !vis[nxt.loc])<br>            &#123;<br>                vis[nxt.loc] = <span class="hljs-literal">true</span>;<br>                nxt.num = now.num + <span class="hljs-number">1</span>;<br>                q.push(nxt);<br>                <span class="hljs-keyword">if</span>(nxt.loc == k)<span class="hljs-keyword">return</span> nxt.num;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> inf;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);<br>    <span class="hljs-comment">// if(n)</span><br>    <span class="hljs-comment">//     printf(&quot;%d\n&quot;, dfs(n, k));</span><br>    <span class="hljs-comment">// else</span><br>    <span class="hljs-comment">//     printf(&quot;%d\n&quot;, dfs(1, k) + 1);</span><br>    <span class="hljs-keyword">if</span>(n == k)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, bfs());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="D-Fliptile-POJ-3279"><a href="#D-Fliptile-POJ-3279" class="headerlink" title="D - Fliptile POJ - 3279"></a>D - Fliptile POJ - 3279</h1><p>看起来从这题就开始难了，，</p>
<p>题意是一个01矩阵，，可以选择一些进行反转，，对mp[i][j]进行反转的同时，与它相邻的4个砖块也会反转，，输出使得全部为0的反转的操作矩阵，，不存在解的话就输出IMPOSSIBLE，，，</p>
<p>刚看完题的时候一脸懵逼，，完全不知道怎么下手，，知会纯暴力，枚举每一种情况，，</p>
<p>看到别人的思路之后尝试不看他们的代码自己写（其实是看不懂），，然后因为一些小细节被自己造的数据一次一次的卡掉，，重写了一次就好了，，</p>
<p>思路就是对于第一行，可能有的反转的情况一共只有 $2^m$ 中，，，而且反转1次和反转3次是一样的，，如果用1表示反转，0表示不反转，，第一行的情况就是： $000…000~111…111$，，，所以枚举这第一行的所有情况，，然后由第一行的反转情况来确定第2行，然后再确定第3行，，以此类推，，然后判断最后的那一行是不是全变成了0，，，取反转次数最少的那种情况，，那么怎么确定下一行的反转情况呢，，因为要保证全为零，，所以第x行的反转情况由x-1行确定，，如果上一行为1，，这一行为了保证上一行能为0，，就反转，，对于n==1的情况特判一下，，</p>
<p>用这个思路可以递归实现也可以递推实现：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//递归</span><br><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;vector&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">bool</span> mp[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>], mpt[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>];<br><span class="hljs-keyword">bool</span> ans[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>], anst[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>];<br><span class="hljs-keyword">int</span> mi;<br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-keyword">bool</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(a)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">flip</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">1</span>)mpt[x - <span class="hljs-number">1</span>][y] = cal(mpt[x - <span class="hljs-number">1</span>][y]);<br>    <span class="hljs-keyword">if</span>(x + <span class="hljs-number">1</span> &lt;= n)mpt[x + <span class="hljs-number">1</span>][y] = cal(mpt[x + <span class="hljs-number">1</span>][y]);<br>    <span class="hljs-keyword">if</span>(y - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">1</span>)mpt[x][y - <span class="hljs-number">1</span>] = cal(mpt[x][y - <span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">if</span>(y + <span class="hljs-number">1</span> &lt;= m)mpt[x][y + <span class="hljs-number">1</span>] = cal(mpt[x][y + <span class="hljs-number">1</span>]);<br>    mpt[x][y] = cal(mpt[x][y]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x &gt;= n)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> tmp = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>                <span class="hljs-keyword">if</span>(mpt[<span class="hljs-number">1</span>][i])<br>                    flag = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span>(flag)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>                    <span class="hljs-keyword">if</span>(mpt[<span class="hljs-number">1</span>][i])<br>                        ++tmp;<br>                <span class="hljs-keyword">if</span>(tmp &lt; mi)<br>                &#123;<br>                    <span class="hljs-built_in">memcpy</span>(ans, anst, <span class="hljs-keyword">sizeof</span> anst);<br>                    mi = tmp;<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(mpt[x - <span class="hljs-number">1</span>][i])<br>                &#123;<br>                    flip(x, i);<br>                    anst[x][i] = cal(anst[x][i]);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>                <span class="hljs-keyword">if</span>(mpt[x][i])<br>                    flag = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span>(flag)<br>            &#123;<br>                <span class="hljs-keyword">int</span> tmp = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>                        <span class="hljs-keyword">if</span>(anst[i][j])<br>                            ++tmp;<br>                <span class="hljs-keyword">if</span>(tmp &lt; mi)<br>                &#123;<br>                    <span class="hljs-built_in">memcpy</span>(ans, anst, <span class="hljs-keyword">sizeof</span> anst);<br>                    mi = tmp;<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(mpt[x - <span class="hljs-number">1</span>][i])<br>        &#123;<br>            flip(x, i);<br>            anst[x][i] = cal(anst[x][i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(dfs(x + <span class="hljs-number">1</span>))<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;mp[i][j]);<br>    mi = inf;<br>    <span class="hljs-built_in">memset</span>(ans, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> ans);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= (<span class="hljs-number">1</span> &lt;&lt; m) - <span class="hljs-number">1</span>; ++i)<br>    &#123;<br>        <span class="hljs-built_in">memcpy</span>(mpt, mp, <span class="hljs-keyword">sizeof</span> mp);<br>        <span class="hljs-built_in">memset</span>(anst, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> anst);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>        &#123;<br>            <span class="hljs-keyword">if</span>((i &gt;&gt; (j - <span class="hljs-number">1</span>)) &amp; <span class="hljs-number">1</span>)<br>            &#123;<br>                flip(<span class="hljs-number">1</span>, m - j + <span class="hljs-number">1</span>);<br>                anst[<span class="hljs-number">1</span>][m - j + <span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        dfs(<span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(mi == inf)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;IMPOSSIBLE\n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, ans[i][j]);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="E-Find-The-Multiple-POJ-1426"><a href="#E-Find-The-Multiple-POJ-1426" class="headerlink" title="E - Find The Multiple POJ - 1426"></a>E - Find The Multiple POJ - 1426</h1><p>好坑(cai啊这题，，，</p>
<p>题意是让求一个仅有01组成的十进制的可以整除n的数，，，然后他给了几个很大很大的满足题意的样例，，，</p>
<p>然后我就天真的以为对于这些数的解都是巨大的数，，会爆ll，，，然后就想着用一个数组去存这一位是0还是1，，然后搜一下，，，写到一半之后发现，，如果这样想的话，，中间判断计算出来的的岂不是也巨大，，那怎么保证搜到的这个数是对的？？？ 然后我就蒙蔽了，，，看了别人的题解之后，，惊了，，，居然最大的数是不会爆ll的，，，那个大样例是吓唬人的，，，噗，，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(ll ans, <span class="hljs-keyword">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(k == <span class="hljs-number">20</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ans &amp;&amp; ans / n * n == ans)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(dfs(ans * <span class="hljs-number">10</span>, k + <span class="hljs-number">1</span>))<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span>(dfs(ans * <span class="hljs-number">10</span> + <span class="hljs-number">1</span>, k + <span class="hljs-number">1</span>))<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n)<br>    &#123;<br>        dfs(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="F-Prime-Path-POJ-3126"><a href="#F-Prime-Path-POJ-3126" class="headerlink" title="F - Prime Path POJ - 3126"></a>F - Prime Path POJ - 3126</h1><p>这段时间(5月了)发现搜索还是不怎么会啊，，于是又捡起扔下的搜索专题，，，</p>
<p>我的思路是先预处理出所有的质数，以及经过一次变化可以得到的每一个质数的其他的质数，，，然后搜一下，，</p>
<p>先开始写的dfs，，然后自己造的样例发现时间爆炸，，发现别人都是用bfs，，</p>
<p>然后换bfs，，，因为一开始没有标记每一个数是否被用了，，所以队列中会出现一些一样的数，，于是又多余的操作，，，t了，，标记后就好了，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-comment">// #include &lt;algorithm&gt;</span><br><span class="hljs-comment">// #include &lt;set&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e10</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> t, s;<br><span class="hljs-keyword">int</span> ans;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">2000</span>], tot;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; pp[maxn];<br><span class="hljs-comment">// bool vis[maxn];</span><br><span class="hljs-keyword">bool</span> prime[maxn];<br><span class="hljs-keyword">int</span> p[maxn], tol;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span>; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a % <span class="hljs-number">10</span> != b % <span class="hljs-number">10</span>)++flag;<br>        a /= <span class="hljs-number">10</span>; b /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">1</span> ||flag == <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; maxn; ++i)prime[i] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; maxn; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(prime[i])p[tol++] = i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; tol &amp;&amp; i * p[j] &lt; maxn; ++j)<br>        &#123;<br>            prime[i * p[j]] = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span>(i % p[j] == <span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2000</span>; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(p[i] &gt;= <span class="hljs-number">1000</span> &amp;&amp; p[i] &lt;= <span class="hljs-number">9999</span>)<br>        &#123;<br>            a[++tot] = p[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= tot; ++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= tot; ++j)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(check(a[i], a[j]))<br>            &#123;<br>                pp[a[i]].push_back(a[j]);<br>                pp[a[j]].push_back(a[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-comment">// void dfs(int x, int ret)</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//     if(x == t)</span><br><span class="hljs-comment">//     &#123;</span><br><span class="hljs-comment">//         ans = min(ans, ret);</span><br><span class="hljs-comment">//         return;</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">//     if(ret &gt;= ans)return;</span><br><span class="hljs-comment">//     for(auto i : pp[x])</span><br><span class="hljs-comment">//     &#123;</span><br><span class="hljs-comment">//         if(!vis[i])</span><br><span class="hljs-comment">//         &#123;</span><br><span class="hljs-comment">//             vis[i] = true;</span><br><span class="hljs-comment">//             dfs(i, ret + 1);</span><br><span class="hljs-comment">//             vis[i] = false;</span><br><span class="hljs-comment">//         &#125;</span><br><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(s == t)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; &gt; q;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    <span class="hljs-comment">// for(auto i : pp[s])q.push(make_pair(i, 1));</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; pp[s].size(); ++i)q.push(<span class="hljs-built_in">make_pair</span>(pp[s][i], <span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; now = q.front(); q.pop();<br>        vis[now.first] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span>(now.first == t)<span class="hljs-keyword">return</span> now.second;<br>        <span class="hljs-comment">// for(auto i : pp[now.first])q.push(make_pair(i, now.second + 1));</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; pp[now.first].size(); ++i)<br>            <span class="hljs-keyword">if</span>(!vis[pp[now.first][i]])<br>            &#123;<br>                vis[pp[now.first][i]] = <span class="hljs-literal">true</span>;<br>                q.push(<span class="hljs-built_in">make_pair</span>(pp[now.first][i], now.second + <span class="hljs-number">1</span>));<br>            &#125;<br>        <br>    &#125;<br>    <span class="hljs-keyword">return</span> inf;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    init();<br>    <span class="hljs-keyword">int</span> tt; <span class="hljs-built_in">cin</span> &gt;&gt; tt;<br>    <span class="hljs-keyword">while</span>(tt--)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; s &gt;&gt; t;<br>        <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>        ans = bfs();<br>        <span class="hljs-keyword">if</span>(ans == inf)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Impossible&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-comment">// ans = inf;</span><br>        <span class="hljs-comment">// memset(vis, false, sizeof vis);</span><br>        <span class="hljs-comment">// vis[s] = true;</span><br>        <span class="hljs-comment">// dfs(s, 0);</span><br>        <span class="hljs-comment">// cout &lt;&lt; ans &lt;&lt; endl;</span><br>    &#125;<br>    <br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;       <br>&#125;<br></code></pre></td></tr></table></figure>
<p>好菜啊，，，</p>
<h1 id="K-迷宫问题-POJ-3984"><a href="#K-迷宫问题-POJ-3984" class="headerlink" title="K - 迷宫问题 POJ - 3984"></a>K - 迷宫问题 POJ - 3984</h1><p>简单的迷宫问题，，深搜广搜都行，，</p>
<h1 id="L-Oil-Deposits-HDU-1241"><a href="#L-Oil-Deposits-HDU-1241" class="headerlink" title="L - Oil Deposits HDU - 1241"></a>L - Oil Deposits HDU - 1241</h1><p>求联通块的个数，，很简单，，但是在hdu不知道怎么回事，，蜜汁wa，，最后换了一种dfs的写法就可以了，，，poj上原来的写法就没事，，，emmmm</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;algorithm&gt;</span><br><span class="hljs-comment">// #include &lt;set&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-comment">// #include &lt;ctime&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e10</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e2</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">char</span> mp[maxn][maxn];<br><span class="hljs-keyword">bool</span> vis[maxn][maxn];<br><span class="hljs-keyword">int</span> dx[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-keyword">int</span> dy[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; ++i)<br>    &#123;<br>        <span class="hljs-keyword">int</span> tx = x + dx[i];<br>        <span class="hljs-keyword">int</span> ty = y + dy[i];<br>        <span class="hljs-keyword">if</span>(tx &gt;= <span class="hljs-number">1</span> &amp;&amp; ty &gt;= <span class="hljs-number">1</span> &amp;&amp; tx &lt;= n &amp;&amp; ty &lt;= m &amp;&amp; mp[tx][ty] == <span class="hljs-string">&#x27;@&#x27;</span>)<br>        &#123;<br>            mp[tx][ty] = <span class="hljs-string">&#x27;*&#x27;</span>;<br>            dfs(tx, ty);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// if(x &gt;= 1 &amp;&amp; y &gt;= 1 &amp;&amp; x &lt;= n &amp;&amp; y &lt;= m &amp;&amp; mp[x][y] == &#x27;@&#x27;)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     mp[x][y] = &#x27;*&#x27;;</span><br>    <span class="hljs-comment">//     for(int i = 0; i &lt; 8; ++i)</span><br>    <span class="hljs-comment">//         dfs(x + dx[i], y + dy[i]);</span><br>    <span class="hljs-comment">// &#125;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>            <span class="hljs-keyword">if</span>(mp[i][j] == <span class="hljs-string">&#x27;@&#x27;</span>)<br>            &#123;<br>                mp[i][j] = <span class="hljs-string">&#x27;*&#x27;</span>;<br>                dfs(i, j);<br>                ++ans;<br>            &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br>    <br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m) &amp;&amp; n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, mp[i] + <span class="hljs-number">1</span>);<br>        solve();<br>    &#125;<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;       <br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="M-非常可乐-HDU-1495"><a href="#M-非常可乐-HDU-1495" class="headerlink" title="M - 非常可乐 HDU - 1495"></a>M - 非常可乐 HDU - 1495</h1><p>倒腾水的问题，，dfs直接搜就可以了，，（开visa数组的时候不知道怎么想的一直想着1e3==100，，，emmm mle了好几发，，，自闭ing</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;algorithm&gt;</span><br><span class="hljs-comment">// #include &lt;set&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-comment">// #include &lt;ctime&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e10</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e2</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">int</span> st;<br>&#125;s,t,u;<br><span class="hljs-keyword">bool</span> vis[maxn][maxn][maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pour</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// t = u;</span><br>    t.st = u.st;<br>    t.v[<span class="hljs-number">0</span>] = u.v[<span class="hljs-number">0</span>]; t.v[<span class="hljs-number">1</span>] = u.v[<span class="hljs-number">1</span>]; t.v[<span class="hljs-number">2</span>] = u.v[<span class="hljs-number">2</span>];<br>    ++t.st;<br>    <span class="hljs-keyword">if</span>(t.v[i] &gt;= s.v[j] - t.v[j])<br>    &#123;<br>        t.v[i] -= (s.v[j] - t.v[j]);<br>        t.v[j] = s.v[j];<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        t.v[j] += t.v[i];<br>        t.v[i] = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">queue</span>&lt;node&gt; q;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">(node st)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    q.push(st);<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    vis[st.v[<span class="hljs-number">0</span>]][st.v[<span class="hljs-number">1</span>]][st.v[<span class="hljs-number">2</span>]] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        u = q.front();q.pop();<br>        <span class="hljs-comment">//vis[u.v[0]][u.v[1]][u.v[2]] = false;</span><br>        <span class="hljs-comment">// cout &lt;&lt; u.v[0] &lt;&lt; u.v[1] &lt;&lt; u.v[2] &lt;&lt; endl;</span><br>        <br>        <span class="hljs-comment">// if(num)return u.st + num % 2;</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">2</span>; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">2</span>; ++j)<br>                <span class="hljs-keyword">if</span>(i != j &amp;&amp; u.v[i] &gt; <span class="hljs-number">0</span>)<br>                &#123;<br>                    pour(i, j);<br>                    <span class="hljs-keyword">if</span>(!vis[t.v[<span class="hljs-number">0</span>]][t.v[<span class="hljs-number">1</span>]][t.v[<span class="hljs-number">2</span>]])<br>                    &#123;<br>                        <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br>                        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">2</span>; ++i)<br>                            <span class="hljs-keyword">if</span>(t.v[i] * <span class="hljs-number">2</span> == s.v[<span class="hljs-number">0</span>])<br>                                ++num;<br>                        <span class="hljs-keyword">if</span>(num == <span class="hljs-number">2</span>)<span class="hljs-keyword">return</span> t.st;<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> t.st + <span class="hljs-number">1</span>;<br>                        q.push(t);<br>                        vis[t.v[<span class="hljs-number">0</span>]][t.v[<span class="hljs-number">1</span>]][t.v[<span class="hljs-number">2</span>]] = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br>    <br>    <span class="hljs-keyword">int</span> S, N, M;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;S, &amp;N, &amp;M) &amp;&amp; S + N + M)<br>    &#123;<br>        s.v[<span class="hljs-number">0</span>] = S; s.v[<span class="hljs-number">1</span>] = N, s.v[<span class="hljs-number">2</span>] = M;<br>        s.st = <span class="hljs-number">0</span>;<br>        node st = s;<br>        st.v[<span class="hljs-number">1</span>] = st.v[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(s.v[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">int</span> ans = bfs(st);<br>            <span class="hljs-keyword">if</span>(~ans)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>        &#125;<br>        <br>    &#125;<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;       <br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="N-Find-a-way-HDU-2612"><a href="#N-Find-a-way-HDU-2612" class="headerlink" title="N - Find a way HDU - 2612"></a>N - Find a way HDU - 2612</h1><p>两次bfs就行了，，，因为很像最短路的题，，，写的写的就写成了最短路的样子</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;iostream&gt;</span><br><span class="hljs-comment">// #include &lt;cstdio&gt;</span><br><span class="hljs-comment">// #include &lt;cstdlib&gt;</span><br><span class="hljs-comment">// #include &lt;string.h&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">char</span> mp[<span class="hljs-number">205</span>][<span class="hljs-number">205</span>];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> x, y, mi;<br>    node(<span class="hljs-keyword">int</span> _x, <span class="hljs-keyword">int</span> _y, <span class="hljs-keyword">int</span> _mi = <span class="hljs-number">0</span>):x(_x), y(_y), mi(_mi)&#123;&#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;r)<span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> mi &lt; r.mi;<br>    &#125;<br>&#125;;<br>struct node Y(0, 0, 0), M(0, 0, 0);<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; yy;<br><span class="hljs-keyword">bool</span> vis[<span class="hljs-number">205</span>][<span class="hljs-number">205</span>];<br><span class="hljs-keyword">int</span> dis[<span class="hljs-number">205</span>][<span class="hljs-number">205</span>];<br><span class="hljs-keyword">int</span> dx[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-keyword">int</span> dy[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(node i)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(mp[i.x][i.y] == <span class="hljs-string">&#x27;#&#x27;</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span>(i.x &lt; <span class="hljs-number">1</span> || i.y &lt; <span class="hljs-number">1</span> || i.x &gt; n || i.y &gt; m)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(node s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>            vis[i][j] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>            dis[i][j] = inf;<br>    <br>    vis[s.x][s.y] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">queue</span>&lt;node&gt; q;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    q.push(s);<br>    dis[s.x][s.y] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        node u = q.front(); q.pop();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span>; ++i)<br>        &#123;<br>            node v = node(u.x + dx[i], u.y + dy[i]);<br>            <span class="hljs-keyword">if</span>(check(v))<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(!vis[v.x][v.y])<br>            &#123;<br>                vis[v.x][v.y] = <span class="hljs-literal">true</span>;<br>                dis[v.x][v.y] = dis[u.x][u.y] + <span class="hljs-number">1</span>;<br>                q.push(v);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m))<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, (mp[i] + <span class="hljs-number">1</span>));<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>                <span class="hljs-keyword">if</span>(mp[i][j] == <span class="hljs-string">&#x27;Y&#x27;</span>)<br>                    Y.x = i, Y.y = j;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(mp[i][j] == <span class="hljs-string">&#x27;M&#x27;</span>)<br>                    M.x = i, M.y = j;<br>        <br>        bfs(Y);<br>        yy.clear();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>                <span class="hljs-keyword">if</span>(mp[i][j] == <span class="hljs-string">&#x27;@&#x27;</span>)<br>                    yy.push_back(dis[i][j]);<br><br><br>        <span class="hljs-keyword">int</span> ans = inf;<br>        <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>        bfs(M);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>                <span class="hljs-keyword">if</span>(mp[i][j] == <span class="hljs-string">&#x27;@&#x27;</span>)<br>                    ans = min(ans, yy[cnt++] + dis[i][j]);<br>        <br>        <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans * <span class="hljs-number">11</span>);<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    <br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM-搜索</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>poj-1459-最大流dinic+链式前向星-isap+bfs+stack</title>
    <url>/2018/11/22/poj-1459-%E6%9C%80%E5%A4%A7%E6%B5%81dinic+%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F-isap+bfs+stack/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><a href="http://poj.org/problem?id=1459">这道是一道网络流里最大流的板子题</a>,,,</p>
<p>暑期集训网络流草草水过，，连基本的算法都不知道有哪些，，，更别提怎么实现了，，，只知道网络流的大致的概念，，</p>
<p>今天花了一天的时间重新学习了一波，，，本以为这东西很简单，，，没想到不仅算法的实现一大堆的东西，，就连题目都有时候看不懂，，，，感受就是网络流的题不仅算法实现起来不好懂，，，每一道题的建图也很关键，，，几乎看到的每一道题的图都是得自己去建，，完全不像最短路那些题花里胡哨的东西都只改一改贪心时的方程就行，，，</p>
<span id="more"></span>
<h1 id="分析思路"><a href="#分析思路" class="headerlink" title="分析思路"></a>分析思路</h1><h2 id="最短路的一些基本概念"><a href="#最短路的一些基本概念" class="headerlink" title="最短路的一些基本概念"></a>最短路的一些基本概念</h2><p>这一段 <em>算法导论</em> 上讲的很好，，，不过我感觉还是在基本弄懂那几个算法再看一遍比较好QAQ</p>
<p><a href="https://blog.andrewei.info/2016/04/11/network-flows/">这里就直接摘抄别人写过的东西了</a></p>
<h2 id="容量网络和网络最大流"><a href="#容量网络和网络最大流" class="headerlink" title="容量网络和网络最大流"></a>容量网络和网络最大流</h2><h1 id="容量网络"><a href="#容量网络" class="headerlink" title="容量网络:"></a>容量网络:</h1><p>$设 G(V, E)是一个有向网络, 在 V 中指定了一个顶点, 称为源点(记为 Vs ), 以及另一个顶点, 称为汇点(记为 Vt); 对于每一条弧 <u, v>∈E, 对应有一个权值 c(u, v)&gt;0, 称为弧的容量, 通常把这样的有向网络 G 称为容量网络。$</p>
<p>把它想象成 <strong>自来水厂</strong> 、 <strong>自来水管网</strong> 和 <strong>用户</strong> 那种图就行了，，，</p>
<h2 id="弧的流量"><a href="#弧的流量" class="headerlink" title="弧的流量:"></a>弧的流量:</h2><p> 通过容量网络 G 中每条弧 <u, v> 上的实际流量(简称流量), 记为 $f(u, v)$。</p>
<h3 id="网络流-所有弧上流量的集合-f-f-u-v-称为该容量网络-G-的一个网络流。"><a href="#网络流-所有弧上流量的集合-f-f-u-v-称为该容量网络-G-的一个网络流。" class="headerlink" title="网络流: 所有弧上流量的集合 f = { f(u, v) },称为该容量网络 G 的一个网络流。"></a><strong>网络流</strong>: 所有弧上流量的集合 f = { f(u, v) },称为该容量网络 G 的一个网络流。</h3><h3 id="可行流-在容量网络-G-V-E-中-满足以下条件的网络流-f-称为可行流"><a href="#可行流-在容量网络-G-V-E-中-满足以下条件的网络流-f-称为可行流" class="headerlink" title="可行流: 在容量网络 G(V, E) 中, 满足以下条件的网络流 f, 称为可行流:"></a><strong>可行流</strong>: 在容量网络 G(V, E) 中, 满足以下条件的网络流 f, 称为可行流:</h3><h2 id="弧流量限制条件-0≤f-u-v-≤c-u-v"><a href="#弧流量限制条件-0≤f-u-v-≤c-u-v" class="headerlink" title="弧流量限制条件:  $0≤f(u,v)≤c(u,v)$"></a>弧流量限制条件:  $0≤f(u,v)≤c(u,v)$</h2><h3 id="平衡条件"><a href="#平衡条件" class="headerlink" title="平衡条件:"></a><strong>平衡条件</strong>:</h3><p> 除了 Vs, Vt 外, 其余的点流入的流量总和等于流出的流量总和, 其中 <strong>Vs 流出的流量总和 - 流出的流量总和 = f</strong>,   <strong>Vt 流入的流量总和 - 流出的流量总和 = f</strong>, 并且称 f 为可性流的流量</p>
<p>也就是指:  $在图中有一条从 Vs 到 Vt 的路径, 这条路径上起点 fo−fi=f, 终点 fi−fo=f， 其他的点 fi==fo, 并且所有的边的当前流量小于等于最大流量.(其中 fi 代表流入流量, fo 代表流出流量)$</p>
<h3 id="伪流"><a href="#伪流" class="headerlink" title="伪流:"></a><strong>伪流</strong>:</h3><p>如果一个网络流只满足弧流量限制条件, 不满足平衡条件, 则这种网络流称为伪流, 或称为容量可行流。</p>
<h3 id="最大流"><a href="#最大流" class="headerlink" title="最大流:"></a><strong>最大流</strong>:</h3><p> 在容量网络 G(V, E) 中, 满足弧流量限制条件和平衡条件、且具有最大流量的可行流, 称为网络最大流, 简称最大流。</p>
<h2 id="链与增广路"><a href="#链与增广路" class="headerlink" title="链与增广路"></a>链与增广路</h2><p>在容量网络 G(V, E) 中, 设有一可行流 f = { f(u, v) }, 根据每条弧上流量的多少、以及流量和容量的关系,可将弧分四种类型:</p>
<p>饱和弧, 即 f(u,v)=c(u,v);<br>非饱和弧,即 f(u,v)<c(u,v);
零流弧, 即 f(u,v)=0;
非零流弧, 即 f(u,v)>0。</p>
<h3 id="链"><a href="#链" class="headerlink" title="链:"></a><strong>链</strong>:</h3><p> 在容量网络中,称顶点序列(u,u1,u2,…,un,v)为一条链,要求相邻两个顶点之间有一条弧, 如 $<u, u_1>$ 或 $<u_1, u>$ 为容量网络中一条弧。沿着 Vs 到 Vt 的一条链, 各弧可分为两类:</p>
<ul>
<li><strong>前向弧</strong>: 方向与链的正方向一致的弧, 其集合记为 P+;</li>
<li><strong>后向弧</strong>: 方向与链的正方向相反的弧, 其集合记为 P-;</li>
</ul>
<h3 id="增广路"><a href="#增广路" class="headerlink" title="增广路:"></a><strong>增广路</strong>:</h3><p> 设 f 是一个容量网络 G 中的一个可行流, P 是从 Vs 到 Vt 的一条链, 若 P 满足下列条件:</p>
<p>在 P 的所有<strong>前向弧</strong> <u, v> 上, 0≤f(u,v)&lt;c(u,v), 即 P+ 中每一条弧都是非饱和弧;</p>
<p>在 P 的所有<strong>后向弧</strong> <u, v> 上, 0&lt;f(u,v)≤c(u,v), 即 P– 中每一条弧是非零流弧。</p>
<p>则称 P 为关于可行流 f 的一条增广路, 简称为 <strong>增广路(或称为增广链、可改进路)</strong> 。<strong>沿着增广路改进可行流的操作称为增广</strong>。</p>
<h2 id="残留容量与残留网络"><a href="#残留容量与残留网络" class="headerlink" title="残留容量与残留网络"></a>残留容量与残留网络</h2><h3 id="残留容量"><a href="#残留容量" class="headerlink" title="残留容量:"></a><strong>残留容量</strong>:</h3><p>给定容量网络 G(V, E) 及可行流 f, 弧 <u, v> 上的残留容量记为 c′(u,v)=c(u,v)–f(u,v)。每条弧的残留容量表示该弧上可以增加的流量。因为从顶点 u 到顶点 v 流量的减少, 等效于顶点 v 到顶点 u 流量增加, 所以每条弧 <u, v> 上还有一个反方向的残留容量 c′(v,u)=–f(u,v)。</p>
<ul>
<li>一个容量网络中还可以压入的流量称为残留容量</li>
</ul>
<h3 id="残留网络"><a href="#残留网络" class="headerlink" title="残留网络:"></a><strong>残留网络</strong>:</h3><p>$设有容量网络 G(V, E) 及其上的网络流 f,G 关于 f 的残留网络(简称残留网络)记为 G’(V’, E’), 其中 G’的顶点集 V’和 G 的顶点集 V 相同,即 V’=V, 对于 G 中的任何一条弧 <u, v>, 如果 f(u,v)<c(u,v), 那么在 G’中有一条弧 <u, v>∈E’, 其容量为 c′(u,v)=c(u,v)–f(u,v), 如果 f(u,v)&gt;0,则在 G’中有一条弧 <v, u>∈E’, 其容量为 c′(v,u)=f(u,v), 残留网络也称为剩余网络.$</p>
<ul>
<li>由残留的容量以及源点汇点构成的网络。</li>
</ul>
<h3 id="割与最小割"><a href="#割与最小割" class="headerlink" title="割与最小割"></a><strong>割与最小割</strong></h3><p><strong>割</strong>: $在容量网络 G(V, E) 中, 设 E’⊆E, 如果在 G 的基图中删去 E’ 后不再连通, 则称 E’ 是 G 的割。割将 G 的顶点集 V 划分成两个子集 S 和 T = V - S。将割记为(S, T)。<br>s-t 割: 更进一步, 如果割所划分的两个顶点子集满足源点 Vs ∈ S,汇点 Vt ∈ T, 则称该割为 s-t 割。 s-t 割(S, T)中的弧 <u, v>(u∈S, v∈T) 称为割的前向弧, 弧 <u, v>( u∈T, v∈S) 称为割的反向弧。$</p>
<p><strong>割的容量</strong>: $设 (S, T) 为容量网络 G(V, E) 的一个割, 其容量定义为所有前向弧的容量总和, 用 c(S, T) 表示。$</p>
<p><strong>最小割</strong>: $容量网络 G(V, E) 的最小割是指容量最小的割。$</p>
<h2 id="相关定理"><a href="#相关定理" class="headerlink" title="相关定理"></a><strong>相关定理</strong></h2><h3 id="残留网络与原网络的关系"><a href="#残留网络与原网络的关系" class="headerlink" title="残留网络与原网络的关系"></a>残留网络与原网络的关系</h3><p>$设 f 是容量网络 G(V, E) 的可行流, f’ 是残留网络 G’ 的可行流, 则 f + f’ 仍是容量网络 G 的一个可行流。(f + f’ 表示对应弧上的流量相加)$</p>
<h3 id="网络流流量与割的净流量之间的关系"><a href="#网络流流量与割的净流量之间的关系" class="headerlink" title="网络流流量与割的净流量之间的关系"></a>网络流流量与割的净流量之间的关系</h3><p>$在一个容量网络 G(V, E) 中, 设其任意一个流为 f, 关于 f 的任意一个割为(S, T), 则有 f(S,T)=|f|,即网络流的流量等于任何割的净流量。$</p>
<h3 id="网络流流量与割的容量之间的关系"><a href="#网络流流量与割的容量之间的关系" class="headerlink" title="网络流流量与割的容量之间的关系"></a>网络流流量与割的容量之间的关系</h3><p>$在一个容量网络 G(V, E) 中, 设其任意一个流为 f, 任意一个割为(S, T), 则必有 f(S,T)≤c(S,T),即网络流的流量小于或等于任何割的容量。$</p>
<h3 id="最大流最小割定理"><a href="#最大流最小割定理" class="headerlink" title="最大流最小割定理"></a>最大流最小割定理</h3><p>$对容量网络 G(V, E), 其最大流的流量等于最小割的容量。$</p>
<h3 id="增广路定理"><a href="#增广路定理" class="headerlink" title="增广路定理"></a>增广路定理</h3><p>$设容量网络 G(V, E) 的一个可行流为 f, f 为最大流的充要条件是在容量网络中不存在增广路。$</p>
<h3 id="几个等价命题"><a href="#几个等价命题" class="headerlink" title="几个等价命题"></a>几个等价命题</h3><p>$设容量网络 G(V, E)的一个可行流为 f 则:$</p>
<p>$1) f 是容量网络 G 的最大流;$</p>
<p>$2) | f |等于容量网络最小割的容量;$</p>
<p>$3) 容量网络中不存在增广路;$</p>
<p>$4) 残留网络 G’中不存在从源点到汇点的路径。$</p>
<h2 id="最大流-1"><a href="#最大流-1" class="headerlink" title="最大流"></a><strong>最大流</strong></h2><p>最大流相关算法有两种解决思想, 一种是<strong>增广路算法思想</strong>, 另一种是<strong>预流推进</strong>算法思想。 </p>
<h1 id="增广路算法"><a href="#增广路算法" class="headerlink" title="增广路算法"></a><strong>增广路算法</strong></h1><h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>根据增广路定理, 为了得到最大流, 可以从任何一个可行流开始, 沿着增广路对网络流进行增广, 直到网络中不存在增广路为止,这样的算法称为增广路算法。问题的关键在于如何有效地找到增广路, 并保证算法在有限次增广后一定终止。<br>增广路算法的基本流程是 :</p>
<ul>
<li>(1) 取一个可行流 f 作为初始流(如果没有给定初始流,则取零流 f= { 0 }作为初始流);</li>
<li>(2) 寻找关于 f 的增广路 P,如果找到,则沿着这条增广路 P 将 f 改进成一个更大的流, 并建立相应的反向弧;</li>
<li>(3) 重复第(2)步直到 f 不存在增广路为止。</li>
</ul>
<p>图示如下:<br><img src="https://blog.andrewei.info/images/network-flows/FFalgo1.png" alt=""></p>
<p><img src="https://blog.andrewei.info/images/network-flows/FFalgo2.png" alt=""></p>
<p>增广路算法的关键是 <strong>寻找增广路</strong> 和 <strong>改进网络流</strong>.</p>
<h2 id="创建反向弧的作用："><a href="#创建反向弧的作用：" class="headerlink" title="创建反向弧的作用："></a>创建反向弧的作用：</h2><p><strong>为程序提供一次反悔的机会</strong></p>
<p>在图中如果程序找到了一条增广路 1 -&gt; 2 -&gt; 4 -&gt; 6, 此时得到一个流量为 2 的流并且无法继续进行增广,<br>但是如果在更新可行流的同时建立反向弧的话, 就可以找到 1 -&gt; 3 -&gt; 4 -&gt; 2 -&gt; 5 -&gt; 6 的可行流, 流量为1, 这样就可以得到最大流为 3.</p>
<p><img src="https://blog.andrewei.info/images/network-flows/FFalgo7.jpg" alt=""></p>
<h2 id="dinic模板程序"><a href="#dinic模板程序" class="headerlink" title="dinic模板程序"></a>dinic模板程序</h2><p>因为ek算法的效率没有dinic的高，，所以本着先追求实用主义就先看了dinic算法，，，算法实现的模板时kaungbin的，，，dinic+链式前向星。。。</p>
<h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>DINIC 在找增广路的时候也是找的最短增广路, 与 EK 算法不同的是 DINIC 算法并不是每次 bfs 只找一个增广路, 他会首先通过一次 bfs 为所有点添加一个标号, 构成一个层次图， 然后在层次图中寻找增广路进行更新。</p>
<h3 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h3><ul>
<li><p>1.利用 BFS 对原来的图进行分层，即对每个结点进行标号，这个标号的含义是当前结点距离源点的最短距离(假设每条边的距离都为1)，注意：构建层次图的时候所走的边的残余流量必须大于0</p>
</li>
<li><p>2.用 DFS 寻找一条从源点到汇点的增广路, 注意: 此处寻找增广路的时候要按照层次图的顺序, 即如果将边(u, v)纳入这条增广路的话必须满足dis[u]=dis[v]−1, 其中 dis[i]为结点 i的编号。找到一条路后要根据这条增广路径上的所有边的残余流量的最小值l更新所有边的残余流量(即正向弧 - l, 反向弧 + l).</p>
</li>
<li><p>3.重复步骤 2, 当找不到一条增广路的时候, 重复步骤 1, 重新建立层次图, 直到从源点不能到达汇点为止。</p>
</li>
</ul>
<p><img src="https://blog.andrewei.info/images/network-flows/FFalgo8.jpg" alt=""></p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(V^2E)$</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题的题意是给你n个源点（发电站）、np个中间路径点（中转站）、nc个汇点（用户）以及m个通路。。求最大送到用户的效率也就是图的最大流。。</p>
<p>多个源点和汇点所以要弄一个<strong>超级源点s</strong>和<strong>超级汇点t</strong>，，，s,t连源点，汇点然后跑dinic就行了，，</p>
<p>具体的代码的细节都注释在里面了，，，都是自己的理解可能有误，，，看的头疼.jpg</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//dinic求网络流的最大流</span><br><span class="hljs-comment">//bfs求一次层次图</span><br><span class="hljs-comment">//dfs求源点到汇点的一条增广路</span><br><span class="hljs-comment">//然后根据这条增广路中残余流量的最小值tp来更新所有边的残余流量</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">105</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-keyword">int</span> n , np , nc , m;<br><span class="hljs-keyword">int</span> u , v , z;<br><span class="hljs-comment">//前向星存图</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to;<br>    <span class="hljs-keyword">int</span> next;<br>    <span class="hljs-keyword">int</span> cap;        <span class="hljs-comment">//容量</span><br>    <span class="hljs-keyword">int</span> flow;       <span class="hljs-comment">//流量</span><br>&#125;edge[maxm];        <span class="hljs-comment">//注意边数为所给边数的两倍多</span><br><span class="hljs-keyword">int</span> tol;<br><span class="hljs-keyword">int</span> head[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tol = <span class="hljs-number">2</span>;        <span class="hljs-comment">//???</span><br>    <span class="hljs-built_in">memset</span>(head , <span class="hljs-number">-1</span> , <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u , <span class="hljs-keyword">int</span> v , <span class="hljs-keyword">int</span> w , <span class="hljs-keyword">int</span> rw = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//前向星加边，反向弧容量为rw一般为0</span><br>    <span class="hljs-comment">//正反弧相邻存储，直接异或就能找到</span><br>    <span class="hljs-comment">//正向弧的编号要比反向弧的编号小</span><br>    edge[tol].to = v;edge[tol].cap = w;edge[tol].flow = <span class="hljs-number">0</span>;<br>    edge[tol].next = head[u];head[u] = tol++;<br>    edge[tol].to = u; edge[tol].cap = rw;edge[tol].flow = <span class="hljs-number">0</span>;<br>    edge[tol].next = head[v];head[v] = tol++;<br>&#125;<br><span class="hljs-keyword">int</span> q[maxn];        <span class="hljs-comment">//双向队列，bfs使用</span><br><span class="hljs-keyword">int</span> dep[maxn] , cur[maxn] , sta[maxn];<span class="hljs-comment">//sta保存增广路的边</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> t , <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//bfs搜索网络的层次</span><br>    <span class="hljs-keyword">int</span> front = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> tail = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(dep , <span class="hljs-number">-1</span> , <span class="hljs-keyword">sizeof</span>(dep[<span class="hljs-number">0</span>]) * (n + <span class="hljs-number">1</span>));<br>    dep[s] = <span class="hljs-number">0</span>;<br>    q[tail++] = s;<br>    <span class="hljs-keyword">while</span>(front &lt; tail)<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q[front++];<br>        <span class="hljs-comment">//前向星图的遍历</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(edge[i].cap &gt; edge[i].flow &amp;&amp; !(~dep[v]))<br>            &#123;<br>                <span class="hljs-comment">//(u,v)这条边的容量大于流量时即残余流量大于0并且这个点没有被分层时</span><br>                dep[v] = dep[u] + <span class="hljs-number">1</span>;    <span class="hljs-comment">//分层</span><br>                <span class="hljs-keyword">if</span>(v == t)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                q[tail++] = v;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dinic</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> t , <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> maxflow = <span class="hljs-number">0</span>;            <span class="hljs-comment">//待求的最大流</span><br>    <span class="hljs-keyword">while</span>(bfs(s , t , n))       <span class="hljs-comment">//当层次图存在时进行dfs寻找增广路</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)cur[i] = head[i]; <span class="hljs-comment">//当前所有可以利用链式前向星遍历的边的编号</span><br>        <span class="hljs-keyword">int</span> u = s , tail = <span class="hljs-number">0</span>;   <span class="hljs-comment">//tail表示找到的增广路的点的数量</span><br>        <span class="hljs-keyword">while</span>(~cur[s])          <span class="hljs-comment">//边合法时</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(u == t)          <span class="hljs-comment">//找到汇点时，即找到一条增广路时</span><br>            &#123;<br>                <span class="hljs-keyword">int</span> tp = inf;   <span class="hljs-comment">//tp为该增广路中最小的残余流量</span><br>                <span class="hljs-comment">//找到最小值</span><br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = tail - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i)<br>                    tp = min(tp , edge[sta[i]].cap - edge[sta[i]].flow);<br>                maxflow += tp;  <span class="hljs-comment">//最大流增加</span><br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = tail - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i)<br>                &#123;<br>                    <span class="hljs-comment">//用最小的残余流量更新参与网络</span><br>                    <span class="hljs-comment">//这里是倒着遍历每一条增广路中的边，，</span><br>                    <span class="hljs-comment">//所以编号是由大到小，sta[i]是(u,v)那条弧的编号，sta[i] ^ 1是其反向弧的编号</span><br>                    <span class="hljs-comment">//正向弧的流入流量加上tp</span><br>                    <span class="hljs-comment">//反向弧的流入流量就是减去tp</span><br>                    edge[sta[i]].flow += tp;<br>                    edge[sta[i] ^ <span class="hljs-number">1</span>].flow -= tp;<br>                    <span class="hljs-comment">//这条路的残余流量为零，经过这条路径的增广路不再存在</span><br>                    <span class="hljs-comment">//增广路的尾边缩回到这个点</span><br>                    <span class="hljs-comment">//并尝试寻找经过这个点的其他的增广路</span><br>                    <span class="hljs-keyword">if</span>(edge[sta[i]].cap - edge[sta[i]].flow == <span class="hljs-number">0</span>)<br>                        tail = i;<br>                &#125;<br>                <span class="hljs-comment">//当前增广路的尾边回退到上一个点，，继续搜索其他的增广路</span><br>                u = edge[sta[tail] ^ <span class="hljs-number">1</span>].to;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(~cur[u] &amp;&amp;<br>                    edge[cur[u]].cap &gt; edge[cur[u]].flow &amp;&amp;<br>                    dep[u] + <span class="hljs-number">1</span> == dep[edge[cur[u]].to])<br>            &#123;<br>                <span class="hljs-comment">//当这条边能到达、残余流量为正值并且u是v的上一层的点时</span><br>                sta[tail++] = cur[u];   <span class="hljs-comment">//增广路的点数tail++，并保存这条边到sta</span><br>                u = edge[cur[u]].to;    <span class="hljs-comment">//更新u</span><br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-comment">//回退？？</span><br>                <span class="hljs-comment">//while(u != s &amp;&amp; cur[u] == -1)</span><br>                <span class="hljs-keyword">while</span>(u != s &amp;&amp; !(~cur[u]))<br>                    u = edge[sta[--tail] ^ <span class="hljs-number">1</span>].to;<br>                cur[u] = edge[cur[u]].next;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxflow;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d &quot;</span> , &amp;n , &amp;np , &amp;nc , &amp;m) != EOF)<br>    &#123;<br>        init();<br>        <span class="hljs-keyword">while</span>(m--)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot; (%d,%d)%d&quot;</span> , &amp;u , &amp;v , &amp;z); <span class="hljs-comment">//输入前面有空格</span><br>            ++u;++v;<br>            addedge(u , v , z);<br>        &#125;<br>        <span class="hljs-keyword">while</span>(np--)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot; (%d)%d&quot;</span> , &amp;u , &amp;z);<br>            ++u;<br>            addedge(<span class="hljs-number">0</span> , u , z);                 <span class="hljs-comment">//超级源点</span><br>        &#125;<br>        <span class="hljs-keyword">while</span>(nc--)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot; (%d)%d&quot;</span> , &amp;u , &amp;z);<br>            ++u;<br>            addedge(u , n + <span class="hljs-number">1</span> , z);             <span class="hljs-comment">//超级汇点</span><br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span> , dinic(<span class="hljs-number">0</span> , n + <span class="hljs-number">1</span> , n + <span class="hljs-number">1</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p><del>下一个就是sap,isap了吧，，，头疼ing</del></p>
<p><del>(end)</del></p>
<h2 id="isap模板"><a href="#isap模板" class="headerlink" title="isap模板"></a><strong>isap模板</strong></h2><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a><strong>算法思路</strong></h3><p><strong>最短增广路算法(SAP)</strong></p>
<blockquote>
<p><strong>算法思想</strong><br>最短增广路算法是一种运用距离标号使寻找增广路的时间复杂度下降的算法。所谓的距离标号就是某个点到汇点的最少的弧的数量(即当边权为1时某个点的最短路径长度). 设点i的标号为d[i], 那么如果将满足d[i] = d[j] + 1, 且增广时只走允许弧, 那么就可以达到”怎么走都是最短路”的效果. 每个点的初始标号可以在一开始用一次从汇点沿所有反向的BFS求出.</p>
</blockquote>
<h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a><strong>算法流程</strong></h3><blockquote>
<p><strong>算法流程</strong></p>
<ul>
<li>1) 定义节点的标号为到汇点的最短距离;</li>
<li>2) 每次沿可行边进行增广, 可行边即: 假设有两个点 i, j 若 d[i] = 3, d[j] = 4, 则d[j] = d[i] + 1, 也就是从 j 到 i 有一条边.</li>
<li>3) 找到增广路后，将路径上所有边的流量更新.</li>
<li>4) 遍历完当前结点的可行边后更新当前结点的标号为 $d[now]=min(d[next]|Flow(now,next)&gt;0)+1$，使下次再搜的时候有路可走。</li>
<li>5) 图中不存在增广路后即退出程序，此时得到的流量值就是最大流。</li>
</ul>
<p>需要注意的是, 标号的更新过程首先我们要理解更新标号的目的。<strong>标号如果需要更新</strong>，<strong>说明在当前的标号下已经没有增广路可以继续走</strong>，这时更新标号就可以使得我们有继续向下走的可能，<strong>并且每次找的都是能走到的点中标号最小的那个点</strong>，这样也使得每次搜索长度最小.</p>
</blockquote>
<p><strong>下面的图演示了标号的更新过程:</strong></p>
<ul>
<li><p>1.首先我们假设有个图如下，为了简化没有标箭头也没有写流量:<br><img src="https://blog.andrewei.info/images/network-flows/FFalgo3.png" alt=""></p>
</li>
<li><p>2.红色的数为图标号, 每个点的标号为其到汇点的最短距离(这里把每条边看作1)<br><img src="https://blog.andrewei.info/images/network-flows/FFalgo4.png" alt=""></p>
</li>
<li><p>3.第一遍遍历时，找到了1-&gt;2-&gt;9这样一条增广路以后，更新边上流量值, 得到下图<br><img src="https://blog.andrewei.info/images/network-flows/FFalgo5.png" alt=""></p>
</li>
</ul>
<p>$棕色字体为边上的流量值。这时按照标号再搜一遍,发现从1出发已经找不到增广路了，因为flow(1,2)等于0不可以走，h[1]=2,h[3]=2≠h[1]+1,h[5]=4≠h[1]+1，所以这时更新1的标号，按照 min(h[next]|Flow(now,next)&gt;0)+1，修改后 h[1]=h[3]+1=3.$</p>
<ul>
<li><p>4.第二遍遍历以后找到了这样一条增广路：1-&gt;3-&gt;4-&gt;9,做完这条路以后又发现无法找到可行边了，这时再更新标号使图中有路可走，如上文所说的那样做，再次修改后h[1]=h[5]+1=5，就这样搜索并更新直到变成下图<br><img src="https://blog.andrewei.info/images/network-flows/FFalgo6.png" alt=""></p>
</li>
<li><p>5.这时再更新h[1]发现没有点可以用来更新h[1]了，于是此时h[1]=∞，使程序退出。</p>
</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//isap+bfs+stack求最大流</span><br><span class="hljs-comment">//貌似时间复杂度要比dinic还要小一些</span><br><span class="hljs-comment">//bfs只求一次层次图，而且编号是从汇点开始的</span><br><span class="hljs-comment">//之后的编号的更新在isap中更新</span><br><span class="hljs-comment">//更新按照d[now]=min(d[next]|Flow(now,next)&gt;0)+1</span><br><span class="hljs-comment">//gap优化的目的是当出现断链时，即存在编号的个数为零的情况时停止寻找不存在增广路</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">105</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">int</span> tol;<br><span class="hljs-keyword">int</span> n , np , nc , m;<br><span class="hljs-keyword">int</span> u , v , z;<br><span class="hljs-keyword">int</span> head[maxn];         <span class="hljs-comment">//链式前向星存图</span><br><span class="hljs-keyword">int</span> gap[maxn];          <span class="hljs-comment">//gap优化，，gap[i]表示编号为i的节点的数量，，为零表示出现断链</span><br><span class="hljs-keyword">int</span> dis[maxn];          <span class="hljs-comment">//分层后每个点的编号</span><br><span class="hljs-keyword">int</span> cur[maxn];          <span class="hljs-comment">//弧优化所保存的弧，避免多次走到重复的位置上，比如走过x-&gt;y这条边后，下次再从x为起点开始走是就不再走x-&gt;y的边了</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to;<br>    <span class="hljs-keyword">int</span> next;<br>    <span class="hljs-keyword">int</span> cap;<br>    <span class="hljs-keyword">int</span> flow;<br>&#125;edge[maxm];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tol = <span class="hljs-number">0</span>;            <span class="hljs-comment">//？？？</span><br>    <span class="hljs-built_in">memset</span>(head , <span class="hljs-number">-1</span> , <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u , <span class="hljs-keyword">int</span> v , <span class="hljs-keyword">int</span> w , <span class="hljs-keyword">int</span> rw = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tol].to = v;edge[tol].cap = w;edge[tol].flow = <span class="hljs-number">0</span>;<br>    edge[tol].next = head[u];head[u] = tol++;<br>    edge[tol].to = u; edge[tol].cap = rw;edge[tol].flow = <span class="hljs-number">0</span>;<br>    edge[tol].next = head[v];head[v] = tol++;<br>&#125;<br><br><span class="hljs-keyword">int</span> q[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//bfs一次得到从汇点开始的层次图</span><br>    <span class="hljs-built_in">memset</span>(dis , <span class="hljs-number">-1</span> , <span class="hljs-keyword">sizeof</span> dis);<br>    <span class="hljs-built_in">memset</span>(gap , <span class="hljs-number">0</span> , <span class="hljs-keyword">sizeof</span> gap);<br>    gap[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> front = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> rear = <span class="hljs-number">0</span>;<br>    dis[t] = <span class="hljs-number">0</span>;         <span class="hljs-comment">//汇点的编号是0</span><br>    q[rear++] = t;<br>    <span class="hljs-keyword">while</span>(front != rear)<br>    &#123;<br>        <span class="hljs-comment">//这里bfs应该用的逆图</span><br>        <span class="hljs-keyword">int</span> u = q[front++];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(~dis[v]) <span class="hljs-keyword">continue</span>;<br>            q[rear++] = v;<br>            dis[v] = dis[u] + <span class="hljs-number">1</span>;    <span class="hljs-comment">//相邻编号递增</span><br>            ++gap[dis[v]];          <span class="hljs-comment">//对应编号的点的数量增一</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">int</span> <span class="hljs-built_in">stack</span>[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">isap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> t , <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    bfs(s , t);                     <span class="hljs-comment">//建一次层次图</span><br>    <span class="hljs-built_in">memcpy</span>(cur , head , <span class="hljs-keyword">sizeof</span> head);<br>    <span class="hljs-keyword">int</span> top = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> u = s;<br>    <span class="hljs-keyword">int</span> maxflow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(dis[s] &lt; n)               <span class="hljs-comment">//最大的编号只可能是n-1，大于说明出现断层</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(u == t)<br>        &#123;<br>            <span class="hljs-comment">//当找到一条增广路时，更新这条路上的流量</span><br>            <span class="hljs-keyword">int</span> min = inf;<br>            <span class="hljs-keyword">int</span> inser;              <span class="hljs-comment">//记录回退点</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i)<br>            &#123;<br>                <span class="hljs-comment">//找到增广路上的最小残余流量</span><br>                <span class="hljs-keyword">if</span>(min &gt; edge[<span class="hljs-built_in">stack</span>[i]].cap - edge[<span class="hljs-built_in">stack</span>[i]].flow)<br>                &#123;<br>                    min = edge[<span class="hljs-built_in">stack</span>[i]].cap - edge[<span class="hljs-built_in">stack</span>[i]].flow;<br>                    inser = i;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i)<br>            &#123;<br>                edge[<span class="hljs-built_in">stack</span>[i]].flow += min;<br>                edge[<span class="hljs-built_in">stack</span>[i] ^ <span class="hljs-number">1</span>].flow -= min;<br>            &#125;<br>            maxflow += min;<br>            <span class="hljs-comment">//回退</span><br>            top = inser;<br>            u = edge[<span class="hljs-built_in">stack</span>[top] ^ <span class="hljs-number">1</span>].to;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">int</span> v;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = cur[u]; ~i; i = edge[i].next)<br>        &#123;<br>            <span class="hljs-comment">//找到一条从u出发的可行路径</span><br>            <span class="hljs-comment">//满足残余流量大于零并且v是u的下一层</span><br>            v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dis[v] + <span class="hljs-number">1</span> == dis[u])<br>            &#123;<br>                flag = <span class="hljs-literal">true</span>;<br>                cur[u] = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)<br>        &#123;<br>            <span class="hljs-comment">//存在这样的可行路径时压栈保存</span><br>            <span class="hljs-comment">//continue继续找</span><br>            <span class="hljs-built_in">stack</span>[top++] = cur[u];<br>            u = v;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> min = n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dis[edge[i].to] &lt; min)<br>            &#123;<br>                min = dis[edge[i].to];<br>                cur[u] = i;<br>            &#125;<br>        &#125;<br>        --gap[dis[u]];                          <span class="hljs-comment">//该编号的数量减一</span><br>        <span class="hljs-keyword">if</span>(!gap[dis[u]])    <span class="hljs-keyword">return</span> maxflow;     <span class="hljs-comment">//出现断层时退出</span><br>        dis[u] = min + <span class="hljs-number">1</span>;<br>        ++gap[dis[u]];<br>        <span class="hljs-keyword">if</span>(u != s)<br>            u = edge[<span class="hljs-built_in">stack</span>[--top] ^ <span class="hljs-number">1</span>].to;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxflow;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//freopen(&quot;233.txt&quot; , &quot;r&quot; , stdin);</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d &quot;</span> , &amp;n , &amp;np , &amp;nc , &amp;m) != EOF)<br>    &#123;<br>        init();<br>        <span class="hljs-keyword">while</span>(m--)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot; (%d,%d)%d&quot;</span> , &amp;u , &amp;v , &amp;z);<br>            ++u;++v;<br>            addedge(u , v , z);<br>        &#125;<br>        <span class="hljs-keyword">while</span>(np--)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot; (%d)%d&quot;</span> , &amp;u , &amp;z);<br>            ++u;<br>            addedge(<span class="hljs-number">0</span> , u , z);<br>        &#125;<br>        <span class="hljs-keyword">while</span>(nc--)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot; (%d)%d&quot;</span> , &amp;u , &amp;z);<br>            ++u;<br>            addedge(u , n + <span class="hljs-number">1</span> , z);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span> , isap(<span class="hljs-number">0</span> , n + <span class="hljs-number">1</span> , n + <span class="hljs-number">2</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>这两个算法的时间复杂度都是 $O(V^2E)$</p>
<p><del>还有一个更快的实现的方法，，预流推进算法 $O(V^2 \sqrt E)$，，，那天再看把，，，</del></p>
<p><del>接下来就是做几道题去看最小费用最大流了吧，，，，</del></p>
<p><del>时间为什么这么的快啊QAQ,,,</del></p>
<p>剩下的东西在新的一篇网络流博客中，，，，QAQ</p>
<p>(end)</p>
]]></content>
      <categories>
        <category>ACM-网络流-最大流</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>2019 Multi-University Training Contest 1</title>
    <url>/2019/07/24/%C2%962019-Multi-University-Training-Contest-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>补题ing</p>
<span id="more"></span>
<h1 id="Operation"><a href="#Operation" class="headerlink" title="Operation"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6579">Operation</a></h1><p>这题的大意是对于给定的数组，有两个操作，一个是询问一个区间的异或和的最大值，，另一个是在这个数组后面增加一个值，，，</p>
<p>这题也是诱使我学线性基的原因，，</p>
<p>题解说直接数据结构维护会T，，我也没试，，正解是贪心的维护一个 <strong>前缀线性基</strong> ，在每插入一个数时，，如果能插入，，尽可能的插到高位，，（这样可以保证靠近r的可以插入的数尽可能的在高位，，</p>
<p>也就是说，，对于任意的任意的一个区间，，不管它的长度多大，，，他的线性基最多是30个（针对这题），，，所以我们只需要维护r前面出现的较晚的新基，，这样每次询问，，都看得在r处的线性基中出现比l晚的基即可，，为了实现这个过程，，，给每一个线性基中的每一位都加一个标志位 $p_i$ ，， 在插入一个新的数时，，，尽可能的把他放在高位，，，（碰到一个可以插入的位置时，把他插在这里，，然后下推其它的基，，，</p>
<p>这题不能莽，直接开ll，，，会mle，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;iostream&gt;</span><br><span class="hljs-comment">// #include &lt;cstdio&gt;</span><br><span class="hljs-comment">// #include &lt;cstdlib&gt;</span><br><span class="hljs-comment">// #include &lt;string.h&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;algorithm&gt;</span><br><span class="hljs-comment">// #include &lt;set&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-comment">// #include &lt;ctime&gt;</span><br><span class="hljs-comment">// #include &lt;random&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">5e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br>  <br>  <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinearBasis</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> type;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxbase = <span class="hljs-number">30</span>;<br>    <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>    type a[maxbase + <span class="hljs-number">1</span>];<br>    type p[maxbase + <span class="hljs-number">1</span>];<br>    LinearBasis()<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> a);<br>        <span class="hljs-built_in">memset</span>(p, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> p);<br>    &#125;<br>    LinearBasis(type *x, <span class="hljs-keyword">int</span> n)<br>    &#123;<br>        LinearBasis();<br>        build(x, n); <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(type *x, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            insert(x[i]);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> a);<br>        <span class="hljs-built_in">memset</span>(p, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> p);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">insert</span><span class="hljs-params">(type t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//暴力插入一个数，维护的是一个上三角型的线性基矩阵，时间复杂度低，当待插入元素能插入时，返回true</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t &amp; (<span class="hljs-number">1ll</span> &lt;&lt; i))<br>            &#123;<br>                <span class="hljs-keyword">if</span>(!a[i])<br>                &#123;<br>                    a[i] = t;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                t ^= a[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">0</span>)flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">insert2</span><span class="hljs-params">(type t, type pos)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t &amp; (<span class="hljs-number">1ll</span> &lt;&lt; i))<br>            &#123;<br>                <span class="hljs-keyword">if</span>(!a[i])<br>                &#123;<br>                    a[i] = t;<br>                    p[i] = pos;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pos &gt; p[i])<br>                &#123;<br>                    swap(pos, p[i]);<br>                    swap(t, a[i]);<br>                &#125;<br>                t ^= a[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">0</span>)flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">query</span><span class="hljs-params">(type t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 询问t是否可以被当前线性基表示，不插入</span><br>        <span class="hljs-keyword">if</span>(t &gt; queryMax())<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t &amp; (<span class="hljs-number">1ll</span> &lt;&lt; i))<br>            &#123;<br>                <span class="hljs-keyword">if</span>(!a[i])<br>                &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>                t ^= a[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(type t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//插入一个线性基，利用高斯消元法维护一个对角矩阵</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t &gt;&gt; i &amp; <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(a[i])t ^= a[i];<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    a[i] = t;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; --j)<span class="hljs-keyword">if</span>(a[j] &amp;&amp; (a[i] &gt;&gt; j &amp; <span class="hljs-number">1</span>))a[i] ^= a[j];<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= maxbase; ++j)<span class="hljs-keyword">if</span>(a[j] &gt;&gt; j &amp; <span class="hljs-number">1</span>)a[j] ^= a[i];<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function">LinearBasis <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">const</span> LinearBasis &amp;l1, <span class="hljs-keyword">const</span> LinearBasis &amp;l2)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 得到两个线性基的并</span><br>        LinearBasis ret = l1;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-keyword">if</span>(l2.a[i])<br>                ret.insert(l2.a[i]);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-function">LinearBasis <span class="hljs-title">intersection</span><span class="hljs-params">(<span class="hljs-keyword">const</span> LinearBasis &amp;l1, <span class="hljs-keyword">const</span> LinearBasis &amp;l2)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//得到两个线性基的交</span><br>        LinearBasis all, ret, full;<br>        ret.clear();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            all.a[i] = l1.a[i];<br>            full.a[i] = <span class="hljs-number">1ll</span> &lt;&lt; i;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(l2.a[i])<br>            &#123;<br>                type v = l2.a[i], k = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = maxbase; j &gt;= <span class="hljs-number">0</span>; --j)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(v &amp; (<span class="hljs-number">1ll</span> &lt;&lt; j))<br>                    &#123;<br>                        <span class="hljs-keyword">if</span>(all.a[j])<br>                        &#123;<br>                            v ^= all.a[j];<br>                            k ^= full.a[j];<br>                        &#125;<br>                        <span class="hljs-keyword">else</span><br>                        &#123;<br>                            <span class="hljs-comment">// l2&#x27;s basis is not in l1&#x27;s;</span><br>                            flag = <span class="hljs-literal">false</span>;<br>                            all.a[j] = v;<br>                            full.a[j] = k;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(flag)<br>                &#123;<br>                    type v = <span class="hljs-number">0</span>; <span class="hljs-comment">// get intersection by k;</span><br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = maxbase; j &gt;= <span class="hljs-number">0</span>; --j)<br>                    &#123;<br>                        <span class="hljs-keyword">if</span>(k &amp; (<span class="hljs-number">1ll</span> &lt;&lt; j))<br>                        &#123;<br>                            v ^= l1.a[j];<br>                        &#125;<br>                    &#125;<br>                    ret.insert(v);  <span class="hljs-comment">//save ans</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-comment">//询问最值</span><br>    <span class="hljs-function">type <span class="hljs-title">queryMax</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        type ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-keyword">if</span>((ret ^ a[i]) &gt; ret)<br>                ret ^= a[i];<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-function">type <span class="hljs-title">queryMax</span><span class="hljs-params">(type l)</span></span><br><span class="hljs-function">    </span>&#123;<br>        type ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-keyword">if</span>((ret ^ a[i]) &gt; ret &amp;&amp; l &lt;= p[i])<br>                ret ^= a[i];<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-function">type <span class="hljs-title">queryMin</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= maxbase; ++i)<br>            <span class="hljs-keyword">if</span>(a[i])<br>                <span class="hljs-keyword">return</span> a[i];<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;lb[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>  <br>    <span class="hljs-keyword">int</span> t; <span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> n, m;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>        ll x;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; x;<br>            lb[i] = lb[i - <span class="hljs-number">1</span>]; <br>            lb[i].insert2(x, i);<br>        &#125;<br>        <span class="hljs-keyword">int</span> op;<br>        ll lstans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(m--)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; op;<br>            <span class="hljs-keyword">if</span>(!op)<br>            &#123;<br>                ll l, r;<span class="hljs-built_in">cin</span> &gt;&gt; l &gt;&gt; r;<br>                l = (l ^ lstans) % n + <span class="hljs-number">1</span>;<br>                r = (r ^ lstans) % n + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(l &gt; r)swap(l, r);<br>                lstans = lb[r].queryMax(l);<br>                <span class="hljs-built_in">cout</span> &lt;&lt; lstans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ll x;<span class="hljs-built_in">cin</span> &gt;&gt; x;<br>                x ^= lstans;<br>                lb[++n] = lb[n - <span class="hljs-number">1</span>];<br>                lb[n].insert2(x, n);<br>            &#125;<br>            <br>        &#125;<br><br>    &#125;<br>      <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="Path"><a href="#Path" class="headerlink" title="Path"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6582">Path</a></h1><p>给你张图，，然后找到所有的最短路，建一个新图，，，删去最少权值和的边使得新图不连通，，求这个权值，，</p>
<p>跑两边最短路，，删点建新图，，然后跑网络流，求最小割就行了，，，</p>
<p>不会删点自闭到结束，，，嫌两边dijkstra麻烦一直没写，，谁知道正解就是这个，，QAQ。。。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;algorithm&gt;</span><br><span class="hljs-comment">// #include &lt;set&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge1</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt;<br>    ll w;<br>&#125;edge1[<span class="hljs-number">2</span>][maxn &lt;&lt; <span class="hljs-number">1</span>];<br><br><span class="hljs-keyword">bool</span> vis1[<span class="hljs-number">2</span>][maxn];<br>ll dis1[<span class="hljs-number">2</span>][maxn];<br><span class="hljs-keyword">int</span> tot1, tot2, head1[<span class="hljs-number">2</span>][maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    tot1 = tot2 = <span class="hljs-number">0</span>;<br>    m &lt;&lt;= <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// for(int i = 0; i &lt;= m; ++i)</span><br>        <span class="hljs-comment">// head1[0][i] = head1[1][i] = -1;</span><br>    <span class="hljs-built_in">memset</span>(head1, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head1);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge1[<span class="hljs-number">0</span>][tot1].to = v;<br>    edge1[<span class="hljs-number">0</span>][tot1].w = w;<br>    edge1[<span class="hljs-number">0</span>][tot1].nxt = head1[<span class="hljs-number">0</span>][u];<br>    head1[<span class="hljs-number">0</span>][u] = tot1++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge1[<span class="hljs-number">1</span>][tot2].to = v;<br>    edge1[<span class="hljs-number">1</span>][tot2].w = w;<br>    edge1[<span class="hljs-number">1</span>][tot2].nxt = head1[<span class="hljs-number">1</span>][u];<br>    head1[<span class="hljs-number">1</span>][u] = tot2++;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v;<br>    ll w;<br>    node()&#123;&#125;<br>    node(<span class="hljs-keyword">int</span> _v, ll _w)&#123;v = _v; w = _w;&#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;r)<span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> w &gt; r.w;<br>    &#125;<br>&#125;;<br><span class="hljs-built_in">priority_queue</span>&lt;node&gt; Q;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijktra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> now)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// memset(vis1, false, sizeof vis1);</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)vis1[now][i] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)dis1[now][i] = linf;<br>    <span class="hljs-keyword">while</span>(!Q.empty())Q.pop();<br>    dis1[now][s] = <span class="hljs-number">0</span>;<br>    Q.push(node(s, <span class="hljs-number">0</span>));<br>    node t;<br>    <span class="hljs-keyword">while</span>(!Q.empty())<br>    &#123;<br>        t = Q.top(); Q.pop();<br>        <span class="hljs-keyword">int</span> u = t.v;<br>        <span class="hljs-keyword">if</span>(vis1[now][u])<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-comment">// if(visdfs[u])continue;</span><br>        vis1[now][u] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head1[now][u]; ~i; i = edge1[now][i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge1[now][i].to;<br>            ll w = edge1[now][i].w;<br>            <span class="hljs-keyword">if</span>(!vis1[now][v] &amp;&amp; dis1[now][v] &gt; dis1[now][u] + w)<br>            &#123;<br>                dis1[now][v] = dis1[now][u] + w;<br>                Q.push(node(v, dis1[now][v]));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/**************isap ***************/</span><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> u, v, z;<br><span class="hljs-keyword">int</span> gap[maxn &lt;&lt; <span class="hljs-number">1</span>];          <br><span class="hljs-keyword">int</span> cur[maxn &lt;&lt; <span class="hljs-number">1</span>];          <br><span class="hljs-keyword">int</span> q[maxn &lt;&lt; <span class="hljs-number">1</span>];<br>ll dis[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to;<br>    <span class="hljs-keyword">int</span> next;<br>    ll cap;<br>    ll flow;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tol, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    tol = <span class="hljs-number">0</span>;            <span class="hljs-comment">//？？？</span><br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>    <span class="hljs-comment">// m &lt;&lt;= 1;</span><br>    <span class="hljs-comment">// for(int i = 0; i &lt;= m; ++i)head[i] = -1;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u , <span class="hljs-keyword">int</span> v , ll w , ll rw = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tol].to = v;edge[tol].cap = w;edge[tol].flow = <span class="hljs-number">0</span>;<br>    edge[tol].next = head[u];head[u] = tol++;<br>    edge[tol].to = u; edge[tol].cap = rw;edge[tol].flow = <span class="hljs-number">0</span>;<br>    edge[tol].next = head[v];head[v] = tol++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//bfs一次得到从汇点开始的层次图</span><br>    <span class="hljs-built_in">memset</span>(dis , <span class="hljs-number">-1</span> , <span class="hljs-keyword">sizeof</span> dis);<br>    <span class="hljs-built_in">memset</span>(gap , <span class="hljs-number">0</span> , <span class="hljs-keyword">sizeof</span> gap);<br>    <span class="hljs-comment">// for(int i = 0; i &lt;= n; ++i)dis[i] = -1;</span><br>    <span class="hljs-comment">// for(int i = 0; i &lt;= n; ++i)gap[i] = 0;</span><br>    gap[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> front = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> rear = <span class="hljs-number">0</span>;<br>    dis[t] = <span class="hljs-number">0</span>;         <span class="hljs-comment">//汇点的编号是0</span><br>    q[rear++] = t;<br>    <span class="hljs-keyword">while</span>(front != rear)<br>    &#123;<br>        <span class="hljs-comment">//这里bfs应该用的逆图</span><br>        <span class="hljs-keyword">int</span> u = q[front++];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-comment">// cout &lt;&lt; u &lt;&lt; &quot;-&quot; &lt;&lt; v &lt;&lt; endl;</span><br>            <span class="hljs-keyword">if</span>(~dis[v]) <span class="hljs-keyword">continue</span>;<br>            q[rear++] = v;<br>            dis[v] = dis[u] + <span class="hljs-number">1</span>;    <span class="hljs-comment">//相邻编号递增</span><br>            ++gap[dis[v]];          <span class="hljs-comment">//对应编号的点的数量增一</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">int</span> sta[maxn];<br><span class="hljs-function">ll <span class="hljs-title">isap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> t , <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    bfs(s , t, n);                     <span class="hljs-comment">//建一次层次图</span><br>    <span class="hljs-built_in">memcpy</span>(cur , head , <span class="hljs-keyword">sizeof</span> head);<br>    <span class="hljs-keyword">int</span> top = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> u = s;<br>    ll maxflow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(dis[s] &lt; n)               <span class="hljs-comment">//最大的编号只可能是n-1，大于说明出现断层</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(u == t)<br>        &#123;<br>            <span class="hljs-comment">//当找到一条增广路时，更新这条路上的流量</span><br>            ll min = inf;<br>            <span class="hljs-keyword">int</span> inser;              <span class="hljs-comment">//记录回退点</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i)<br>            &#123;<br>                <span class="hljs-comment">//找到增广路上的最小残余流量</span><br>                <span class="hljs-keyword">if</span>(min &gt; edge[sta[i]].cap - edge[sta[i]].flow)<br>                &#123;<br>                    min = edge[sta[i]].cap - edge[sta[i]].flow;<br>                    inser = i;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i)<br>            &#123;<br>                edge[sta[i]].flow += min;<br>                edge[sta[i] ^ <span class="hljs-number">1</span>].flow -= min;<br>            &#125;<br>            maxflow += min;<br>            <span class="hljs-comment">//回退</span><br>            top = inser;<br>            u = edge[sta[top] ^ <span class="hljs-number">1</span>].to;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">int</span> v;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = cur[u]; ~i; i = edge[i].next)<br>        &#123;<br>            <span class="hljs-comment">//找到一条从u出发的可行路径</span><br>            <span class="hljs-comment">//满足残余流量大于零并且v是u的下一层</span><br>            v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dis[v] + <span class="hljs-number">1</span> == dis[u])<br>            &#123;<br>                flag = <span class="hljs-literal">true</span>;<br>                cur[u] = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)<br>        &#123;<br>            <span class="hljs-comment">//存在这样的可行路径时压栈保存</span><br>            <span class="hljs-comment">//continue继续找</span><br>            sta[top++] = cur[u];<br>            u = v;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        ll min = n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dis[edge[i].to] &lt; min)<br>            &#123;<br>                min = dis[edge[i].to];<br>                cur[u] = i;<br>            &#125;<br>        &#125;<br>        --gap[dis[u]];                          <span class="hljs-comment">//该编号的数量减一</span><br>        <span class="hljs-keyword">if</span>(!gap[dis[u]])    <span class="hljs-keyword">return</span> maxflow;     <span class="hljs-comment">//出现断层时退出</span><br>        dis[u] = min + <span class="hljs-number">1</span>;<br>        ++gap[dis[u]];<br>        <span class="hljs-keyword">if</span>(u != s)<br>            u = edge[sta[--top] ^ <span class="hljs-number">1</span>].to;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxflow;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br> <br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>        init1(m);<br>        <span class="hljs-keyword">int</span> u, v;<br>        ll w;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%lld&quot;</span>, &amp;u, &amp;v, &amp;w);<br>            addedge1(u, v, w);<br>            addedge2(v, u, w);<br>        &#125;<br>        dijktra(n, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        dijktra(n, n, <span class="hljs-number">1</span>);<br>        ll min = dis1[<span class="hljs-number">0</span>][n];<br>        <span class="hljs-comment">// cout &lt;&lt; min &lt;&lt; endl;</span><br>        <span class="hljs-comment">// for(int i = 1; i &lt;= n; ++i)cout &lt;&lt; dis1[0][i] &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;</span><br>        <span class="hljs-comment">// for(int i = 1; i &lt;= n; ++i)cout &lt;&lt; dis1[1][i] &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;</span><br>        <span class="hljs-comment">// for(int i = 1; i &lt;= n; ++i)cout &lt;&lt; visdfs[i] &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;</span><br>        init(m);<br>        <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; ++u)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head1[<span class="hljs-number">0</span>][u]; ~i; i = edge1[<span class="hljs-number">0</span>][i].nxt)<br>            &#123;<br>                <span class="hljs-keyword">int</span> v = edge1[<span class="hljs-number">0</span>][i].to;<br>                ll w = edge1[<span class="hljs-number">0</span>][i].w;<br>                <span class="hljs-comment">// cout &lt;&lt; u &lt;&lt; &quot;------&quot; &lt;&lt; v &lt;&lt; visdfs[v] &lt;&lt; endl;</span><br>                <span class="hljs-comment">// cout &lt;&lt; dis1[u] &lt;&lt; &quot;---&quot; &lt;&lt; w &lt;&lt; &quot;----&quot; &lt;&lt; dis1[v] &lt;&lt; endl;</span><br>                <span class="hljs-comment">// if(visdfs[v] &amp;&amp; dis1[u] + w == dis1[v])</span><br>                <span class="hljs-comment">// cout &lt;&lt; dis1[0][u] &lt;&lt; &quot; &quot; &lt;&lt; w &lt;&lt; &quot; &quot; &lt;&lt; dis1[0][v] &lt;&lt; &quot; &quot; &lt;&lt; dis1[1][u] &lt;&lt; &quot; &quot; &lt;&lt; dis1[1][v] &lt;&lt; endl;</span><br>                <span class="hljs-comment">// if(dis1[0][u] + w == dis1[0][v] &amp;&amp; dis1[1][u] + w == dis1[1][v])</span><br>                <span class="hljs-keyword">if</span>(dis1[<span class="hljs-number">0</span>][u] + w + dis1[<span class="hljs-number">1</span>][v] == min)<br>                &#123;<br>                    addedge(u, v, w);<br>                    <span class="hljs-comment">// cout &lt;&lt; u &lt;&lt; &quot;-&quot; &lt;&lt; v &lt;&lt; &quot;-&quot; &lt;&lt; w &lt;&lt; endl;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// cout &lt;&lt; cnt &lt;&lt; endl;</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, isap(<span class="hljs-number">1</span>, n, n));<br>        <span class="hljs-comment">// cout &lt;&lt; &quot;----------------------------&quot; &lt;&lt; endl;</span><br>    &#125;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>【日记】国庆随笔</title>
    <url>/2021/10/07/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%91%E6%88%91%E4%BB%AC%E7%9A%84%E7%AC%AC%E4%BA%8C%E6%AC%A1%E7%9B%B8%E8%A7%81/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ac8b97ffe8e0a23079d5f03be6ca22449310f06bc79069cc84cc2184a3c25852"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>diary</category>
      </categories>
  </entry>
  <entry>
    <title>动态规划_1</title>
    <url>/2018/07/29/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>今天集训学的是动态规划，，，也就是dp，，，这玩意早就听说过了，，，一直感觉很难，，，听名字就有些高大上，，，今天了解了其大致的思想，，，四道题也就做了两道，，，还是学长上午讲过的，，自己根据模板直接套的，，，中间那两题完全不知道从哪下手，，，或者说不知道如何实现脑子里的想法，，，，其中B题是cpcc的一道原题，，，用了动态规划，树状数组，离散化三个主要的算法，，，综合性很强，，，难啊啊啊啊，，，</p>
<span id="more"></span>
<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><h3 id="动态规划介绍"><a href="#动态规划介绍" class="headerlink" title="动态规划介绍"></a>动态规划介绍</h3><p>(直接粘大佬介绍。。。](<a href="https://blog.csdn.net/cc_again/article/details/25866971">https://blog.csdn.net/cc_again/article/details/25866971</a>)</p>
<blockquote>
<p>动态规划（英语：Dynamic programming，DP）是一种在数学、计算机科学和经济学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。 动态规划常常适用于有重叠子问题和最优子结构性质的问题，动态规划方法所耗时间往往远少于朴素解法。</p>
<p>动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再合并子问题的解以得出原问题的解。 通常许多子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量： 一旦某个给定子问题的解已经算出，则将其记忆化存储，以便下次需要同一个子问题解之时直接查表。 这种做法在重复子问题的数目关于输入的规模呈指数增长时特别有用。</p>
</blockquote>
<p>简单来说，，动态规划就是一种用于求解包含 <strong>重叠子问题</strong> 的最优解问题的思想，，，<br>也就是，将原问题分解为相似的子问题，，在求解的过程中通过子问题求出原问题的解，，，</p>
<h3 id="动态规划满足的性质"><a href="#动态规划满足的性质" class="headerlink" title="动态规划满足的性质"></a>动态规划满足的性质</h3><p><a href="https://blog.csdn.net/cc_again/article/details/25866971">一样，，，粘大佬表达，，，</a></p>
<ul>
<li><p><strong>最优子结构性质</strong>：如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质（即满足最优化原理）。最优子结构性质为动态规划算法解决问题提供了重要线索。</p>
</li>
<li><p><strong>子问题重叠性质</strong> ：子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。动态规划算法正是利用了这种子问题的重叠性质，对每一个子问题只计算一次，然后将其计算结果保存在一个表格中，当再次需要计算已经计算过的子问题时，只是在表格中简单地查看一下结果，从而获得较高的效率。</p>
</li>
<li><p><strong>无后效性</strong> ：将各阶段按照一定的次序排列好之后，对于某个给定的阶段状态，它以前各阶段的状态无法直接影响它未来的决策，而只能通过当前的这个状态。换句话说，每个状态都是过去历史的一个完整总结。这就是无后向性，又称为无后效性。</p>
</li>
</ul>
<h3 id="动态规划主要使用步骤"><a href="#动态规划主要使用步骤" class="headerlink" title="动态规划主要使用步骤"></a>动态规划主要使用步骤</h3><ul>
<li><strong>分析问题</strong> ：看满不满足使用动态规划的基本条件，，简单地说就是一个状态不受前面的决策的影响，，这个状态的决策也不会影响后面的状态，，</li>
<li><strong>定义状态</strong> ：这一步很重要，，关系到算法的复杂度和 <strong>状态转移方程</strong></li>
<li>找出状态转移方程和初始状态，边界状态，利用状态转移方程计算出所有状态</li>
<li>利用上面求解的状态求解问题</li>
</ul>
<p>套路归套路，，最终还是要看题目的要求，，题意来解，，，</p>
<h3 id="动态规划的复杂度"><a href="#动态规划的复杂度" class="headerlink" title="动态规划的复杂度"></a>动态规划的复杂度</h3><p>一般来说复杂度取决于两个方面：</p>
<ul>
<li>状态本身：一般来说要计算出所有状态，，所以复杂度和定义的状态有关，，比如dp[i][j]类型的复杂度为O(n * m)</li>
<li>状态转移方程：因为一个状态必定从某些子状态转移而来，，所以复杂度还取决与状态转移的复杂度，，有时要在这里选择合适的数据结构来优化，，，比如下面的B题，，，同时这也就引出了各种各样的动态规划的题型，，，如树形dp，，，斜率dp，，，区间dp，，，概率dp，，，等等，，，</li>
</ul>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="Problem-A-你又没有好好听课3"><a href="#Problem-A-你又没有好好听课3" class="headerlink" title="Problem A: 你又没有好好听课3"></a>Problem A: 你又没有好好听课3</h3><p>Time Limit: 2 Sec  Memory Limit: 128 MB</p>
<blockquote>
<p>Description</p>
<p>为了检验你上午有没有好好听课，于是又了这一题。给你一个N*M的方格网，左上角为（1，1）右下角为(N, M)，每个方格中有一个数a[i][j]，刚开始你在位置(1, 1)你每次可以往下走或者往右走一步，你需要确定一种走的方案，最后走到(N, M)，使得途径格子的数的和最大。</p>
<p>Input</p>
<p>输入的第一行一个整数T（T&lt;= 5）代表测试数据的组数</p>
<p>接下里T组测试数据</p>
<p>每组测试数据第一行为两个整数N, M（1 &lt;= N, M &lt;= 1000）代表方格网的大小</p>
<p>接下来N行，每一行M个数，代表a[i][j]（1 &lt;= a[i][j] &lt;= 1000）</p>
<p>Output</p>
<p>对于每组测试数据，输出一个整数代表从（1， 1）走到 (N, M)途径的格子的最大的和。</p>
<p>Sample Input</p>
<p>1<br>2 2<br>100 1<br>50 1</p>
<p>Sample Output<br>151</p>
</blockquote>
<p>简单的dp，，，根据题意写出状态转移方程 $d[i][j] = max(d[i - 1][j] , d[i][j - 1]) + a[i][j];$</p>
<p>我的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">int</span> a[N][N];<br><span class="hljs-keyword">int</span> d[N][N];<br><span class="hljs-keyword">int</span> n , m;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n , <span class="hljs-keyword">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            &#123;<br>                d[i][j] = max(d[i - <span class="hljs-number">1</span>][j] , d[i][j - <span class="hljs-number">1</span>]) + a[i][j];<br>                <span class="hljs-comment">//好像少了特判，，，不过数据过了，，，逃，，，</span><br>            &#125;<br>    <span class="hljs-keyword">return</span> d[n][m];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>                <span class="hljs-built_in">cin</span> &gt;&gt; a[i][j];<br>        <span class="hljs-built_in">memset</span>(d , <span class="hljs-number">0</span> , <span class="hljs-keyword">sizeof</span>(d));<br>        <span class="hljs-built_in">cout</span> &lt;&lt; dp(n , m) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>学长的代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> N, M;<br><span class="hljs-keyword">int</span> A[maxn][maxn];<br><span class="hljs-keyword">int</span> dp[maxn][maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    freopen(<span class="hljs-string">&quot;data.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>);<br>    freopen(<span class="hljs-string">&quot;data.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-built_in">stdout</span>);<br>    <span class="hljs-keyword">int</span> T;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;T);<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= M; j++)<br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;A[i][j]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(dp));<br>        dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = A[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= M; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(i == <span class="hljs-number">1</span> &amp;&amp; j == <span class="hljs-number">1</span>) dp[i][j] = A[i][j];        <span class="hljs-comment">//就是这里的特判，，，，，，，，，，</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i == <span class="hljs-number">1</span> &amp;&amp; j != <span class="hljs-number">1</span>) dp[i][j] = dp[i][j - <span class="hljs-number">1</span>] + A[i][j];<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j == <span class="hljs-number">1</span> &amp;&amp; i != <span class="hljs-number">1</span>) dp[i][j] = dp[i - <span class="hljs-number">1</span>][j] + A[i][j];<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    dp[i][j] = max(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>]) + A[i][j];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dp[N][M]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h3 id="Problem-B-averyboy的麻烦"><a href="#Problem-B-averyboy的麻烦" class="headerlink" title="Problem B: averyboy的麻烦"></a>Problem B: averyboy的麻烦</h3><p>这道题还是真麻烦，，，到现在状态转移方程的实现那里还是有些不懂，，，，，，，噗</p>
<p>主要的推导在代码里，，，还有那两个博客，，，，</p>
<p>我的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) x&amp;(-x)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e3</span> + <span class="hljs-number">3</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">int</span> a[N];<br><span class="hljs-keyword">int</span> b[N];<br><span class="hljs-keyword">int</span> n , m;<br>ll dp[N][N];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> loc , <span class="hljs-keyword">int</span> x , <span class="hljs-keyword">int</span> val)</span>  <span class="hljs-comment">//更新</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = loc; i &lt;= n; i+=lowbit(i))<br>    &#123;<br>        dp[i][x] = (dp[i][x] + val) % MOD;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> loc , <span class="hljs-keyword">int</span> x)</span>             <span class="hljs-comment">//求和</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = loc; i &gt;= <span class="hljs-number">1</span>; i -= lowbit(i))<br>        ans = (dp[i][x] + ans) % MOD;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//freopen(&quot;data.in&quot; , &quot;r&quot; , stdin);</span><br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>            b[i] = a[i];<br>        &#125;<br>        <span class="hljs-comment">//离散化，，，，</span><br>        sort(b + <span class="hljs-number">1</span>,b + <span class="hljs-number">1</span> + n);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i&lt;= n; i++)<br>        &#123;<br>            a[i] = lower_bound(b + <span class="hljs-number">1</span>, b + <span class="hljs-number">1</span> + n, a[i]) - b;  <span class="hljs-comment">//a[i]存储的是该位置是第几大的元素</span><br>        &#125;<br><br>        <span class="hljs-built_in">memset</span>(dp , <span class="hljs-number">0</span> , <span class="hljs-keyword">sizeof</span>(dp));<br>        <span class="hljs-comment">//动态规划，状态转移方程dp[i][j] = sum(dp[k][j-1]) k = &#123;1 , i - 1&#125;</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= min(i , m); j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (j == <span class="hljs-number">1</span>) update(a[i] , <span class="hljs-number">1</span> , <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    ll tmp = query(a[i] - <span class="hljs-number">1</span> , j - <span class="hljs-number">1</span>);<br>                    update(a[i] , j , tmp);<br>                &#125;<br>            &#125;<br>        &#125;<br>        ll ans = query(n , m);<br><br>        <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//https://blog.csdn.net/snowy_smile/article/details/49565493</span><br><span class="hljs-comment">//https://blog.csdn.net/loy_184548/article/details/50073559</span><br><br></code></pre></td></tr></table></figure>
<p>学长的代码：</p>
<p>有空在研究，，，QAQ</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><span class="hljs-keyword">const</span> LL mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> N, M;<br><span class="hljs-keyword">int</span> a[maxn];<br>LL Tree[maxn][maxn];<br>LL dp[maxn][maxn];<span class="hljs-comment">//dp[i][j]表示考虑到第i个数，且以第a[i]个数结尾，长度为j的递增序列个数</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> value;<br>    <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> node &amp;res) <span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">if</span>(value == res.value) <span class="hljs-keyword">return</span> id &gt; res.id;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> value &lt; res.value;<br>    &#125;<br>&#125;Node[maxn];<br><span class="hljs-keyword">int</span> Rank[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(Tree, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(Tree));<br>    <span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(dp));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x&amp;(-x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> loc, <span class="hljs-keyword">int</span> d, LL value)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = loc; i &lt;= N; i += lowbit(i))<br>    &#123;<br>        Tree[i][d] = (Tree[i][d] + value) % mod;<br>    &#125;<br>&#125;<br><span class="hljs-function">LL <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> loc, <span class="hljs-keyword">int</span> d)</span></span><br><span class="hljs-function"></span>&#123;<br>    LL ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = loc; i &gt;= <span class="hljs-number">1</span>; i -= lowbit(i))<br>    &#123;<br>        ans = (ans + Tree[i][d]) % mod;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    freopen(<span class="hljs-string">&quot;data.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>);<br>    freopen(<span class="hljs-string">&quot;data.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-built_in">stdout</span>);<br>    <span class="hljs-keyword">int</span> T;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;T);<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);<br>        init();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;Node[i].value);<br>            Node[i].id = i;<br>        &#125;<br>        sort(Node + <span class="hljs-number">1</span>, Node + N + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)<br>        &#123;<br>            Rank[Node[i].id] = i;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)<br>        &#123;<br>            dp[i][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>            add(Rank[i], <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>; j &lt;= min(M, i); j++)<br>            &#123;<br>                LL temp = get(Rank[i] - <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span>);<br>                dp[i][j] = (dp[i][j] + temp) % mod;<br>                add(Rank[i], j, dp[i][j]);<br>            &#125;<br>        &#125;<br>        LL ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)<br>        &#123;<br>            ans = (ans + dp[i][M]) % mod;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h3 id="Problem-C-averyboy的区间2"><a href="#Problem-C-averyboy的区间2" class="headerlink" title="Problem C: averyboy的区间2"></a>Problem C: averyboy的区间2</h3><p>Time Limit: 2 Sec  Memory Limit: 128 MB</p>
<blockquote>
<p>Description</p>
<p>不仅天外天喜欢子区间，averyboy也非常喜欢子区间。现在天外天给averyboy一个长度为N的序列a[1]~a[N],天外天让averyboy找出一个子区间[l, r]使得这个子区间数的和要比其他子区间数的和要大</p>
<p>Input</p>
<p>第一行一个整数T（T &lt;= 10）代表测试数据的组数</p>
<p>接下来T组测试数据</p>
<p>每组测试数据第一行为一个整数N（1 &lt;= N &lt;= 1e5）代表序列的长度</p>
<p>接下来一行N个整数a[i]（-1000 &lt;= a[i] &lt;= 1000）代表序列a[i]</p>
<p>Output</p>
<p>对于每组测试数据，输出一个整数，代表最大的子区间和。</p>
<p>Sample Input<br>2<br>3<br>1 -100 3<br>4<br>99 -100 98 2</p>
<p>Sample Output<br>3<br>100</p>
<p>HINT</p>
<p>第一组测试样例，选择区间[3,3]和为3最大，第二组测试样例选择区间[3, 4]和为98 + 2 = 100最大</p>
</blockquote>
<p>主要是状态转移方程写出来就行了，，，，QAQ</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">int</span> a[N];<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> dp;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">DP</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> m = -INF;<br>    <span class="hljs-keyword">int</span> dp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        dp = max (dp + a[i] , a[i]);<br>        m = max (m , dp);<br>    &#125;<br>    <span class="hljs-keyword">return</span> m;<br>&#125;<br> <br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>        &#125;<br> <br>        <span class="hljs-built_in">cout</span> &lt;&lt; DP() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>学长的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">100000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> N;<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-keyword">int</span> dp[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//freopen(&quot;data.in&quot;, &quot;r&quot;, stdin);</span><br>   <span class="hljs-comment">// freopen(&quot;data.out&quot;, &quot;w&quot;, stdout);</span><br>    <span class="hljs-keyword">int</span> T;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;T);<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;N);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        &#125;<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">-1000000001</span>;<br>        <span class="hljs-keyword">int</span> acc = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)<br>        &#123;<br>            dp[i] = a[i] + acc;<br>            <span class="hljs-keyword">if</span>(acc + a[i] &gt; <span class="hljs-number">0</span>) acc += a[i];<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                acc = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(dp[i] &gt; ans)<br>            &#123;<br>                ans = dp[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h3 id="Problem-D-averyboy的苹果树"><a href="#Problem-D-averyboy的苹果树" class="headerlink" title="Problem D: averyboy的苹果树"></a>Problem D: averyboy的苹果树</h3><p>Time Limit: 2 Sec  Memory Limit: 128 MB</p>
<blockquote>
<p>Description</p>
<p>averyboy家有一棵苹果树。把这棵苹果树看成一个由N（编号为1~N）个节点组成的以1号节点为根的有根树。每个节点上有一个苹果，每个苹果也有一个营养价值a[i]。现在averyboy想知道以每个节点为根的子树上营养价值为奇数的节点的个数。</p>
<p>Input</p>
<p>输入第一行为一个整数T(T &lt;= 5)代表测试数据的组数</p>
<p>接下来T组测试数据</p>
<p>每组测试数据第一行为一个整数N(1 &lt;= N &lt;= 1e5)<br>接下来一行N个非负整数a[i]代表每一个节点上的一个苹果的营养价值（0 &lt;= a[i] &lt;= 1e6）<br>接下来N - 1行，每一行两个整数u, v代表u, v之间有一条边（1 &lt;= u, v &lt;= N）</p>
<p>Output</p>
<p>对于每组测试数据，输出一行N个数，第i个数代表以第i节点为根的子树（子树包括自己）上苹果营养价值为奇数的个数</p>
<p>Sample Input<br>2<br>3<br>1 2 3<br>1 2<br>2 3<br>3<br>1 1 1<br>1 2<br>2 3</p>
<p>Sample Output<br>2 1 1<br>3 2 1</p>
<p>HINT</p>
<p>在第一组样例中，以1为根的子树包括节点1,2,3但是由于2号节点上的苹果营养价值为2不是奇数，所以以1为根的子树上一共有2个营养价值为奇数的苹果。以2为根的子树包括节点2, 3，所以只有1个营养价值为奇数的苹果.以3为根的子树就是3自身，所以也只有1个营养价值为奇数的苹果。所以最后输出2 1 1</p>
</blockquote>
<p>上课时学长讲过，，，所以直接套模板了，，，dp是在每一个节点，，dp[i] = sum(dp[son]) + 1;</p>
<p>我的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e5</span> * <span class="hljs-number">3</span>;<br><span class="hljs-keyword">int</span> head[maxn];<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-keyword">int</span> cnt;<br><span class="hljs-keyword">int</span> n , m;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to;<br>    <span class="hljs-keyword">int</span> w;<br>    <span class="hljs-keyword">int</span> last;<br>&#125;Edge[maxm];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u , <span class="hljs-keyword">int</span> v , <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    Edge[cnt].to = v;<br>    Edge[cnt].w = w;<br>    Edge[cnt].last = head[u];<br>    head[u] = cnt++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u , <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    Edge[cnt].to = v;<br>    <span class="hljs-comment">//Edge[cnt].w = w;</span><br>    Edge[cnt].last = head[u];<br>    head[u] = cnt++;<br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> dp[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tree_dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//dp[rt] = 1;</span><br>    vis[rt] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[rt]; i != <span class="hljs-number">-1</span>; i = Edge[i].last)<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = Edge[i].to;<br>        <span class="hljs-keyword">if</span> (!vis[v])<br>        &#123;<br>            tree_dfs(v);<br>            dp[rt] += dp[v];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(head , <span class="hljs-number">-1</span> , <span class="hljs-keyword">sizeof</span>(head));<br>    <span class="hljs-built_in">memset</span>(vis , <span class="hljs-literal">false</span> , <span class="hljs-keyword">sizeof</span>(vis));<br>    <span class="hljs-built_in">memset</span>(dp , <span class="hljs-number">0</span> , <span class="hljs-keyword">sizeof</span>(dp));<br>    cnt = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-keyword">int</span> t;<br>    <span class="hljs-comment">//cin &gt;&gt; t;</span><br>    <span class="hljs-comment">//freopen(&quot;data.in&quot; , &quot;r&quot; , stdin);</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;t);<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        init();<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;n);<br>        <span class="hljs-comment">//cin &gt;&gt; n;</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;a[i]);<br>            <span class="hljs-comment">//cin &gt;&gt; tmp;</span><br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">if</span> (a[i] &amp; <span class="hljs-number">1</span>)<br>                dp[i] = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">int</span> u , v;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span> , &amp;u , &amp;v);<br>            <span class="hljs-comment">//cin &gt;&gt; u &gt;&gt; v;</span><br>            add(u , v);<br>            add(v , u);<br>        &#125;<br><br>        tree_dfs(<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">//        for (int i = 1; i &lt;= n; i++)</span><br><span class="hljs-comment">//            cout &lt;&lt; dp[i] &lt;&lt; &quot; &quot;;</span><br><span class="hljs-comment">//        cout &lt;&lt; endl;</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span> , dp[i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>记得数组开大。，，，，，</p>
<p>学长的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">100000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; g[maxn];<br><span class="hljs-keyword">int</span> N;<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-keyword">int</span> dp[maxn];<br><span class="hljs-keyword">bool</span> visit[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)<br>    &#123;<br>        g[i].clear();<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(dp));<br>    <span class="hljs-built_in">memset</span>(visit, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span>(visit));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(a[root]&amp;<span class="hljs-number">1</span>) dp[root] = <span class="hljs-number">1</span>;<br>    visit[root] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">int</span> len = g[root].size();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = g[root][i];<br>        <span class="hljs-keyword">if</span>(!visit[v])<br>        &#123;<br>            dfs(v);<br>            dp[root] += dp[v];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    freopen(<span class="hljs-string">&quot;data.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>);<br>    freopen(<span class="hljs-string">&quot;data.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-built_in">stdout</span>);<br>    <span class="hljs-keyword">int</span> T;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;T);<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;N);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        &#125;<br>        init();<br>        <span class="hljs-keyword">int</span> u, v;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>            g[u].push_back(v);<br>            g[v].push_back(u);<br>        &#125;<br>        dfs(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(i != N) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, dp[i]);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dp[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>动态规划是大坑，，，，得之后好好多做题，，，</p>
<p>挖个坑：<br><a href="https://blog.csdn.net/cc_again/article/details/25866971#commentBox">https://blog.csdn.net/cc_again/article/details/25866971#commentBox</a></p>
]]></content>
      <tags>
        <tag>acm</tag>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划_线性dp</title>
    <url>/2019/02/21/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E7%BA%BF%E6%80%A7dp/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>线性dp是很基础的一种动态规划，，经典题和他的变种有很多，比如两个串的LCS,LIS,最大子序列和等等，，</p>
<p>线性dp是用来解决一些 <strong>线性区间上的最优化问题</strong> ，，</p>
<p>学这里的东西我感觉主要要理解好问题的子问题来写出转移方程，，还有弄清具体的边界条件就行了，，</p>
<span id="more"></span>
<h1 id="LCS-最长公共子序列"><a href="#LCS-最长公共子序列" class="headerlink" title="LCS-最长公共子序列"></a>LCS-最长公共子序列</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>子序列指的是对于一个串，某些元素的排列与原串所在的顺序一致的串称为原串的一个子序列，，它与子串不同，子串必须保证个元素在原串中是连续的，，，eg: 原串：abcdef 一个子序列：acf 一个子串：abcd</p>
<p>两个串的最大公共子序列指的是对于两个串所有相同的子序列中最长的那一个，，</p>
<p><a href="https://blog.csdn.net/someone_and_anyone/article/details/81044153">参考1</a><br><a href="https://blog.csdn.net/qq_31881469/article/details/77892324">参考2</a></p>
<h3 id="首先确定子问题"><a href="#首先确定子问题" class="headerlink" title="首先确定子问题"></a>首先确定子问题</h3><p>既然要用动态规划解决，那么这个问题一定能够分成子问题来推出。。首先根据定义可以看出对于两个串的子串的LCS也一定是原串的LCS的一部分，，这样我们就可以用原串的子串的LCS来求原串的LCS了，，</p>
<h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>我们用 $dp[i][j]$ 来表示对于A的子串 $A’:A_1, A_2, A_3,,,A_i$ 和B的子串 $B’:B_1, B_2, B_3,,,B_j$ 的 <strong>LCS</strong>；</p>
<p>那么怎么通过上一状态得到 $dp[i][j]$ 呢？往前推一个字符看看</p>
<p>考虑所有 $A’,B’$ 的子串，他们的可能情况有；</p>
<ul>
<li>两个串的某尾字符一样 $(a[i]=b[j])$，，显然这样情况下 $dp[i][j]=dp[i-1][j-1]+1$</li>
<li>不相等时就找 $A’$ 往前推一个字符和 $B’$的LCS 与 $A’$ 和 $B’$ 往前推一个字符的LCS 的最大的那个就行了，，也就是说 $dp[i][j]=max(dp[i-1][j], dp[i][j-1])$</li>
</ul>
<h3 id="状态转移方程"><a href="#状态转移方程" class="headerlink" title="状态转移方程"></a>状态转移方程</h3><p>状态转移方程为：</p>
<script type="math/tex; mode=display">
{
    dp[i][j]=
    \begin{cases}
        dp[i-1][j-1]+1, & \text{if a[i]=b[j]}\\
        max(dp[i-1][j], dp[i][j-1]), & \text{if a[i] != b[j]}\\
    \end{cases}
}</script><p>注意初始化的时候dp[i][j]=0;</p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="hdu-1159"><a href="#hdu-1159" class="headerlink" title="hdu-1159"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1159">hdu-1159</a></h3><p>板子题直接做就行，，熟悉一下代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> dp[maxn][maxn];<br><span class="hljs-keyword">char</span> a[maxn], b[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s&quot;</span>, a, b))<br>    &#123;<br>        <span class="hljs-keyword">int</span> len1 = <span class="hljs-built_in">strlen</span>(a);<br>        <span class="hljs-keyword">int</span> len2 = <span class="hljs-built_in">strlen</span>(b);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= max(len1, len2); ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= max(len1, len2); ++j)<br>                dp[i][j] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len1; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= len2; ++j)<br>                <span class="hljs-keyword">if</span>(a[i - <span class="hljs-number">1</span>] == b[j - <span class="hljs-number">1</span>])<br>                    dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span><br>                    dp[i][j] = max(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dp[len1][len2]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="poj-2250"><a href="#poj-2250" class="headerlink" title="poj-2250"></a><a href="http://poj.org/problem?id=2250">poj-2250</a></h3><p>题意：两个没有标点只有空格的并以’#”结尾的句子，让你找出LCS，并输出</p>
<p>解决的方法就是LCS，基本的套路没变，，就是对数据的处理改一下，，用一个字符串数组存一下，，</p>
<p>然后最后要将序列输出时，用一个mark数组标记每一次dp时的情况（记录下每个状态的最优值是由状态转移方程的哪一项推出的），，最后逆着返回去把答案记录一下就好，，（把mark数组手推一下就行，，（背包九讲里最后提到过解的输出，，，</p>
<p>这个很重要，，很多地方都会用到，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> dp[maxn][maxn];<br><span class="hljs-built_in">string</span> a[maxn], b[maxn];<br><span class="hljs-keyword">int</span> mark[maxn][maxn];<br><span class="hljs-keyword">int</span> cnt, ans[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">findans</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(!i &amp;&amp; !j)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(mark[i][j] == <span class="hljs-number">0</span>)<br>    &#123;<br>        findans(i - <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span>);<br>        ans[++cnt] = i;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(mark[i][j] == <span class="hljs-number">1</span>)<br>        findans(i - <span class="hljs-number">1</span>, j);<br>    <span class="hljs-keyword">else</span><br>        findans(i, j - <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; a[<span class="hljs-number">1</span>])<br>    &#123;<br>        <span class="hljs-keyword">int</span> len1 = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> len2 = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(a[len1] != <span class="hljs-string">&quot;#&quot;</span>)<span class="hljs-built_in">cin</span> &gt;&gt; a[++len1];--len1;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; b[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">while</span>(b[len2] != <span class="hljs-string">&quot;#&quot;</span>)<span class="hljs-built_in">cin</span> &gt;&gt; b[++len2];--len2;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= max(len1, len2); ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= max(len1, len2); ++j)<br>                dp[i][j] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len1; ++i)mark[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len2; ++i)mark[<span class="hljs-number">0</span>][i] = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len1; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= len2; ++j)<br>                <span class="hljs-keyword">if</span>(a[i] == b[j])<br>                &#123;<br>                    dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>                    mark[i][j] = <span class="hljs-number">0</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dp[i - <span class="hljs-number">1</span>][j] &gt;= dp[i][j - <span class="hljs-number">1</span>])<br>                &#123;<br>                    dp[i][j] = dp[i - <span class="hljs-number">1</span>][j];<br>                    mark[i][j] = <span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    dp[i][j] = dp[i][j - <span class="hljs-number">1</span>];<br>                    mark[i][j] = <span class="hljs-number">-1</span>;<br>                &#125;<br>        cnt = <span class="hljs-number">0</span>;<br>        findans(len1, len2);<br>        <span class="hljs-built_in">cout</span> &lt;&lt; a[ans[<span class="hljs-number">1</span>]];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= cnt; ++i)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; a[ans[i]];<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="hdu-1503"><a href="#hdu-1503" class="headerlink" title="hdu-1503"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1503">hdu-1503</a></h3><p>题意就是给定两个串，，输出一个串，这个串的其中两个子序列要是原来的两个串，，</p>
<p>要输出答案，，所以要在状态转移的时候标记每个字符，，最后回溯时判断输出就行了，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//hdu</span><br><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> dp[maxn][maxn];<br><span class="hljs-keyword">char</span> a[maxn], b[maxn];<br><span class="hljs-keyword">int</span> mark[maxn][maxn];<br><span class="hljs-keyword">int</span> cnt, ans[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">findans</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(!i &amp;&amp; !j)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(mark[i][j] == <span class="hljs-number">0</span>)<br>    &#123;<br>        findans(i - <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, a[i - <span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(mark[i][j] == <span class="hljs-number">1</span>)<br>    &#123;<br>        findans(i - <span class="hljs-number">1</span>, j);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, a[i - <span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        findans(i, j - <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, b[j - <span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s&quot;</span>, a, b))<br>    &#123;<br>        <span class="hljs-keyword">int</span> len1 = <span class="hljs-built_in">strlen</span>(a);<br>        <span class="hljs-keyword">int</span> len2 = <span class="hljs-built_in">strlen</span>(b);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= max(len1, len2); ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= max(len1, len2); ++j)<br>                dp[i][j] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len1; ++i)mark[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len2; ++i)mark[<span class="hljs-number">0</span>][i] = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len1; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= len2; ++j)<br>                <span class="hljs-keyword">if</span>(a[i - <span class="hljs-number">1</span>] == b[j - <span class="hljs-number">1</span>])<br>                &#123;<br>                    dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>                    mark[i][j] = <span class="hljs-number">0</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dp[i - <span class="hljs-number">1</span>][j] &gt;= dp[i][j - <span class="hljs-number">1</span>])<br>                &#123;<br>                    dp[i][j] = dp[i - <span class="hljs-number">1</span>][j];<br>                    mark[i][j] = <span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    dp[i][j] = dp[i][j - <span class="hljs-number">1</span>];<br>                    mark[i][j] = <span class="hljs-number">-1</span>;<br>                &#125;<br>        findans(len1, len2);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="hdu-1513"><a href="#hdu-1513" class="headerlink" title="hdu-1513"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1513">hdu-1513</a></h3><p>题意：给你一个长度为n的字符串，问你最少添加几个字符使得这个字符串变成一个回文串，，</p>
<p>因为只是问字符的个数，，没问最后的结果，，所以可以先求原串和其逆串的LCS，，然后用长度建议下就行了，，，</p>
<p>注意，因为字符串的长度是小于等于5000，，开dp数组时直接开会爆掉，，所以要用 <strong>滚动数组</strong> 来优化一下空间，，<br>（看一下那个dp的图就能看出在求dp[i][j]是，，仅仅用到的是上一行，，在往上就不再用了，，所以可以直接用两行解决就行了，，，比如说奇数行用第一层，偶数用第零层，，i%2就行，，访问当前层的上一层就用 1-i%2 就行了，，很巧啊，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> dp[<span class="hljs-number">2</span>][maxn];<br><span class="hljs-keyword">char</span> a[maxn], b[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n))<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, a);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n - <span class="hljs-number">1</span>; ++i)b[i] = a[n - i - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> len1 = n;<br>        <span class="hljs-keyword">int</span> len2 = len1;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= max(len1, len2); ++i)<br>            dp[<span class="hljs-number">0</span>][i] = dp[<span class="hljs-number">1</span>][i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len1; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= len2; ++j)<br>                <span class="hljs-keyword">if</span>(a[i - <span class="hljs-number">1</span>] == b[j - <span class="hljs-number">1</span>])<br>                &#123;<br>                    dp[i % <span class="hljs-number">2</span>][j] = dp[<span class="hljs-number">1</span> - i % <span class="hljs-number">2</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                    dp[i % <span class="hljs-number">2</span>][j] = max(dp[<span class="hljs-number">1</span> - i % <span class="hljs-number">2</span>][j], dp[i % <span class="hljs-number">2</span>][j - <span class="hljs-number">1</span>]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, n - dp[n % <span class="hljs-number">2</span>][n]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="最长公共子串"><a href="#最长公共子串" class="headerlink" title="最长公共子串"></a>最长公共子串</h1><p>子序列是序列中的元素不一定连续，，子串的话每一个元素在原串中是连续的，，可以修改一下LCS来求</p>
<h2 id="状态转移方程-1"><a href="#状态转移方程-1" class="headerlink" title="状态转移方程"></a>状态转移方程</h2><p>因为要保证连续，所以只有在 $a[i]=b[j]$ 时，$dp[i][j] = dp[i-1][j-1]$，，也就是说 $dp[i][j]$ 表示长度为i和j的子串的最长子串</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len1; ++i)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= len2; ++j)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i<span class="hljs-number">-1</span>] = b[j<span class="hljs-number">-1</span>])<br>            dp[i][j] = dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>            dp[i][j] = <span class="hljs-number">0</span>;<br>        ans = max(ans, dp[i][j]);<br>    &#125;<br></code></pre></td></tr></table></figure>
<h1 id="LIS-最长上升序列"><a href="#LIS-最长上升序列" class="headerlink" title="LIS-最长上升序列"></a>LIS-最长上升序列</h1><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>上升序列就是指序列的元素时递增的，，例如：4，1，3，2，5，7中的一个上升序列就是1，2，5，7，，</p>
<h3 id="确定子问题"><a href="#确定子问题" class="headerlink" title="确定子问题"></a>确定子问题</h3><p>某个从1开始的子串的LIS一定是原串LIS的子序列，，所以可以通过枚举右边界来得到原串的LIS，，</p>
<h3 id="状态-1"><a href="#状态-1" class="headerlink" title="状态"></a>状态</h3><p>用 $dp[i]$ 表示 $A_1, A_2, A_3,,,A_i$这个子串的LIS，，然后枚举这个子串中的元素，，如果 $a[j]&lt;a[i]$ ，即第i个元素比第j个元素大的时候，可以将第i个元素作为某个子序列的一部分，，</p>
<h3 id="状态转移方程-2"><a href="#状态转移方程-2" class="headerlink" title="状态转移方程"></a>状态转移方程</h3><script type="math/tex; mode=display">
{
    dp[i]=
    \begin{cases}
    max(dp[i], dp[j]+1) & \text{if a[i] > a[j]}\\
    \end{cases}
}</script><p>因为最后最长的序列并不一定是以a[n]结尾的，，所以最后的最大值并不一定是dp[n]，，要遍历一遍整个dp数组找一下，，，</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>这样做的时间复杂度大概是 $O(n^2)$，，，可以再用二分或则树状数组维护降低时间复杂度</p>
<h2 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h2><h3 id="poj-2533"><a href="#poj-2533" class="headerlink" title="poj-2533"></a><a href="http://poj.org/problem?id=2533">poj-2533</a></h3><h4 id="裸dp做法，时间复杂度-O-n-2"><a href="#裸dp做法，时间复杂度-O-n-2" class="headerlink" title="裸dp做法，时间复杂度 $O(n^2)$"></a>裸dp做法，时间复杂度 $O(n^2)$</h4><p>裸板子题，，注意初始化dp数组的数后是初始化为1，，不是像LCS初始化为0；</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n))<br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dp[i] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; i; ++j)<br>            <span class="hljs-keyword">if</span>(a[i] &gt; a[j])dp[i] = max(dp[i], dp[j] + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)ans = max(ans, dp[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="贪心-二分，时间复杂度-O-nlogn"><a href="#贪心-二分，时间复杂度-O-nlogn" class="headerlink" title="贪心+二分，时间复杂度 $O(nlogn)$"></a>贪心+二分，时间复杂度 $O(nlogn)$</h4><p>裸的dp的内层循环的作用是寻找在 $a[i]&gt;a[j]$ 时的最大的 $dp[j]$ 的值，，单纯的遍历复杂度会增一倍，，</p>
<p>可以用一个数组保存i之前最长的上升子序列，，，</p>
<p>如果此时的 $a[i]$ 比那个数组的最大的元素也就是最后一个元素的值大的话，，就直接加在那个数组后面，，</p>
<p>否则，就想方法替换掉里面接近 $a[i]$ 的元素，，，可以用二分来优化这一过程，，</p>
<p><a href="https://blog.csdn.net/qq_22902423/article/details/49932259">具体的可以参考这里</a><br><a href="https://blog.csdn.net/George__Yu/article/details/75896330">和这里</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n))<br>&#123;<br>    cnt = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    b[<span class="hljs-number">1</span>] = a[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i] &gt; b[cnt])b[++cnt] = a[i];<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">int</span> k = lower_bound(b + <span class="hljs-number">1</span>, b + <span class="hljs-number">1</span> + cnt, a[i]) - b;<br>            b[k] = a[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, cnt);<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="树状数组维护，时间复杂度-O-nlogn"><a href="#树状数组维护，时间复杂度-O-nlogn" class="headerlink" title="树状数组维护，时间复杂度 $O(nlogn)$"></a>树状数组维护，时间复杂度 $O(nlogn)$</h4><p>~~(loading),,,</p>
<p>看到有这个做法，，但是不知道怎么是错的，，，（好像是排序后要去重？？？不然是求得最长不下降子序列~~</p>
<p>算了，先贴个 <strong>错</strong> 的代码吧，，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> id, num;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;r)<span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> num &lt; r.num;<br>    &#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-keyword">const</span> node &amp;r)<span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> num == r.num;<br>    &#125;<br>&#125;node[maxn];<br><span class="hljs-keyword">int</span> bit[maxn];<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(; i &lt;= n; i += i &amp; (-i))bit[i] = max(bit[i], x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> res = -inf;<br>    <span class="hljs-keyword">for</span>(; i; i -= i &amp; (-i))res = max(res, bit[i]);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n))<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;node[i].num);<br>            node[i].id = i;<br>        &#125;<br>        <span class="hljs-comment">//memset(bit, 0, sizeof bit);</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;=<span class="hljs-number">100</span>; ++i)bit[i] = <span class="hljs-number">1</span>;<br>        sort(node + <span class="hljs-number">1</span>, node + <span class="hljs-number">1</span> + n);<br><span class="hljs-comment">//        int cnt = unique(node + 1, node + 1 + n) - node - 1;</span><br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; node[i].num;<br>            <span class="hljs-keyword">if</span>(node[i].num &gt; node[i - <span class="hljs-number">1</span>].num)<br>            &#123;<br>                <span class="hljs-keyword">int</span> mx = query(node[i].id);<br>                update(node[i].id, ++mx);<br>                ans = max(ans, mx);<br>            &#125;<br><br><br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-number">4</span><br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-comment">//出来的结果是4，，，</span><br></code></pre></td></tr></table></figure>
<h1 id="LICS-最长公共上升子序列"><a href="#LICS-最长公共上升子序列" class="headerlink" title="LICS-最长公共上升子序列"></a>LICS-最长公共上升子序列</h1><p>LICS就是将LIS和LCS合在一起，，稍微改一改就行了，，</p>
<h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><h3 id="子问题"><a href="#子问题" class="headerlink" title="子问题"></a>子问题</h3><p>像LCS，LIS一样，，我们用dp[i][j]表示序列1取长度为i和序列2取长度为j时的LICS的值，，然后枚举每一个元素来更新后面的得到最后的答案，，</p>
<h3 id="状态转移方程-3"><a href="#状态转移方程-3" class="headerlink" title="状态转移方程"></a>状态转移方程</h3><ul>
<li>当 $a[i]=b[j]$时，，显然此时的LICS就为前面出现的最大的LICS的值加一，，也就是： $dp[i][j]=max(d[i][k])+1 { k = 1 \ to \ j - 1 }$</li>
</ul>
<p>如果只是单纯的一遍一遍的枚举k，，显然会使最后的时间复杂度增加为 $O(n^3)$ ，， 因为每次更新dp[i][j]都是寻找的前面的最值，，所以我们可以记录下来前面的最值，，然后和当点枚举的比较就行了，，，</p>
<p>为了保证时上升的，，所以不等的时候只能寻找 $a[i]&gt;b[j]$ 的情况，，找到最大值</p>
<h2 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h2><h3 id="hdu-1423"><a href="#hdu-1423" class="headerlink" title="hdu-1423"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1423">hdu-1423</a></h3><p>板子题，，直接做</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//没有空间优化的</span><br><span class="hljs-comment">//注意输出格式</span><br><span class="hljs-keyword">int</span> a[maxn], b[maxn], dp[maxn][maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> len1, len2;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;len1);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len1; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;len2);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len2; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;b[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= len1; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= len2; ++j)<br>                dp[i][j] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len1; ++i)<br>        &#123;<br>            <span class="hljs-keyword">int</span> mx = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= len2; ++j)<br>            &#123;<br>                dp[i][j] = dp[i - <span class="hljs-number">1</span>][j];<span class="hljs-comment">//先保存前面的最值，然后判断更新</span><br>                <span class="hljs-keyword">if</span>(a[i] == b[j])dp[i][j] = mx + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(a[i] &gt;  b[j])mx = max(mx, dp[i - <span class="hljs-number">1</span>][j]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len2; ++i)<br>            ans = max(ans, dp[len1][i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>        <span class="hljs-keyword">if</span>(t)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>注意到在循环中的一句: <code>dp[i][j]=dp[i-1][j]</code>，，这句可以看出我们的dp过程是没有用到前面几层的，，，也就是说可以用一个以为数组来优化一下，，，有点类似01背包的空间优化过程</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> a[maxn], b[maxn], dp[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> len1, len2;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;len1);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len1; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;len2);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len2; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;b[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= len2; ++i)<br>            dp[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len1; ++i)<br>        &#123;<br>            <span class="hljs-keyword">int</span> mx = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= len2; ++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(a[i] == b[j])dp[j] = mx + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(a[i] &gt;  b[j])mx = max(mx, dp[j]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len2; ++i)<br>            ans = max(ans, dp[i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>        <span class="hljs-keyword">if</span>(t)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="最大连续子序列和"><a href="#最大连续子序列和" class="headerlink" title="最大连续子序列和"></a>最大连续子序列和</h1><p>最大连续子序列和求得是一段连续的子序列，，它的和是所有子序列中最大的，，例如：-2 11 -4 13 -5 -2中，最大的连续子序列和是20，，由11，-4，13组成，，</p>
<p><a href="https://www.cnblogs.com/rhythmic/p/5398953.html">参考文章</a></p>
<h2 id="例题hdu-1231"><a href="#例题hdu-1231" class="headerlink" title="例题hdu-1231"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1231">例题hdu-1231</a></h2><h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><p>我们可以遍历整个序列，，并且保存从头到当前点的序列中的 最大连续子序列和sum，同时保存起点终点元素值，，</p>
<p>当sum&lt;=0时，，说明前面一个子序列的和小于零，就可以不再要他了，，此时更新新的sum为当前点，起点终点也为当前点的值，，</p>
<p>当sum&gt;0时，，我们可以再把当前点加在这个序列后面，，更新终点即可，，</p>
<p>最后取每一次枚举中的最大值，，更新起点终点就行了，，，</p>
<p>如果最值小于零，按题意输出零即可，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> a[maxn], b[maxn], dp[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        <span class="hljs-keyword">int</span> sum, max_sum, s, t, ans_s, <span class="hljs-keyword">ans_t</span>;<br>        sum = max_sum = s = t = ans_s = <span class="hljs-keyword">ans_t</span> = a[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(sum &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                sum += a[i];<br>                t = a[i];<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                sum = s = t = a[i];<br>            &#125;<br>            <span class="hljs-comment">//update ans</span><br>            <span class="hljs-keyword">if</span>(max_sum &lt; sum)<br>            &#123;<br>                max_sum = sum;<br>                ans_s = s;<br>                <span class="hljs-keyword">ans_t</span> = t;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(max_sum &lt; <span class="hljs-number">0</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0 %d %d\n&quot;</span>, a[<span class="hljs-number">1</span>], a[n]);<br>        <span class="hljs-keyword">else</span>           <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, max_sum, ans_s, <span class="hljs-keyword">ans_t</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><p>可以使用dp来解决，，就像LCS,LIS等dp[i]代表以第i个元素结尾的LCS,LIS一样，，这里可以用dp[i]表示以a[i]结尾的最大的连续序列的和，，这样为了推出dp[i]就得看它和dp[i-1]的关系，，</p>
<p>从上面那种解法可以看出，当dp[i-1]小于零时意味着以a[i]结尾的最大连续序列的和就是负的，，为了答案的最大化，，可以舍弃前面这一段，，所以在这种情况下的dp[i]=a[i]，，，</p>
<p>否则的话，就把当前点a[i]加到前面的序列上，也就是dp[i]=dp[i-1]+a[i]，，，</p>
<p>于是最后的状态转移方程为：</p>
<script type="math/tex; mode=display">
    dp[i]=
    \begin{cases}
    a[i] & \text{if dp[i-1]<0}\\
    dp[i-1]+a[i] & \text{if dp[i-1]>=0}\\
    \end{cases}</script><p>最后针对这道题遍历一遍dp数组，找到最大值及其下标，，反向遍历找到起点就好了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> a[maxn], b[maxn], dp[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dp[i] = -inf;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">if</span>(dp[i - <span class="hljs-number">1</span>] &lt; <span class="hljs-number">0</span>)dp[i] = a[i];<br>            <span class="hljs-keyword">else</span>             dp[i] = dp[i - <span class="hljs-number">1</span>] + a[i];<br>        <span class="hljs-keyword">int</span> max_sum = -inf, s, t;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">if</span>(max_sum &lt; dp[i])<br>                max_sum = dp[i], t = i;<br>        <span class="hljs-keyword">if</span>(max_sum &lt; <span class="hljs-number">0</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0 %d %d\n&quot;</span>, a[<span class="hljs-number">1</span>], a[n]);<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, max_sum);<br>            max_sum -= a[t];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = t; i &gt;= <span class="hljs-number">1</span>; --i, max_sum -= a[i])<br>                <span class="hljs-keyword">if</span>(!max_sum)<br>                &#123;<br>                    s = i;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, a[s], a[t]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1003">类似题目: hdu-1003</a></p>
<p>(end)</p>
]]></content>
      <categories>
        <category>ACM-动态规划-线性dp</category>
      </categories>
      <tags>
        <tag>acm</tag>
        <tag>笔记</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划_背包问题笔记</title>
    <url>/2019/02/19/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92_%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>dp自从知道有这么个东西时，就没有好好的学，，现在一看道dp的题就绕道走，，，但是，很多比赛中的dp问题有很多，，别人都会，自己不会很吃亏啊，，，于是从基础开始一点一点的补ing</p>
<span id="more"></span>
<h1 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h1><p>背包问题是动态规划的经典也是基础，，，下面的东西部分来自 <strong>背包九讲</strong>；</p>
<h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><p>01背包指的是对于任意的物品只有 <strong>取或不取</strong> 两种状态，，</p>
<h3 id="状态转移方程"><a href="#状态转移方程" class="headerlink" title="状态转移方程"></a>状态转移方程</h3><p>状态转移方程为：</p>
<p>$F[i,j]=max(F[i-1,j], F[i-1,j-c_i]+w_i)$</p>
<p>外层循环枚举物品总数：$for \ i=1\ to\ n$</p>
<p>内层循环枚举背包的容量： $for \ j=c_i \ to \ v$</p>
<p>&lt;/br&gt;</p>
<p>空间优化后的状态转移方程：</p>
<p>$F[j]=max(F[j], F[j-c_i]+w_i)$</p>
<p>外层循环不变，内层循环变为： $for \ j=v \ to \ c_i$</p>
<p>外层循环可以继续优化为： $for \  j \ to \ max(v-\sum_i^nw_i, \ \  c_i)$</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul>
<li>恰好装满背包：$F[0]=0,F[1..v]=-\infty$</li>
<li>不必装满： $F[0..v]=0$</li>
</ul>
<p>初始化F数组就是在没有任何物品可以放入背包时的合法状态，所以，前者只有容量为零的背包什么都不装的情况下是恰好装满的，其他容量的背包都是未定义的状态，无合法解；后者因为不必装满，所以什么都不装的时候就是一个合法解，这时的价值为零。</p>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="hud-2602"><a href="#hud-2602" class="headerlink" title="hud-2602"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2602">hud-2602</a></h4><p>裸的01背包，，直接做，，，注意判断当前物品是否能放入背包，，再选择放与不放，，</p>
<p>还有内层循环容量的遍历是从0开始</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dp);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= v; ++j)<br>                <span class="hljs-keyword">if</span>(c[i] &lt;= j)<span class="hljs-comment">//能放入时，选择放与不放</span><br>                    dp[i][j] = max(dp[i - <span class="hljs-number">1</span>][j], dp[i - <span class="hljs-number">1</span>][j - c[i]] + w[i]);<br>                <span class="hljs-keyword">else</span><br>                    dp[i][j] = dp[i - <span class="hljs-number">1</span>][j];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dp[n][v]);<br></code></pre></td></tr></table></figure>
<p>空间优化后的方法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dp);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = v; j &gt;= <span class="hljs-number">0</span>; --j)<br>                <span class="hljs-keyword">if</span>(c[i] &lt;= j)<span class="hljs-comment">//能放入时，选择放与不放</span><br>                    dp[j] = max(dp[j], dp[j - c[i]] + w[i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dp[v]);<br></code></pre></td></tr></table></figure>
<h4 id="hdu-2546"><a href="#hdu-2546" class="headerlink" title="hdu-2546"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2546">hdu-2546</a></h4><p>题意是：一个总钱数为m的钱包，在剩余金额大于等于5的情况下可以购买任何东西，即使买了一个东西后剩余钱数为负，然后给你这n个东西的标价，每种东西只能购买一次，，</p>
<p>这道题按01背包做的话，可以将钱包m看成背包的容量，n道菜就是n种物品， <strong>每种物品的价值和花费都是其菜价</strong>，，</p>
<p>这是其中一个点，还有为了尽可能的是利益最大，，我们可以先保留5块，为了最后买那个最贵的菜，，对剩下的n-1个菜选择出价值最大的，，，这样就将这道题转化成了容量为m-5的背包选择一些物品使得总价值最大，，，最后的答案在算上那个最贵的菜就行了，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> dp[maxn], c[maxn], w[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;c[i]);<br><br>        <span class="hljs-keyword">int</span> m;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br><br>        <span class="hljs-keyword">if</span>(m &lt; <span class="hljs-number">5</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, m);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        m -= <span class="hljs-number">5</span>;<br>        sort(c + <span class="hljs-number">1</span>, c + <span class="hljs-number">1</span> + n);<br>        <span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dp);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = m; j &gt;= c[i]; --j)<br>                dp[j] = max(dp[j], dp[j - c[i]] + c[i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, m + <span class="hljs-number">5</span> - dp[m] - c[n]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="hdu-1171"><a href="#hdu-1171" class="headerlink" title="hdu-1171"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1171">hdu-1171</a></h4><p>题意是：有一些设施，每个设施的价值为 $w_i$，，然后要分成两堆，这两堆的价值要尽可能的相近</p>
<p>显然分后的价值和 $sum$ 就是原来的价值和，，然后肯定一个大于等于均值，一个小于等于，，，所以可以将这道题目看成01背包的模型：一个容量为 $sum/2$ 的背包，选择装一些物品，这些物品的价值的和费用相同，，求最大的价值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> dp[maxn], c[maxn], w[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">int</span> tot = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            <span class="hljs-keyword">int</span> a, b;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>            <span class="hljs-keyword">while</span>(b--)w[++tot] = a;<br>        &#125;<br>        <span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dp);<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= tot; ++i)sum += w[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= tot; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = sum / <span class="hljs-number">2</span>; j &gt;= w[i]; --j)<br>                dp[j] = max(dp[j], dp[j - w[i]] + w[i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, sum - dp[sum / <span class="hljs-number">2</span>], dp[sum / <span class="hljs-number">2</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/libin56842/article/details/9338841">剩下一些其他题，，以后再说</a></p>
<h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><p>完全背包就是在01背包的基础上对于物品的限制解除，，物品不再为只能取一件，而是无限件（实际也不可能是无限件，每一个物品最多取 $\lfloor \frac{v}{c_i} \rfloor$），，</p>
<p>将完全背包转化为01背包后， 状态转移方程和01背包的类似，，只有对背包容量的枚举也就是内层循环中，完全背包是递增的顺序而01背包的是递减的顺序，，</p>
<p>$for \ j=c_i \ to \ v$</p>
<h3 id="0-1背包和完全背包的不同："><a href="#0-1背包和完全背包的不同：" class="headerlink" title="0-1背包和完全背包的不同："></a><a href="https://blog.csdn.net/qq_38984851/article/details/81133840">0-1背包和完全背包的不同：</a></h3><blockquote>
<p>从二维数组上区别0-1背包和完全背包也就是状态转移方程就差别在放第i中物品时，完全背包在选择放这个物品时，最优解是F[i][j-c[i]]+w[i]即画表格中同行的那一个，而0-1背包比较的是F[i-1][j-c[i]]+w[i]，上一行的那一个。</p>
<p>从一维数组上区别0-1背包和完全背包差别就在循环顺序上，0-1背包必须逆序，因为这样保证了不会重复选择已经选择的物品，而完全背包是顺序，顺序会覆盖以前的状态，所以存在选择多次的情况，也符合完全背包的题意。状态转移方程都为F[i] = max(F[i],dp[F-c[i]]+v[i])。</p>
</blockquote>
<h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><h4 id="hdu-1114"><a href="#hdu-1114" class="headerlink" title="hdu-1114"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1114">hdu-1114</a></h4><p>题意是：给你一个存钱罐的总质量个单纯存钱罐的质量（也就是差为钱的质量），，以及n种硬币的面值和质量，然后问你最小的金额是多少</p>
<p>差值可以看作背包的容量，每个硬币的质量为物品的代价，面值为其价值，，然后求最小的价值转移方程里就为min，，初始化再改变一下，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> dp[maxn], c[maxn], w[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> e, f;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;e, &amp;f);<br>        <span class="hljs-keyword">int</span> v = f - e;<br>        <span class="hljs-keyword">int</span> k;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;k);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;w[i], &amp;c[i]);<br>        <span class="hljs-built_in">memset</span>(dp, inf, <span class="hljs-keyword">sizeof</span> dp);<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = c[i]; j &lt;= v; ++j)<br>                dp[j] = min(dp[j], dp[j - c[i]] + w[i]);<br>        <span class="hljs-keyword">if</span>(dp[v] &gt;= inf)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This is impossible.\n&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The minimum amount of money in the piggy-bank is %d.\n&quot;</span>, dp[v]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h2><p>多重背包就是完全背包的限制版，，每一种物品不再是无限个，，而是给定的个数，最后还是求背包的最大价值什么的，，，</p>
<p>转化成01背包问题就是对于每一种物品取 $1, 2, 2^2, 2^3,,,2^{k-1},M_i-2^k+1$件，，</p>
<p>一般的多重背包模板：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> dp[maxn], c[maxn], w[maxn], num[maxn];<br><span class="hljs-keyword">int</span> n, m, v;<span class="hljs-comment">//n为物品总数，v为背包容量</span><br><span class="hljs-comment">//01背包，该物品的代价，价值</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ZeroOnePack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> C, <span class="hljs-keyword">int</span> W)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = v; i &gt;= C; --i)<br>        dp[i] = max(dp[i], dp[i - C] + W);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//完全背包，该物品的代价，价值</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CompletePack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> C, <span class="hljs-keyword">int</span> W)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = C; i &lt;= v; ++i)<br>        dp[i] = max(dp[i], dp[i - C] + W);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//一次多重背包，该物品的代价，价值，数量</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OneMuitPack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> C, <span class="hljs-keyword">int</span> W, <span class="hljs-keyword">int</span> M)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(v &lt;= C * M)<span class="hljs-comment">//物品足够多时用完全背包</span><br>    &#123;<br>        CompletePack(C, W);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>        <span class="hljs-comment">//否则用二进制划分成若干件01背包的物品</span><br>    &#123;<br>        <span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(k &lt; M)<br>        &#123;<br>            ZeroOnePack(k * C, k * W);<span class="hljs-comment">//某一个划分成01背包的物品</span><br>            M -= k;<br>            k &lt;&lt;= <span class="hljs-number">1</span>;<br>        &#125;<br>        ZeroOnePack(C * M, W * M);<span class="hljs-comment">//剩下的一些物品</span><br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h3><h4 id="hdu-2844"><a href="#hdu-2844" class="headerlink" title="hdu-2844"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2844">hdu-2844</a></h4><p>题意是：n种面值的硬币，每种硬币的个数限定，问你能够组成几种面值和不超过m的组成方法，</p>
<p>转化成背包问题就是，一个容量为m的背包装一些价值和代价都为面值的物品，其中物品的个数有限制，，问背包内的价值的可能种类</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//cf</span><br><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, ull&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> dp[maxn], c[maxn], w[maxn], num[maxn];<br><span class="hljs-keyword">int</span> n, m, v;<span class="hljs-comment">//n为物品总数，v为背包容量</span><br><span class="hljs-comment">//01背包，该物品的代价，价值</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ZeroOnePack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> C, <span class="hljs-keyword">int</span> W)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = v; i &gt;= C; --i)<br>        dp[i] = max(dp[i], dp[i - C] + W);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//完全背包，该物品的代价，价值</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CompletePack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> C, <span class="hljs-keyword">int</span> W)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = C; i &lt;= v; ++i)<br>        dp[i] = max(dp[i], dp[i - C] + W);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//一次多重背包，该物品的代价，价值，数量</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OneMuitPack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> C, <span class="hljs-keyword">int</span> W, <span class="hljs-keyword">int</span> M)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(v &lt;= C * M)<span class="hljs-comment">//物品足够多时用完全背包</span><br>    &#123;<br>        CompletePack(C, W);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>        <span class="hljs-comment">//否则用二进制划分成若干件01背包的物品</span><br>    &#123;<br>        <span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(k &lt; M)<br>        &#123;<br>            ZeroOnePack(k * C, k * W);<span class="hljs-comment">//某一个划分成01背包的物品</span><br>            M -= k;<br>            k &lt;&lt;= <span class="hljs-number">1</span>;<br>        &#125;<br>        ZeroOnePack(C * M, W * M);<span class="hljs-comment">//剩下的一些物品</span><br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m) &amp;&amp; n + m)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;w[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num[i]);<br>        <span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dp);<br>        v = m;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            OneMuitPack(w[i], w[i], num[i]);<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<span class="hljs-keyword">if</span>(dp[i] == i)++ans;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="混合背包"><a href="#混合背包" class="headerlink" title="混合背包"></a>混合背包</h2><p>混合背包就是n种物品有的只能取一次，有的能取有限次，有的能取无限次，然后问你对于容量为v的背包的可取最大价值是多少</p>
<p>直接判断每个物品的种类，使用不同的背包类型就行了</p>
<h3 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h3><h4 id="codevs-3269"><a href="#codevs-3269" class="headerlink" title="codevs-3269"></a><a href="http://codevs.cn/problem/3269/">codevs-3269</a></h4><p>题意就是混合背包的定义，，直接做就行</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//cf</span><br><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, ull&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> dp[maxn], c[maxn], w[maxn], num[maxn];<br><span class="hljs-keyword">int</span> n, m, v;<span class="hljs-comment">//n为物品总数，v为背包容量</span><br><span class="hljs-comment">//01背包，该物品的代价，价值</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ZeroOnePack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> C, <span class="hljs-keyword">int</span> W)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = v; i &gt;= C; --i)<br>        dp[i] = max(dp[i], dp[i - C] + W);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//完全背包，该物品的代价，价值</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CompletePack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> C, <span class="hljs-keyword">int</span> W)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = C; i &lt;= v; ++i)<br>        dp[i] = max(dp[i], dp[i - C] + W);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//一次多重背包，该物品的代价，价值，数量</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OneMuitPack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> C, <span class="hljs-keyword">int</span> W, <span class="hljs-keyword">int</span> M)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(v &lt;= C * M)<span class="hljs-comment">//物品足够多时用完全背包</span><br>    &#123;<br>        CompletePack(C, W);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>        <span class="hljs-comment">//否则用二进制划分成若干件01背包的物品</span><br>    &#123;<br>        <span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(k &lt; M)<br>        &#123;<br>            ZeroOnePack(k * C, k * W);<span class="hljs-comment">//某一个划分成01背包的物品</span><br>            M -= k;<br>            k &lt;&lt;= <span class="hljs-number">1</span>;<br>        &#125;<br>        ZeroOnePack(C * M, W * M);<span class="hljs-comment">//剩下的一些物品</span><br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;v);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;c[i], &amp;w[i], &amp;num[i]);<br>    <span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(num[i] == <span class="hljs-number">1</span>)<br>            ZeroOnePack(c[i], w[i]);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num[i] == <span class="hljs-number">-1</span>)<br>            CompletePack(c[i], w[i]);<br>        <span class="hljs-keyword">else</span><br>            OneMuitPack(c[i], w[i], num[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dp[v]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="二维费用背包"><a href="#二维费用背包" class="headerlink" title="二维费用背包"></a>二维费用背包</h2><p>二维费用指的就是相比之前的背包问题侑多了一个费用的影响因素，，对于一个物品有两个不同的代价以及其容量，，做法和前面的一样，dp数组增加一维就行了，，</p>
<h3 id="例题-4"><a href="#例题-4" class="headerlink" title="例题"></a>例题</h3><h4 id="hdu-2159"><a href="#hdu-2159" class="headerlink" title="hdu-2159"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2159">hdu-2159</a></h4><p>转化成背包问题就是代价一是忍耐度，背包容量为m；代价二就是打怪，容量就是s，，求最大的价值（经验值）与n的大小关系，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//cf</span><br><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, ull&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> dp[maxn][maxn], c[maxn], w[maxn], num[maxn];<br><span class="hljs-keyword">int</span> n, m, v;<span class="hljs-comment">//n为物品总数，v为背包容量</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n, m, k, s;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k, &amp;s))<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(w, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> w);<br>        <span class="hljs-built_in">memset</span>(c, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> c);<br>        <span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dp);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;w[i], &amp;c[i]);<br>        <span class="hljs-keyword">int</span> ans = inf;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = c[i]; j &lt;= m; ++j)<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= s; ++k)<br>                &#123;<br>                    dp[j][k] = max(dp[j][k], dp[j - c[i]][k - <span class="hljs-number">1</span>] + w[i]);<br>                    <span class="hljs-keyword">if</span>(dp[j][k] &gt;= n)ans = min(ans, j);<br>                &#125;<br>        <span class="hljs-keyword">if</span>(ans &gt; m)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<br>        <span class="hljs-keyword">else</span>       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, m - ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><del>(loading)</del></p>
<h2 id="分组背包"><a href="#分组背包" class="headerlink" title="分组背包"></a>分组背包</h2><p>分组背包就是：一堆物品被划分成了K组，同一组的物品只能选择一个，或者这组不选，其他的条件和其他背包模型一样，，</p>
<p>解决方法，再加一层对每组背包的枚举</p>
<p>伪代码：</p>
<p>$for \ k=1 \ to \ K$&lt;/br&gt;<br>$for \ v=V \ to \ V$&lt;/br&gt;<br>$for \ item \ i \ in \ group \ k$&lt;/br&gt;<br>$F[v]=max(F[v], F[v-C_i]+W_i)$</p>
<h3 id="例题-5"><a href="#例题-5" class="headerlink" title="例题"></a>例题</h3><h4 id="hdu-1712"><a href="#hdu-1712" class="headerlink" title="hdu-1712"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1712">hdu-1712</a></h4><p>题意就是有n节课，每一课上几天的价值给你，，一共要上m节课，问最大的价值，，</p>
<p>把这道题看成容量为m的背包，装分为n组的物品最大的价值就行</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> dp[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-keyword">int</span> a[maxn][maxn];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m) &amp;&amp; n + m)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> a);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i][j]);<br>        <span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dp);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; ++k)<span class="hljs-comment">//枚举组数</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = m; j &gt;= <span class="hljs-number">0</span>; --j)<span class="hljs-comment">//枚举背包的容量</span><br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<span class="hljs-comment">//枚举第k组的物品</span><br>                    <span class="hljs-keyword">if</span>(i &lt;= j)<span class="hljs-comment">//保证能装下</span><br>                    dp[j] = max(dp[j], dp[j - i] + a[k][i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dp[m]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="hdu-3033"><a href="#hdu-3033" class="headerlink" title="hdu-3033"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3033">hdu-3033</a></h4><p>题意就是一堆鞋子，某一些是一个牌子的，然后每一双鞋有一个价格（看作代价），一个价值，每个牌子至少取一双，问最大的价值，，，</p>
<p>与上一道不同的是每一组的物品不再是最多选一个了，，一组可以选多个，每一组都要选一个，，</p>
<p>dp[i][j]表示的是前i组在容量为j的背包所取的最大价值，，当前状态dp[i][j]可以由 前一状态在本组选一个物品 推来，也可以由 当前状态在本组再取一个物品 推来，，</p>
<p>初始化也不同了，，除了那一组都不选的那一行dp为零，，其他都为负，即未定义状态，，由这个判断是否有解，，</p>
<p><a href="https://www.cnblogs.com/liyinggang/p/5402291.html">参考1</a><br><a href="https://blog.csdn.net/juststeps/article/details/8712150">参考2</a><br><a href="https://www.jianshu.com/p/efa8fbc0fea4">参考3</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//hdu</span><br><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> dp[<span class="hljs-number">11</span>][maxn];<br>pii a[<span class="hljs-number">11</span>][maxn];<br><span class="hljs-keyword">int</span> num[<span class="hljs-number">11</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n, m, K;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;K))<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(num, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> num);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            <span class="hljs-keyword">int</span> aa, bb, cc;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;aa, &amp;bb, &amp;cc);<br>            ++num[aa];<br>            a[aa][num[aa]].first = bb;<br>            a[aa][num[aa]].second = cc;<br>        &#125;<br>        <span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> dp);<br>        <span class="hljs-comment">//for(int i = 0; i &lt;= m; ++i)dp[0][i] = 0;</span><br>        <span class="hljs-built_in">memset</span>(dp[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dp[<span class="hljs-number">0</span>]);<br>        <span class="hljs-comment">//不能写成memset(dp[0], 0, sizeof dp);</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= K; ++k)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= num[k]; ++i)<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = m; j &gt;= a[k][i].first; --j)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(dp[k][j - a[k][i].first] &gt;= <span class="hljs-number">0</span>)<br>                        dp[k][j] = max(dp[k][j], dp[k][j - a[k][i].first] + a[k][i].second);<br>                    <span class="hljs-keyword">if</span>(dp[k - <span class="hljs-number">1</span>][j - a[k][i].first] &gt;= <span class="hljs-number">0</span>)<br>                        dp[k][j] = max(dp[k - <span class="hljs-number">1</span>][j - a[k][i].first] + a[k][i].second, dp[k][j]);<br>                &#125;<br>        <span class="hljs-keyword">if</span>(dp[K][m] &lt; <span class="hljs-number">0</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Impossible\n&quot;</span>);<br>        <span class="hljs-keyword">else</span>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dp[K][m]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><del>这道题没怎么理解还，，<br>(loading)</del></p>
<p>剩下一些其他的内容，暂时先放放，，</p>
]]></content>
      <categories>
        <category>ACM-动态规划</category>
      </categories>
      <tags>
        <tag>acm</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>基于卷积神经网络的人脸识别项目</title>
    <url>/2019/06/08/%E5%9F%BA%E4%BA%8E%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>学期末了啊，，，最后这个人脸识别的项目弄完了，，有很多的不足，，很多东西都是只知道怎么用，但是不知道其背后的逻辑，，感觉自己学习东西对于那些潜意识优先级不高的就放弃了，，，emmm</p>
<p>这篇文章主要是大致介绍一下我们最后弄出来的人脸识别项目的成果吧，，整个项目放到了<a href="https://github.com/31415926535x/CollegeProjectBackup/tree/master/FaceRecognition">我的github</a>，，可以直接下载运行的，，不过这也只是一个我们的思路，，这块东西还是多阅读别人的项目代码，，然后自己写一下好些，，根据自己的需求尝试自己写代码，实在不行再看别人的思路，，才能提升自己的思维吧，，，</p>
<span id="more"></span>
<h1 id="项目思路"><a href="#项目思路" class="headerlink" title="项目思路"></a>项目思路</h1><p>抛开那些花里胡哨的东西，人脸识别的大致流程只有三个： <strong>人脸数据的录入、构建卷积神经网络并训练模型、识别</strong></p>
<p>不过这前要配置好环境，，我用的Anaconda来配置的整体环境，，，<a href="https://www.cnblogs.com/31415926535x/p/10620732.html">可以看我的这篇博客</a> ，，（到能成功验证环境即可</p>
<p>具体的运行流程：</p>
<ul>
<li>激活创建的anaconda环境</li>
<li>运行初始化模块（可有可无） <code>python init.py</code></li>
<li>运行录入人脸模块，此时会提示输入姓名，然后录制视频，按q结束（20几喵即可） <code>python getFaceByCamera.py</code></li>
<li>运行训练模块，<code>python tensorflow_face.py</code></li>
<li>等待，，结束后会打印准确度，，</li>
<li>运行识别模块，<code>python tensorflow_face.py</code> ，，，没错还是这个，，第二次运行会调用识别模块的，，，</li>
</ul>
<h2 id="人脸数据的录入"><a href="#人脸数据的录入" class="headerlink" title="人脸数据的录入"></a>人脸数据的录入</h2><p><a href="https://github.com/31415926535x/CollegeProjectBackup/blob/master/FaceRecognition/getFaceByCamera.py">这部分的代码在这里</a></p>
<p>这部分我们的大致思路是：</p>
<ul>
<li>录入待录入者的姓名</li>
<li>录制一段视频</li>
<li>利用dlib人脸检测器以及opencv对图片的操作来裁剪200张相片，，当然也可以使用opencv的人脸检测器，，，不足应该就是准确率不怎么高吧，，但是快些，，，</li>
<li>循环录入所有人的信息</li>
</ul>
<p>这一部分的代码：</p>
<p>getFaceByCamera.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> dlib<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> shutil<br><br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_video</span>(<span class="hljs-params">name</span>):</span><br>    <span class="hljs-comment"># 录制视频</span><br>    <span class="hljs-comment">#shutil.rmtree(name)</span><br>    <span class="hljs-string">&quot;&quot;&quot;使用opencv录像&quot;&quot;&quot;</span><br>    cap = cv2.VideoCapture(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 默认的摄像头</span><br>    <span class="hljs-comment"># 指定视频代码</span><br>    fourcc = cv2.VideoWriter_fourcc(*<span class="hljs-string">&quot;DIVX&quot;</span>)<br>    out = cv2.VideoWriter(<span class="hljs-string">&#x27;233.avi&#x27;</span>, fourcc, <span class="hljs-number">20.0</span>, (<span class="hljs-number">640</span>,<span class="hljs-number">480</span>))   <span class="hljs-comment"># 设置录制的视频的格式</span><br>    <span class="hljs-keyword">while</span>(cap.isOpened()):<br>        ret, frame = cap.read()<br>        <span class="hljs-keyword">if</span> ret:<br>            out.write(frame)<br>            <span class="hljs-comment">#</span><br>            cv2.imshow(<span class="hljs-string">&#x27;frame&#x27;</span>,frame)<br>            <span class="hljs-comment"># 等待按键q操作关闭摄像头</span><br>            <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xFF</span> == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">break</span><br>    cap.release()                   <span class="hljs-comment"># 释放摄像头资源</span><br>    out.release()                   <span class="hljs-comment"># 释放文件资源</span><br>    cv2.destroyAllWindows()         <span class="hljs-comment"># 关闭拍摄窗口</span><br><br><br><br><br><span class="hljs-comment"># 改变图片的亮度与对比度</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">relight</span>(<span class="hljs-params">img, light=<span class="hljs-number">1</span>, bias=<span class="hljs-number">0</span></span>):</span><br>    w = img.shape[<span class="hljs-number">1</span>]<br>    h = img.shape[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment">#image = []</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,w):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,h):<br>            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>                tmp = <span class="hljs-built_in">int</span>(img[j,i,c]*light + bias)<br>                <span class="hljs-keyword">if</span> tmp &gt; <span class="hljs-number">255</span>:<br>                    tmp = <span class="hljs-number">255</span><br>                <span class="hljs-keyword">elif</span> tmp &lt; <span class="hljs-number">0</span>:<br>                    tmp = <span class="hljs-number">0</span><br>                img[j,i,c] = tmp<br>    <span class="hljs-keyword">return</span> img<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getDataByDlib</span>(<span class="hljs-params">name</span>):</span><br>    <span class="hljs-comment"># 利用dlib来实现</span><br>    output_dir = name       <span class="hljs-comment"># 使用录入的名字作为文件夹的名字</span><br>    size = <span class="hljs-number">64</span>               <span class="hljs-comment"># 相片的大小为64*64</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(output_dir):      <span class="hljs-comment"># 没有文件夹是主动创建一个</span><br>        os.makedirs(output_dir)<br>    <span class="hljs-comment">#使用dlib自带的frontal_face_detector作为我们的特征提取器</span><br>    detector = dlib.get_frontal_face_detector()<br>    <span class="hljs-comment"># 打开摄像头 参数为输入流，可以为摄像头或视频文件</span><br>    <span class="hljs-comment">#camera = cv2.VideoCapture(0)</span><br>    camera = cv2.VideoCapture(<span class="hljs-string">&quot;233.avi&quot;</span>)    <span class="hljs-comment"># 相片来自上一步拍摄的视频</span><br><br>    index = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">if</span> (index &lt;= <span class="hljs-number">200</span>):                  <span class="hljs-comment"># 每一段视频只取200张</span><br>            print(<span class="hljs-string">&#x27;Being processed picture %s&#x27;</span> % index) <span class="hljs-comment"># 显示处理的过程</span><br>            <span class="hljs-comment"># 从摄像头读取照片</span><br>            success, img = camera.read()    <span class="hljs-comment"># 从视频流中读取照片</span><br>            <span class="hljs-comment"># 转为灰度图片</span><br>            gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br>            <span class="hljs-comment"># 使用detector进行人脸检测</span><br>            dets = detector(gray_img, <span class="hljs-number">1</span>)<br><br>            <span class="hljs-keyword">if</span> success == <span class="hljs-literal">False</span>:<br>                <span class="hljs-keyword">break</span><br><br>            <span class="hljs-keyword">for</span> i, d <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(dets):<br>                x1 = d.top() <span class="hljs-keyword">if</span> d.top() &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>                y1 = d.bottom() <span class="hljs-keyword">if</span> d.bottom() &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>                x2 = d.left() <span class="hljs-keyword">if</span> d.left() &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>                y2 = d.right() <span class="hljs-keyword">if</span> d.right() &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br><br>                face = img[x1:y1,x2:y2]<br>                <span class="hljs-comment"># 调整图片的对比度与亮度， 对比度与亮度值都取随机数，这样能增加样本的多样性</span><br>                face = relight(face, random.uniform(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.5</span>), random.randint(-<span class="hljs-number">50</span>, <span class="hljs-number">50</span>))<br>                <span class="hljs-comment"># 裁剪出人脸相片，大小为64*64</span><br>                face = cv2.resize(face, (size,size))    <br>                <span class="hljs-comment"># 显示最后裁剪出的人脸相片</span><br>                cv2.imshow(<span class="hljs-string">&#x27;image&#x27;</span>, face)<br>                <span class="hljs-comment"># 保存到文件下，文件名为1 - 200.jpg</span><br>                cv2.imwrite(output_dir+<span class="hljs-string">&#x27;/&#x27;</span>+<span class="hljs-built_in">str</span>(index)+<span class="hljs-string">&#x27;.jpg&#x27;</span>, face)<br><br>                index += <span class="hljs-number">1</span><br>            key = cv2.waitKey(<span class="hljs-number">30</span>) &amp; <span class="hljs-number">0xff</span><br>            <span class="hljs-keyword">if</span> key == <span class="hljs-number">27</span>:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            print(<span class="hljs-string">&#x27;Finished!&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-comment"># 删除视频</span><br>    shutil.rmtree(<span class="hljs-string">&#x27;./233.avi&#x27;</span>)<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getDataByOpencv2</span>():</span><br>    <span class="hljs-comment"># 利用opencv来实现</span><br>    output_dir = <span class="hljs-string">&#x27;./my_faces&#x27;</span><br>    size = <span class="hljs-number">64</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(output_dir):<br>        os.makedirs(output_dir)                                 <br>    <span class="hljs-comment"># 获取分类器</span><br>    haar = cv2.CascadeClassifier(<span class="hljs-string">r&#x27;G:\DIP\Anaconda3\envs\test1\Library\etc\haarcascades\haarcascade_frontalface_default.xml&#x27;</span>)<br><br>    <span class="hljs-comment"># 打开摄像头 参数为输入流，可以为摄像头或视频文件</span><br>    camera = cv2.VideoCapture(<span class="hljs-string">&quot;233.avi&quot;</span>)<br><br>    n = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">10000</span>):<br>            print(<span class="hljs-string">&#x27;It`s processing %s image.&#x27;</span> % n)<br>            <span class="hljs-comment"># 读帧</span><br>            success, img = camera.read()<br><br>            gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br>            faces = haar.detectMultiScale(gray_img, <span class="hljs-number">1.3</span>, <span class="hljs-number">5</span>)<br>            <span class="hljs-keyword">for</span> f_x, f_y, f_w, f_h <span class="hljs-keyword">in</span> faces:<br>                face = img[f_y:f_y+f_h, f_x:f_x+f_w]<br>                face = cv2.resize(face, (<span class="hljs-number">64</span>,<span class="hljs-number">64</span>))<br>                <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                if n % 3 == 1:</span><br><span class="hljs-string">                    face = relight(face, 1, 50)</span><br><span class="hljs-string">                elif n % 3 == 2:</span><br><span class="hljs-string">                    face = relight(face, 0.5, 0)</span><br><span class="hljs-string">                &#x27;&#x27;&#x27;</span><br>                face = relight(face, random.uniform(<span class="hljs-number">0.5</span>, <span class="hljs-number">1.5</span>), random.randint(-<span class="hljs-number">50</span>, <span class="hljs-number">50</span>))<br>                cv2.imshow(<span class="hljs-string">&#x27;img&#x27;</span>, face)<br>                cv2.imwrite(output_dir+<span class="hljs-string">&#x27;/&#x27;</span>+<span class="hljs-built_in">str</span>(n)+<span class="hljs-string">&#x27;.jpg&#x27;</span>, face)<br>                n+=<span class="hljs-number">1</span><br>            key = cv2.waitKey(<span class="hljs-number">30</span>) &amp; <span class="hljs-number">0xff</span><br>            <span class="hljs-keyword">if</span> key == <span class="hljs-number">27</span>:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;please input yourename: &#x27;</span>)        <span class="hljs-comment"># 获取录入者的名字</span><br>    name = os.path.join(<span class="hljs-string">&#x27;./image/trainfaces&#x27;</span>, name) <span class="hljs-comment"># 生成保存的文件路径名</span><br>    make_video(name)                                <span class="hljs-comment"># 拍摄视频</span><br>    getDataByDlib(name)                             <span class="hljs-comment"># 利用dlib处理裁剪人脸原始相片</span><br></code></pre></td></tr></table></figure>
<h2 id="构建卷积神经网络，然后训练模型"><a href="#构建卷积神经网络，然后训练模型" class="headerlink" title="构建卷积神经网络，然后训练模型"></a>构建卷积神经网络，然后训练模型</h2><p>这一部分大概就是做人脸识别的主要目的了吧，，，</p>
<h3 id="构建卷积神经网络"><a href="#构建卷积神经网络" class="headerlink" title="构建卷积神经网络"></a>构建卷积神经网络</h3><p>这一部分几乎网上写的代码的框架都是差不多的，，，所以只要理解每一层是什么意思，，怎么用就行了，，当然可以继续深究下去，，理解每一层为什么这么做，，这么做的方法是什么等等，，</p>
<p>我们之前在这一部分投入的精力也最多，，出现的问题也是很多的，，其中我感觉最印象深刻的就是层数的叠加和那个神奇的 <code>loss=0.69.....</code></p>
<p>层数的叠加就是说大部分的代码都是做的3层的神经网络，，但是很少有做多层的，，当时找了很多的资料才一点一点的大致会算怎么计算下一层</p>
<p>关于那一个神奇的 <code>loss=0.69</code> ，，貌似不同的网络、需求下可能不会出现这种情况，，，但是如果出现不管比怎么调参出来的loss都保持在0.69附近的话，，可以试着查一下这一个问题，，我们最后的解决方法是再添加一层 <strong>batch nomalization层</strong> ，，具体干什么的网上有很多讲解的，，，加了它就可以使loss快速收敛，，，</p>
<h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><p>这一部分的框架都是差不多的，，变化可能有参数的变化，，优化器的不同等等</p>
<p>代码：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-string">&#x27;&#x27;&#x27; face detect convolution&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># pylint: disable=invalid-name</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> logging <span class="hljs-keyword">as</span> log<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> common<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> tensorflow.examples.tutorials.mnist <span class="hljs-keyword">import</span> input_data<br><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">import</span> random<br><br>SIZE = <span class="hljs-number">64</span><br><br>x = tf.placeholder(tf.float32, [<span class="hljs-literal">None</span>, SIZE, SIZE, <span class="hljs-number">3</span>])<br>y_ = tf.placeholder(tf.float32, [<span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>])<br>keep_prob_5 = tf.placeholder(tf.float32)<br>keep_prob_75 = tf.placeholder(tf.float32)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">weightVariable</span>(<span class="hljs-params">shape</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27; build weight variable&#x27;&#x27;&#x27;</span><br>    init = tf.random_normal(shape, stddev=<span class="hljs-number">0.01</span>)<br>    <span class="hljs-comment">#init = tf.truncated_normal(shape, stddev=0.01)</span><br>    <span class="hljs-keyword">return</span> tf.Variable(init)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">biasVariable</span>(<span class="hljs-params">shape</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27; build bias variable&#x27;&#x27;&#x27;</span><br>    init = tf.random_normal(shape)<br>    <span class="hljs-comment">#init = tf.truncated_normal(shape, stddev=0.01)</span><br>    <span class="hljs-keyword">return</span> tf.Variable(init)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">conv2d</span>(<span class="hljs-params">x, W</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27; conv2d by 1, 1, 1, 1&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">return</span> tf.nn.conv2d(x, W, strides=[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], padding=<span class="hljs-string">&#x27;SAME&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">maxPool</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27; max pooling&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], strides=[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], padding=<span class="hljs-string">&#x27;SAME&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dropout</span>(<span class="hljs-params">x, keep</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27; drop out&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">return</span> tf.nn.dropout(x, keep)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">batch_norm_layer</span>(<span class="hljs-params">value,is_training=<span class="hljs-literal">False</span>,name=<span class="hljs-string">&#x27;batch_norm&#x27;</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    批量归一化  返回批量归一化的结果</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    args:</span><br><span class="hljs-string">        value:代表输入，第一个维度为batch_size</span><br><span class="hljs-string">        is_training:当它为True，代表是训练过程，这时会不断更新样本集的均值与方差。当测试时，要设置成False，这样就会使用训练样本集的均值和方差。</span><br><span class="hljs-string">              默认测试模式</span><br><span class="hljs-string">        name：名称。</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> is_training <span class="hljs-keyword">is</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment">#训练模式 使用指数加权函数不断更新均值和方差</span><br>        <span class="hljs-keyword">return</span> tf.contrib.layers.batch_norm(inputs=value,decay=<span class="hljs-number">0.9</span>,updates_collections=<span class="hljs-literal">None</span>,is_training = <span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment">#测试模式 不更新均值和方差，直接使用</span><br>        <span class="hljs-keyword">return</span> tf.contrib.layers.batch_norm(inputs=value,decay=<span class="hljs-number">0.9</span>,updates_collections=<span class="hljs-literal">None</span>,is_training = <span class="hljs-literal">False</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cnnLayer</span>(<span class="hljs-params">classnum, isTrue</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27; create cnn layer&#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment"># 第一层</span><br>    W1 = weightVariable([<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>]) <span class="hljs-comment"># 卷积核大小(3,3)， 输入通道(3)， 输出通道(32)</span><br>    b1 = biasVariable([<span class="hljs-number">32</span>])<br>    conv1 = tf.nn.relu(batch_norm_layer(conv2d(x, W1) + b1, isTrue))<br>    pool1 = maxPool(conv1)<br>    <span class="hljs-comment"># 减少过拟合，随机让某些权重不更新</span><br>    drop1 = dropout(pool1, keep_prob_5) <span class="hljs-comment"># 32 * 32 * 32 多个输入channel 被filter内积掉了</span><br><br>    <span class="hljs-comment"># 第二层</span><br>    W2 = weightVariable([<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">64</span>])<br>    b2 = biasVariable([<span class="hljs-number">64</span>])<br>    conv2 = tf.nn.relu(batch_norm_layer(conv2d(drop1, W2) + b2, isTrue))<br>    pool2 = maxPool(conv2)<br>    drop2 = dropout(pool2, keep_prob_5) <span class="hljs-comment"># 64 * 16 * 16</span><br><br>    <span class="hljs-comment"># 第三层</span><br>    W3 = weightVariable([<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">64</span>, <span class="hljs-number">64</span>])<br>    b3 = biasVariable([<span class="hljs-number">64</span>])<br>    conv3 = tf.nn.relu(conv2d(drop2, W3) + b3)<br>    pool3 = maxPool(conv3)<br>    drop3 = dropout(pool3, keep_prob_5) <span class="hljs-comment"># 64 * 8 * 8</span><br>        <br>    <span class="hljs-comment"># 全连接层</span><br>    Wf = weightVariable([<span class="hljs-number">8</span>*<span class="hljs-number">8</span>*<span class="hljs-number">64</span>,<span class="hljs-number">512</span>])<br>    bf = biasVariable([<span class="hljs-number">512</span>])<br>    drop3_flat = tf.reshape(drop3, [-<span class="hljs-number">1</span>, <span class="hljs-number">8</span>*<span class="hljs-number">8</span>*<span class="hljs-number">64</span>])<br>    dense = tf.nn.relu(tf.matmul(drop3_flat, Wf) + bf)<br>    dropf = dropout(dense, keep_prob_75)<br><br>    <span class="hljs-comment"># 输出层</span><br>    Wout = weightVariable([<span class="hljs-number">512</span>, classnum])<br>    bout = weightVariable([classnum])<br>    <span class="hljs-comment">#out = tf.matmul(dropf, Wout) + bout</span><br>    out = tf.add(tf.matmul(dropf, Wout), bout)<br>    <span class="hljs-keyword">return</span> out<br><br>    <span class="hljs-comment"># # 第三层</span><br>    <span class="hljs-comment"># W3 = weightVariable([3, 3, 64, 128])</span><br>    <span class="hljs-comment"># b3 = biasVariable([128])</span><br>    <span class="hljs-comment"># conv3 = tf.nn.relu(batch_norm_layer(conv2d(drop2, W3) + b3, True))</span><br>    <span class="hljs-comment"># pool3 = maxPool(conv3)</span><br>    <span class="hljs-comment"># drop3 = dropout(pool3, keep_prob_5) # 128 * 8 * 8</span><br><br>    <span class="hljs-comment"># # 第四层</span><br>    <span class="hljs-comment"># W4 = weightVariable([3, 3, 128, 512])</span><br>    <span class="hljs-comment"># b4 = biasVariable([512])</span><br>    <span class="hljs-comment"># conv4 = tf.nn.relu(batch_norm_layer(conv2d(drop3, W4) + b4, True))</span><br>    <span class="hljs-comment"># pool4 = maxPool(conv4)</span><br>    <span class="hljs-comment"># drop4 = dropout(pool4, keep_prob_5) # 512 * 4 * 4</span><br><br>    <span class="hljs-comment"># # 第五层</span><br>    <span class="hljs-comment"># W5 = weightVariable([3, 3, 512, 1024])</span><br>    <span class="hljs-comment"># b5 = biasVariable([1024])</span><br>    <span class="hljs-comment"># conv5 = tf.nn.relu(batch_norm_layer(conv2d(drop4, W5) + b5, True))</span><br>    <span class="hljs-comment"># pool5 = maxPool(conv5)</span><br>    <span class="hljs-comment"># drop5 = dropout(pool5, keep_prob_5) # 1024 * 2 * 2</span><br><br>    <span class="hljs-comment"># # 第六层</span><br>    <span class="hljs-comment"># W6 = weightVariable([3, 3, 1024, 1024])</span><br>    <span class="hljs-comment"># b6 = biasVariable([1024])</span><br>    <span class="hljs-comment"># conv6 = tf.nn.relu(conv2d(drop5, W6) + b6)</span><br>    <span class="hljs-comment"># pool6 = maxPool(conv6)</span><br>    <span class="hljs-comment"># drop6 = dropout(pool6, keep_prob_5) # 2048 * 1 * 1</span><br><br><br><br><br>    <span class="hljs-comment"># # 全连接层</span><br>    <span class="hljs-comment"># Wf = weightVariable([1*1*1024, 2048])</span><br>    <span class="hljs-comment"># bf = biasVariable([2048])</span><br>    <span class="hljs-comment"># drop3_flat = tf.reshape(drop6, [-1, 1*1*1024])</span><br>    <span class="hljs-comment"># dense = tf.nn.relu(tf.matmul(drop3_flat, Wf) + bf)</span><br>    <span class="hljs-comment"># # dense = tf.nn.relu(tf.matmul(max_pool22_flat, Wf) + bf)</span><br>    <span class="hljs-comment"># dropf = dropout(dense, keep_prob_75)</span><br><br>   <br><br>    <span class="hljs-comment"># # 输出层</span><br>    <span class="hljs-comment"># Wout = weightVariable([2048, classnum])</span><br>    <span class="hljs-comment"># bout = weightVariable([classnum])</span><br>    <span class="hljs-comment"># #out = tf.matmul(dropf, Wout) + bout</span><br>    <span class="hljs-comment"># out = tf.add(tf.matmul(dropf, Wout), bout)</span><br>    <span class="hljs-comment"># #return out</span><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">train</span>(<span class="hljs-params">train_x, train_y, tfsavepath</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27; train&#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment">##### log.debug(&#x27;train&#x27;)</span><br><br>    <span class="hljs-comment"># 随机划分测试集与训练集</span><br>    train_x,test_x,train_y,test_y = train_test_split(train_x, train_y, test_size=<span class="hljs-number">0.05</span>, random_state=random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>))<br><br>    <span class="hljs-comment"># 得到卷积结果</span><br>    out = cnnLayer(train_y.shape[<span class="hljs-number">1</span>],<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-comment"># 参数：图片数据的总数，图片的高、宽、通道</span><br>    train_x = train_x.reshape(train_x.shape[<span class="hljs-number">0</span>], SIZE, SIZE, <span class="hljs-number">3</span>)<br>    test_x = test_x.reshape(test_x.shape[<span class="hljs-number">0</span>], SIZE, SIZE, <span class="hljs-number">3</span>)<br>    <br>    print(<span class="hljs-string">&#x27;train size:%s, test size:%s&#x27;</span> % (<span class="hljs-built_in">len</span>(train_x), <span class="hljs-built_in">len</span>(test_x)))<br>    sys.stdout.flush()<br><br>    <span class="hljs-comment"># 图片块，每次取32张图片</span><br>    batch_size = <span class="hljs-number">32</span><br>    num_batch = <span class="hljs-built_in">len</span>(train_x) // batch_size  <br><br>    <span class="hljs-comment"># 交叉熵</span><br>    cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=out, labels=y_))<br><br>    <span class="hljs-comment"># Adam优化器，学习速率：0.001</span><br>    train_step = tf.train.AdamOptimizer(<span class="hljs-number">0.001</span>).minimize(cross_entropy)<br>    <span class="hljs-comment"># train_step = tf.train.AdadeltaOptimizer(0.001).minimize(cross_entropy)</span><br><br>    <span class="hljs-comment"># 比较标签是否相等，再求的所有数的平均值，tf.cast(强制转换类型)</span><br>    <span class="hljs-comment"># 准确率计算公式</span><br>    accuracy = tf.reduce_mean(tf.cast(tf.equal(tf.argmax(out, <span class="hljs-number">1</span>), tf.argmax(y_, <span class="hljs-number">1</span>)), tf.float32))<br><br><br><br>    <span class="hljs-comment"># 将loss与accuracy保存以供tensorboard使用</span><br>    tf.summary.scalar(<span class="hljs-string">&#x27;loss&#x27;</span>, cross_entropy)<br>    tf.summary.scalar(<span class="hljs-string">&#x27;accuracy&#x27;</span>, accuracy)<br>    merged_summary_op = tf.summary.merge_all()<br><br>    <span class="hljs-comment"># 数据保存器的初始化</span><br>    saver = tf.train.Saver()<br><br>    <span class="hljs-keyword">with</span> tf.Session() <span class="hljs-keyword">as</span> sess:<br><br>        <span class="hljs-comment"># tensorflow初始化</span><br>        sess.run(tf.global_variables_initializer())<br>        <span class="hljs-comment"># tensorboard数据保存</span><br>        summary_writer = tf.summary.FileWriter(<span class="hljs-string">&#x27;./tmp&#x27;</span>, graph=tf.get_default_graph())<br><br>        <span class="hljs-comment"># 迭代80次</span><br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">80</span>):<br>            <span class="hljs-comment"># 每次取32(batch_size)张图片</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_batch):<br><br>                <span class="hljs-comment"># 训练集、测试集分块</span><br>                batch_x = train_x[i*batch_size : (i+<span class="hljs-number">1</span>)*batch_size]<br>                batch_y = train_y[i*batch_size : (i+<span class="hljs-number">1</span>)*batch_size]<br>                <span class="hljs-comment"># 开始训练数据，同时训练三个变量，返回三个数据</span><br>                _,loss,summary = sess.run([train_step, cross_entropy, merged_summary_op],<br>                                                feed_dict=&#123;x:batch_x,y_:batch_y, keep_prob_5:<span class="hljs-number">0.5</span>,keep_prob_75:<span class="hljs-number">0.75</span>&#125;)<br><br>                <span class="hljs-comment"># tensorboard记录数据    </span><br>                summary_writer.add_summary(summary, n*num_batch+i)<br><br>                <br>                <span class="hljs-comment"># 打印损失</span><br>                print(n*num_batch+i, loss)<br>                sys.stdout.flush()<br><br>        <span class="hljs-comment">#         if (n*num_batch+i) % batch_size == 0:</span><br>        <span class="hljs-comment">#             # 获取测试数据的准确率</span><br>        <span class="hljs-comment">#             acc = accuracy.eval(&#123;x:test_x, y_:test_y, keep_prob_5:1.0, keep_prob_75:1.0&#125;)</span><br>        <span class="hljs-comment">#             print(n*num_batch+i, acc, &#x27;--&#x27;, n)</span><br>                    <br>        <span class="hljs-comment">#             accc = acc</span><br><br>        <span class="hljs-comment">#             # 准确率大于0.98时保存并退出</span><br>        <span class="hljs-comment">#             if acc &gt; 0.95 and n &gt; 2:</span><br>        <span class="hljs-comment">#                 # saver.save(sess, &#x27;./train_faces.model&#x27;, global_step=n*num_batch+i)</span><br>        <span class="hljs-comment">#                 saver.save(sess, tfsavepath)</span><br>        <span class="hljs-comment">#                 # saver.save(sess, tfsavepath)</span><br>        <span class="hljs-comment">#                 sys.exit(0)</span><br>        <span class="hljs-comment"># # saver.save(sess, &#x27;./train_faces.model&#x27;, global_step=n*num_batch+i)</span><br>        <span class="hljs-comment"># # saver.save(sess, tfsavepath)</span><br>        <span class="hljs-comment"># print(&#x27;accuracy less 0.98, exited!&#x27;)   </span><br><br>        <span class="hljs-comment"># 准确率计算表达式</span><br>        acc = accuracy.<span class="hljs-built_in">eval</span>(&#123;x:test_x, y_:test_y, keep_prob_5:<span class="hljs-number">1.0</span>, keep_prob_75:<span class="hljs-number">1.0</span>&#125;)<br>        print(<span class="hljs-string">&#x27;after 80 times run: accuracy is &#x27;</span>, acc)<br>        sys.stdout.flush()<br><br>        <span class="hljs-comment"># 模型保存</span><br>        saver.save(sess, tfsavepath) <br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure>
<h2 id="识别"><a href="#识别" class="headerlink" title="识别"></a>识别</h2><p>这部分就是将训练好的模型加载，，然后实时的获取每一张相片处理等等，，，</p>
<p>tensorflow_face.py 这部分代码第一次运行会给每一个人创建一个标签，，获得标签集，，然后和训练集一同训练，，，而第二次运行就是识别，，，</p>
<figure class="highlight py"><table><tr><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> logging <span class="hljs-keyword">as</span> log<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> common<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> tensorflow.examples.tutorials.mnist <span class="hljs-keyword">import</span> input_data<br><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-comment"># import convert as myconv</span><br><span class="hljs-keyword">import</span> tensorflow_face_conv <span class="hljs-keyword">as</span> myconv<br><span class="hljs-keyword">import</span> dlib<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">import</span> sys<br><br><br><span class="hljs-comment"># rm</span><br><span class="hljs-keyword">import</span> shutil<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createdir</span>(<span class="hljs-params">*args</span>):</span>       <span class="hljs-comment"># 创建一个文件夹</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27; create dir&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> args:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(item):<br>            os.makedirs(item)<br><br>IMGSIZE = <span class="hljs-number">64</span><br>SIZE = <span class="hljs-number">64</span><br><br>rootpath = <span class="hljs-string">&#x27;G:\\DIP\\mine&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getpaddingSize</span>(<span class="hljs-params">shape</span>):</span>  <span class="hljs-comment"># 将相片两侧填充为正方形</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27; get size to make image to be a square rect &#x27;&#x27;&#x27;</span><br>    h, w = shape<br>    longest = <span class="hljs-built_in">max</span>(h, w)<br>    result = (np.array([longest]*<span class="hljs-number">4</span>, <span class="hljs-built_in">int</span>) - np.array([h, h, w, w], <span class="hljs-built_in">int</span>)) // <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> result.tolist()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dealwithimage</span>(<span class="hljs-params">img, h=<span class="hljs-number">64</span>, w=<span class="hljs-number">64</span></span>):</span> <span class="hljs-comment"># 裁剪出人脸的图片</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27; dealwithimage &#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment">#img = cv2.imread(imgpath)</span><br>    top, bottom, left, right = getpaddingSize(img.shape[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])<br>    img = cv2.copyMakeBorder(img, top, bottom, left, right, cv2.BORDER_CONSTANT, value=[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])<br>    img = cv2.resize(img, (h, w))<br>    <span class="hljs-keyword">return</span> img<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">relight</span>(<span class="hljs-params">imgsrc, alpha=<span class="hljs-number">1</span>, bias=<span class="hljs-number">0</span></span>):</span>   <span class="hljs-comment"># 更改图片为二值图</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;relight&#x27;&#x27;&#x27;</span><br>    imgsrc = imgsrc.astype(<span class="hljs-built_in">float</span>)<br>    imgsrc = imgsrc * alpha + bias<br>    imgsrc[imgsrc &lt; <span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>    imgsrc[imgsrc &gt; <span class="hljs-number">255</span>] = <span class="hljs-number">255</span><br>    imgsrc = imgsrc.astype(np.uint8)<br>    <span class="hljs-keyword">return</span> imgsrc<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getfilesinpath</span>(<span class="hljs-params">filedir</span>):</span>            <span class="hljs-comment"># 得到一个文件夹下的所有文件</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27; get all file from file directory&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> (path, dirnames, filenames) <span class="hljs-keyword">in</span> os.walk(filedir):<br>        <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> filenames:<br>            <span class="hljs-keyword">if</span> filename.endswith(<span class="hljs-string">&#x27;.jpg&#x27;</span>):<br>                <span class="hljs-keyword">yield</span> os.path.join(path, filename)<br>        <span class="hljs-keyword">for</span> diritem <span class="hljs-keyword">in</span> dirnames:<br>            getfilesinpath(os.path.join(path, diritem)) <span class="hljs-comment"># 递归调用得到改文件夹下的文件</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">readimage</span>(<span class="hljs-params">pairpathlabel</span>):</span>           <span class="hljs-comment"># 得到一个文件夹下的照片文件名和标记labels， 返回一个列表</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;read image to list&#x27;&#x27;&#x27;</span><br>    imgs = []<br>    labels = []<br>    <span class="hljs-keyword">for</span> filepath, label <span class="hljs-keyword">in</span> pairpathlabel:<br>        <span class="hljs-keyword">for</span> fileitem <span class="hljs-keyword">in</span> getfilesinpath(filepath):<br>            img = cv2.imread(fileitem)<br>            imgs.append(img)<br>            labels.append(label)<br>    <span class="hljs-keyword">return</span> np.array(imgs), np.array(labels)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">onehot</span>(<span class="hljs-params">numlist</span>):</span>                    <span class="hljs-comment"># 用于得到一个人的标签</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27; get one hot return host matrix is len * max+1 demensions&#x27;&#x27;&#x27;</span><br>    b = np.zeros([<span class="hljs-built_in">len</span>(numlist), <span class="hljs-built_in">max</span>(numlist)+<span class="hljs-number">1</span>])<br>    b[np.arange(<span class="hljs-built_in">len</span>(numlist)), numlist] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> b.tolist()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getfileandlabel</span>(<span class="hljs-params">filedir</span>):</span>           <span class="hljs-comment"># 用字典保存一个人名的照片和对应的labels</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27; get path and host paire and class index to name&#x27;&#x27;&#x27;</span><br>    dictdir = <span class="hljs-built_in">dict</span>([[name, os.path.join(filedir, name)] \<br>                    <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> os.listdir(filedir) <span class="hljs-keyword">if</span> os.path.isdir(os.path.join(filedir, name))])<br>                    <span class="hljs-comment">#for (path, dirnames, _) in os.walk(filedir) for dirname in dirnames])</span><br><br>    dirnamelist, dirpathlist = dictdir.keys(), dictdir.values()<br><br>    indexlist = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(dirnamelist)))<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(dirpathlist, onehot(indexlist))), <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>(indexlist, dirnamelist))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>(<span class="hljs-params">_</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27; main &#x27;&#x27;&#x27;</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    人脸识别项目主main函数</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    + 在第一次运行该文件时，会将上一次拍照保存的多个人的照片数据进行处理，卷积、训练等得到一个适合的模型</span><br><span class="hljs-string">    + 在第二次运行该文件时，会打开摄像头获取一个照片，然后根据上一步得到的模型处理后分类（识别）出照片上出现的人脸是之前录入的所有人中哪一个</span><br><span class="hljs-string">    + 目前无法判断其他未录入人的人脸，即others</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment">#shutil.rmtree(&#x27;./checkpoint&#x27;)</span><br>    savepath = <span class="hljs-string">&#x27;./checkpoint/face.ckpt&#x27;</span>     <span class="hljs-comment"># 记录下模型的索引路径</span><br>    isneedtrain = <span class="hljs-literal">False</span>                     <span class="hljs-comment"># 不存在时认为时第一次运行，即进行卷积训练</span><br>    <span class="hljs-keyword">if</span> os.path.exists(savepath+<span class="hljs-string">&#x27;.meta&#x27;</span>) <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>:<br>        isneedtrain = <span class="hljs-literal">True</span><br><br><br>    <span class="hljs-comment"># 根据录入保存的照片得到一个label和字典的路径的列表</span><br>    pathlabelpair, indextoname = getfileandlabel(rootpath + <span class="hljs-string">&#x27;\\image\\trainfaces&#x27;</span>)<br>    <br>    print(indextoname)<br>    sys.stdout.flush()<br>    print(pathlabelpair)<br>    sys.stdout.flush()<br><br>    <span class="hljs-comment"># 得到训练集、测试集的照片和labels的列表</span><br>    train_x, train_y = readimage(pathlabelpair)<br>    <span class="hljs-comment"># 将数据集归一化 ？？？</span><br>    train_x = train_x.astype(np.float32) / <span class="hljs-number">255.0</span><br><br><br><br>    <span class="hljs-comment">#### log.debug(&#x27;len of train_x : %s&#x27;, train_x.shape) </span><br><br><br><br>    <span class="hljs-keyword">if</span> isneedtrain:<br>        <span class="hljs-comment"># first generate all face</span><br>        <br>        <span class="hljs-comment"># 调用另一文件进行卷积训练模型</span><br>        myconv.train(train_x, train_y, savepath)<br><br>       <span class="hljs-comment">#### # log.debug(&#x27;training is over, please run again&#x27;)</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># second recognize faces </span><br>        <span class="hljs-comment"># 调用下面的函数进行实时识别</span><br><br>        testfromcamera(train_x, train_y, savepath)<br>        <span class="hljs-comment">#print(np.column_stack((out, argmax)))</span><br><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">testfromcamera</span>(<span class="hljs-params">train_x, train_y, chkpoint</span>):</span><br><br>    <span class="hljs-comment"># 打开默认摄像头</span><br>    camera = cv2.VideoCapture(<span class="hljs-number">0</span>)<br>    <span class="hljs-comment">#haar = cv2.CascadeClassifier(&#x27;haarcascade_frontalface_default.xml&#x27;)</span><br>    pathlabelpair, indextoname = getfileandlabel(rootpath + <span class="hljs-string">&#x27;\\image\\trainfaces&#x27;</span>)<br><br>    <span class="hljs-comment"># 得到预测值</span><br>    output = myconv.cnnLayer(<span class="hljs-built_in">len</span>(pathlabelpair),<span class="hljs-literal">False</span>)<br><br>    predict = output<br>    <br>    <span class="hljs-comment"># 得到dlib的人脸检测器</span><br>    detector = dlib.get_frontal_face_detector()<br><br>    <span class="hljs-comment"># 加载模型</span><br>    saver = tf.train.Saver()<br><br>    <span class="hljs-keyword">with</span> tf.Session() <span class="hljs-keyword">as</span> sess:<br>        <span class="hljs-comment">#sess.run(tf.global_variables_initializer())</span><br>        saver.restore(sess, chkpoint)<br><br>        n = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">20000</span>):<br>                print(<span class="hljs-string">&#x27;It`s processing %s image.&#x27;</span> % n)<br>                sys.stdout.flush()<br><br>                <span class="hljs-comment"># 间隔0.2s</span><br>                time.sleep(<span class="hljs-number">0.2</span>) <br><br>                <span class="hljs-comment"># 读帧</span><br>                success, img = camera.read()<br>                <span class="hljs-comment"># 得到灰度图</span><br>                gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br><br>                <span class="hljs-comment"># 使用detector进行人脸检测</span><br>                faces = detector(gray_img, <span class="hljs-number">1</span>)<br>                <span class="hljs-comment">#faces = haar.detectMultiScale(gray_img, 1.3, 5)</span><br>                <span class="hljs-keyword">for</span> i, d <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(faces):<br>                    x1 = d.top() <span class="hljs-keyword">if</span> d.top() &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>                    y1 = d.bottom() <span class="hljs-keyword">if</span> d.bottom() &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>                    x2 = d.left() <span class="hljs-keyword">if</span> d.left() &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>                    y2 = d.right() <span class="hljs-keyword">if</span> d.right() &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>                <br>                    face = img[x1:y1,x2:y2]<br><br>                    face = cv2.resize(face, (IMGSIZE, IMGSIZE))<br>                    <span class="hljs-comment">#could deal with face to train</span><br>                    test_x = np.array([face])<br>                    test_x = test_x.astype(np.float32) / <span class="hljs-number">255.0</span><br>                    <br>                    res = sess.run([predict, tf.argmax(output, <span class="hljs-number">1</span>)],\<br>                                   feed_dict=&#123;myconv.x: test_x,\<br>                                   myconv.keep_prob_5:<span class="hljs-number">1.0</span>, myconv.keep_prob_75: <span class="hljs-number">1.0</span>&#125;)<br>                    print(res, indextoname[res[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]], res[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][res[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]])<br>                    sys.stdout.flush()<br>                    <br>                    <span class="hljs-comment"># 得到一组随机的颜色值</span><br>                    r = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>                    g = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>                    b = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br><br>                    <span class="hljs-comment"># 绘制检测到的人脸的方框</span><br>                    cv2.rectangle(img, (x2,x1),(y2,y1), (r, g, b),<span class="hljs-number">3</span>)<br>                    <br>                    <span class="hljs-comment"># if res[0][0][res[1][0]] &gt;= 500:</span><br>                    <span class="hljs-comment">#     cv2.putText(img, &#x27;others&#x27;, (x1, y1 + 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (col, col, col), 2)  #显示名字</span><br>                    <span class="hljs-comment"># else:        </span><br>                    <span class="hljs-comment">#     cv2.putText(img, indextoname[res[1][0]], (x1, y1 - 40), cv2.FONT_HERSHEY_SIMPLEX, 1, (col, col, col), 2)  #显示名字</span><br>                    cv2.putText(img, indextoname[res[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]], (x2 + <span class="hljs-number">25</span>, y1 + <span class="hljs-number">40</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="hljs-number">1</span>, (r, g, b), <span class="hljs-number">2</span>)  <span class="hljs-comment">#显示名字</span><br>                    <br>                    n+=<span class="hljs-number">1</span><br>                    cv2.imshow(<span class="hljs-string">&#x27;img&#x27;</span>, img)<br>                key = cv2.waitKey(<span class="hljs-number">30</span>) &amp; <span class="hljs-number">0xff</span><br>                <span class="hljs-keyword">if</span> key == <span class="hljs-number">27</span>:<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">break</span>           <br>    camera.release()<br>    cv2.destroyAllWindows()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># first generate all face</span><br>    main(<span class="hljs-number">0</span>)<br>    <span class="hljs-comment">#onehot([1, 3, 9])</span><br>    <span class="hljs-comment">#print(getfileandlabel(&#x27;./image/trainimages&#x27;))</span><br>    <span class="hljs-comment">#generateface([[&#x27;./image/trainimages&#x27;, &#x27;./image/trainfaces&#x27;]])</span><br></code></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最后的模型的准确度还行，，但是不能识别未录入者，，它会认为是与已录入者最接近的人，，，</p>
<p>acc:</p>
<p><img src="https://github.com/31415926535x/CollegeProjectBackup/blob/master/FaceRecognition/acc.png" alt=""></p>
<p>loss:</p>
<p><img src="https://github.com/31415926535x/CollegeProjectBackup/blob/master/FaceRecognition/loss.png" alt=""></p>
<p>这个数据是通过tensorboard生成的，，</p>
<p>项目里还有一个简单的gui的实现，，因为没有时间了，，所有没有好好的优化一下，，，</p>
<p>(end 困。。。。)</p>
]]></content>
      <categories>
        <category>人脸识别</category>
      </categories>
      <tags>
        <tag>工具使用</tag>
        <tag>人脸识别</tag>
        <tag>实验报告</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串hash与字典树</title>
    <url>/2018/08/01/%E5%AD%97%E7%AC%A6%E4%B8%B2hash%E4%B8%8E%E5%AD%97%E5%85%B8%E6%A0%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>这篇主要是关于字符串里的 <strong>字符串hash</strong> 和 <strong>字符串字典树</strong>，，两个都是简单的套模板的东西，，，理解基本思想就行了，，，对了，，还有一个字典树的的变形—<strong>01字典树</strong>；</p>
<span id="more"></span>
<h2 id="字符串hash"><a href="#字符串hash" class="headerlink" title="字符串hash"></a>字符串hash</h2><h3 id="如何求一个字符串的hash值"><a href="#如何求一个字符串的hash值" class="headerlink" title="如何求一个字符串的hash值"></a>如何求一个字符串的hash值</h3><p>字符串hash的作用就是将 <em>字符串有效的转化为一个整数</em> ，，这个转化过程利用的是一个 <strong>hash函数</strong></p>
<p>例如，，我们选hash函数为 $hash[i]=(hash[i-1]*p+idx(s[i]))%mod$<br>其中的idx(s)为s的一个自定义索引，，，例如a = 1 , b = 2…..</p>
<p>这时，，取 p=13,mod=101,把abc映射成一个整数<br>    hash[0]=1，表示 a 映射为1<br>    hash[1]=(hash[0]<em>p+idx(b))%mod=15，表示 ab 映射为 15<br>    hash[2]=(hash[1]</em>p+idx(c))%mod=97</p>
<p>所以abc就被映射成97。</p>
<p>同样对于其他的字符串也可以由此算出一个hash值，，，</p>
<p>当然这里的p , MOD要选取合适，，，否则可能会出现不同字符串有相同的hash值，，，</p>
<p>一般来说，，，p和mod一般取素数，p取一个较大的素数即可（6位到8位），mod取一个大素数，比如1e9+7，或者1e9+9….</p>
<p>一般的模板，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> p = <span class="hljs-number">1e9</span> + <span class="hljs-number">13</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">hashStr</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *s)</span></span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> h=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> value;<br>        <span class="hljs-keyword">char</span> c=s[i];<br>        <span class="hljs-keyword">if</span>(c&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)  value=c-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c&gt;=<span class="hljs-string">&#x27;a&#x27;</span>&amp;&amp;c&lt;=<span class="hljs-string">&#x27;z&#x27;</span>) value=c-<span class="hljs-string">&#x27;a&#x27;</span>+<span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">else</span>    value=c-<span class="hljs-string">&#x27;A&#x27;</span>+<span class="hljs-number">36</span>;<br>        h=(h*p+value)%mod;<br>    &#125;<br>    <span class="hljs-keyword">return</span> h;<br></code></pre></td></tr></table></figure>
<h3 id="如何求一个字符串任意子串的hash值"><a href="#如何求一个字符串任意子串的hash值" class="headerlink" title="如何求一个字符串任意子串的hash值"></a>如何求一个字符串任意子串的hash值</h3><p>最容易想到的方法就是不管原来的字符串，，，<br>单独对于子串从 l 到 r 直接用刚刚求hash的方法求就行了，，，<br>但是当数据量大时，，，时间复杂度就很高了，，，，</p>
<p>上面的那个公式中hash[i]求得时字符串第i个前缀的hash值，，，，相当于是一个hash的前缀和，，，，</p>
<p>要求的子串 $hash[l..r] == (hash[r] - hash[l - 1] * p^{r - l + 1}) \% MOD$</p>
<p>**对了，，，这样直接求可能有负数，，，要判断+=mod一下。。。。。。</p>
<h3 id="几个常用的求字符串hash算法"><a href="#几个常用的求字符串hash算法" class="headerlink" title="几个常用的求字符串hash算法"></a>几个常用的求字符串hash算法</h3><p><a href="http://www.cnblogs.com/jiu0821/p/4554352.html">有些借鉴，，，</a></p>
<ul>
<li><p>$hash[i] = (hash[i - 1] * p + idx(s[i])) \% MOD$<br>常用，，，</p>
</li>
<li><p>unsigned long long hash[N];hash[i] = hash[i - 1] * p;这个自动取模，，，当数超过 $2^{64}-1$时就会溢出，，，相当于取模 $2^{64}$的过程，，，</p>
</li>
<li>双hash，，，有些情况下一个hash可能会出现冲突，，，那就换两个，，，两个不行就换三个，，，，什么？！三个还不行？？？！！！那就四个或则换算法，，，逃，，，实现：取两个mod，，一般取1e9+7和1e9+9两个孪生素数，，，冲突概率已经很低了，，，，，</li>
</ul>
<h2 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h2><p>简单来说就是把n个字符串用树保存，，，这样查询的时候一层一层的找，，，，</p>
<h3 id="构建节点"><a href="#构建节点" class="headerlink" title="构建节点"></a>构建节点</h3><p>一般的字典树的结构体定义如下:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">26</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Trie</span>   </span><br><span class="hljs-class">&#123;</span>   <br>    Trie *next[maxn];   <br>    <span class="hljs-keyword">int</span> v;   <span class="hljs-comment">//根据需要变化</span><br>&#125;;   <br> <br>Trie *root;<br><br></code></pre></td></tr></table></figure>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(str);<br>    trie *p = root;<br>    <span class="hljs-comment">//insert</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> t = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-comment">//NULL</span><br>        <span class="hljs-keyword">if</span> (p-&gt;next[t] == <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            p-&gt;next[t] = <span class="hljs-keyword">new</span> trie();<br>            p = p-&gt;next[t];<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            p = p-&gt;next[t];<br>            p-&gt;sum ++;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(str);<br>    trie *p = root;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> t = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        p = p-&gt;next[t];<br>        <span class="hljs-comment">//NULL</span><br>        <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p-&gt;sum;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="释放内存"><a href="#释放内存" class="headerlink" title="释放内存"></a>释放内存</h3><p>不然可能有的题mle,,,,,</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">free</span><span class="hljs-params">(trie *t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; maxn; i++)<br>        <span class="hljs-keyword">if</span> (t-&gt;next[i]) <span class="hljs-built_in">free</span>(t-&gt;next[i]);<br>    <span class="hljs-keyword">delete</span> (t);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>虽然是模板化的东西但是也要不死套模板，，，，，QAQ</p>
<h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p>前三道都是模板题，，上午讲过，，，最后一题是01字典树问题，，，以后要再看一下，，，看到不同的好几种实现方法，，，没有来的及总结一下，，，，</p>
<h3 id="Problem-A-A"><a href="#Problem-A-A" class="headerlink" title="Problem A: A"></a>Problem A: A</h3><p>Time Limit: 1 Sec  Memory Limit: 128 MB</p>
<blockquote>
<p>Description</p>
<p>给定N个字符串（第i个字符串长度为Mi，字符串内包含数字、大小写字母，大小写敏感），请求出N个字符串中共有多少个不同的字符串。</p>
<p>Input</p>
<p>输入，第一行一个N<br>接下来N行每行包含一个字符串</p>
<p>Output</p>
<p>输出不同字符串的个数</p>
<p>Sample Input<br>5<br>abc<br>aaaa<br>abc<br>abcc<br>12345</p>
<p>Sample Output<br>4<br>我的代码：</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> ull p = <span class="hljs-number">1e9</span> + <span class="hljs-number">13</span>;<br><span class="hljs-keyword">const</span> ull mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span>;<br>ull a[maxn];<br><span class="hljs-function">ull <span class="hljs-title">hashstr</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *s)</span></span><br><span class="hljs-function"></span>&#123;<br>    ull h = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(s); i++)<br>    &#123;<br>        ull idx;<br>        <span class="hljs-keyword">if</span> (s[i] &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)         idx = s[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; s[i] &lt;= <span class="hljs-string">&#x27;z&#x27;</span>)    idx = s[i] - <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; s[i] &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>)    idx = s[i] - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">36</span>;<br>        h = (h * p + idx) % mod;<br>    &#125;<br>    <span class="hljs-keyword">return</span> h;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;n);<br>    <span class="hljs-keyword">char</span> t[maxn];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-comment">//gets(t);</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span> , &amp;t);<br>        a[i] = hashstr(t);<br>    &#125;<br><br>    sort(a + <span class="hljs-number">1</span> , a + <span class="hljs-number">1</span> + n);<br><br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> cur = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (a[i] != cur)<br>        &#123;<br>            cur = a[i];<br>            ans++;<br>        &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>学长的，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br>ull base=<span class="hljs-number">131</span>;<br>ull a[<span class="hljs-number">10010</span>];<br><span class="hljs-keyword">char</span> s[<span class="hljs-number">1010</span>];<br><span class="hljs-function">ull <span class="hljs-title">Hash</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> len=<span class="hljs-built_in">strlen</span>(s);<br>    ull ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>        ans=ans*base+(ull)s[i];<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/*srand(NULL);</span><br><span class="hljs-comment">    freopen(&quot;data.in&quot;,&quot;r&quot;,stdin);</span><br><span class="hljs-comment">    freopen(&quot;data.out&quot;,&quot;w&quot;,stdout);*/</span><br>    <span class="hljs-comment">/*printf(&quot;1000\n&quot;);</span><br><span class="hljs-comment">    for(int i=1;i&lt;=1000;i++)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        int len=rand()%1000+1;</span><br><span class="hljs-comment">        for(int i=0;i&lt;len;i++)</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">            int t=rand()%3;</span><br><span class="hljs-comment">            if(t==0)</span><br><span class="hljs-comment">                s[i]=&#x27;0&#x27;+rand()%10;</span><br><span class="hljs-comment">            else if(t==1)</span><br><span class="hljs-comment">                s[i]=&#x27;A&#x27;+rand()%26;</span><br><span class="hljs-comment">            else</span><br><span class="hljs-comment">                s[i]=&#x27;a&#x27;+rand()%26;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        s[len]=&#x27;\0&#x27;;</span><br><span class="hljs-comment">        cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="hljs-comment">    &#125;*/</span><br>    <span class="hljs-keyword">int</span> N,i=<span class="hljs-number">1</span>,ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;N);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=N;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,&amp;s);<br>        a[i]=Hash(s);<br>    &#125;<br>    sort(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+N);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=N;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i]!=a[i<span class="hljs-number">-1</span>])<br>            ans++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h3 id="Problem-B-B"><a href="#Problem-B-B" class="headerlink" title="Problem B: B"></a>Problem B: B</h3><p>Time Limit: 1 Sec  Memory Limit: 128 MB</p>
<blockquote>
<p>Description</p>
<p>HHM在阅读一篇文章，他想找出来一个单词的频率，也就是这个单词在文章中出现了几次。聪明的你赶快帮帮他</p>
<p>Input</p>
<p>输入包含多组数据。</p>
<p>输入文件的第一行有一个整数，代表数据组数。接下来是这些数据，以如下格式给出：</p>
<p>第一行是单词W，一个由{‘A’,’B’,’C’,…,’Z’}中字母组成的字符串，保证1&lt;=|W|&lt;=10000（|W|代表字符串W的长度）</p>
<p>第二行是文章T，一个由{‘A’,’B’,’C’,…,’Z’}中字母组成的字符串，保证|W|&lt;=|T|&lt;=1000000。</p>
<p>Output</p>
</blockquote>
<p>对每组数据输出一行一个整数，即W在T中出现的次数。</p>
<blockquote>
<p>Sample Input<br>3<br>BAPC<br>BAPC<br>AZA<br>AZAZAZA<br>VERDI<br>AVERDXIVYERDIAN</p>
<p>Sample Output<br>1<br>3<br>0</p>
<p>HINT</p>
<p>字符串哈希思路</p>
</blockquote>
<p>我的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> ull p = <span class="hljs-number">1e9</span> + <span class="hljs-number">13</span>;<br><span class="hljs-keyword">const</span> ull MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e4</span> + <span class="hljs-number">6</span>;<br><span class="hljs-function">ull <span class="hljs-title">pow1</span> <span class="hljs-params">(ull x , ull n)</span></span><br><span class="hljs-function"></span>&#123;<br>    ull res = x;<br>    ull ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (n)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n &amp; <span class="hljs-number">1</span>)  ans = ans * res % MOD;<br>         res = res * res % MOD;<br>         n &gt;&gt;= <span class="hljs-number">1</span>;                           <span class="hljs-comment">//b右移相当于除以二</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;n);<br>    <span class="hljs-keyword">while</span> (n--)<br>    &#123;<br>        <span class="hljs-keyword">char</span> word[maxn];<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span> , word);<br>        <span class="hljs-comment">//gets(word);</span><br>        <span class="hljs-keyword">char</span> text[maxm];<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span> , text);<br>        <span class="hljs-comment">//gets(text);</span><br><br>        ull hash_word = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(word); i++)<br>        &#123;<br>            ull idx = word[i] - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">1</span>;<br>            hash_word = (hash_word * p + idx) % MOD;<br>        &#125;<br>        ull <span class="hljs-keyword">hash_t</span>[maxm];<br>        <span class="hljs-built_in">memset</span>(<span class="hljs-keyword">hash_t</span> , <span class="hljs-number">0</span> , <span class="hljs-keyword">sizeof</span> <span class="hljs-keyword">hash_t</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-built_in">strlen</span>(text); i++)<br>        &#123;<br>            ull idx = text[i - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">hash_t</span>[i] = (<span class="hljs-keyword">hash_t</span>[i - <span class="hljs-number">1</span>] * p + idx) % MOD;<br>        &#125;<br><br>        ull ans = <span class="hljs-number">0</span>;<br>        ull len = <span class="hljs-built_in">strlen</span>(word);<br>        <span class="hljs-keyword">for</span> (ull i = len; i &lt;= <span class="hljs-built_in">strlen</span>(text); i++)<br>        &#123;<br>            ull t = <span class="hljs-keyword">hash_t</span>[i] - <span class="hljs-keyword">hash_t</span>[i - len] * pow1(p , len);<span class="hljs-comment">//cout &lt;&lt; t &lt;&lt; endl;</span><br>            <span class="hljs-keyword">if</span> (t &lt; <span class="hljs-number">0</span>)  t = (t + MOD) % MOD;<br>            <span class="hljs-keyword">else</span>        t %= MOD;<br>            <span class="hljs-keyword">if</span> (t == hash_word)<br>                ans++;<br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>学长的代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br>ull base=<span class="hljs-number">131</span>;<br>ull p[<span class="hljs-number">100010</span>],a2[<span class="hljs-number">1000010</span>];<br><span class="hljs-keyword">char</span> s1[<span class="hljs-number">10010</span>],s2[<span class="hljs-number">1000010</span>];<br><span class="hljs-function">ull <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (ull)a2[r]-p[r-l+<span class="hljs-number">1</span>]*a2[l<span class="hljs-number">-1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    srand(<span class="hljs-literal">NULL</span>);<br>    freopen(<span class="hljs-string">&quot;data.in&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>,<span class="hljs-built_in">stdout</span>);<br>    <span class="hljs-comment">//freopen(&quot;data.out&quot;,&quot;w&quot;,stdout);</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;97\n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">97</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> p1=rand()%<span class="hljs-number">10000</span>+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> p2=rand()%<span class="hljs-number">10000</span>+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(p1&gt;p2)<br>            swap(p1,p2);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;p1;j++)<br>            s1[j]=<span class="hljs-string">&#x27;A&#x27;</span>+rand()%<span class="hljs-number">26</span>;<br>        s1[p1]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;p2;j++)<br>            s2[j]=<span class="hljs-string">&#x27;A&#x27;</span>+rand()%<span class="hljs-number">26</span>;<br>        s2[p2]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;s1&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;s2&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-comment">/*p[0]=1;</span><br><span class="hljs-comment">    for(int i=1;i&lt;=10000;i++)</span><br><span class="hljs-comment">        p[i]=p[i-1]*base;</span><br><span class="hljs-comment">    int T;</span><br><span class="hljs-comment">    scanf(&quot;%d&quot;,&amp;T);</span><br><span class="hljs-comment">    while(T--)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        scanf(&quot;%s%s&quot;,&amp;s1,&amp;s2);</span><br><span class="hljs-comment">        int len1=strlen(s1),len2=strlen(s2);</span><br><span class="hljs-comment">        ull a1=0;</span><br><span class="hljs-comment">        int ans=0;</span><br><span class="hljs-comment">        for(int i=0;i&lt;len1;i++)</span><br><span class="hljs-comment">            a1=a1*base+(ull)s1[i];</span><br><span class="hljs-comment">        a2[0]=(ull)s2[0];</span><br><span class="hljs-comment">        for(int i=1;i&lt;len2;i++)</span><br><span class="hljs-comment">            a2[i]=a2[i-1]*base+(ull)s2[i];</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        for(int i=0;i+len1-1&lt;len2;i++)</span><br><span class="hljs-comment">            if(a1==get(i,i+len1-1))</span><br><span class="hljs-comment">                ans++;</span><br><span class="hljs-comment">        printf(&quot;%d\n&quot;,ans);</span><br><span class="hljs-comment">    &#125;*/</span><br>&#125;<br><br></code></pre></td></tr></table></figure>
<h3 id="Problem-C-C"><a href="#Problem-C-C" class="headerlink" title="Problem C: C"></a>Problem C: C</h3><p>Time Limit: 1 Sec  Memory Limit: 128 MB</p>
<blockquote>
<p>Description</p>
<p>HMM最近遇到一个难题,老师交给他很多单词(只有小写字母组成,不会有重复的单词出现),现在老师要他统计出以某个字符串为前缀的单词数量(单词本身也是自己的前缀).</p>
<p>Input</p>
<p>输入数据的第一部分是一张单词表,每行一个单词,单词的长度不超过10,它们代表的是老师交给HMM统计的单词,一个#代表单词表的结束.第二部分是一连串的提问,每行一个提问,每个提问都是一个字符串.</p>
<p>Output</p>
<p>对于每个提问,给出以该字符串为前缀的单词的数量.</p>
<p>Sample Input<br>banana<br>band<br>bee<br>absolute<br>acm<br>#<br>ba<br>b<br>band<br>abc<br>Sample Output<br>2<br>3<br>1<br>0</p>
</blockquote>
<p>我的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ms(a , b) memset(a , b , sizeof(a))</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">27</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">trie</span></span><br><span class="hljs-class">&#123;</span><br>    trie *next[maxn];<br>    <span class="hljs-keyword">int</span> sum;<br>    trie()<br>    &#123;<br>        sum = <span class="hljs-number">1</span>;<br>        ms(next , <span class="hljs-literal">NULL</span>);<br>    &#125;<br>&#125;*root;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(str);<br>    trie *p = root;<br>    <span class="hljs-comment">//insert</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> t = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-comment">//NULL</span><br>        <span class="hljs-keyword">if</span> (p-&gt;next[t] == <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            p-&gt;next[t] = <span class="hljs-keyword">new</span> trie();<br>            p = p-&gt;next[t];<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            p = p-&gt;next[t];<br>            p-&gt;sum ++;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(str);<br>    trie *p = root;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> t = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        p = p-&gt;next[t];<br>        <span class="hljs-comment">//NULL</span><br>        <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p-&gt;sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">free</span><span class="hljs-params">(trie *t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; maxn; i++)<br>        <span class="hljs-keyword">if</span> (t-&gt;next[i]) <span class="hljs-built_in">free</span>(t-&gt;next[i]);<br>    <span class="hljs-keyword">delete</span> (t);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> str[maxn];<br>    root = <span class="hljs-keyword">new</span> trie;<br>    <span class="hljs-keyword">while</span>(gets(str) &amp;&amp; str[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;#&#x27;</span>)<br>    &#123;<br>        Insert(str);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span> , str))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span> , query(str));<br>    &#125;<br>    <span class="hljs-built_in">free</span>(root);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>学长的代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">char</span> s[<span class="hljs-number">15</span>];<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Trie</span>&#123;</span><br>    <span class="hljs-keyword">int</span> v;<br>    Trie *next[<span class="hljs-number">26</span>];<br>&#125;Trie;<br><br>Trie root;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Creat</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> len=<span class="hljs-built_in">strlen</span>(str);<br>    Trie *p=&amp;root,*q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> id=str[i]-<span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(p-&gt;next[id]==<span class="hljs-literal">NULL</span>)<br>        &#123;<br>            q=(Trie *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(root));<br>            q-&gt;v=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">26</span>;j++)<br>                q-&gt;next[j]=<span class="hljs-literal">NULL</span>;<br>            p-&gt;next[id]=q;<br>            p=p-&gt;next[id];<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            p-&gt;next[id]-&gt;v++;<br>            p=p-&gt;next[id];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Find</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> len=<span class="hljs-built_in">strlen</span>(str);<br>    Trie *p=&amp;root;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> id=str[i]-<span class="hljs-string">&#x27;a&#x27;</span>;<br>        p=p-&gt;next[id];<br>        <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p-&gt;v;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/*srand(NULL);</span><br><span class="hljs-comment">    freopen(&quot;data.in&quot;,&quot;r&quot;,stdin);</span><br><span class="hljs-comment">    freopen(&quot;data.out&quot;,&quot;w&quot;,stdout);</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-comment">/*for(int i=1;i&lt;=1000;i++)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        int p=rand()%10+1;</span><br><span class="hljs-comment">        for(int j=0;j&lt;p;j++)</span><br><span class="hljs-comment">            s[j]=&#x27;a&#x27;+rand()%26;</span><br><span class="hljs-comment">        cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="hljs-comment">    &#125;*/</span><br>    <span class="hljs-keyword">char</span> str[<span class="hljs-number">15</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">26</span>;i++)<br>        root.next[i]=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,&amp;str)&amp;&amp;str[<span class="hljs-number">0</span>]!=<span class="hljs-string">&#x27;#&#x27;</span>)<br>        Creat(str);<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,&amp;str)!=EOF)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,Find(str));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h3 id="Problem-D-D"><a href="#Problem-D-D" class="headerlink" title="Problem D: D"></a>Problem D: D</h3><p>Time Limit: 1 Sec  Memory Limit: 128 MB</p>
<blockquote>
<p>Description</p>
<p>HHM和SY做游戏，SY给HHM一个集合，集合包含了N个整数，随后SY向HHM发起M次询问，每次询问包含一个整数S，之后HHM需要在集合中<br>找到一个正整数K，使得K与S的异或结果最大。HHM向你请求帮助</p>
<p>Input</p>
<p>输入包含若干组测试数据，每组测试数据包含若干行。</p>
<p>输入的第一行是一个整数T（T &lt; 10），表示共有T组数据。</p>
<p>每组数据的第一行输入两个正整数N，M（&lt;1=N,M&lt;=100000），接下来一行，包含N个正整数，代表 Zeus 的获得的集合，之后M行，每行一个正整数S，代表 Prometheus 询问的正整数。所有正整数均不超过2^32。</p>
<p>Output</p>
<p>对于每组数据，首先需要输出单独一行”Case #?:”，其中问号处应填入当前的数据组数，组数从1开始计算。</p>
<p>对于每个询问，输出一个正整数K，使得K与S异或值最大。</p>
<p>Sample Input<br>2<br>3 2<br>3 4 5<br>1<br>5<br>4 1<br>4 6 5 6<br>3<br>Sample Output<br>Case #1:<br>4<br>3<br>Case #2:<br>4</p>
</blockquote>
<p>我的代码：</p>
<p>这个是用 <strong>01字典树</strong> 解决的，，，当时想到了将每一个数转化为’a’ , ‘b’顺序的字符串，，然后存到字典数里，，最后查询待输入的s异或后的字符串在树中走到头的位置即为答案，，，突然蒙蔽不会建树了，，，gg….QAQ</p>
<p>对了，，我看到网上有的人是用数组建的树，，，有点看不懂，，，挖个坑，，，还有一个神奇的函数bitset(),,,,哪天来补票，，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ms(a , b) memset(a , b , sizeof(a))</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e5</span> +<span class="hljs-number">5</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">trie</span></span><br><span class="hljs-class">&#123;</span><br>    trie *next[maxn];<br>    <span class="hljs-keyword">int</span> num;<br>    trie()<br>    &#123;<br>        num = <span class="hljs-number">0</span>;<br>        ms(next , <span class="hljs-literal">NULL</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(trie *root , <span class="hljs-keyword">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    trie *p = root;<br>    <span class="hljs-comment">//insert</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">31</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> k = (a &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (p-&gt;next[k] == <span class="hljs-literal">NULL</span>)         <span class="hljs-comment">//空的代表没存加上</span><br>        &#123;<br>            p-&gt;next[k] = <span class="hljs-keyword">new</span> trie();<br><br>        &#125;<br>        p = p-&gt;next[k];<br>    &#125;<br>    p-&gt;num = a;                         <span class="hljs-comment">//将从根节点到该节点表示的值存起来</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(trie *root , <span class="hljs-keyword">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    trie *p = root;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">31</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> k = (a &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (p-&gt;next[k ^ <span class="hljs-number">1</span>] != <span class="hljs-literal">NULL</span>)<br>            p = p-&gt;next[k ^ <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">else</span><br>            p = p-&gt;next[k];<br>    &#125;<br>    <span class="hljs-keyword">return</span> p-&gt;num;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Free</span><span class="hljs-params">(trie *t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; maxn; i++)<br>        <span class="hljs-keyword">if</span> (t-&gt;next[i]) Free(t-&gt;next[i]);<br>    <span class="hljs-keyword">delete</span> t;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;t);<br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br><br>        <span class="hljs-keyword">int</span> n , m;<br>        <span class="hljs-comment">//cin &gt;&gt; n &gt;&gt; m;</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span> , &amp;n , &amp;m);<br>        <span class="hljs-keyword">int</span> a;<br>        trie *root = <span class="hljs-keyword">new</span> trie();<br><br>        <span class="hljs-comment">//insert</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;a);<br>            Insert(root , a);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d:\n&quot;</span> , k++);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;a);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span> , query(root , a));<br>        &#125;<br>        Free(root);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>
<p>学长的代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tree</span></span><br><span class="hljs-class">&#123;</span><br>    tree *next[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">int</span> v;<br>    <span class="hljs-keyword">int</span> val;<br>&#125;tree;<br>tree root;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Creat</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *str,<span class="hljs-keyword">int</span> va)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> len=<span class="hljs-built_in">strlen</span>(str);<br>    tree *p=&amp;root,*q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> id=str[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(p-&gt;next[id]==<span class="hljs-literal">NULL</span>)<br>        &#123;<br>            q=(tree*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(root));<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">2</span>;j++)<br>                q-&gt;next[j]=<span class="hljs-literal">NULL</span>;<br>            p-&gt;next[id]=q;<br>        &#125;<br>        p=p-&gt;next[id];<br>        <span class="hljs-keyword">if</span>(i==len<span class="hljs-number">-1</span>)<br>            p-&gt;val=va;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Find</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> len=<span class="hljs-built_in">strlen</span>(str);<br>    tree *p=&amp;root;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> id=str[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(p-&gt;next[<span class="hljs-number">1</span>-id]!=<span class="hljs-number">0</span>)<br>            p=p-&gt;next[<span class="hljs-number">1</span>-id];<br>        <span class="hljs-keyword">else</span><br>            p=p-&gt;next[id];<br>        <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span>(i==len<span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,p-&gt;val);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">2</span>;i++)<br>    &#123;<br>        root.next[i]=<span class="hljs-literal">NULL</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/*srand(NULL);</span><br><span class="hljs-comment">    freopen(&quot;data.in&quot;,&quot;r&quot;,stdin);</span><br><span class="hljs-comment">    freopen(&quot;data.out&quot;,&quot;w&quot;,stdout);</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-comment">/*printf(&quot;5\n&quot;);</span><br><span class="hljs-comment">    for(int i=1;i&lt;=5;i++)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        int m=rand()%100000+1;</span><br><span class="hljs-comment">        int n=rand()%100000+1;</span><br><span class="hljs-comment">        printf(&quot;%d %d\n&quot;,n,m);</span><br><span class="hljs-comment">        for(int i=1;i&lt;=n;i++)</span><br><span class="hljs-comment">            printf(&quot;%d &quot;,rand()%100000000+1);</span><br><span class="hljs-comment">        printf(&quot;\n&quot;);</span><br><span class="hljs-comment">        for(int i=1;i&lt;=m;i++)</span><br><span class="hljs-comment">            printf(&quot;%d &quot;,rand()%100000000+1);</span><br><span class="hljs-comment">        printf(&quot;\n&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <span class="hljs-keyword">int</span> kase=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> T;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;T);<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        init();<br>        <span class="hljs-keyword">int</span> n,m;<br>        <span class="hljs-keyword">char</span> s[<span class="hljs-number">50</span>];<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> a;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a);<br>            <span class="hljs-keyword">int</span> tmp=a;<br>            s[<span class="hljs-number">36</span>]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">35</span>;j&gt;=<span class="hljs-number">0</span>;j--)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(a)<br>                &#123;<br>                    s[j]=a%<span class="hljs-number">2</span>+<span class="hljs-string">&#x27;0&#x27;</span>;<br>                    a/=<span class="hljs-number">2</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    s[j]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>                &#125;<br>            &#125;<br>            Creat(s,tmp);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d:\n&quot;</span>,++kase);<br>        <span class="hljs-keyword">while</span>(m--)<br>        &#123;<br>            <span class="hljs-keyword">int</span> a;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a);<br>            s[<span class="hljs-number">36</span>]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">35</span>;j&gt;=<span class="hljs-number">0</span>;j--)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(a)<br>                &#123;<br>                    s[j]=a%<span class="hljs-number">2</span>+<span class="hljs-string">&#x27;0&#x27;</span>;<br>                    a/=<span class="hljs-number">2</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    s[j]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>                &#125;<br>            &#125;<br>            Find(s);<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>溜。。。。。。。。。。。。</p>
]]></content>
      <tags>
        <tag>acm</tag>
        <tag>算法</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>差分约束</title>
    <url>/2019/02/28/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>很早之前学最短路的时候就看了一眼差分约束，，当时以为这种问题不怎么会出现，，而且当时为了只为了学最短路，，所以就没有怎么做题，，知道是什么，但是不会建图使用，，<br>然后上一次做cf就碰到了，，虽然那道题不只是差分约束能解决还卡时间，，但是万一以后还出现这种题，，只是知道是这个类型的题却不知道如何下手也相当于是不会啊，，所以抽时间重新看了看这块的内容，，做几道题，，顺便背一背最短路的板子，，好久敲最短路的板子都已经忘记了，，</p>
<p>感觉这一块的东西最主要的是建图吧，，很多这样的题的解法都不止一种，，差分约束只是其中一种，，因为使用spfa实现的，，所以也很容易被卡，，</p>
<span id="more"></span>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><a href="https://blog.csdn.net/consciousman/article/details/53812818">这里的东西我是先参考这篇博客的</a><a href="https://blog.csdn.net/winddreams/article/details/45746169">还有这里</a><br>因为之前看过差分约束，，还有印象，，所以上手很快，，纯理论性东西算法导论等等的地方讲的很详细，，</p>
<p>首先差分约束主要是解决 <strong>不等式组的求解</strong>，，其中这些不等式组的特征是 $x_i-x_j \leq or \geq K_i(i,j \in [1, n], k \in [1, m])$，，</p>
<ul>
<li>求 $x_n-x_0$的最大值就是求 $x_n$ 到 $x_0$的最短路， $x_i-x_j \leq K_i$</li>
<li>求 $x_n-x_0$的最小值就是求 $x_n$ 到 $x_0$的最长路， $x_i-x_j \geq K_i$</li>
</ul>
<p>建图都是建 $x_j$ -&gt; $x_i$ 的边，权值为K</p>
<p>有些题目还有一些隐藏的条件，，比如说 $x<em>i-x</em>{i-1} \leq K_i$等等的约束条件，，一并加上就行了，</p>
<p>要是出现符号不一致的就两边取相反数，，把符号化一致就行，，（这样会出现负权的边，，所以要用spfa来解，，），，</p>
<p>出现 $x_i-x_j &lt; K$ 的话可以化成 $x_i-x_j \leq K + 1$的形式(都是整数的情况下)，，</p>
<p>判断有无解的话就判断建的图有无环就行了，，，</p>
<p><a href="https://blog.csdn.net/foreyes_1001/article/details/84260729">额外的一些东西</a></p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="poj-1201-Intervals"><a href="#poj-1201-Intervals" class="headerlink" title="poj-1201-Intervals"></a><a href="http://poj.org/problem?id=1201">poj-1201-Intervals</a></h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>题意大概就是，给你n个区间 $[l_i,r_i]$ 要求这些区间内必须要几个数 $C_i$，问你满足这些区间的最少的数，，，</p>
<p>看评论区里很多人都是贪心+线段树（树状数组）做的，，</p>
<p>用差分约束的话就是将题目所给的东西转化成若干个不等式，，然后明白要求什么，，找出隐藏的条件，建图求解，，</p>
<p>这道题我们用 $dis[i]$ 表示0~i这个区间至少要选几个数（类似前缀和的思想），，，然后任意一个区间就可以表示为 $dis[r]-dis[l - 1] \geq c_i$ ，，题目的隐藏条件是相邻两点直接的个数是0或1，，也就是 $0 \leq dis[i]-dis[i-1] \leq 1$，因为对于0这个点出这样无法表示(dis[-1])，，所以对每一个点加一（向右偏移一个位置），，，最后求最长路就行了，，，</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v;<br>    <span class="hljs-keyword">int</span> cost;<br>    edge(<span class="hljs-keyword">int</span> _v = <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> _cost = <span class="hljs-number">0</span>):v(_v), cost(_cost)&#123;&#125;<br>&#125;;<br><span class="hljs-built_in">vector</span>&lt;edge&gt; e[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[u].pb(edge(v, w));<br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> cnt[maxn];<br><span class="hljs-keyword">int</span> dis[maxn];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-built_in">memset</span>(cnt, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> cnt);<br>    cnt[s] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)dis[i] = -inf;<br>    vis[s] = <span class="hljs-literal">true</span>;<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    q.push(s);<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front();q.pop();<br>        vis[u] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; e[u].size(); ++i)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = e[u][i].v;<br>            <span class="hljs-keyword">if</span>(dis[v] &lt; dis[u] + e[u][i].cost)<br>            &#123;<br>                dis[v] = dis[u] + e[u][i].cost;<br>                <span class="hljs-keyword">if</span>(!vis[v])<br>                &#123;<br>                    vis[v] = <span class="hljs-literal">true</span>;<br>                    q.push(v);<br>                    <span class="hljs-keyword">if</span>(++cnt[v] &gt; n)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">int</span> mi = inf, mx = <span class="hljs-number">0</span>, u, v, w;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);<br>        addedge(u, v + <span class="hljs-number">1</span>, w);<br>        mi = min(mi, u);<br>        mx = max(mx, v);<br>    &#125;<br>    ++mx;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = mi; i &lt;= mx; ++i)<br>    &#123;<br>        addedge(i, i + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        addedge(i + <span class="hljs-number">1</span>, i, <span class="hljs-number">-1</span>);<br>    &#125;<br>    spfa(mi, mx);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dis[mx]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="poj-1275-Cashier-Employment"><a href="#poj-1275-Cashier-Employment" class="headerlink" title="poj-1275-Cashier Employment"></a><a href="http://poj.org/problem?id=1275">poj-1275-Cashier Employment</a></h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>题意是一天之内24个小时0点到23点，某个时间点需要的营业员的个数 $r[i]$ 给你，然后有一些应聘的人，他们开始工作的时间 $a[i]$ 给你，，每个人可以从开始的那个时间段工作8个小时，，然后问你最少应该聘用多少个人使得每个时间段的人数 $r[i]$ 是足够的，，</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>乍一看这题不知道怎么下手，，就算是知道这是一道差分约束的题也不知道图怎么建，，</p>
<p>我的感觉是首先要 找出一个属性使得它在不同两个的状态下的满足的条件不同（也就是题目要求什么，就找什么关系（二项式），，也就是我们后面建图时的点与点之间的关系，，而且是差的不等关系，，也就是构建出一个差分约束系统，，而这个属性一般也就是我们要求的最值的一种最宽的情况，，（ $x_n$ 到 $x_0$的最值）</p>
<p>对于这道题来说，题目要我们求一天之内需要的最少的人数 $sum$ ，，也就是0点到23点的最小值，，这样我们就能看出我们要列出一些 <strong>时间段</strong> 内的约束条件，，用 $dis[i]$ 表示0点到i点这段时间内至少需要人数，，（又是前缀和的思想），，，这样一段时间内至少需要的人数就是 $dis[i] - dis[j] \leq K$ ，，</p>
<p>一个员工只能工作8个小时，所以我们可以得出：从i-8到i这段时间内工作的人数至少要大于i这个时间段内 $r[i]$ 所需的人数 $dis[i]-dis[i-8] \geq r[i]$，此时的 $i \geq 7$；</p>
<p>对于 $i \leq 7$ 的情况，我们可以推出 $sum-dis[i+16] + s[i] \geq r[i]$</p>
<p>同时对于每一个小时内的最多的工作人数 $mp[i]$ 是确定的，，也就是说， $0 \leq dis[i]-dis[i-1] \leq mp[i]$</p>
<p>一整天的工作人数满足： $dis[24]-dis[0] \geq sum$</p>
<p>上面一个不等式中有一个未知量sum，，它的取值是0~n，，可以二分枚举这个sum多次建图求出最小的sum，，，</p>
<p><a href="https://blog.csdn.net/winddreams/article/details/45746169">参考1</a><br><a href="https://blog.csdn.net/consciousman/article/details/53812818">参考2</a></p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//hdu</span><br><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, next, w;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> head[maxn], tot;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v; edge[tot].next = head[u]; edge[tot].w = w; head[u] = tot++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> dis[maxn], cnt[maxn];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-built_in">memset</span>(cnt, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> cnt);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dis[i] = -inf;<br>    vis[s] = <span class="hljs-literal">true</span>;<br>    dis[s] = <span class="hljs-number">0</span>;<br>    cnt[s] = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    q.push(s);<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front(); q.pop();<br>        vis[u] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">//if(u == 24 &amp;&amp; dis[u] &gt; m)return 0;</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">int</span> w = edge[i].w;<br>            <span class="hljs-keyword">if</span>(dis[v] &lt; dis[u] + w)<br>            &#123;<br>                dis[v] = dis[u] + w;<br>                <span class="hljs-keyword">if</span>(!vis[v])<br>                &#123;<br>                    vis[v] = <span class="hljs-literal">true</span>;<br>                    q.push(v);<br>                    <span class="hljs-keyword">if</span>(++cnt[v] &gt; n)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">int</span> r[<span class="hljs-number">30</span>], a[maxn];<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; mp;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    init();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">23</span>; ++i)<br>    &#123;<br>        addedge(i, i + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        addedge(i + <span class="hljs-number">1</span>, i, -mp[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">7</span>; i &lt;= <span class="hljs-number">23</span>; ++i)<br>        addedge(i - <span class="hljs-number">8</span> + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>, r[i]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; ++i)<br>        addedge(i + <span class="hljs-number">16</span> + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>, r[i] - m);<br>    addedge(<span class="hljs-number">0</span>, <span class="hljs-number">24</span>, m);<br>    addedge(<span class="hljs-number">24</span>, <span class="hljs-number">0</span>, -m);<br>    <span class="hljs-keyword">if</span>(spfa(<span class="hljs-number">0</span>, <span class="hljs-number">30</span>))<br>        <span class="hljs-keyword">return</span> dis[<span class="hljs-number">24</span>];<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">23</span>; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;r[i]);<br>        <span class="hljs-keyword">int</span> n;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)++mp[a[i]];<br>        <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = n + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//for(int i =  1; i &lt;= n; ++i)cout &lt;&lt; check(i) &lt;&lt; endl;return 0 ;</span><br>        <span class="hljs-keyword">while</span>(l + <span class="hljs-number">1</span> &lt; r)<br>        &#123;<br>            <span class="hljs-keyword">int</span> m = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">int</span> flag = check(m);<br>            <span class="hljs-comment">//cout &lt;&lt; l &lt;&lt; r &lt;&lt; m &lt;&lt; flag &lt;&lt; endl;</span><br>            <span class="hljs-keyword">if</span>(m == flag)<br>            &#123;<br>                r = m;<br>                ans = m;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                l = m;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(l &gt;= n)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No Solution\n&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//1</span><br><span class="hljs-comment">//1 0 3 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1</span><br><span class="hljs-comment">//5</span><br><span class="hljs-comment">//0</span><br><span class="hljs-comment">//23</span><br><span class="hljs-comment">//22</span><br><span class="hljs-comment">//1</span><br><span class="hljs-comment">//10</span><br></code></pre></td></tr></table></figure>
<h2 id="hdu-3440-House-Man"><a href="#hdu-3440-House-Man" class="headerlink" title="hdu-3440-House Man"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3440">hdu-3440-House Man</a></h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>题意大概是一个人可以在各个屋顶上跳，，但是必须要跳比现在的高的屋顶，，他可以不改变初始顺序的情况下移动房子来改变他们的距离，，它最大的跳跃距离是d，，然后问你能不能从最矮的房子跳到最高的房子，，如果能，求出最大的这两个房子间的距离</p>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>首先是建图，，我们用 $dis[i]$ 表示第1栋房子到第i栋房子之间的最大距离，，然后跑源点是最矮那栋房子的最短路就行了</p>
<p>对于每栋房子，，我们连一条矮房子i到较高房子j的边表示 $dis[j]-dis[i] \leq d$，，注意这里为了保证次序不变，，如果i的编号大于了j，，说明i栋房子在j的右边，，这样 $dis[i] \geq dis[j]$，，上面那个式子就是负的，，不成立（也就是无解），，所以要判断一下，，，</p>
<p>还有一个隐藏条件： 相邻两栋房子之间的距离一定是 $dis[i+1] &gt; dis[i]$，，也就是： $dis[i] - dis[i+1] \leq -1$，，所以建边(i+1)-&gt;i权值为-1</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><p>没尝试过栈实现的spfa，，据说快一些，，大概是队列时间的三分之一左右，，</p>
<h4 id="普通的队列实现"><a href="#普通的队列实现" class="headerlink" title="普通的队列实现"></a>普通的队列实现</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//hdu</span><br><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, next, w;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> head[maxn], tot;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v; edge[tot].w = w; edge[tot].next = head[u]; head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> dis[maxn], cnt[maxn];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)vis[i] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)cnt[i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dis[i] = inf;<br>    vis[s] = <span class="hljs-literal">true</span>;<br>    cnt[s] = <span class="hljs-number">1</span>;<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    q.push(s);<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front();q.pop();<br>        vis[u] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">int</span> w = edge[i].w;<br>            <span class="hljs-keyword">if</span>(dis[v] &gt; dis[u] + w)<br>            &#123;<br>                dis[v] = dis[u] + w;<br>                <span class="hljs-keyword">if</span>(!vis[v])<br>                &#123;<br>                    vis[v] = <span class="hljs-literal">true</span>;<br>                    q.push(v);<br>                    <span class="hljs-keyword">if</span>(++cnt[v] &gt; n)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> h, id;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;r)<span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> h &lt; r.h;<br>    &#125;<br>&#125;node[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> ca = <span class="hljs-number">1</span>; ca &lt;= t; ++ca)<br>    &#123;<br>        <span class="hljs-keyword">int</span> n, d;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;d);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            node[i].id = i;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;node[i].h);<br>        &#125;<br>        sort(node + <span class="hljs-number">1</span>, node + <span class="hljs-number">1</span> + n);<br>        init();<br><br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span> &amp;&amp; flag; ++i)<br>        &#123;<br>            addedge(i + <span class="hljs-number">1</span>, i, <span class="hljs-number">-1</span>);<br>            <span class="hljs-keyword">int</span> u = min(node[i].id, node[i + <span class="hljs-number">1</span>].id);<br>            <span class="hljs-keyword">int</span> v = max(node[i].id, node[i + <span class="hljs-number">1</span>].id);<br>            <span class="hljs-keyword">if</span>(u &gt; v)flag = <span class="hljs-literal">false</span>;<br>            addedge(u, v, d);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d: &quot;</span>, ca);<br>        <span class="hljs-keyword">int</span> s = min(node[<span class="hljs-number">1</span>].id, node[n].id);<br>        <span class="hljs-keyword">int</span> t = max(node[<span class="hljs-number">1</span>].id, node[n].id);<br>        <span class="hljs-keyword">if</span>(!flag || !spfa(s, n))<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<br>        <span class="hljs-keyword">else</span>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dis[t]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="队列实现"><a href="#队列实现" class="headerlink" title="队列实现"></a>队列实现</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//hdu</span><br><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, next, w;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> head[maxn], tot;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v; edge[tot].w = w; edge[tot].next = head[u]; head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> dis[maxn], cnt[maxn];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)vis[i] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)cnt[i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dis[i] = inf;<br>    vis[s] = <span class="hljs-literal">true</span>;<br>    cnt[s] = <span class="hljs-number">1</span>;<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    q.push(s);<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front();q.pop();<br>        vis[u] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">int</span> w = edge[i].w;<br>            <span class="hljs-keyword">if</span>(dis[v] &gt; dis[u] + w)<br>            &#123;<br>                dis[v] = dis[u] + w;<br>                <span class="hljs-keyword">if</span>(!vis[v])<br>                &#123;<br>                    vis[v] = <span class="hljs-literal">true</span>;<br>                    q.push(v);<br>                    <span class="hljs-keyword">if</span>(++cnt[v] &gt; n)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> h, id;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;r)<span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> h &lt; r.h;<br>    &#125;<br>&#125;node[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> ca = <span class="hljs-number">1</span>; ca &lt;= t; ++ca)<br>    &#123;<br>        <span class="hljs-keyword">int</span> n, d;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;d);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            node[i].id = i;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;node[i].h);<br>        &#125;<br>        sort(node + <span class="hljs-number">1</span>, node + <span class="hljs-number">1</span> + n);<br>        init();<br><br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span> &amp;&amp; flag; ++i)<br>        &#123;<br>            addedge(i + <span class="hljs-number">1</span>, i, <span class="hljs-number">-1</span>);<br>            <span class="hljs-keyword">int</span> u = min(node[i].id, node[i + <span class="hljs-number">1</span>].id);<br>            <span class="hljs-keyword">int</span> v = max(node[i].id, node[i + <span class="hljs-number">1</span>].id);<br>            <span class="hljs-keyword">if</span>(u &gt; v)flag = <span class="hljs-literal">false</span>;<br>            addedge(u, v, d);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d: &quot;</span>, ca);<br>        <span class="hljs-keyword">int</span> s = min(node[<span class="hljs-number">1</span>].id, node[n].id);<br>        <span class="hljs-keyword">int</span> t = max(node[<span class="hljs-number">1</span>].id, node[n].id);<br>        <span class="hljs-keyword">if</span>(!flag || !spfa(s, n))<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<br>        <span class="hljs-keyword">else</span>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dis[t]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="poj-3169-Layout"><a href="#poj-3169-Layout" class="headerlink" title="poj-3169-Layout"></a><a href="http://poj.org/problem?id=3169">poj-3169-Layout</a></h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>一排牛，，有一些牛之间的距离不能超出d，有一些牛的距离不能小于d，，问你第一头和最后一头牛直接的距离的最大值是多少</p>
<h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>简单的差分约束，，直接建图就行了，，，(貌似不加相邻两头之间距离大于1这个条件也能过)</p>
<p>图有环为-1，，距离是inf为-2，其他的就是dis[n]，，</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//hdu</span><br><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, next, w;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> head[maxn], tot;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v; edge[tot].w = w; edge[tot].next = head[u]; head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> dis[maxn], cnt[maxn], sta[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)vis[i] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)dis[i] = inf;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)cnt[i] = <span class="hljs-number">0</span>;<br>    vis[s] = <span class="hljs-literal">true</span>;<br>    cnt[s] = <span class="hljs-number">1</span>;<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> top = <span class="hljs-number">-1</span>;<br>    sta[++top] = s;<br>    <span class="hljs-keyword">while</span>(~top)<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = sta[top--];<br>        vis[u] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">int</span> w = edge[i].w;<br>            <span class="hljs-keyword">if</span>(dis[v] &gt; dis[u] + w)<br>            &#123;<br>                dis[v] = dis[u] + w;<br>                <span class="hljs-keyword">if</span>(!vis[v])<br>                &#123;<br>                    vis[v] = <span class="hljs-literal">true</span>;<br>                    sta[++top] = v;<br>                    <span class="hljs-keyword">if</span>(++cnt[v] &gt; n)<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(dis[n] == inf)<span class="hljs-keyword">return</span> <span class="hljs-number">-2</span>;<br>    <span class="hljs-keyword">return</span> dis[n];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n, ml, md;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;ml, &amp;md);<br>    <span class="hljs-keyword">int</span> u, v, w;<br>    init();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= ml; ++i)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);<br>        <span class="hljs-keyword">if</span>(u &gt; v)swap(u, v);<br>        addedge(u, v, w);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= md; ++i)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);<br>        <span class="hljs-keyword">if</span>(u &lt; v)swap(u, v);<br>        addedge(u, v, -w);<br>    &#125;<br><span class="hljs-comment">//    for(int i = 1; i &lt;= n; ++i)</span><br><span class="hljs-comment">//        addedge(i + 1, i, 0);</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, spfa(<span class="hljs-number">1</span>, n));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="poj-1364-King"><a href="#poj-1364-King" class="headerlink" title="poj-1364-King"></a><a href="http://poj.org/problem?id=1364">poj-1364-King</a></h2><h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><p>题意是一个序列的一些子序列的和与k的大小关系给你，然后问你原序列的与一个数k的大小关系是否能确定出来，，</p>
<h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>还是前缀和的思想，$dis[i]$ 表示第一个数到第i个数的和，，那么子序列[i,j]的和就表示为 $dis[j]-dis[i]$，，题目又给了一些子序列和与一个数的大小关系，也就是： $dis[j] - dis[i] &lt; or &gt; K_i$，，用这个条件建图，，因为最后的图可能不连通，所以再加一个源点到所有点为0的边，，</p>
<p>注意，题目给的是每个子序列的起点和它的长度，，大小关系没有等于的情况，，加一减一就行了，，</p>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//hdu</span><br><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, w, next;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> head[maxn], tot;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v; edge[tot].w = w; edge[tot].next = head[u]; head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> dis[maxn], cnt[maxn], sta[maxn];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)vis[i] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dis[i] = inf;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)cnt[i] = <span class="hljs-number">0</span>;<br>    vis[s] = <span class="hljs-literal">true</span>;<br>    cnt[s] = <span class="hljs-number">1</span>;<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> top = <span class="hljs-number">-1</span>;<br>    sta[++top] = s;<br>    <span class="hljs-keyword">while</span>(~top)<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = sta[top--];<br>        vis[u] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">int</span> w = edge[i].w;<br>            <span class="hljs-keyword">if</span>(dis[v] &gt; dis[u] + w)<br>            &#123;<br>                dis[v] = dis[u] + w;<br>                <span class="hljs-keyword">if</span>(!vis[v])<br>                &#123;<br>                    vis[v] = <span class="hljs-literal">true</span>;<br>                    sta[++top] = v;<br>                    <span class="hljs-keyword">if</span>(++cnt[v] &gt; n)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>        <span class="hljs-keyword">int</span> u, v, d;<br>        <span class="hljs-keyword">char</span> s[<span class="hljs-number">2</span>];<br>        init();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %s %d&quot;</span>, &amp;u, &amp;v, s, &amp;d);<br>            <span class="hljs-keyword">if</span>(s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;g&#x27;</span>)<br>                addedge(u + v, u - <span class="hljs-number">1</span>, -d - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">else</span><br>                addedge(u - <span class="hljs-number">1</span>, u + v, d - <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)<br>            addedge(n + <span class="hljs-number">1</span>, i, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(spfa(n + <span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>))<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;lamentable kingdom\n&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;successful conspiracy\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="poj-2983-Is-the-Information-Reliable"><a href="#poj-2983-Is-the-Information-Reliable" class="headerlink" title="poj-2983-Is the Information Reliable?"></a><a href="http://poj.org/problem?id=2983">poj-2983-Is the Information Reliable?</a></h2><h3 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h3><p>n个站点排成一排，，给出一些描述信息</p>
<p>两个站点之间如果是P，，说明距离是确定的x</p>
<p>如果是V，，距离至少是1</p>
<p>问是否存在这样一个序列满足上面的条件</p>
<p>dis[i]表示第i站所在的位置距离第一个的距离，，这样两站的描述信息就能化成很多的不等式来表示，，建图判断是否存在环就行了，，注意原图可能不连通，所以加一个源点就行了，，，</p>
<p>按道理说栈实现spfa应该比队列实现的快一些，，但是这道题用栈实现t了（不止我一个人），，emmm迷一遍的操作，，队列可过，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//hdu</span><br><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, next, w;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> head[maxn], tot;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v; edge[tot].w = w; edge[tot].next = head[u]; head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> dis[maxn], cnt[maxn], sta[maxn];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)vis[i] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)cnt[i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dis[i] = -inf;<br>    vis[s] = <span class="hljs-literal">true</span>;<br>    cnt[s] = <span class="hljs-number">1</span>;<br>    dis[s] = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//    int top = -1;</span><br><span class="hljs-comment">//    sta[++top] = s;</span><br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    q.push(s);<br>    <span class="hljs-comment">//while(~top)</span><br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br><span class="hljs-comment">//        int u = sta[top--];</span><br>        <span class="hljs-keyword">int</span> u = q.front(); q.pop();<br>        vis[u] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">int</span> w = edge[i].w;<br>            <span class="hljs-keyword">if</span>(dis[v] &lt; dis[u] + w)<br>            &#123;<br>                dis[v] = dis[u] + w;<br>                <span class="hljs-keyword">if</span>(!vis[v])<br>                &#123;<br>                    vis[v] = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-comment">//sta[++top] = v;</span><br>                    q.push(v);<br>                    <span class="hljs-keyword">if</span>(++cnt[v] &gt; n)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m))<br>    &#123;<br>        init();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        &#123;<br>            <span class="hljs-keyword">int</span> u, v, w;<br>            <span class="hljs-keyword">char</span> pv;<br>            w = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot; %c %d %d&quot;</span>, &amp;pv, &amp;u, &amp;v);<br>            <span class="hljs-keyword">if</span>(pv == <span class="hljs-string">&#x27;P&#x27;</span>)<br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;w);<br>                addedge(v, u, -w);<br>            &#125;<br>            addedge(u, v, w);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            addedge(<span class="hljs-number">0</span>, i, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(spfa(<span class="hljs-number">0</span>, n))<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Reliable\n&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Unreliable\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="codeofeces-1131d-D-Gourmet-choice"><a href="#codeofeces-1131d-D-Gourmet-choice" class="headerlink" title="codeofeces-1131d-D. Gourmet choice"></a><a href="https://codeforces.com/problemset/problem/1131/D">codeofeces-1131d-D. Gourmet choice</a></h2><p>做这些差分约束的题的主要的原因就是这道cf的题，，当时比赛的时候就有人说是差分约束的题，，但是因为我只是了解这块内容，，但是实际的题目完全没有写过，，所以看到题也没有什么思路，，就放弃了，，</p>
<p>现在再看这道题，，感觉十分的简单，，，</p>
<h3 id="题意-6"><a href="#题意-6" class="headerlink" title="题意"></a>题意</h3><p>大概的意思就是有n+m个点，，他们直接的大小关系已知（具体大或小多少没有说），，，然后问你能不能给每一个点赋一个值使得满足所给的关系，，</p>
<h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>一种解法是用并查集缩点后跑一边拓扑排序，，最后求得的最长链就是答案，，，</p>
<p>用差分约束解的话就是用所给的关系直接建图就行了，，对于i-&gt;j大于就正的建一条边，小于就反着建一条边，，等于就建两条就行了，，，</p>
<p>因为图可能是不连通的，，所以再弄个源点，连到每个点就行了，，，</p>
<p>因为最后要的是每一的节点一个数，，而且尽可能小，，所以就找出dis数组里距离源点最小的那个数，，然后每一个点减去这个最小的数就是最后要赋的值了，，，</p>
<p>对了这题用链式前向星来建图会T，，，换邻接表就好了，，，（不是说链式前向星的效率更高吗，，，emmmm，，迷，，，就像那道用栈的spfaT掉用队列就过了一样迷，，，</p>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//cf</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-comment">//#include &lt;cstdio&gt;</span><br><span class="hljs-comment">//#include &lt;cstdlib&gt;</span><br><span class="hljs-comment">//#include &lt;string.h&gt;</span><br><span class="hljs-comment">//#include &lt;algorithm&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v, w;<br>    edge(<span class="hljs-keyword">int</span> _v, <span class="hljs-keyword">int</span> _w):v(_v), w(_w)&#123;&#125;<br>&#125;;<br><span class="hljs-built_in">vector</span>&lt;edge&gt; e[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[u].push_back(edge(v, w));<br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> cnt[maxn], dis[maxn], sta[maxn];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)vis[i] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)cnt[i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dis[i] = inf;<br>    vis[s] = <span class="hljs-literal">true</span>;<br>    cnt[s] = <span class="hljs-number">1</span>;<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> top = <span class="hljs-number">-1</span>;<br>    sta[++top] = s;<br>    <span class="hljs-keyword">while</span>(~top)<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = sta[top--];<br>        vis[u] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; e[u].size(); ++i)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = e[u][i].v;<br>            <span class="hljs-keyword">int</span> w = e[u][i].w;<br>            <span class="hljs-keyword">if</span>(dis[v] &gt; dis[u] + w)<br>            &#123;<br>                dis[v] = dis[u] + w;<br>                <span class="hljs-keyword">if</span>(!vis[v])<br>                &#123;<br>                    vis[v] = <span class="hljs-literal">true</span>;<br>                    sta[++top] = v;<br>                    <span class="hljs-keyword">if</span>(++cnt[v] &gt; n)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">char</span> s[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n, m; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s[i] + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s[i][j] == <span class="hljs-string">&#x27;&gt;&#x27;</span>)<br>                addedge(i, j + n, <span class="hljs-number">-1</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i][j] == <span class="hljs-string">&#x27;&lt;&#x27;</span>)<br>                addedge(j + n, i, <span class="hljs-number">-1</span>);<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                addedge(i, j + n, <span class="hljs-number">0</span>);<br>                addedge(j + n, i, <span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + m; ++i)<br>        addedge(<span class="hljs-number">0</span>, i, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(spfa(<span class="hljs-number">0</span>, n + m))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>        <span class="hljs-keyword">int</span> k = *min_element(dis + <span class="hljs-number">1</span>, dis + <span class="hljs-number">1</span> + n + m);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, dis[i] - k + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span> + n; i &lt;= n + m; ++i)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, dis[i] - k + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>估计这一段时间里是不会在做差分约束的题了，，，不过正好复习一遍最短路的写法，，，</p>
<p>这貌似是写的最长的一篇博客了，，，30多K，，，，，233</p>
<p>(end)</p>
]]></content>
      <categories>
        <category>ACM-差分约束</category>
      </categories>
      <tags>
        <tag>acm</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>网络流</title>
    <url>/2018/07/31/%E7%BD%91%E7%BB%9C%E6%B5%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>这篇博客主要是关于网络流的一些基本的知识点以及相应的模板，，</p>
<p>算了，，，还是先贴大佬的博客，，，暑假在补一下。。。。QAQ</p>
<span id="more"></span>
<h2 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h2><p>tan90，，，，，，，</p>
<h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><h3 id="Problem-A-养猪"><a href="#Problem-A-养猪" class="headerlink" title="Problem A: 养猪"></a>Problem A: 养猪</h3><p>Time Limit: 1 Sec  Memory Limit: 128 MB</p>
<blockquote>
<p>Description</p>
<p>AveryBoy喜欢玩LOL，但是他技术太菜，总是被别人喷“这么菜玩什么游戏，回家养猪去吧”。终于有一天，他被喷的受不了了，于是回家养猪。不过他家的养猪场在下雨天的时候总是被淹，所以他用读书学来的知识设计了一套排水系统。他还设计了一套装置，可以控制排水管道的水流流量。现在有n个排水管道，m个排水节点，问你从1到m的最大排水流量。</p>
<p>Input</p>
<p>有多组测试数据，对于每组测试数据，第一行是两个整数n，m（0 &lt;= n &lt;= 200，2 &lt;= m &lt;= 200），分别表示排水管道数和排水节点数。之后n行每行包含3个整数，u，v，w（1&lt;=u,v&lt;=m，0&lt;=w&lt;=1e7，u!=v），表示从u到v的排水管道的水流流量是w。</p>
<p>Output</p>
<p>对于每种情况输出一个整数，表示从1到m的最大排水流量。<br>Sample Input<br>5 4<br>1 2 40<br>1 4 20<br>2 4 20<br>2 3 30<br>3 4 10</p>
<p>Sample Output<br>50</p>
</blockquote>
<p>模板题，，，直接套就行</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ms(a , b) memset(a , b , sizeof(a))</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-comment">//前向星</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">int</span> n , m;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to;<br>    <span class="hljs-keyword">int</span> next;<br>    <span class="hljs-keyword">int</span> w;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> head[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> cnt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ms(head , <span class="hljs-number">-1</span>);<br>    cnt = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u , <span class="hljs-keyword">int</span> v , <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[cnt].to = v;<br>    edge[cnt].w = w;<br>    edge[cnt].next = head[u];<br>    head[u] = cnt++;<br>    edge[cnt].to = u;                       <span class="hljs-comment">//添加反向边，，流量为零</span><br>    edge[cnt].w = <span class="hljs-number">0</span>;<br>    edge[cnt].next = head[v];<br>    head[v] = cnt++;<br>&#125;<br><span class="hljs-keyword">int</span> step[maxn];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    ms(step , <span class="hljs-number">-1</span>);<br>    step[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    q.push(s);<br>    <span class="hljs-keyword">while</span> (!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front();q.pop();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i != <span class="hljs-number">-1</span>; i = edge[i].next)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (step[edge[i].to] == <span class="hljs-number">-1</span> &amp;&amp; edge[i].w &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                step[edge[i].to] = step[u] + <span class="hljs-number">1</span>;<br>                q.push(edge[i].to);<br>                <span class="hljs-keyword">if</span> (edge[i].to == t) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> step[t] != <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> t , <span class="hljs-keyword">int</span> f)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (s == t || !f)   <span class="hljs-keyword">return</span> f;<br>    <span class="hljs-keyword">int</span> flow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[s]; i != <span class="hljs-number">-1</span>; i = edge[i].next)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (step[s] + <span class="hljs-number">1</span> == step[edge[i].to] &amp;&amp; edge[i].w &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> d = dfs(edge[i].to , t , min(edge[i].w , f));<br>            <span class="hljs-keyword">if</span> (d &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                edge[i].w -= d;<br>                edge[i ^ <span class="hljs-number">1</span>].w += d;<br>                flow += d;                  <span class="hljs-comment">//累加当前节点的某条路径的合适流量</span><br>                f -= d;                     <span class="hljs-comment">//当前节点的容量减去某条路径的合适流量</span><br>                <span class="hljs-keyword">if</span> (f == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;          <span class="hljs-comment">//如果当前节点的容量用完,说明无法再通过任何流量</span><br>            &#125;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">if</span> (flow == <span class="hljs-number">0</span>)  step[s] = inf;      <span class="hljs-comment">//如果当前节点无任何流量通过,取消标记</span><br>    <span class="hljs-keyword">return</span> flow;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Dinic</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> flow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (bfs(s , t))<br>    &#123;<br>        flow += dfs(s , t , inf);<br>    &#125;<br>    <span class="hljs-keyword">return</span> flow;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-keyword">while</span> (~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n , &amp;m))<br>    &#123;<br>        <span class="hljs-keyword">int</span> u , v , w;<br>        init();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-comment">//cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span> , &amp;u , &amp;v , &amp;w);<br>            add(u , v , w);<br>        &#125;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span> , Dinic(<span class="hljs-number">1</span> , m));<br>        <span class="hljs-comment">//cout &lt;&lt; &quot;Case &quot; &lt;&lt; k++ &lt;&lt; &quot;: &quot; &lt;&lt; ans &lt;&lt; endl;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>学长用的邻接表存的，，，</p>
<p>学长的代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// hdu 1532</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PB push_back</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">205</span>;<br><br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> to,cap,idx;<br>    Edge()&#123;&#125;<br>    Edge(<span class="hljs-keyword">int</span> to,<span class="hljs-keyword">int</span> cap,<span class="hljs-keyword">int</span> idx):to(to),cap(cap),idx(idx)&#123;&#125;<br>&#125;;<br><span class="hljs-built_in">vector</span>&lt;Edge&gt; V[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    V[u].PB(Edge(v,w,V[v].size()));<br>    V[v].PB(Edge(u,<span class="hljs-number">0</span>,V[u].size()<span class="hljs-number">-1</span>));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s,<span class="hljs-keyword">int</span> t,<span class="hljs-keyword">int</span> f)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(s==t) <span class="hljs-keyword">return</span> f;<br>    vis[s]=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;V[s].size();i++)<br>    &#123;<br>        Edge &amp;cur = V[s][i];<br>        <span class="hljs-keyword">if</span>(!vis[cur.to] &amp;&amp; cur.cap&gt;<span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> tmp = dfs(cur.to,t,min(f,cur.cap));<br>            <span class="hljs-keyword">if</span>(tmp&gt;<span class="hljs-number">0</span>)<br>            &#123;<br>                cur.cap -= tmp;<br>                V[cur.to][cur.idx].cap += tmp;<br>                <span class="hljs-keyword">return</span> tmp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Ford_Fulkerson</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s,<span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(vis,<span class="hljs-literal">false</span>,<span class="hljs-keyword">sizeof</span>(vis));<br>        <span class="hljs-keyword">int</span> flow = dfs(s,t,INF);<br>        <span class="hljs-keyword">if</span>(flow==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> res;<br>        res += flow;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m))<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++) V[i].clear();<br>        <span class="hljs-keyword">int</span> u,v,w;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;u,&amp;v,&amp;w);<br>            add_edge(u,v,w);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,Ford_Fulkerson(<span class="hljs-number">1</span>,m));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h3 id="Problem-B-最大流"><a href="#Problem-B-最大流" class="headerlink" title="Problem B: 最大流"></a>Problem B: 最大流</h3><p>Time Limit: 1 Sec  Memory Limit: 128 MB</p>
<blockquote>
<p>Description</p>
<p>如题，给你一个容量网络，请你找出最大流。</p>
<p>Input</p>
<p>第一行输入包含一个整数T，表示测试用例的数量。</p>
<p>对于每个测试用例，第一行包含两个整数N和M，表示图中顶点和边的数量。（2 &lt;= N &lt;= 15,0 &lt;= M &lt;= 1000）</p>
<p>接下来的M行，每行包含三个整数X，Y和C，表示从X到Y有一个边，它的容量是C.（1 &lt;= X，Y &lt;= N，1 &lt;= C &lt;= 1000）</p>
<p>Output</p>
<p>对于每个测试用例，您应该输出从源点1到汇点N的最大流量。</p>
<p>Sample Input<br>2<br>3 2<br>1 2 1<br>2 3 1<br>3 3<br>1 2 1<br>2 3 1<br>1 3 1</p>
<p>Sample Output<br>Case 1: 1<br>Case 2: 2</p>
</blockquote>
<p>同样是模板题，，，不过刚开始我套fk的模板一直tle就换了dinic算法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ms(a , b) memset(a , b , sizeof(a))</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-comment">//前向星</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">int</span> n , m;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to;<br>    <span class="hljs-keyword">int</span> next;<br>    <span class="hljs-keyword">int</span> w;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> head[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> cnt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ms(head , <span class="hljs-number">-1</span>);<br>    cnt = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u , <span class="hljs-keyword">int</span> v , <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[cnt].to = v;<br>    edge[cnt].w = w;<br>    edge[cnt].next = head[u];<br>    head[u] = cnt++;<br>    edge[cnt].to = u;                       <span class="hljs-comment">//添加反向边，，流量为零</span><br>    edge[cnt].w = <span class="hljs-number">0</span>;<br>    edge[cnt].next = head[v];<br>    head[v] = cnt++;<br>&#125;<br><span class="hljs-keyword">int</span> step[maxn];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    ms(step , <span class="hljs-number">-1</span>);<br>    step[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    q.push(s);<br>    <span class="hljs-keyword">while</span> (!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front();q.pop();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i != <span class="hljs-number">-1</span>; i = edge[i].next)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (step[edge[i].to] == <span class="hljs-number">-1</span> &amp;&amp; edge[i].w &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                step[edge[i].to] = step[u] + <span class="hljs-number">1</span>;<br>                q.push(edge[i].to);<br>                <span class="hljs-keyword">if</span> (edge[i].to == t) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> step[t] != <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> t , <span class="hljs-keyword">int</span> f)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (s == t || !f)   <span class="hljs-keyword">return</span> f;<br>    <span class="hljs-keyword">int</span> flow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[s]; i != <span class="hljs-number">-1</span>; i = edge[i].next)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (step[s] + <span class="hljs-number">1</span> == step[edge[i].to] &amp;&amp; edge[i].w &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> d = dfs(edge[i].to , t , min(edge[i].w , f));<br>            <span class="hljs-keyword">if</span> (d &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                edge[i].w -= d;<br>                edge[i ^ <span class="hljs-number">1</span>].w += d;<br>                flow += d;                  <span class="hljs-comment">//累加当前节点的某条路径的合适流量</span><br>                f -= d;                     <span class="hljs-comment">//当前节点的容量减去某条路径的合适流量</span><br>                <span class="hljs-keyword">if</span> (f == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;          <span class="hljs-comment">//如果当前节点的容量用完,说明无法再通过任何流量</span><br>            &#125;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">if</span> (flow == <span class="hljs-number">0</span>)  step[s] = inf;      <span class="hljs-comment">//如果当前节点无任何流量通过,取消标记</span><br>    <span class="hljs-keyword">return</span> flow;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Dinic</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> flow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (bfs(s , t))<br>    &#123;<br>        flow += dfs(s , t , inf);<br>    &#125;<br>    <span class="hljs-keyword">return</span> flow;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;t);<br>    <span class="hljs-comment">//cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-comment">//cin &gt;&gt; n &gt;&gt; m;</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n , &amp;m);<br>        <span class="hljs-keyword">int</span> u , v , w;<br>        init();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        &#123;<br>            <span class="hljs-comment">//cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span> , &amp;u , &amp;v , &amp;w);<br>            add(u , v , w);<br>        &#125;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d: %d\n&quot;</span> , k++ , Dinic(<span class="hljs-number">1</span> , n));<br>        <span class="hljs-comment">//cout &lt;&lt; &quot;Case &quot; &lt;&lt; k++ &lt;&lt; &quot;: &quot; &lt;&lt; ans &lt;&lt; endl;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>学长的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// hdu 3549</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PB push_back</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">20</span>;<br><br><span class="hljs-keyword">int</span> c[maxn][maxn],f[maxn][maxn],p[maxn],a[maxn];<br><span class="hljs-keyword">int</span> m,n;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    <span class="hljs-built_in">memset</span>(p,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(p));<br>    <span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(a));<br>    a[<span class="hljs-number">1</span>] = INF;<br>    q.push(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front();q.pop();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!a[i] &amp;&amp; c[u][i]&gt;f[u][i])<br>            &#123;<br>                p[i] = u;<br>                q.push(i);<br>                a[i] = min(a[u],c[u][i]-f[u][i]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(a[n]) <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!a[n]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> u=n;u!=<span class="hljs-number">1</span>;u=p[u])<br>    &#123;<br>        f[p[u]][u] += a[n];<br>        f[u][p[u]] -= a[n];<br>    &#125;<br>    <span class="hljs-keyword">return</span> a[n];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Edmonds_Karp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-keyword">int</span> tmp = bfs();<br>        <span class="hljs-keyword">if</span>(tmp==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> res;<br>        res += tmp;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;t);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> ca=<span class="hljs-number">1</span>;ca&lt;=t;ca++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>        <span class="hljs-built_in">memset</span>(c,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(c));<br>        <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(f));<br>        <span class="hljs-keyword">int</span> u,v,w;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;u,&amp;v,&amp;w);<br>            c[u][v] += w;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> max_flow=Edmonds_Karp();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d: %d\n&quot;</span>,ca,max_flow);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h3 id="Problem-C-房子和车"><a href="#Problem-C-房子和车" class="headerlink" title="Problem C: 房子和车"></a>Problem C: 房子和车</h3><p>Time Limit: 1 Sec  Memory Limit: 128 MB</p>
<blockquote>
<p>Description</p>
<p>华中农业大学总共有n个老师，f种房子和d种车（1 &lt;= n，f，d &lt;= 200）。每个老师都有自己喜欢的一些房子和车的类型，现在要你把这些房子和车分配给这n个老师，每个老师只分配一套房子和一辆车。问你最多能使多少个老师满意对应的分配。</p>
<p>Input</p>
<p>有多组测试数据，每组测试数据第一行是3个正整数，n，f，d，表示老师个数，房子种数，车子种数。</p>
<p>第二行包含f个整数，其中第i个数表示第i种房子的个数。</p>
<p>第三行包含d个整数，其中第i个数表示第i种车子的个数。</p>
<p>之后n行，每行包含长度为f的字符串，其中第i行第j个字符表示第i个老师是否喜欢第j种房子，‘Y’表示喜欢，‘N’表示不喜欢。</p>
<p>之后n行，每行包含长度为d的字符串，其中第i行第j个字符表示第i个老师是否喜欢第j种车子，‘Y’表示喜欢，‘N’表示不喜欢。</p>
<p>Output</p>
<p>对于每组测试数据，输出一个整数，表示最大的老师满意的个数。</p>
<p>Sample Input<br>4 3 3<br>1 1 1<br>1 1 1<br>YYN<br>NYY<br>YNY<br>YNY<br>YNY<br>YYN<br>YYN<br>NNY<br>Sample Output<br>3</p>
</blockquote>
<p>这道题主要是将题目所给的信息用图描述出来，，，老师的处理是一分为二即可，，，</p>
<p>我的代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ms(a , b) memset(a , b , sizeof(a))</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-comment">//前向星</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">int</span> n , f , d;<br><span class="hljs-keyword">int</span> home[maxm];<br><span class="hljs-keyword">int</span> car[maxm];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to;<br>    <span class="hljs-keyword">int</span> next;<br>    <span class="hljs-keyword">int</span> w;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> head[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> cnt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ms(head , <span class="hljs-number">-1</span>);<br>    cnt = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u , <span class="hljs-keyword">int</span> v , <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[cnt].to = v;<br>    edge[cnt].w = w;<br>    edge[cnt].next = head[u];<br>    head[u] = cnt++;<br>    edge[cnt].to = u;                       <span class="hljs-comment">//添加反向边，，流量为零</span><br>    edge[cnt].w = <span class="hljs-number">0</span>;<br>    edge[cnt].next = head[v];<br>    head[v] = cnt++;<br>&#125;<br><span class="hljs-keyword">int</span> step[maxn];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    ms(step , <span class="hljs-number">-1</span>);<br>    step[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    q.push(s);<br>    <span class="hljs-keyword">while</span> (!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front();q.pop();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i != <span class="hljs-number">-1</span>; i = edge[i].next)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (step[edge[i].to] == <span class="hljs-number">-1</span> &amp;&amp; edge[i].w &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                step[edge[i].to] = step[u] + <span class="hljs-number">1</span>;<br>                q.push(edge[i].to);<br>                <span class="hljs-keyword">if</span> (edge[i].to == t) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> step[t] != <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> t , <span class="hljs-keyword">int</span> f)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (s == t || !f)   <span class="hljs-keyword">return</span> f;<br>    <span class="hljs-keyword">int</span> flow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[s]; i != <span class="hljs-number">-1</span>; i = edge[i].next)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (step[s] + <span class="hljs-number">1</span> == step[edge[i].to] &amp;&amp; edge[i].w &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> d = dfs(edge[i].to , t , min(edge[i].w , f));<br>            <span class="hljs-keyword">if</span> (d &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                edge[i].w -= d;<br>                edge[i ^ <span class="hljs-number">1</span>].w += d;<br>                flow += d;                  <span class="hljs-comment">//累加当前节点的某条路径的合适流量</span><br>                f -= d;                     <span class="hljs-comment">//当前节点的容量减去某条路径的合适流量</span><br>                <span class="hljs-keyword">if</span> (f == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;          <span class="hljs-comment">//如果当前节点的容量用完,说明无法再通过任何流量</span><br>            &#125;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">if</span> (flow == <span class="hljs-number">0</span>)  step[s] = inf;      <span class="hljs-comment">//如果当前节点无任何流量通过,取消标记</span><br>    <span class="hljs-keyword">return</span> flow;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Dinic</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> flow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (bfs(s , t))<br>    &#123;<br>        flow += dfs(s , t , inf);<br>    &#125;<br>    <span class="hljs-keyword">return</span> flow;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-keyword">while</span> (~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n , &amp;f , &amp;d))<br>    &#123;<br>        init();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= f; i++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;home[i]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= d; i++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;car[i]);<br><br>        <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>;                                  <span class="hljs-comment">//超级原点</span><br>        <span class="hljs-keyword">int</span> t = f + n + n + d + <span class="hljs-number">1</span>;                  <span class="hljs-comment">//汇点</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= f; i++)<br>            add(<span class="hljs-number">0</span> , i , home[i]);                   <span class="hljs-comment">//原点到每个房子的点建边</span><br>        <span class="hljs-keyword">char</span> str[maxm];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span> , str);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= f; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (str[j - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;Y&#x27;</span>)<br>                    add(j , i + f, <span class="hljs-number">1</span>);              <span class="hljs-comment">//老师满意的和对应的房子连接，，，流量为1</span><br>            &#125;<br>            add(i + f , f + n + i , <span class="hljs-number">1</span>);             <span class="hljs-comment">//分离出两个老师的点，，，同一个老师之间流量为1</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span> , str);<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= d; j++)<br>                <span class="hljs-keyword">if</span> (str[j - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;Y&#x27;</span>)<br>                add(f + n + i , f + n + n + j , <span class="hljs-number">1</span>);<span class="hljs-comment">//第二个老师的点和车子建边，，，流量为1</span><br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= d; i++)<br>            add(f + n + n + i , t , car[i]);        <span class="hljs-comment">//汇点和车子之间建边，</span><br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span> , Dinic(s , t));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>         add(f + n + n + i , t , <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">//----------</span><br><span class="hljs-comment">//这个在处理点之间的关系和我的不同，，，一个是老师分开另一个是分开的老师相邻就是下面这个</span><br>        <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> t = f + n + n + d + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= f; i++)<br>            add(<span class="hljs-number">0</span> , i , home[i]);<br> <br>        <span class="hljs-keyword">char</span> str[maxm];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span> , str);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= f; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (str[j - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;Y&#x27;</span>)<br>                    add(j , f + <span class="hljs-number">2</span> * i - <span class="hljs-number">1</span> , <span class="hljs-number">1</span>);<br>            &#125;<br>            add(f + <span class="hljs-number">2</span> * i - <span class="hljs-number">1</span> , f + <span class="hljs-number">2</span> * i , <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span> , str);<br> <br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= d; j++)<br>                <span class="hljs-keyword">if</span> (str[j - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;Y&#x27;</span>)<br>                add(f + <span class="hljs-number">2</span> * i , f + n + n + j , <span class="hljs-number">1</span>);<br>        &#125;<br> <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= d; i++)<br>            add(f + n + n + i , t , car[i]);<br> <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span> , Dinic(s , t));<br></code></pre></td></tr></table></figure>
<p>学长的代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// hdu 4292</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a,b) memset(a,b,sizeof(a))</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1000</span>+<span class="hljs-number">50</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M=<span class="hljs-number">1e6</span>+<span class="hljs-number">50</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    node() &#123;&#125;;<br>    node(<span class="hljs-keyword">int</span> tv,<span class="hljs-keyword">int</span> tw,<span class="hljs-keyword">int</span> tnext)<br>    &#123;<br>        v=tv,w=tw,next=tnext;<br>    &#125;;<br>    <span class="hljs-keyword">int</span> v,w,next;<br>&#125; e[M];<br><span class="hljs-keyword">int</span> first[N],vis[N],dis[N],tot;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[tot]=node(v,w,first[u]);<br>    first[u]=tot++;<br>    e[tot]=node(u,<span class="hljs-number">0</span>,first[v]);<br>    first[v]=tot++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s,<span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    mem(vis,<span class="hljs-number">0</span>);<br>    mem(dis,<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt;q;<br>    q.push(s);<br>    vis[s]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u=q.front();<br>        q.pop();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=first[u]; ~i; i=e[i].next)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!vis[e[i].v]&amp;&amp;e[i].w&gt;<span class="hljs-number">0</span>)<br>            &#123;<br>                vis[e[i].v]=<span class="hljs-number">1</span>;<br>                dis[e[i].v]=dis[u]+<span class="hljs-number">1</span>;<br>                q.push(e[i].v);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dis[t];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> t,<span class="hljs-keyword">int</span> flow)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(u==t)<span class="hljs-keyword">return</span> flow;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=first[u]; ~i; i=e[i].next)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(dis[e[i].v]==dis[u]+<span class="hljs-number">1</span>&amp;&amp;e[i].w&gt;<span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> dd=dfs(e[i].v,t,min(e[i].w,flow));<br>            <span class="hljs-keyword">if</span>(dd)<br>            &#123;<br>                e[i].w-=dd;<br>                e[i^<span class="hljs-number">1</span>].w+=dd;<br>                <span class="hljs-keyword">return</span> dd;<br>            &#125;<br>        &#125;<br>    &#125;<br>    dis[u]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Dinic</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s,<span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>,flow;<br>    <span class="hljs-keyword">while</span>(bfs(s,t))<br>    &#123;<br>        <span class="hljs-keyword">while</span>(flow=dfs(s,t,INF))<br>            ans+=flow;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    mem(first,<span class="hljs-number">-1</span>);<br>    tot=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">int</span> a[N],b[N];<br><span class="hljs-keyword">char</span> s[N];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n,f,d;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;f,&amp;d))<br>    &#123;<br>        init();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=f; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=d; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;b[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br>        &#123;<br>            add_edge(f+<span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>,f+<span class="hljs-number">2</span>*i,<span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,s+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>; j&lt;=f; j++)<br>                <span class="hljs-keyword">if</span>(s[j]==<span class="hljs-string">&#x27;Y&#x27;</span>)<br>                    add_edge(j,f+<span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,s+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>; j&lt;=d; j++)<br>                <span class="hljs-keyword">if</span>(s[j]==<span class="hljs-string">&#x27;Y&#x27;</span>)<br>                    add_edge(f+<span class="hljs-number">2</span>*i,f+<span class="hljs-number">2</span>*n+j,<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=f; i++) add_edge(<span class="hljs-number">0</span>,i,a[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=d; i++) add_edge(<span class="hljs-number">2</span>*n+f+i,<span class="hljs-number">2</span>*n+f+d+<span class="hljs-number">1</span>,b[i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,Dinic(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*n+f+d+<span class="hljs-number">1</span>));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h3 id="Problem-D-回家"><a href="#Problem-D-回家" class="headerlink" title="Problem D: 回家"></a>Problem D: 回家</h3><p>Time Limit: 5 Sec  Memory Limit: 128 MB</p>
<blockquote>
<p>Description</p>
<p>在网格地图上有n个人和n个房子。在每个单位时间内，每个人都可以水平或垂直移动到相邻点。对于每个人，你需要为他移动的每一步支付1美元的旅行费，直到他进入房子。每个房子只能容纳一个人。现在问你所有人都回到房子所需要的最少费用是多少？输入是一个网格图，‘.’表示空地，‘H’表示房子，‘m’表示人。</p>
<p>Input</p>
<p>有多组测试数据，对于每组测试数据第一行是两个正整数n，m表示地图的行和列（2&lt;=n，m&lt;=100）。地图上有相同数量的房子和人，房子最多不超过100。输入以n=0，m=0结束。</p>
<p>Output</p>
<p>对于每组测试数据输出一个整数，表示所有人都回到房子所需的最小费用。</p>
<p>Sample Input<br>2 2<br>.m<br>H.<br>5 5<br>HH..m<br>…..<br>…..<br>…..<br>mm..H<br>7 8<br>…H….<br>…H….<br>…H….<br>mmmHmmmm<br>…H….<br>…H….<br>…H….<br>0 0</p>
<p>Sample Output<br>2<br>10<br>28</p>
</blockquote>
<p>这道题自己做的时候被网上的模板坑了一手，，，一直tle，，，换模板就行了，，，<br>主要思路是，先将人房找到，，，计算出每一个人和所有房子直接的距离，，这个距离也叫曼哈顿距离，，，然后人房直接建边，，再弄一个超级原点和汇点求原点和会顶啊直接的最小费用的最大流就可以了，，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ms(a , b) memset(a , b , sizeof(a))</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-comment">//前向星</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">int</span> n , m;<br><span class="hljs-keyword">char</span> mp[maxm][maxm];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Man</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> x , y;<br>&#125;man[maxn];<br><span class="hljs-keyword">int</span> cnt_man;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Home</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> x , y;<br>&#125;home[maxn];<br><span class="hljs-keyword">int</span> cnt_home;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v;<br>    <span class="hljs-keyword">int</span> u;<br>    <span class="hljs-keyword">int</span> next;<br>    <span class="hljs-keyword">int</span> cap;<br>    <span class="hljs-keyword">int</span> cost;<br>    Edge()&#123;&#125;<br>    Edge(<span class="hljs-keyword">int</span> u , <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> cap , <span class="hljs-keyword">int</span> cost , <span class="hljs-keyword">int</span> next):u(u) , v(v) , cap(cap) , cost(cost) , next(next)&#123;&#125;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">7</span>];<br><span class="hljs-keyword">int</span> head[maxn];<br><span class="hljs-keyword">int</span> cnt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ms(head , <span class="hljs-number">-1</span>);<br>    cnt = <span class="hljs-number">0</span>;<br>    cnt_home = <span class="hljs-number">1</span>;<br>    cnt_man = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> from , <span class="hljs-keyword">int</span> to , <span class="hljs-keyword">int</span> cap , <span class="hljs-keyword">int</span> cost)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[cnt] = Edge(from , to , cap , cost , head[from]);<br>    head[from] = cnt++;<br>    edge[cnt] = Edge(to , from , <span class="hljs-number">0</span> , -cost , head[to]);<br>    head[to] = cnt++;<br>&#125;<br><span class="hljs-keyword">int</span> dis[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> pe[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">bool</span> vis[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    ms(dis , inf);<br>    ms(vis , <span class="hljs-literal">false</span>);<br>    ms(pe , <span class="hljs-number">-1</span>);<br>    dis[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    vis[s] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    q.push(s);<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front();q.pop();<br>        vis[u] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i != <span class="hljs-number">-1</span>; i = edge[i].next)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].v;<br>            <span class="hljs-keyword">int</span> cost = edge[i].cost;<br>            <span class="hljs-keyword">if</span> (edge[i].cap &gt; <span class="hljs-number">0</span> &amp;&amp; dis[v] &gt; dis[u] + cost)<br>            &#123;<br>                dis[v] = dis[u] + cost;<br>                pe[v] = i;<br>                <span class="hljs-keyword">if</span> (!vis[v])<br>                &#123;<br>                    vis[v] = <span class="hljs-literal">true</span>;<br>                    q.push(v);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (dis[t] == inf)  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">min_cost_flow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> t , <span class="hljs-keyword">int</span> f)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (spfa(s , t))<br>    &#123;<br>        <span class="hljs-keyword">int</span> flow = inf;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = pe[t]; i != <span class="hljs-number">-1</span>; i = pe[edge[i].u])<br>        &#123;<br>            flow = min(flow , edge[i].cap);<br>        &#125;<br>        f -= flow;<br>        <span class="hljs-keyword">if</span> (f &lt; <span class="hljs-number">0</span>)  <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = pe[t]; i != <span class="hljs-number">-1</span>; i = pe[edge[i].u])<br>        &#123;<br>            edge[i].cap -= flow;<br>            edge[i ^ <span class="hljs-number">1</span>].cap += flow;<br>        &#125;<br>        res += flow * dis[t];<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-keyword">while</span> (~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n , &amp;m) &amp;&amp; n &amp;&amp; m)<br>    &#123;<br>        init();<br>        <span class="hljs-keyword">char</span> str[maxm];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)        <span class="hljs-comment">//存图</span><br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span> , str);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>                mp[i][j] = str[j - <span class="hljs-number">1</span>];<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)        <span class="hljs-comment">//人房分离，，记录坐标</span><br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;H&#x27;</span>)<br>                &#123;<br>                    home[cnt_home].x = i;<br>                    home[cnt_home++].y = j;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;m&#x27;</span>)<br>                &#123;<br>                    man[cnt_man].x = i;<br>                    man[cnt_man++].y = j;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt_man - <span class="hljs-number">1</span>; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= cnt_home - <span class="hljs-number">1</span>; j++)<br>            &#123;                               <span class="hljs-comment">//算出每一个人对于所有房子的距离，，（曼哈顿距离），，，</span><br>                <span class="hljs-keyword">int</span> w = (<span class="hljs-keyword">int</span>)<span class="hljs-built_in">fabs</span>(man[i].x - home[j].x) + (<span class="hljs-keyword">int</span>)<span class="hljs-built_in">fabs</span>(man[i].y - home[j].y);<br>                add(i , j + cnt_man - <span class="hljs-number">1</span> , <span class="hljs-number">1</span> , w);       <span class="hljs-comment">//人房之间连边，，，流量为刚刚的值</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> t = cnt_home;                   <span class="hljs-comment">//汇点</span><br>        t *= <span class="hljs-number">2</span>;<br>        t--;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt_man - <span class="hljs-number">1</span>; i++)  <span class="hljs-comment">//超级原点和每个人建边，，流量为0</span><br>            add(<span class="hljs-number">0</span> , i , <span class="hljs-number">1</span> , <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = cnt_man; i &lt;= t - <span class="hljs-number">1</span>; i++)  <span class="hljs-comment">//房子和汇点建边</span><br>            add(i , t , <span class="hljs-number">1</span> , <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span> , min_cost_flow(<span class="hljs-number">0</span> , t , t + <span class="hljs-number">1</span>));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>学长的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// hdu 1533</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PB push_back</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1005</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; P;<br><span class="hljs-keyword">char</span> mp[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];<br><span class="hljs-keyword">int</span> dist[maxn&lt;&lt;<span class="hljs-number">1</span>],pe[maxn&lt;&lt;<span class="hljs-number">1</span>],head[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">bool</span> vis[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> n,m,tot;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> u,v,cap,cost,next;<br>    Edge()&#123;&#125;<br>    Edge(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> cap,<span class="hljs-keyword">int</span> cost,<span class="hljs-keyword">int</span> next):u(u),v(v),cap(cap),cost(cost),next(next)&#123;&#125;<br>&#125;edge[maxn&lt;&lt;<span class="hljs-number">7</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> from,<span class="hljs-keyword">int</span> to,<span class="hljs-keyword">int</span> cap,<span class="hljs-keyword">int</span> cost)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot] = Edge(from,to,cap,cost,head[from]);<br>    head[from] = tot++;<br>    edge[tot] = Edge(to,from,<span class="hljs-number">0</span>,-cost,head[to]);<br>    head[to] = tot++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">SPFA</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s,<span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist,INF,<span class="hljs-keyword">sizeof</span>(dist));<br>    <span class="hljs-built_in">memset</span>(vis,<span class="hljs-literal">false</span>,<span class="hljs-keyword">sizeof</span>(vis));<br>    <span class="hljs-built_in">memset</span>(pe,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(pe));<br>    dist[s]=<span class="hljs-number">0</span>;<br>    vis[s]=<span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    q.push(s);<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front();q.pop();<br>        vis[u] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=head[u];i!=<span class="hljs-number">-1</span>;i=edge[i].next)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].v;<br>            <span class="hljs-keyword">int</span> cost = edge[i].cost;<br>            <span class="hljs-keyword">if</span>(edge[i].cap&gt;<span class="hljs-number">0</span> &amp;&amp; dist[v]&gt;dist[u]+cost)<br>            &#123;<br>                dist[v] = dist[u]+cost;<br>                pe[v] = i;<br>                <span class="hljs-keyword">if</span>(!vis[v])<br>                &#123;<br>                    vis[v]=<span class="hljs-literal">true</span>;<br>                    q.push(v);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(dist[t]==INF) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">min_cost_flow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s,<span class="hljs-keyword">int</span> t,<span class="hljs-keyword">int</span> f)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(SPFA(s,t))<br>    &#123;<br>        <span class="hljs-keyword">int</span> flow = INF;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=pe[t];i!=<span class="hljs-number">-1</span>;i=pe[edge[i].u])<br>        &#123;<br>            flow = min(flow,edge[i].cap);<br>        &#125;<br>        f -= flow;<br>        <span class="hljs-keyword">if</span>(f&lt;<span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=pe[t];i!=<span class="hljs-number">-1</span>;i=pe[edge[i].u])<br>        &#123;<br>            edge[i].cap -= flow;<br>            edge[i^<span class="hljs-number">1</span>].cap += flow;<br>        &#125;<br>        res += flow*dist[t];<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dis</span><span class="hljs-params">(P a,P b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(a.first-b.first)+<span class="hljs-built_in">abs</span>(a.second-b.second);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m) &amp;&amp; (n!=<span class="hljs-number">0</span> &amp;&amp; m!=<span class="hljs-number">0</span>))<br>    &#123;<br>        <span class="hljs-keyword">int</span> num1=<span class="hljs-number">0</span>,num2=<span class="hljs-number">0</span>;<br>        P man[maxn],hos[maxn];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,mp[i]);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(mp[i][j]==<span class="hljs-string">&#x27;m&#x27;</span>)<br>                    man[++num1] = P(i,j+<span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span>(mp[i][j]==<span class="hljs-string">&#x27;H&#x27;</span>)<br>                    hos[++num2] = P(i,j+<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> s=<span class="hljs-number">0</span>,t=num1+num2+<span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">memset</span>(head,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(head));<br>        tot=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=num1;i++)<br>            add_edge(<span class="hljs-number">0</span>,i,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=num2;i++)<br>            add_edge(num1+i,t,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=num1;i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=num2;j++)<br>            &#123;<br>                add_edge(i,num1+j,<span class="hljs-number">1</span>,dis(man[i],hos[j]));<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,min_cost_flow(s,t,num1));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>鸽<del>~</del><del>~</del>~~~~</p>
]]></content>
      <tags>
        <tag>acm</tag>
        <tag>算法</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>2-sat</title>
    <url>/2019/02/13/2-sat/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>2-sat是k-sat问题中k==2时的一种情况，，（废话qaq，，</p>
<p>当k大于等于3时是npc问题，，所以一般都是问的2-sat，，</p>
<p>这种题的大概形式是： 对于给定的n对的点，要求每一对都只能选择一个，并且其中还有一些限制条件，比如说选了u就不能选择v等等，，</p>
<p>然后问你有没有可行解，，，</p>
<p>解决这类问题一般是用 <strong>染色法（求字典序最小的解）</strong> 和 <strong>强连通分量法（拓扑排序只能得到任意解）</strong>，，</p>
<span id="more"></span>
<h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><ul>
<li>首先要明白一个道理：对于 <code>u-&gt;v</code>（选择u就不能选择v）这样的限制条件可以用它的逆否命题来转换为：<code>u-&gt;v&#39;</code>（选择u就必须选v’）以及 <code>v-&gt;u&#39;</code>（选择v就必须选u’）</li>
<li>最后的建出的图是对称的，，</li>
<li><a href="https://wenku.baidu.com/view/afd6c436a32d7375a41780f2.html">具体的数学证明和算法推导看这里</a> 和 <a href="https://www.cnblogs.com/kuangbin/archive/2012/10/05/2712429.html">kuangbin的博客</a>，，多看几遍，，跟着敲一遍代码后再看看就差不多懂了</li>
</ul>
<h2 id="染色法（求字典序最小的解）"><a href="#染色法（求字典序最小的解）" class="headerlink" title="染色法（求字典序最小的解）"></a>染色法（求字典序最小的解）</h2><p>这个算法的大致思路就是遍历每一对点的两种情况：选p或者选p’，，，</p>
<p>然后一直从p的下一个尝试下去，，中间若是碰到不能避免的不满足题意的选择时，证明这条路下来的尝试时不行的，，重新选择，，一直下去。。。也就是一个深搜的过程，，时间复杂度大概是 $O(nm)$，，</p>
<p><a href="https://www.cnblogs.com/L-Excalibur/p/8504893.html">可以看看这篇博客，，</a></p>
<p><a href="https://blog.sengxian.com/algorithms/2-sat">以及这个</a></p>
<p><a href="https://blog.csdn.net/jarjingx/article/details/8521690">还有这个里的那几个模型很好</a></p>
<blockquote>
<p><strong>模型一：两者（A，B）不能同时取</strong><br>　　那么选择了A就只能选择B’，选择了B就只能选择A’<br>　　连边A→B’，B→A’</p>
<p><strong>模型二：两者（A，B）不能同时不取</strong><br>　　那么选择了A’就只能选择B，选择了B’就只能选择A<br>　　连边A’→B，B’→A</p>
<p><strong>模型三：两者（A，B）要么都取，要么都不取</strong><br>　　那么选择了A，就只能选择B，选择了B就只能选择A，选择了A’就只能选择B’，选择了B’就只能选择A’<br>　　连边A→B，B→A，A’→B’，B’→A’</p>
<p><strong>模型四：两者（A，A’）必取A</strong><br>　　那么，那么，该怎么说呢？先说连边吧。<br>　　连边A’→A</p>
</blockquote>
<h2 id="强连通分量法（拓扑排序只能得到任意解）"><a href="#强连通分量法（拓扑排序只能得到任意解）" class="headerlink" title="强连通分量法（拓扑排序只能得到任意解）"></a>强连通分量法（拓扑排序只能得到任意解）</h2><p>这个算法的流程为：</p>
<ul>
<li>建图</li>
<li>求极大联通分量（子图）</li>
<li>缩点，转化成DAG（有向无环图）</li>
<li>判断有无解</li>
<li>新图拓扑排序</li>
<li>自底向上选择、删除</li>
<li>输出</li>
</ul>
<p>时间复杂度大概为 $O(m)$，，就是难写，，而且不能输出字典序小的解，，，</p>
<h1 id="例题和模板"><a href="#例题和模板" class="headerlink" title="例题和模板"></a>例题和模板</h1><h2 id="hdu-1814"><a href="#hdu-1814" class="headerlink" title="hdu-1814"></a>hdu-1814</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1814">这道模板题</a>，，让输出的书字典序小的解，，，只能用第一种方法了，，，</p>
<p>题意就是一个国家有很多党派，，每个党派只有两个人，，现在要从这一堆党派中每个党派选择一个人参加会议，，其中一些人之间有分歧，，即p去了q就不去这样的限制条件，，问你是否能找出满足题意所有限制条件的选择方法，，，有解的话就输出字典序最小的解，，</p>
<p>题意和上面那个<a href="https://wenku.baidu.com/view/afd6c436a32d7375a41780f2.html">百度文库</a>的例题一样，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c = getchar(); <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; c = getchar();&#125;<br>    <span class="hljs-keyword">while</span>(c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = getchar();<br>    <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-comment">//2sat_kuangbin</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, next;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> head[maxn], tot;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v; edge[tot].next = head[u]; head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> s[maxn], top;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(vis[u^<span class="hljs-number">1</span>])<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;       <span class="hljs-comment">//如果这个点p的对立面p&#x27;选了，那么这个点就不选</span><br>    <span class="hljs-keyword">if</span>(vis[u])  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        <span class="hljs-comment">//如果这个点已经选了，就不从这个点继续向下找了</span><br>    vis[u] = <span class="hljs-literal">true</span>;                  <span class="hljs-comment">//这个点p没选并且对立面p&#x27;没选的情况下，选择这个点，并且尝试从这个点寻找可能的解法</span><br>    s[top++] = u;                   <span class="hljs-comment">//把这个可能的一种情况压栈，保存</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>        <span class="hljs-keyword">if</span>(!dfs(edge[i].to))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;           <span class="hljs-comment">//尝试所有与点u相连的点v，如果从点v出发的尝试不可行时不选</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">two_sat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis); <span class="hljs-comment">//vis[i]标记那些点要选</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(vis[i] || vis[i^<span class="hljs-number">1</span>])<span class="hljs-keyword">continue</span>;<span class="hljs-comment">//如果这一对点有一个选过就尝试下一对的点</span><br>        top = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(!dfs(i))                 <span class="hljs-comment">//如果从点i出发的尝试不行，就将栈中所有这条可能的路径上的点标记为未选</span><br>        &#123;<br>            <span class="hljs-keyword">while</span>(top)vis[s[--top]] = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span>(!dfs(i^<span class="hljs-number">1</span>))<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//如果点i的对立面i&#x27;都不行的话，证明无法找到这样一条可行解，使得每一对点仅选择一个并且满足对应的限制</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br><span class="hljs-comment">//    ios_base::sync_with_stdio(0);</span><br><span class="hljs-comment">//    cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n, m, u, v;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m) != EOF)<br>    &#123;<br>        init();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>            --u;--v;        <span class="hljs-comment">//点的编号从0开始，方便使用p^1来表示p的对立面</span><br>            addedge(u, v^<span class="hljs-number">1</span>);<span class="hljs-comment">//建图，限制条件u-&gt;v（选择u就不能选择v）等价于u-&gt;v&#x27; &amp;&amp; v-&gt;u&#x27; （选择u必须选额v&#x27; 和 选择v就必须选择u&#x27;）</span><br>            addedge(v, u^<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(two_sat(<span class="hljs-number">2</span> * n))  <span class="hljs-comment">//存在解时</span><br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span> * n; ++i)<br>                <span class="hljs-keyword">if</span>(vis[i])  <span class="hljs-comment">//将最后字典序最小的可行解输出</span><br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NIE\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="uva-3211"><a href="#uva-3211" class="headerlink" title="uva-3211"></a><a href="https://cn.vjudge.net/problem/UVALive-3211">uva-3211</a></h2><p>这道题的题意是： 每架飞机有两个降落的时间点(a, b)，然后对于每两架飞机之间定义一个安全的时间间隔x，，问你在保证全部飞机都安全降落的情况下，最小的时间间隔x中的最大值，，，</p>
<p>先不管x怎么求，，假设现在已知一个x，，问你任意两架飞机之间的时间间隔最小是x时可不可以，，</p>
<p>因为对于一架飞机来说，有两个时间点，但只能选择一个，也就是说a, b 是相互排斥的，，就像上面那道题中的每个党派中只选择一个人一样，，同时对于每两架飞机之间，他们选择的降落时间的差的绝对值应该是至少大于x的，，，这样就能看出一个限制条件，，即：对于第i架飞机选择的降落时间 $a_i$ 与第j架飞机选择的降落时间 $a_j$ 之间满足 $abs(a_i - a_j) \geq x$，，我们可以遍历每一架飞机和它后面的飞机所选择的降落时间的结果，，对于不满足条件的就可以认为是 <strong>选择了第i架的一个降落时间点就不能选第j架的一个降落的时间点</strong> ，，，这就是最后提取出来的限制条件，，也就是 <strong>选择了第i架的一个时间点就必须选第j架的另一个时间点</strong> 和 <strong>选择了第j架的一个时间点就必须选第i架飞机的另一个时间点</strong> ，，，（<del>这里有一个问题: 貌似没有保证 <em>选择了第i架飞机的一个时间点就不选第j架飞机的一个时间点时</em> ，选择第j架飞机的另一个时间点就也满足相差不小于x，，，但是我找到的博客没有一个说这个的，不考虑也能过，，当然也有可能我理解错了，，有的话，求指正，，</del>做了下面那道题之后瞬间明白了，，，建图的时候那些时间点之间都枚举判断了，，不是一对一对的枚举，，，233）</p>
<p>抽象一下就是：首先我们用一个数组保存所有的时间点 $a<em>k$，下标从0开始到 $2 *n-1$ ，其中 $a</em>{2<em>k}, a_{2</em>k+1}$ 表示第k架飞机的两个时间，，我们遍历每一架飞机， 如果满足 $abs(a<em>{第i架飞机的两个时间} - a</em>{第j架飞机的两个时间}) \geq x$ 相当于是 $p_i-&gt;q_j$ 这样的限制关系，，那么建边就是 $p_i-&gt;q_j’$ 以及 $q_j-&gt;p_i’$  ，，然后跑2sat判断是否有解，，</p>
<p>然后看x的求法，，</p>
<blockquote>
<p>最大xx中的最小值 或 最小xx中的最大值 一般都是用二分来枚举这个值，然后判断是否满足一定条件</p>
</blockquote>
<p>我们可以枚举x，，然后用这个x来建图跑一下判断是否可行来求出其最大值，，</p>
<p><a href="http://www.cnblogs.com/L-Excalibur/p/8513386.html">参考</a></p>
<p>我这种写法貌似时间复杂度很不好，，6s左右，，emmm不知道那里写崩了，，可能是那个存数据的vector的锅，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;iostream&gt;</span><br><span class="hljs-comment">// #include &lt;cstdio&gt;</span><br><span class="hljs-comment">// #include &lt;cstdlib&gt;</span><br><span class="hljs-comment">// #include &lt;string.h&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e7</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, next;<br>&#125;edge[maxm];<br><span class="hljs-keyword">int</span> tot, head[maxm];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].next = head[u];<br>    head[u] = tot++;<br>&#125;<br><br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> sta[maxn], top;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(vis[u ^ <span class="hljs-number">1</span>])<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(vis[u])<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    vis[u] = <span class="hljs-literal">true</span>;<br>    sta[++top] = u;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>        <span class="hljs-keyword">if</span>(!dfs(edge[i].to))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">twosat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(vis[i] || vis[i ^ <span class="hljs-number">1</span>]) <span class="hljs-keyword">continue</span>;<br>        top = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(!dfs(i))<br>        &#123;<br>            <span class="hljs-keyword">while</span>(~top)vis[sta[top--]] = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span>(!dfs(i ^ <span class="hljs-number">1</span>))<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; &gt; e;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">abss</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> x &lt; <span class="hljs-number">0</span> ? -x : x;&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    init();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; e.size(); ++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; e.size(); ++j)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(abss(e[i].first - e[j].first) &lt; x)<br>                addedge(i &lt;&lt; <span class="hljs-number">1</span>, j &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>), addedge(j &lt;&lt; <span class="hljs-number">1</span>, i &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(abss(e[i].first - e[j].second) &lt; x)<br>                addedge(i &lt;&lt; <span class="hljs-number">1</span>, j &lt;&lt; <span class="hljs-number">1</span>), addedge(j &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, i &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(abss(e[i].second - e[j].first) &lt; x)<br>                addedge(i &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, j &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>), addedge(j &lt;&lt; <span class="hljs-number">1</span>, i &lt;&lt; <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(abss(e[i].second - e[j].second) &lt; x)<br>                addedge(i &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, j &lt;&lt; <span class="hljs-number">1</span>), addedge(j &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, i &lt;&lt; <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(twosat(<span class="hljs-number">2</span> * n))   <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n))<br>    &#123;<br>        <span class="hljs-keyword">int</span> u, v;<br>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; &gt;().swap(e);<br>        e.clear();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>            e.push_back(<span class="hljs-built_in">make_pair</span>(u, v));<br>        &#125;<br>        <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-number">10000001</span>;<br>        <span class="hljs-keyword">int</span> ans;<br>        <span class="hljs-keyword">while</span>(l &lt;= r)<br>        &#123;<br>            <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(check(mid))l = mid + <span class="hljs-number">1</span>, ans = mid;<br>            <span class="hljs-keyword">else</span>    r = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    <br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="HDU-3622-Bomb-Game"><a href="#HDU-3622-Bomb-Game" class="headerlink" title="HDU-3622-Bomb Game"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3622">HDU-3622-Bomb Game</a></h2><p>这道题和上面那道题差不多，也是二分枚举+建图判断可行性，，为了精度可以先不开方直接枚举 $(2*r)^2$ 的值，，，</p>
<p>题意就是n对可以放置炸弹的点，，选择没对点中的一个，同时可以为每个炸弹设置一个爆炸范围r，，但是每一个炸弹的爆炸范围不能波及到其他的点，，求一个最大的r，，，</p>
<p>因为和上面那题差不多，，直接看代码吧，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e10</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e7</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, next;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> tot, head[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].next = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> sta[maxn], top;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(vis[u ^ <span class="hljs-number">1</span>])<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(vis[u])<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    vis[u] = <span class="hljs-literal">true</span>;<br>    sta[++top] = u;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>        <span class="hljs-keyword">if</span>(!dfs(edge[i].to))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">twosat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(vis[i] || vis[i ^ <span class="hljs-number">1</span>])<span class="hljs-keyword">continue</span>;<br>        top = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(!dfs(i))<br>        &#123;<br>            <span class="hljs-keyword">while</span>(~top)vis[sta[top--]] = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span>(!dfs(i ^ <span class="hljs-number">1</span>))<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> x first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> y second</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; &gt; c;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dis</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (c[i].x - c[j].x) * (c[i].x - c[j].x) + (c[i].y - c[j].y) * (c[i].y - c[j].y);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    init();<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> <span class="hljs-literal">false</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span> * n; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">2</span> * n; ++j)<br>            <span class="hljs-keyword">if</span>(dis(i, j) &lt; x)<br>                addedge(i, j ^ <span class="hljs-number">1</span>), addedge(j, i ^ <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(twosat(<span class="hljs-number">2</span> * n))<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-comment">// int k = 2e9;</span><br>    <span class="hljs-comment">// cout &lt;&lt; k &lt;&lt; endl;</span><br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n))<br>    &#123;<br>        <span class="hljs-keyword">int</span> x, y;<br>        c.clear();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);<br>            c.push_back(<span class="hljs-built_in">make_pair</span>(x, y));<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);<br>            c.push_back(<span class="hljs-built_in">make_pair</span>(x, y));<br>        &#125;<br>        <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = inf;<br>        <span class="hljs-keyword">while</span>(l &lt; r)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(l + <span class="hljs-number">1</span> == r)<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(check(mid))l = mid;<br>            <span class="hljs-keyword">else</span> r = mid;<br>        &#125;<br>        <span class="hljs-keyword">double</span> ans = <span class="hljs-built_in">sqrt</span>(l) / <span class="hljs-number">2.0</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2f\n&quot;</span>, ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    <br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="HDU-4115"><a href="#HDU-4115" class="headerlink" title="HDU-4115"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4115">HDU-4115</a></h2><p>这道题是利用2sat判断是否有解，，，</p>
<p>题意就是两人玩石头剪刀布，一共玩n轮，，其中一个人 <del>优吉欧</del> bob的出手情况给你，，</p>
<p>然后对于另一个人爱丽丝她有一些每轮之间出手的限制情况，k==0时表示a轮与b轮的出手要一致，为1时表示出手要不一样，，问你爱丽丝有没有赢的情况，，，</p>
<p>这种题一般都是建图麻烦一些，，反而2sat算法本身不会有大的改变，当函数调用就行了，，，</p>
<p>我一开始想着，p==q的限制条件可不可以直接连一条p-&gt;q的边，不等就像之前那样用逆否建两条边，，，然后一直有问题，，，后来看了别人的方法发现别人都是在k==0时找不等的，然后建两条边，等于一的时候找相等的，建两条边，，，，就是去找所有的 <strong>矛盾项</strong> ，，emmm</p>
<p>后来我总觉得可以直接利用都选的条件建图，，，最后找到一个<a href="https://blog.csdn.net/waitfor_/article/details/8038894">博客（12年的，，，）</a>，，里面提到可以用必选项来建图，，就是最后的建图有些麻烦，，好费劲呐，，这种建图的方法大概是：对于要求相等的两组，找到相等的出手的话，就建一条双向边，因为一组里肯定不同，所以只需判断其中一个，，如果没有就连到它的对立面，，对于不要求相等的两组，，就找矛盾的条件建两条边，，，（其实还是直接找矛盾项建图方便一些，，，，，</p>
<p>最后注意一下细节，，，a了一次之后尝试改的好看一些，然后在细细碎碎的地方wa了几次</p>
<h3 id="矛盾项"><a href="#矛盾项" class="headerlink" title="矛盾项"></a>矛盾项</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e10</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e7</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, next;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> tot, head[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].next = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> sta[maxn], top;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(vis[u ^ <span class="hljs-number">1</span>])<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(vis[u])<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    vis[u] = <span class="hljs-literal">true</span>;<br>    sta[++top] = u;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>        <span class="hljs-keyword">if</span>(!dfs(edge[i].to))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">twosat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(vis[i] || vis[i ^ <span class="hljs-number">1</span>])<span class="hljs-keyword">continue</span>;<br>        top = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(!dfs(i))<br>        &#123;<br>            <span class="hljs-keyword">while</span>(~top)vis[sta[top--]] = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span>(!dfs(i ^ <span class="hljs-number">1</span>))<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> a, b, c;<br>&#125;node[maxn];<br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> a[maxn], b[maxn];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">bool</span> cnt)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(((<span class="hljs-keyword">bool</span>)(a[node[i].a] - a[node[i].b])) == cnt)addedge(node[i].a, node[i].b ^ <span class="hljs-number">1</span>), addedge(node[i].b, node[i].a ^ <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(((<span class="hljs-keyword">bool</span>)(a[node[i].a] - a[node[i].b ^ <span class="hljs-number">1</span>])) == cnt)addedge(node[i].a, node[i].b), addedge(node[i].b ^ <span class="hljs-number">1</span>, node[i].a ^ <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(((<span class="hljs-keyword">bool</span>)(a[node[i].a ^ <span class="hljs-number">1</span>] - a[node[i].b])) == cnt)addedge(node[i].a ^ <span class="hljs-number">1</span>, node[i].b ^ <span class="hljs-number">1</span>), addedge(node[i].b, node[i].a);<br>    <span class="hljs-keyword">if</span>(((<span class="hljs-keyword">bool</span>)(a[node[i].a ^ <span class="hljs-number">1</span>] - a[node[i].b ^ <span class="hljs-number">1</span>])) == cnt)addedge(node[i].a ^ <span class="hljs-number">1</span>, node[i].b), addedge(node[i].b ^ <span class="hljs-number">1</span>, node[i].a);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    init();<br>    <span class="hljs-comment">//~~这样写还会变慢，，，，，emmmm~~换成inline就行了，，，，</span><br>    <span class="hljs-comment">// for(int i = 1; i &lt;= m; ++i)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     if(node[i].c)</span><br>    <span class="hljs-comment">//         f(i, false);</span><br>    <span class="hljs-comment">//     else    </span><br>    <span class="hljs-comment">//         f(i, true);</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(node[i].c)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(a[node[i].a] == a[node[i].b])addedge(node[i].a, node[i].b ^ <span class="hljs-number">1</span>), addedge(node[i].b, node[i].a ^ <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(a[node[i].a] == a[node[i].b ^ <span class="hljs-number">1</span>])addedge(node[i].a, node[i].b), addedge(node[i].b ^ <span class="hljs-number">1</span>, node[i].a ^ <span class="hljs-number">1</span>);<span class="hljs-comment">///////////////</span><br>            <span class="hljs-keyword">if</span>(a[node[i].a ^ <span class="hljs-number">1</span>] == a[node[i].b])addedge(node[i].a ^ <span class="hljs-number">1</span>, node[i].b ^ <span class="hljs-number">1</span>), addedge(node[i].b, node[i].a);<br>            <span class="hljs-keyword">if</span>(a[node[i].a ^ <span class="hljs-number">1</span>] == a[node[i].b ^ <span class="hljs-number">1</span>])addedge(node[i].a ^ <span class="hljs-number">1</span>, node[i].b), addedge(node[i].b ^ <span class="hljs-number">1</span>, node[i].a);<br>            <span class="hljs-comment">// f(i, true);</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(a[node[i].a] != a[node[i].b])addedge(node[i].a, node[i].b ^ <span class="hljs-number">1</span>), addedge(node[i].b, node[i].a ^ <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(a[node[i].a] != a[node[i].b ^ <span class="hljs-number">1</span>])addedge(node[i].a, node[i].b), addedge(node[i].b ^ <span class="hljs-number">1</span>, node[i].a ^ <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(a[node[i].a ^ <span class="hljs-number">1</span>] != a[node[i].b])addedge(node[i].a ^ <span class="hljs-number">1</span>, node[i].b ^ <span class="hljs-number">1</span>), addedge(node[i].b, node[i].a);<br>            <span class="hljs-keyword">if</span>(a[node[i].a ^ <span class="hljs-number">1</span>] != a[node[i].b ^ <span class="hljs-number">1</span>])addedge(node[i].a ^ <span class="hljs-number">1</span>, node[i].b), addedge(node[i].b ^ <span class="hljs-number">1</span>, node[i].a);<br>            <br>            <span class="hljs-comment">// f(i, false);</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(twosat(n * <span class="hljs-number">2</span>))<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">// bool solve()</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//     init();</span><br><span class="hljs-comment">//     for(int i = 1; i &lt;= m; ++i)</span><br><span class="hljs-comment">//     &#123;</span><br><span class="hljs-comment">//         if(node[i].c)</span><br><span class="hljs-comment">//         &#123;</span><br><span class="hljs-comment">//             if(a[node[i].a] == a[node[i].b])addedge(node[i].a, node[i].b ^ 1), addedge(node[i].b, node[i].a ^ 1);</span><br><span class="hljs-comment">//             else if(a[node[i].a] == a[node[i].b ^ 1])addedge(node[i].a, node[i].b), addedge(node[i].b ^ 1, node[i].a ^ 1);</span><br><span class="hljs-comment">//             if(a[node[i].a ^ 1] == a[node[i].b])addedge(node[i].a ^ 1, node[i].b ^ 1), addedge(node[i].b, node[i].a);</span><br><span class="hljs-comment">//             else if(a[node[i].a ^ 1] == a[node[i].b ^ 1])addedge(node[i].a ^ 1, node[i].b), addedge(node[i].b ^ 1, node[i].a);</span><br><span class="hljs-comment">//         &#125;</span><br><span class="hljs-comment">//         else</span><br><span class="hljs-comment">//         &#123;</span><br><span class="hljs-comment">//             if(a[node[i].a] == a[node[i].b])addedge(node[i].a, node[i].b), addedge(node[i].b, node[i].a);</span><br><span class="hljs-comment">//             else if(a[node[i].a] == a[node[i].b ^ 1])addedge(node[i].a, node[i].b ^ 1), addedge(node[i].b ^ 1, node[i].a);</span><br><span class="hljs-comment">//             else addedge(node[i].a, node[i].a ^ 1);</span><br><br><span class="hljs-comment">//             if(a[node[i].a ^ 1] == a[node[i].b])addedge(node[i].a ^ 1, node[i].b), addedge(node[i].b, node[i].a ^ 1);</span><br><span class="hljs-comment">//             else if(a[node[i].a ^ 1] == a[node[i].b ^ 1])addedge(node[i].a ^ 1, node[i].b ^ 1), addedge(node[i].b ^ 1, node[i].a ^ 1);</span><br><span class="hljs-comment">//             else addedge(node[i].a ^ 1, node[i].a);</span><br><br><span class="hljs-comment">//             if(a[node[i].b] != a[node[i].a] &amp;&amp; a[node[i].b] != a[node[i].a ^ 1])addedge(node[i].b, node[i].b ^ 1);</span><br><span class="hljs-comment">//             if(a[node[i].b ^ 1] != a[node[i].a] &amp;&amp; a[node[i].b ^ 1] != a[node[i].a ^ 1])addedge(node[i].b ^ 1, node[i].b);</span><br><span class="hljs-comment">//         &#125;</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">//     if(twosat(n * 2))return true;</span><br><span class="hljs-comment">//     return false;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getb</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(x == <span class="hljs-number">2</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">if</span>(x == <span class="hljs-number">3</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i &lt;&lt; <span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;node[i].a, &amp;node[i].b, &amp;node[i].c);<br>            --node[i].a;--node[i].b;<br>            node[i].a &lt;&lt;= <span class="hljs-number">1</span>;node[i].b &lt;&lt;= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>            a[i &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>] = getb(a[i &lt;&lt; <span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">if</span>(solve())<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d: yes\n&quot;</span>, cnt++);<br>        <span class="hljs-keyword">else</span>       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d: no\n&quot;</span>, cnt++);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    <br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="poj-3678-Katu-Puzzle"><a href="#poj-3678-Katu-Puzzle" class="headerlink" title="poj-3678-Katu Puzzle"></a><a href="http://poj.org/problem?id=3678">poj-3678-Katu Puzzle</a></h2><p>一道经典题，，</p>
<p>题意就是求一个01序列是否有解，其中一些位置间的关系限定了，，，</p>
<p>重点是建图：</p>
<p>首先定义选a为0，选a’为1，那么：</p>
<ul>
<li>$a \ AND \ b = 1$: 表示ab都必须为1，，所以 $a = 0$ 的时候就要让其矛盾也就是指到 $a = 1$，也就是 <code>a-&gt;a&#39;</code>，同理b也是，<code>b-&gt;b&#39;</code>;</li>
<li>$a \ AND \ b = 0$: 表示ab中至少一个为零，所以 当 $a=0$ 时一定成立，不用管，当 $a=1$时b必须为0，也就是 <code>a&#39;-&gt;b</code>;同理对于b也是如此，，<code>b&#39;-a</code>;</li>
<li>$a \ OR \ b = 1$: 表示ab中至少一个为1，所以当 $a=0$ 的时候b一定为1， 加边 <code>a-&gt;b&#39;</code>，，$a=1$ 的时候已经为1不用管，同理对于b来说就是加边 <code>b-&gt;a&#39;</code>;</li>
<li>$a \ OR \ b = 0$: 表示ab都必须为零，和最上面那个一样，$a=1$ 的时候一定不成立，所以要让它矛盾，加边 <code>a&#39;-&gt;a</code>， 同理加边 ``b’-&gt;b</li>
<li>$a \ XOR \ b = 1$: 表示ab不同，四种情况： $a=0,b=1$: <code>a-&gt;b&#39;</code>; $a=1,b=0$: <code>a&#39;-&gt;b</code>; $b=0,a=1$: <code>b-&gt;a&#39;</code>; $b=1,a=0$: <code>b&#39;-&gt;a</code>;</li>
<li>$a \ XOR \ b = 0$: 和上面相反的四种情况：$a=0,b=0$: <code>a-&gt;b</code>; $a=1,b=1$: <code>a&#39;-&gt;b&#39;</code>; $b=0,a=0$: <code>b-&gt;a</code>; $b=1,a=1$: <code>b&#39;-&gt;a&#39;</code>;</li>
</ul>
<p>按照上面的建图就行了，，</p>
<p><a href="https://blog.csdn.net/kk303/article/details/9734729">参考1</a></p>
<p>之前做题都是找矛盾边，，但这道题找矛盾边很麻烦，，直接找满足题意的边就行了，，（貌似要保证时对称的图？？？</p>
<p>同时像 $a=1,b=1$ 这种都选项可以拆分成两个来做：$a \bigwedge b=1 \implies (a \bigvee a) \bigwedge (b \bigvee b) = 1$ 然后就可以拆成； $a \bigvee a = 1 , b \bigvee b = 1$，（a为1，b为1），， 然后建边 <code>a-&gt;a&#39;</code> 和 <code>b-&gt;b&#39;</code>；</p>
<p><a href="https://www.cnblogs.com/vongang/archive/2012/02/15/2352246.html">参考2</a></p>
<p><a href="https://blog.csdn.net/u011815404/article/details/84978199">参考3</a></p>
<p><a href="https://blog.csdn.net/uuuououlcz/article/details/41245851">这个貌似是用的矛盾项+必选项做的</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e10</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e7</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, next;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> tot, head[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].next = head[u];<br>    head[u] = tot++;<br>    <span class="hljs-comment">//cout &lt;&lt; u &lt;&lt; &quot;-&gt;&quot; &lt;&lt; v &lt;&lt; endl;</span><br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> sta[maxn], top;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(vis[u ^ <span class="hljs-number">1</span>])<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(vis[u])<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    vis[u] = <span class="hljs-literal">true</span>;<br>    sta[++top] = u;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>        <span class="hljs-keyword">if</span>(!dfs(edge[i].to))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">twosat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(vis[i] || vis[i ^ <span class="hljs-number">1</span>])<span class="hljs-keyword">continue</span>;<br>        top = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(!dfs(i))<br>        &#123;<br>            <span class="hljs-keyword">while</span>(~top)vis[sta[top--]] = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span>(!dfs(i ^ <span class="hljs-number">1</span>))<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m))<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b, c;<br>        <span class="hljs-keyword">char</span> s[<span class="hljs-number">10</span>];<br>        init();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%s&quot;</span>, &amp;a, &amp;b, &amp;c, s);<br>            <span class="hljs-keyword">if</span>(s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;A&#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(c)<br>                &#123;<br>                    addedge(a &lt;&lt; <span class="hljs-number">1</span>, a &lt;&lt; <span class="hljs-number">1</span> ^ <span class="hljs-number">1</span>);    <span class="hljs-comment">//a^b=1 =&gt; (a ! a) ^ (b ! b) =&gt; a -&gt; a&#x27;, b -&gt; b&#x27;</span><br>                    addedge(b &lt;&lt; <span class="hljs-number">1</span>, b &lt;&lt; <span class="hljs-number">1</span> ^ <span class="hljs-number">1</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    addedge(a &lt;&lt; <span class="hljs-number">1</span> ^ <span class="hljs-number">1</span>, b &lt;&lt; <span class="hljs-number">1</span>);    <span class="hljs-comment">//a^b=0 =&gt; a -&gt; b&#x27;(01), b -&gt; a&#x27;(10)</span><br>                    addedge(b &lt;&lt; <span class="hljs-number">1</span> ^ <span class="hljs-number">1</span>, a &lt;&lt; <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;O&#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(c)<br>                &#123;<br>                    addedge(a &lt;&lt; <span class="hljs-number">1</span>, b &lt;&lt; <span class="hljs-number">1</span> ^ <span class="hljs-number">1</span>);<br>                    addedge(b &lt;&lt; <span class="hljs-number">1</span>, a &lt;&lt; <span class="hljs-number">1</span> ^ <span class="hljs-number">1</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    addedge(a &lt;&lt; <span class="hljs-number">1</span> ^ <span class="hljs-number">1</span>, a &lt;&lt; <span class="hljs-number">1</span>);<br>                    addedge(b &lt;&lt; <span class="hljs-number">1</span> ^ <span class="hljs-number">1</span>, b &lt;&lt; <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(c)<br>                &#123;<br>                    addedge(a &lt;&lt; <span class="hljs-number">1</span>, b &lt;&lt; <span class="hljs-number">1</span> ^ <span class="hljs-number">1</span>);<br>                    addedge(a &lt;&lt; <span class="hljs-number">1</span> ^ <span class="hljs-number">1</span>, b &lt;&lt; <span class="hljs-number">1</span>);<br>                    addedge(b &lt;&lt; <span class="hljs-number">1</span> ^ <span class="hljs-number">1</span>, a &lt;&lt; <span class="hljs-number">1</span>);<br>                    addedge(b &lt;&lt; <span class="hljs-number">1</span>, a &lt;&lt; <span class="hljs-number">1</span> ^ <span class="hljs-number">1</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    addedge(a &lt;&lt; <span class="hljs-number">1</span> ^ <span class="hljs-number">1</span>, b &lt;&lt; <span class="hljs-number">1</span> ^ <span class="hljs-number">1</span>);<br>                    addedge(b &lt;&lt; <span class="hljs-number">1</span> ^ <span class="hljs-number">1</span>, a &lt;&lt; <span class="hljs-number">1</span> ^ <span class="hljs-number">1</span>);<br>                    addedge(a &lt;&lt; <span class="hljs-number">1</span>, b &lt;&lt; <span class="hljs-number">1</span>);<br>                    addedge(b &lt;&lt; <span class="hljs-number">1</span>, a &lt;&lt; <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(twosat(<span class="hljs-number">2</span> * n))<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>        <span class="hljs-keyword">else</span>             <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    <br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="处女座与宝藏"><a href="#处女座与宝藏" class="headerlink" title="处女座与宝藏"></a><a href="https://ac.nowcoder.com/acm/contest/327/F">处女座与宝藏</a></h2><p>一切的起因，很早之前就听说过2sat，然后在寒假的那次牛客上碰到了这题，，然后想着要学会2sat，，，发现那时我 tarjan 没学过，，于是跑去学 tarjan ，，然后就一直拖拖到了上个星期，才重新捡起来看，，，</p>
<p>这道题和上面那几题相比，最大的不同是 <strong>建图</strong> ，，这道题2sat只是一个辅助的判断工具，但是建图的方法题目里没有明说，得自己去想出来其中的关系。。</p>
<p>题意： 有这么n个宝藏，还有m个开关，按下开关，对应控制的宝藏的状态就会改变，然后问你是否有宝藏全开的解，，每个开关会控制k个宝箱，，</p>
<p><strong>最后相当于是求一个开关的选择序列(比如说0是不按,1是表示按下)</strong> ，，所以最后宝箱的起始状态只是用来让我们限制开关选择的限制条件，大致的思想就是：<em>如果起始状态是打开的，对应开关的选择就是 <strong>按下-&gt;不按</strong> 表示选择不按的情况;相反的就是 <strong>不按-&gt;按下</strong> ;</em></p>
<p>基于这个思想，我们要预处理一下开关，，因为题目是给的第i个开关控制的k个宝藏，而我们建图的时候是要 <em>根据第i个宝藏被一些开关控制的情况</em> 来得出限制条件。</p>
<p>最后说一下建图的方法：<br>如果用 $u_i$ 表示第i个开关的选择不按的情况，$u_i+1$ 就表示第i个开关选择按下的情况，那么：</p>
<ul>
<li>对于没有开关控制的宝箱，如果起始状态是打开的，那么这个宝箱就不管了，，但如果是关闭的，因为没有开关会控制它，所以它无论如何都是关闭的，此时是无解的;</li>
<li>对于只有一个开关控制的宝箱，如果起始状态是打开的，那我必须选择对应的开关为 <strong>不按</strong> 的情况，也就是 <code>u^1-&gt;u</code>; 同理对立的情况就是： <code>u-&gt;u^1</code>;</li>
<li>对于两个开关控制的宝箱，如果起始状态是打开的，和上面一样，我必须保证开关的变动之后还是打开的，所以一共有2种情况：两个都不按，两个都按下，一共是建4条边： <code>u-&gt;v</code> , <code>v-&gt;u</code> , <code>u^1-&gt;v^1</code> , <code>v^1-&gt;u^1</code>; 同理可以得出对立面就要保证要按下一个开关，一个按下，另一个就不能按下: <code>u-&gt;v^1</code> , <code>u^1-&gt;v</code> , <code>v-&gt;u^1</code> , <code>v^1-&gt;u</code>;</li>
</ul>
<p>最后说一下（好像刚刚说过这是最后一个了哎？？！！）这道题的坑点，，</p>
<ul>
<li>首先是预处理的时候要统一好你的下标，有的人习惯从1开始（貌似其他人很多都是这么搞得），，这样的话对于没有开关控制的宝箱要建两条初始边，，要是从0开始的话（比如我）就要在读入每个开关控制的k个宝箱的编号的时候减一；</li>
<li>这道题是单组测试，本来说用多组读入到文件末应该是没问题的，但是我一直卡在最后一组上，，wa了十几发，一度怀疑是代码写错，，该到最后没得改了，就把 <code>while(~scanf(&quot;%d%d&quot;, &amp;n, &amp;m))</code> 去了就A了，，换回一开始wa的也这样改了也是A了，，，谜一般的操作，，</li>
<li>还有就是题目说是保证每个宝藏最多被两个开关控制，，所以建图的时候判断开关的数量时就直接 <code>if(balabala)&#123;...&#125;else if(balabala)&#123;...&#125;&#125;else&#123;...&#125;</code> 最后一个就没写判断，，按照一般的想法应该是没问题的，，但是这里最后不写成 <code>else if(balabala)&#123;&#125;</code> 也会卡最后一个测试用例，，，迷&lt;&lt;1，，，</li>
</ul>
<p>代码：</p>
<h3 id="染色法"><a href="#染色法" class="headerlink" title="染色法"></a>染色法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;iostream&gt;</span><br><span class="hljs-comment">// #include &lt;cstdio&gt;</span><br><span class="hljs-comment">// #include &lt;cstdlib&gt;</span><br><span class="hljs-comment">// #include &lt;string.h&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e10</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e7</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br>  <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, next;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> tot, head[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].next = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> sta[maxn], top;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(vis[u ^ <span class="hljs-number">1</span>])<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(vis[u])<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    vis[u] = <span class="hljs-literal">true</span>;<br>    sta[++top] = u;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>        <span class="hljs-keyword">if</span>(!dfs(edge[i].to))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">twosat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(vis[i] || vis[i ^ <span class="hljs-number">1</span>])<span class="hljs-keyword">continue</span>;<br>        top = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(!dfs(i))<br>        &#123;<br>            <span class="hljs-keyword">while</span>(~top)vis[sta[top--]] = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span>(!dfs(i ^ <span class="hljs-number">1</span>))<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; g[maxn];<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class="hljs-keyword">int</span> x, k;<br>    <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;k);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= k; ++j)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);--x;<br>            g[x].push_back(i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> len, u, v;<br>    init();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>    &#123;<br>        len = g[i].size();<br>        <span class="hljs-keyword">if</span>(len == <span class="hljs-number">1</span>)<br>        &#123;<br>            u = g[i][<span class="hljs-number">0</span>];u &lt;&lt;= <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(a[i])<br>                addedge(u, u ^ <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">else</span><br>                addedge(u ^ <span class="hljs-number">1</span>, u);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(len == <span class="hljs-number">2</span>)<br>        &#123;<br>            u = g[i][<span class="hljs-number">0</span>], v = g[i][<span class="hljs-number">1</span>];<br>            u &lt;&lt;= <span class="hljs-number">1</span>; v &lt;&lt;= <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(a[i])<br>            &#123;<br>                addedge(u, v ^ <span class="hljs-number">1</span>);<br>                addedge(u ^ <span class="hljs-number">1</span>, v);<br>                addedge(v, u ^ <span class="hljs-number">1</span>);<br>                addedge(v ^ <span class="hljs-number">1</span>, u);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                addedge(u, v);<br>                addedge(v, u);<br>                addedge(u ^ <span class="hljs-number">1</span>, v ^ <span class="hljs-number">1</span>);<br>                addedge(v ^ <span class="hljs-number">1</span>, u ^ <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(len == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(a[i])<br>            &#123;<br>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>                flag = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br> <br>    &#125;<br>    <span class="hljs-keyword">if</span>(flag)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(twosat(m &lt;&lt; <span class="hljs-number">1</span>))  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>    <span class="hljs-keyword">else</span>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="tarjan"><a href="#tarjan" class="headerlink" title="tarjan"></a>tarjan</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;iostream&gt;</span><br><span class="hljs-comment">// #include &lt;cstdio&gt;</span><br><span class="hljs-comment">// #include &lt;cstdlib&gt;</span><br><span class="hljs-comment">// #include &lt;string.h&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e10</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e7</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, next;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> tot, head[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].next = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> low[maxn], dfn[maxn], sta[maxn], belong[maxn];<br><span class="hljs-keyword">int</span> idx, top;<br><span class="hljs-keyword">int</span> scc;<br><span class="hljs-keyword">bool</span> insta[maxn];<br><span class="hljs-keyword">int</span> num[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> v;<br>    low[u] = dfn[u] = ++idx;<br>    sta[top++] = u;<br>    insta[u] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>    &#123;<br>        v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(!dfn[v])<br>        &#123;<br>            tarjan(v);<br>            <span class="hljs-keyword">if</span>(low[u] &gt; low[v])low[u] = low[v];<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(insta[v] &amp;&amp; low[u] &gt; dfn[v])<br>            low[u] = dfn[v];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(low[u] == dfn[u])<br>    &#123;<br>        ++scc;<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>            v = sta[--top];<br>            insta[v] = <span class="hljs-literal">false</span>;<br>            belong[v] = scc;<br>            ++num[scc];<br>        &#125;<span class="hljs-keyword">while</span>(v != u);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">twosat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dfn, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dfn);<br>    <span class="hljs-built_in">memset</span>(insta, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> insta);<br>    <span class="hljs-built_in">memset</span>(num, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> num);<br>    idx = scc = top = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        <span class="hljs-keyword">if</span>(!dfn[i])<br>            tarjan(i);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">if</span>(belong[i] == belong[i ^ <span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; g[maxn];<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class="hljs-keyword">int</span> x, k;<br>    <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)g[i].clear();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;k);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= k; ++j)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>            g[x].push_back(i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> len, u, v;<br>    init();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        len = g[i].size();<br>        <span class="hljs-keyword">if</span>(len == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-comment">// u = g[i][0];u &lt;&lt;= 1;</span><br>            u = g[i][<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(a[i])<br>                addedge(u, u ^ <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">else</span><br>                addedge(u ^ <span class="hljs-number">1</span>, u);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(len == <span class="hljs-number">2</span>)<br>        &#123;<br>            <span class="hljs-comment">// u = g[i][0]; v = g[i][1];</span><br>            <span class="hljs-comment">// u &lt;&lt;= 1; v &lt;&lt;= 1;</span><br>            u = g[i][<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">1</span>;<br>            v = g[i][<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(a[i])<br>            &#123;<br>                addedge(u, v ^ <span class="hljs-number">1</span>);<br>                addedge(u ^ <span class="hljs-number">1</span>, v);<br>                addedge(v, u ^ <span class="hljs-number">1</span>);<br>                addedge(v ^ <span class="hljs-number">1</span>, u);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                addedge(u, v);<br>                addedge(v, u);<br>                addedge(u ^ <span class="hljs-number">1</span>, v ^ <span class="hljs-number">1</span>);<br>                addedge(v ^ <span class="hljs-number">1</span>, u ^ <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(len == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(a[i])<br>            &#123;<br>                <span class="hljs-comment">// puts(&quot;NO&quot;);</span><br>                <span class="hljs-comment">// flag = true;</span><br>                <span class="hljs-comment">// break;</span><br>                addedge(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>                addedge(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(twosat(m &lt;&lt; <span class="hljs-number">1</span>))  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>    <span class="hljs-keyword">else</span>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <br>&#125;<br></code></pre></td></tr></table></figure>
<p>其实这两没啥区别，，，总写第一个是因为第一好写(wu)，，，tarjan稍慢一些（不过也没多少），，，</p>
<p>写了一天半的代码，，wa了近20发，，，心态快崩了QAQ，，溜了溜了</p>
<h2 id="D-The-Door-Problem"><a href="#D-The-Door-Problem" class="headerlink" title="D. The Door Problem"></a><a href="https://codeforces.com/contest/776/problem/D">D. The Door Problem</a></h2><p>这道题和上面那道宝藏的题一样，，（应该是牛客那道参考的这一道，，，</p>
<p>代码都一样直接交就行了，，建图的思想相同，</p>
<h2 id="Let’s-go-home"><a href="#Let’s-go-home" class="headerlink" title="Let’s go home"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1824">Let’s go home</a></h2><p>按题意建图就行了，，（刚开始忘记给点乘2，wa了几发。。。</p>
<h2 id="Astronauts-UVALive-3713"><a href="#Astronauts-UVALive-3713" class="headerlink" title="Astronauts UVALive - 3713"></a><a href="https://cn.vjudge.net/problem/UVALive-3713">Astronauts UVALive - 3713</a></h2><p>这题也不错，，题面给了你三种选择的限制关系，但是可以用年龄化成两种选择的限制关系，，一开始写出俩之后测试样例的输出和题所给的不一样，一度怀疑是自己图图又建错了，，后来想起来2sat问题不一定是唯一解啊，，把这个最重要的性质忘了，，我一直写的那个解法是求字典序最小的解啊，，，QAQ。。</p>
<p>题意就是有这么n个宇航员，每一个人的年龄给你，然后有这么3种任务，，最后一种是忽略年龄的，A任务要求只能年龄大于平均值的上，B任务则相反，，，其中一些人之间还有憎恨关系，即他俩不能在一个任务中，问你有没有一个可行的安排任务的方式，，有的话输出这种方式，，，</p>
<p>思路：我一开始想着要不要先不管AB任务的分配，也就是说将它俩看成一个任务，，然后和C任务选择分配，，最后根据年龄来选择AB任务的分配情况，，，但是写到一半发现不对，，对于年龄一个大于平均值的一个小于平均值的他们俩如果有憎恨关系的话他们俩是应该一个A一个B，，，如果按我那种想法的话就会出现两个A的情况（可能甚至不会出现，，因为这样建图会使得这种情况选择为不取，，会出现两个选C的情况，，，</p>
<p>后来又想了一会，，想着反正对于一个人来说不是C就是AB中的一个，，那么在建图的时候判断一下不就行了吗，，，然后1A了，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e10</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e7</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, next;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> tot, head[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].next = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> sta[maxn], top;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(vis[u ^ <span class="hljs-number">1</span>])<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(vis[u])<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    vis[u] = <span class="hljs-literal">true</span>;<br>    sta[++top] = u;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].next)<br>        <span class="hljs-keyword">if</span>(!dfs(edge[i].to))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">twosat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(vis[i] || vis[i ^ <span class="hljs-number">1</span>])<span class="hljs-keyword">continue</span>;<br>        top = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(!dfs(i))<br>        &#123;<br>            <span class="hljs-keyword">while</span>(~top)vis[sta[top--]] = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span>(!dfs(i ^ <span class="hljs-number">1</span>))<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//    freopen(&quot;233.in&quot; , &quot;r&quot; , stdin);</span><br><span class="hljs-comment">//    freopen(&quot;233.out&quot; , &quot;w&quot; , stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m) &amp;&amp; n + m)<br>    &#123;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)sum += a[i];<br>        init();<br>        <span class="hljs-keyword">int</span> u, v;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>            <span class="hljs-keyword">if</span>((a[u] * n &lt;= sum &amp;&amp; a[v] * n &lt;= sum) || (a[u] * n &gt;= sum &amp;&amp; a[v] * n &gt;= sum))<br>            &#123;<br>                --u; --v;<br>                u &lt;&lt;= <span class="hljs-number">1</span>; v &lt;&lt;= <span class="hljs-number">1</span>;<br>                addedge(u, v ^ <span class="hljs-number">1</span>);<br>                addedge(u ^ <span class="hljs-number">1</span>, v);<br>                addedge(v, u ^ <span class="hljs-number">1</span>);<br>                addedge(v ^ <span class="hljs-number">1</span>, u);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                --u; --v;<br>                u &lt;&lt;= <span class="hljs-number">1</span>; v &lt;&lt;= <span class="hljs-number">1</span>;<br>                <span class="hljs-comment">// addedge(u, v);</span><br>                <span class="hljs-comment">// addedge(v, u);</span><br>                <span class="hljs-comment">// addedge(u, v ^ 1);</span><br>                <span class="hljs-comment">// addedge(u ^ 1, v);</span><br>                <span class="hljs-comment">// addedge(v, u ^ 1);</span><br>                <span class="hljs-comment">// addedge(v ^ 1, u);</span><br>                addedge(u ^ <span class="hljs-number">1</span>, v);<br>                addedge(v ^ <span class="hljs-number">1</span>, u);<br>            &#125;<br>            <br>        &#125;<br>        <span class="hljs-keyword">if</span>(!twosat(n &lt;&lt; <span class="hljs-number">1</span>))<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No solution.&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(vis[i &lt;&lt; <span class="hljs-number">1</span>])<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(a[i + <span class="hljs-number">1</span>] * n &lt; sum)<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;B&quot;</span>);<br>                    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;A&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;C&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// for(int i = 0; i &lt; 2 * n; i += 2)</span><br>        <span class="hljs-comment">//     cout &lt;&lt; vis[i] &lt;&lt; vis[i ^ 1] &lt;&lt; endl;</span><br>        <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <br>&#125;<br></code></pre></td></tr></table></figure>
<p><del>强连通分量的方法明天，啊不白天再说吧，，，溜了溜了</del></p>
<p><del>鸽了一个多月，，从寒假到三月底，，，emmmm</del><br><del>(loading)</del></p>
<p>2019-4-2<br>(end)</p>
]]></content>
      <categories>
        <category>ACM-图论-2-SAT</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM-线性基</title>
    <url>/2019/07/24/ACM-%E7%BA%BF%E6%80%A7%E5%9F%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>最近的几场多校出现了好几次线性基的题目，，会想起之前在尝试西安区域赛的一道区间异或和最大的问题时，当时因为异或的性质知道这道题肯定用线段树来维护区间的最值，但是不知道用什么来处理异或和最大，，即使后来知道了可以用线性基来处理，看了一些博客也因为感觉太难收藏到书签就再也没看过，，，于是这几天，花了差不多4、5天的时间，大概看懂了这部分的内容，感觉这只是一种专门处理异或问题的一个工具，光这个工具没什么意思，，现在的很多题目都是用线性基套各种东西，，比如说很常见的线段树（大多都是询问）、树链剖分（也就是树上路径的异或问题，主要是求LCA来维护）、简单图以及像杭电第一场的那题一样贪心魔改线性基板子等等，，不可能单纯的只是用线性基板子来求一个什么最值，K值，并交等等性质，下面是我这几天学习线性基的简单的一个学习过程的记录。</p>
<span id="more"></span>
<h1 id="数学知识"><a href="#数学知识" class="headerlink" title="数学知识"></a>数学知识</h1><p>关于线性基，虽然看起来这三个字很高深，，但是等大致了解之后，就会发现，这只是一个简单的数学工具，基础知识就是学过的线性代数  <del>（虽然早就忘记了）</del> 。</p>
<p>抛开线性代数，我个人的理解就是 线性基就是一个用来表示给定集合的一个最少的数的集合， 用线性基这个集合，可以表示它所 <em>张成</em> 的一个集合，对于我们遇到的大多数题目来说，就是用一个最少的数的集合 $lb$ 通过 <strong>异或</strong> 的形式可以表示数组（集） $a$ 。</p>
<p>我们可以用 $n$ 个 $2^i$ 这样不同的二进制数组 $a_i$ 的异或来表示所有 $[0 …2^n-1]$ 的任意一个数，例如： $[01], [10]$ 可一个表示 $0, 1, 2, 3$ 。 但如果去掉 $a_i$ 中的一些数，显然能表示的数集就减少了些，，反过来想，对于任意一个数集，我们都可以找到这样一个数集的子集 $a_i$ ，$a_i$ 中的任意数的异或和可以表示这个数集中的每一个数，这样我们相当于对原数集进行了压缩，用一个小的集合表示出来了，，而且显然他的最大大小就是数在二进制表示的位数，</p>
<p>可以这样表示的原因是因为对于一个线性基，他可以看作是一个 向量组 ，这些向量间是线性无关的，也就是说任意一个向量都不可以通过其他的向量表示，也就是线性基中的每一个数都不可以通过其他数的异或得到，，这样的一个向量组的线性组合可以 <strong>张成</strong> 一个线性空间，，，<a href="https://blog.sengxian.com/algorithms/linear-basis">（具体的更加详细的数学知识可以看这里）</a> 或者 <a href="https://zh.wikipedia.org/wiki/%E5%9F%BA_(%E7%B7%9A%E6%80%A7%E4%BB%A3%E6%95%B8">维基</a>)</p>
<h1 id="线性基的作用"><a href="#线性基的作用" class="headerlink" title="线性基的作用"></a>线性基的作用</h1><p>在ACM中大多数的线性基的作用就是维护一段数的异或的各种性质，例如最值、K值、一个数 $x$ 能否可以被这些数的异或和表示、线性基的交并等等。这只是一个工具，主要是和其他知识点的结合。</p>
<h1 id="线性基的基本的板子"><a href="#线性基的基本的板子" class="headerlink" title="线性基的基本的板子"></a>线性基的基本的板子</h1><p>不知道是这个知识点不那么重要还是怎么的，，不像其他的算法，网络上找到的关于线性基好的资料很少很少，，尤其是板子，，没有注释，，新手 <del>（我）</del> 一开始根本看不懂，，只能硬啃前面的数学推导，，然后转化成代码，，，最后自己在借鉴别人的基础上弄出了一份自己的板子，，，<del>（怕不是过几天就忘了写的什么）</del></p>
<h2 id="线性基的表示"><a href="#线性基的表示" class="headerlink" title="线性基的表示"></a>线性基的表示</h2><p>根据定义，线性集就是一个数的集合，而且长度一般题中会给，，ll就是64，int就是32等等，，所以他就是一个数组就行了，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxbase = <span class="hljs-number">35</span>;<br>ll a[maxbase + <span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure>
<h2 id="线性基的插入"><a href="#线性基的插入" class="headerlink" title="线性基的插入"></a>线性基的插入</h2><p>线性基的最基本的操作就是遍历一个数集，，然后挑出其中的线性基，这个过程就是将一个数 $t$ 插入到线性基中，，对于当前线性基 $a$ ，如果它中的元素和 $t$ 线性无关，那么 $t$ 就是一个基底，，把他插入到线性基中，，根据定义，，如果发现是线性相关的，，那么就说明现在的线性基 $a$ 可以表示这个数，，一顿操作之后，，$t$ 一定变成了0，，（用这个可以判断是否一个数能被线性基表示，，，</p>
<p>插入的本质就是一个维护线性基矩阵的过程，，有两种维护的形式，，一种就是不管插入的元素对其他元素的影响，，维护一个上三角的线性基矩阵，，这样的时间复杂读低一些； 另一种就是利用高斯消元，，对于一个可以插入的元素，<strong>先用下面的行来消自己，然后用自己消上面几行</strong> ，，这样可以保证插入一个元素后，线性基的矩阵只有插入的那一行对应的那一位是1，，其他的都是零，，也就是一个对角矩阵。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">insert</span><span class="hljs-params">(ll t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//暴力插入一个数，维护的是一个上三角型的线性基矩阵，时间复杂度低，当待插入元素能插入时，返回true</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(t &amp; (<span class="hljs-number">1ll</span> &lt;&lt; i))<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!a[i])<br>            &#123;<br>                a[i] = t;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            t ^= a[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(t == <span class="hljs-number">0</span>)flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">query</span><span class="hljs-params">(ll t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 询问t是否可以被当前线性基表示，不插入</span><br>    <span class="hljs-keyword">if</span>(t &gt; queryMax())<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(t == <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(t &amp; (<span class="hljs-number">1ll</span> &lt;&lt; i))<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!a[i])<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            t ^= a[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(ll t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//插入一个线性基，利用高斯消元法维护一个对角矩阵</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(t &gt;&gt; i &amp; <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(a[i])t ^= a[i];<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                a[i] = t;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; --j)<span class="hljs-keyword">if</span>(a[j] &amp;&amp; (a[i] &gt;&gt; j &amp; <span class="hljs-number">1</span>))a[i] ^= a[j];<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= maxbase; ++j)<span class="hljs-keyword">if</span>(a[j] &gt;&gt; j &amp; <span class="hljs-number">1</span>)a[j] ^= a[i];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="线性基最值"><a href="#线性基最值" class="headerlink" title="线性基最值"></a>线性基最值</h2><ul>
<li>观察线性基，显然对于这个线性集表示的集合，他的最低那一行表示的元素一定是表示的数集异或的最小值，，所以只要从低到高返回第一非零的基底就可以了，，（注意判断0的情况）；</li>
<li>对于最大值，我们只要遍历整个线性基，如果当前元素 $a_i$ 异或上后答案变大，就异或这一位，</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//询问最值</span><br><span class="hljs-function">ll <span class="hljs-title">queryMax</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        <span class="hljs-keyword">if</span>((ret ^ a[i]) &gt; ret)<br>            ret ^= a[i];<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">queryMin</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= maxbase; ++i)<br>        <span class="hljs-keyword">if</span>(a[i])<br>            <span class="hljs-keyword">return</span> a[i];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="多个线性基的并、交"><a href="#多个线性基的并、交" class="headerlink" title="多个线性基的并、交"></a>多个线性基的并、交</h2><h3 id="并："><a href="#并：" class="headerlink" title="并："></a>并：</h3><p>并好说，直接暴力加到一个线性基中就行了，，反正不能插入的会在插入过程中变成0，不用管</p>
<h3 id="交："><a href="#交：" class="headerlink" title="交："></a>交：</h3><p>交是牛客第四场多校才遇到的，，<del>（整个线性基也是多校才遇到）</del> ，（交的板子只找到一个看得懂的），，，交的大致思路是这样的 <del>（瞎猜ing）</del>： </p>
<ul>
<li>记第一个线性基为 $l_1$ ，另一个是 $l_2$ ，一个初始是 $l_1$ 的线性基 $all$ ，一个标记线性基 $full$ （应该。。）</li>
<li>然后每次从 $l_2$ 中拿一个基 $v$ ，如果它能在 $all$ 中表示出来，也就是多次异或后的值为0，，那么就根据标记来插入这个 $v$ ，表示他是交集的一个。。</li>
</ul>
<h3 id="板子："><a href="#板子：" class="headerlink" title="板子："></a>板子：</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">LinearBasis <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">const</span> LinearBasis &amp;l1, <span class="hljs-keyword">const</span> LinearBasis &amp;l2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 得到两个线性基的并</span><br>    LinearBasis ret = l1;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        <span class="hljs-keyword">if</span>(l2.a[i])<br>            ret.insert(l2.a[i]);<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function">LinearBasis <span class="hljs-title">intersection</span><span class="hljs-params">(<span class="hljs-keyword">const</span> LinearBasis &amp;l1, <span class="hljs-keyword">const</span> LinearBasis &amp;l2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//得到两个线性基的交</span><br>    LinearBasis all, ret, full;<br>    ret.clear();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>    &#123;<br>        all.a[i] = l1.a[i];<br>        full.a[i] = <span class="hljs-number">1ll</span> &lt;&lt; i;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(l2.a[i])<br>        &#123;<br>            ll v = l2.a[i], k = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = maxbase; j &gt;= <span class="hljs-number">0</span>; --j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(v &amp; (<span class="hljs-number">1ll</span> &lt;&lt; j))<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(all.a[j])<br>                    &#123;<br>                        v ^= all.a[j];<br>                        k ^= full.a[j];<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        <span class="hljs-comment">// l2&#x27;s basis is not in l1&#x27;s;</span><br>                        flag = <span class="hljs-literal">false</span>;<br>                        all.a[j] = v;<br>                        full.a[j] = k;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag)<br>            &#123;<br>                ll v = <span class="hljs-number">0</span>; <span class="hljs-comment">// get intersection by k;</span><br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = maxbase; j &gt;= <span class="hljs-number">0</span>; --j)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(k &amp; (<span class="hljs-number">1ll</span> &lt;&lt; j))<br>                    &#123;<br>                        v ^= l1.a[j];<br>                    &#125;<br>                &#125;<br>                ret.insert(v);  <span class="hljs-comment">//save ans</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="线性基求第-K-大"><a href="#线性基求第-K-大" class="headerlink" title="线性基求第 K 大"></a>线性基求第 K 大</h2><p>（留坑，，，还没有做题。。。</p>
<h1 id="线性基完整板子"><a href="#线性基完整板子" class="headerlink" title="线性基完整板子"></a>线性基完整板子</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinearBasis</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxbase = <span class="hljs-number">35</span>;<br>    <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>    ll a[maxbase + <span class="hljs-number">1</span>];<br>    LinearBasis()<br>    &#123;<br>        <span class="hljs-comment">// memset(a, 0, sizeof a);</span><br>    &#125;<br>    LinearBasis(ll *x, <span class="hljs-keyword">int</span> n)<br>    &#123;<br>        LinearBasis();<br>        build(x, n); <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(ll *x, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            insert(x[i]);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> a);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">insert</span><span class="hljs-params">(ll t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//暴力插入一个数，维护的是一个上三角型的线性基矩阵，时间复杂度低，当待插入元素能插入时，返回true</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t &amp; (<span class="hljs-number">1ll</span> &lt;&lt; i))<br>            &#123;<br>                <span class="hljs-keyword">if</span>(!a[i])<br>                &#123;<br>                    a[i] = t;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                t ^= a[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">0</span>)flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">query</span><span class="hljs-params">(ll t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 询问t是否可以被当前线性基表示，不插入</span><br>        <span class="hljs-keyword">if</span>(t &gt; queryMax())<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t &amp; (<span class="hljs-number">1ll</span> &lt;&lt; i))<br>            &#123;<br>                <span class="hljs-keyword">if</span>(!a[i])<br>                &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>                t ^= a[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(ll t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//插入一个线性基，利用高斯消元法维护一个对角矩阵</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t &gt;&gt; i &amp; <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(a[i])t ^= a[i];<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    a[i] = t;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; --j)<span class="hljs-keyword">if</span>(a[j] &amp;&amp; (a[i] &gt;&gt; j &amp; <span class="hljs-number">1</span>))a[i] ^= a[j];<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= maxbase; ++j)<span class="hljs-keyword">if</span>(a[j] &gt;&gt; j &amp; <span class="hljs-number">1</span>)a[j] ^= a[i];<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function">LinearBasis <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">const</span> LinearBasis &amp;l1, <span class="hljs-keyword">const</span> LinearBasis &amp;l2)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 得到两个线性基的并</span><br>        LinearBasis ret = l1;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-keyword">if</span>(l2.a[i])<br>                ret.insert(l2.a[i]);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-function">LinearBasis <span class="hljs-title">intersection</span><span class="hljs-params">(<span class="hljs-keyword">const</span> LinearBasis &amp;l1, <span class="hljs-keyword">const</span> LinearBasis &amp;l2)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//得到两个线性基的交</span><br>        LinearBasis all, ret, full;<br>        ret.clear();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            all.a[i] = l1.a[i];<br>            full.a[i] = <span class="hljs-number">1ll</span> &lt;&lt; i;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(l2.a[i])<br>            &#123;<br>                ll v = l2.a[i], k = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = maxbase; j &gt;= <span class="hljs-number">0</span>; --j)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(v &amp; (<span class="hljs-number">1ll</span> &lt;&lt; j))<br>                    &#123;<br>                        <span class="hljs-keyword">if</span>(all.a[j])<br>                        &#123;<br>                            v ^= all.a[j];<br>                            k ^= full.a[j];<br>                        &#125;<br>                        <span class="hljs-keyword">else</span><br>                        &#123;<br>                            <span class="hljs-comment">// l2&#x27;s basis is not in l1&#x27;s;</span><br>                            flag = <span class="hljs-literal">false</span>;<br>                            all.a[j] = v;<br>                            full.a[j] = k;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(flag)<br>                &#123;<br>                    ll v = <span class="hljs-number">0</span>; <span class="hljs-comment">// get intersection by k;</span><br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = maxbase; j &gt;= <span class="hljs-number">0</span>; --j)<br>                    &#123;<br>                        <span class="hljs-keyword">if</span>(k &amp; (<span class="hljs-number">1ll</span> &lt;&lt; j))<br>                        &#123;<br>                            v ^= l1.a[j];<br>                        &#125;<br>                    &#125;<br>                    ret.insert(v);  <span class="hljs-comment">//save ans</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-comment">//询问最值</span><br>    <span class="hljs-function">ll <span class="hljs-title">queryMax</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        ll ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-keyword">if</span>((ret ^ a[i]) &gt; ret)<br>                ret ^= a[i];<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-function">ll <span class="hljs-title">queryMin</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= maxbase; ++i)<br>            <span class="hljs-keyword">if</span>(a[i])<br>                <span class="hljs-keyword">return</span> a[i];<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>
<h1 id="线性基练习"><a href="#线性基练习" class="headerlink" title="线性基练习"></a>线性基练习</h1><h2 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a><a href="https://www.luogu.org/problem/P3812">模板题</a></h2><p><a href="https://www.luogu.org/problem/P3812">模板题</a></p>
<p>熟悉下板子，，敲一下就可以了，，</p>
<h2 id="贪心-线性基插入元素的性质"><a href="#贪心-线性基插入元素的性质" class="headerlink" title="贪心+线性基插入元素的性质"></a><a href="https://www.luogu.org/problem/P4570">贪心+线性基插入元素的性质</a></h2><p><a href="https://www.luogu.org/problem/P4570">贪心+线性基插入元素的性质</a></p>
<p>对于每个数集中的数，有一个第二权值，要保证选的数集中的数异或和不为零的情况下权值最大，，只要选权值从大到小且下标异或和不为零的元素的贡献就可以了，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// luogu-judger-enable-o2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;iostream&gt;</span><br><span class="hljs-comment">// #include &lt;cstdio&gt;</span><br><span class="hljs-comment">// #include &lt;cstdlib&gt;</span><br><span class="hljs-comment">// #include &lt;string.h&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;algorithm&gt;</span><br><span class="hljs-comment">// #include &lt;set&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-comment">// #include &lt;ctime&gt;</span><br><span class="hljs-comment">// #include &lt;random&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinearBasis</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxbase = <span class="hljs-number">62</span>;<br>    ll a[maxbase + <span class="hljs-number">1</span>];<br>    LinearBasis()<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> a);<br>    &#125;<br>    LinearBasis(ll *x, <span class="hljs-keyword">int</span> n)<br>    &#123;<br>        LinearBasis();<br>        build(x, n);   <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(ll *x, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            insert(x[i]);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">insert</span><span class="hljs-params">(ll t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t &amp; (<span class="hljs-number">1ll</span> &lt;&lt; i))<br>            &#123;<br>                <span class="hljs-keyword">if</span>(!a[i])<br>                &#123;<br>                    a[i] = t;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                t ^= a[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(ll t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t &gt;&gt; i &amp; <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(a[i])t ^= a[i];<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    a[i] = t;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; --j)<span class="hljs-keyword">if</span>(a[j] &amp;&amp; (a[i] &gt;&gt; j &amp; <span class="hljs-number">1</span>))a[i] ^= a[j];<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= maxbase; ++j)<span class="hljs-keyword">if</span>(a[j] &gt;&gt; j &amp; <span class="hljs-number">1</span>)a[j] ^= a[i];<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function">LinearBasis <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">const</span> LinearBasis &amp;l1, <span class="hljs-keyword">const</span> LinearBasis &amp;l2)</span></span><br><span class="hljs-function">    </span>&#123;<br>        LinearBasis ret = l1;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-keyword">if</span>(l2.a[i])<br>                ret.insert(l2.a[i]);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-function">ll <span class="hljs-title">queryMax</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        ll ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-keyword">if</span>((ret ^ a[i]) &gt; ret)<br>                ret ^= a[i];<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-function">ll <span class="hljs-title">queryMin</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= maxbase; ++i)<br>            <span class="hljs-keyword">if</span>(a[i])<br>                <span class="hljs-keyword">return</span> a[i];<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br><span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, ll&gt; p[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">int</span> n; <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; p[i].second &gt;&gt; p[i].first;<br>    sort(p + <span class="hljs-number">1</span>, p + <span class="hljs-number">1</span> + n, greater&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, ll&gt;&gt;());<br>    LinearBasis l;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-keyword">if</span>(l.insert(p[i].second))ans += p[i].first;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="线性基数量组合"><a href="#线性基数量组合" class="headerlink" title="线性基数量组合"></a><a href="https://www.luogu.org/problem/P3857">线性基数量组合</a></h2><p><a href="https://www.luogu.org/problem/P3857">线性基数量组合</a></p>
<p>题目问一些 $01$ 序列可以表示的数（状态）有几种，，就是线性基的大小的2次方，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// luogu-judger-enable-o2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;iostream&gt;</span><br><span class="hljs-comment">// #include &lt;cstdio&gt;</span><br><span class="hljs-comment">// #include &lt;cstdlib&gt;</span><br><span class="hljs-comment">// #include &lt;string.h&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;algorithm&gt;</span><br><span class="hljs-comment">// #include &lt;set&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-comment">// #include &lt;ctime&gt;</span><br><span class="hljs-comment">// #include &lt;random&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinearBasis</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxbase = <span class="hljs-number">62</span>;<br>    ll a[maxbase + <span class="hljs-number">1</span>];<br>    LinearBasis()<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> a);<br>    &#125;<br>    LinearBasis(ll *x, <span class="hljs-keyword">int</span> n)<br>    &#123;<br>        LinearBasis();<br>        build(x, n);   <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(ll *x, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            insert(x[i]);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">insert</span><span class="hljs-params">(ll t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t &amp; (<span class="hljs-number">1ll</span> &lt;&lt; i))<br>            &#123;<br>                <span class="hljs-keyword">if</span>(!a[i])<br>                &#123;<br>                    a[i] = t;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                t ^= a[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(ll t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t &gt;&gt; i &amp; <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(a[i])t ^= a[i];<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    a[i] = t;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; --j)<span class="hljs-keyword">if</span>(a[j] &amp;&amp; (a[i] &gt;&gt; j &amp; <span class="hljs-number">1</span>))a[i] ^= a[j];<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= maxbase; ++j)<span class="hljs-keyword">if</span>(a[j] &gt;&gt; j &amp; <span class="hljs-number">1</span>)a[j] ^= a[i];<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function">LinearBasis <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">const</span> LinearBasis &amp;l1, <span class="hljs-keyword">const</span> LinearBasis &amp;l2)</span></span><br><span class="hljs-function">    </span>&#123;<br>        LinearBasis ret = l1;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-keyword">if</span>(l2.a[i])<br>                ret.insert(l2.a[i]);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-function">ll <span class="hljs-title">queryMax</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        ll ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-keyword">if</span>((ret ^ a[i]) &gt; ret)<br>                ret ^= a[i];<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-function">ll <span class="hljs-title">queryMin</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= maxbase; ++i)<br>            <span class="hljs-keyword">if</span>(a[i])<br>                <span class="hljs-keyword">return</span> a[i];<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">char</span> ch[<span class="hljs-number">55</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">int</span> n, m; <span class="hljs-built_in">cin</span> &gt;&gt; m &gt;&gt; n;<br>    LinearBasis l;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; ch;<br>        ll t = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= m - <span class="hljs-number">1</span>; ++j)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(ch[j] == <span class="hljs-string">&#x27;O&#x27;</span>)t |= <span class="hljs-number">1</span>;<br>            t &lt;&lt;= <span class="hljs-number">1</span>;<br>        &#125;<br>        t &gt;&gt;= <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(l.insert(t))++ans;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; (<span class="hljs-number">1ll</span> &lt;&lt; ans) % <span class="hljs-number">2008</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="LCA树链剖分暴力合并线性基求路径间点权异或和最大"><a href="#LCA树链剖分暴力合并线性基求路径间点权异或和最大" class="headerlink" title="LCA树链剖分暴力合并线性基求路径间点权异或和最大"></a><a href="https://www.luogu.org/problem/P3292">LCA树链剖分暴力合并线性基求路径间点权异或和最大</a></h2><p><a href="https://www.luogu.org/problem/P3292">LCA树链剖分暴力合并线性基求路径间点权异或和最大</a></p>
<p>这题的大意是一个树，有点权，问你对于树上任意两点的路径 $u-&gt;v$ 的点权的异或和的最大值是多少，，</p>
<p>树上任意两点间的路径就是问 LCA ，，所以用那几种求LCA的方法就可以了，，之前看过树链剖分，，但是忘得差不多了，，捡起来重学了下，，</p>
<p>就和LCA的题一样，不过是线段树等数据结构维护的之不同了，，以前是和、最值什么的，，这题改成线性基就可以了，，维护一条路径的线性基，，然后进行线性基的合并就可以了，，，<del>（数据数组开成int炸了好几发re</del></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// luogu-judger-enable-o2</span><br><span class="hljs-comment">// luogu-judger-enable-o2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;iostream&gt;</span><br><span class="hljs-comment">// #include &lt;cstdio&gt;</span><br><span class="hljs-comment">// #include &lt;cstdlib&gt;</span><br><span class="hljs-comment">// #include &lt;string.h&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;algorithm&gt;</span><br><span class="hljs-comment">// #include &lt;set&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-comment">// #include &lt;ctime&gt;</span><br><span class="hljs-comment">// #include &lt;random&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinearBasis</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxbase = <span class="hljs-number">63</span>;<br>    ll a[maxbase + <span class="hljs-number">1</span>];<br>    LinearBasis()<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> a);<br>    &#125;<br>    LinearBasis(ll *x, <span class="hljs-keyword">int</span> n)<br>    &#123;<br>        LinearBasis();<br>        build(x, n);   <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(ll *x, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            insert(x[i]);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> a);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">insert</span><span class="hljs-params">(ll t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t &amp; (<span class="hljs-number">1ll</span> &lt;&lt; i))<br>            &#123;<br>                <span class="hljs-keyword">if</span>(!a[i])<br>                &#123;<br>                    a[i] = t;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                t ^= a[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(ll t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t &gt;&gt; i &amp; <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(a[i])t ^= a[i];<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    a[i] = t;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; --j)<span class="hljs-keyword">if</span>(a[j] &amp;&amp; (a[i] &gt;&gt; j &amp; <span class="hljs-number">1</span>))a[i] ^= a[j];<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= maxbase; ++j)<span class="hljs-keyword">if</span>(a[j] &gt;&gt; j &amp; <span class="hljs-number">1</span>)a[j] ^= a[i];<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function">LinearBasis <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">const</span> LinearBasis &amp;l1, <span class="hljs-keyword">const</span> LinearBasis &amp;l2)</span></span><br><span class="hljs-function">    </span>&#123;<br>        LinearBasis ret = l1;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-keyword">if</span>(l2.a[i])<br>                ret.insert(l2.a[i]);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">const</span> LinearBasis &amp;r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-keyword">if</span>(r.a[i])<br>                insert(r.a[i]);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-function">ll <span class="hljs-title">queryMax</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        ll ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-keyword">if</span>((ret ^ a[i]) &gt; ret)<br>                ret ^= a[i];<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-function">ll <span class="hljs-title">queryMin</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= maxbase; ++i)<br>            <span class="hljs-keyword">if</span>(a[i])<br>                <span class="hljs-keyword">return</span> a[i];<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt;<br>&#125;edge[maxn * <span class="hljs-number">3</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn * <span class="hljs-number">3</span>];<br><span class="hljs-keyword">int</span> top[maxn * <span class="hljs-number">3</span>];<br><span class="hljs-keyword">int</span> fa[maxn * <span class="hljs-number">3</span>];<br><span class="hljs-keyword">int</span> dep[maxn * <span class="hljs-number">3</span>];<br><span class="hljs-keyword">int</span> num[maxn * <span class="hljs-number">3</span>];<br><span class="hljs-keyword">int</span> p[maxn * <span class="hljs-number">3</span>], fp[maxn * <span class="hljs-number">3</span>];<br><span class="hljs-keyword">int</span> son[maxn * <span class="hljs-number">3</span>];<br><span class="hljs-keyword">int</span> pos;<br>ll a[maxn], w[maxn &lt;&lt; <span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>    pos = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(son, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> son);<br>    <span class="hljs-built_in">memset</span>(w, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> w);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++; <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> pre, <span class="hljs-keyword">int</span> d)</span></span><br><span class="hljs-function"></span>&#123;<br>    dep[u] = d;<br>    fa[u] = pre;<br>    num[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(v != pre)<br>        &#123;<br>            dfs1(v, u, d + <span class="hljs-number">1</span>);<br>            num[u] += num[v];<br>            <span class="hljs-keyword">if</span>(son[u] == <span class="hljs-number">-1</span> || num[v] &gt; num[son[u]])<br>                son[u] = v;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> sp)</span></span><br><span class="hljs-function"></span>&#123;<br>    top[u] = sp;<br>    p[u] = ++pos;<br>    fp[p[u]] = u;<br>    w[pos] = a[u];<br>    <span class="hljs-keyword">if</span>(son[u] == <span class="hljs-number">-1</span>)<span class="hljs-keyword">return</span>;<br>    dfs2(son[u], sp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(v != son[u] &amp;&amp; v != fa[u])<br>            dfs2(v, v);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> l, r;<br>    LinearBasis lb;<br>&#125;node[maxn * <span class="hljs-number">6</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt)</span></span><br><span class="hljs-function"></span>&#123;<br>    node[rt].lb.merge(node[rt &lt;&lt; <span class="hljs-number">1</span>].lb);<br>    node[rt].lb.merge(node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].lb);<br>    <span class="hljs-comment">// cout &lt;&lt; endl;for(int i = 0; i &lt;= 5; i ++)cout &lt;&lt; node[rt &lt;&lt; 1].lb.a[i] &lt;&lt; &quot;-&quot;;cout &lt;&lt; endl &lt;&lt; endl;</span><br>    <span class="hljs-comment">// cout &lt;&lt; endl;for(int i = 0; i &lt;= 5; i ++)cout &lt;&lt; node[rt &lt;&lt; 1 | 1].lb.a[i] &lt;&lt; &quot;+&quot;;cout &lt;&lt; endl &lt;&lt; endl;</span><br>    <span class="hljs-comment">// cout &lt;&lt; endl;for(int i = 0; i &lt;= 5; i ++)cout &lt;&lt; node[rt].lb.a[i] &lt;&lt; &quot; &quot;;cout &lt;&lt; endl &lt;&lt; endl;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    node[rt].l = l; node[rt].r = r;<br>    <span class="hljs-keyword">if</span>(l == r)&#123;node[rt].lb.insert(w[l]);<span class="hljs-keyword">return</span>;&#125;<br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    build(rt &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    build(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    pushup(rt);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br>LinearBasis ret;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(node[rt].l == l &amp;&amp; node[rt].r == r)<br>    &#123;<br>        ret.merge(node[rt].lb);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = node[rt].l + node[rt].r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(r &lt;= mid)query(rt &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l &gt; mid)query(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">else</span> query(rt &lt;&lt; <span class="hljs-number">1</span>, l, mid), query(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">getAns</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> f1 = top[u], f2 = top[v];<br>    LinearBasis ans;<br>    <span class="hljs-keyword">while</span>(f1 != f2)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(dep[f1] &lt; dep[f2])<br>        &#123;<br>            swap(f1, f2);<br>            swap(u, v);<br>        &#125;<br>        ret.clear();<br>        query(<span class="hljs-number">1</span>, p[f1], p[u]);<br>        <span class="hljs-comment">// cout &lt;&lt; endl; cout &lt;&lt; p[f1] &lt;&lt; &quot; &quot; &lt;&lt; p[u] &lt;&lt; &quot; &quot; &lt;&lt; f1 &lt;&lt; &quot; &quot; &lt;&lt; u &lt;&lt; endl;for(int i = 0; i &lt;= 5; ++i)cout &lt;&lt; ret.a[i] &lt;&lt; &quot; &quot;;cout&lt;&lt; endl;</span><br>        <span class="hljs-comment">// cout &lt;&lt;ret.queryMax() &lt;&lt; &quot;----------------------&quot; &lt;&lt; endl;</span><br>        ans.merge(ret);<br>        u = fa[f1]; f1 = top[u];<br>    &#125;<br>    ret.clear();<br>    <span class="hljs-keyword">if</span>(dep[u] &gt; dep[v])swap(u, v);<br>    query(<span class="hljs-number">1</span>, p[u], p[v]);<br>    ans.merge(ret);<br>    <span class="hljs-keyword">return</span> ans.queryMax();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    init();<br>    <span class="hljs-keyword">int</span> n, q; <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>    <span class="hljs-keyword">int</span> u, v;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;<br>        addedge(u, v);<br>        addedge(v, u);<br>    &#125;<br>    dfs1(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>    dfs2(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    build(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, pos);<br>    <span class="hljs-keyword">while</span>(q--)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; getAns(u, v) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-comment">// for(int i = 5; i &gt;= 0; --i)</span><br>    <span class="hljs-comment">//     cout &lt;&lt; node[1].lb.a[i] &lt;&lt; endl;</span><br>    <span class="hljs-comment">// ret.clear();</span><br>    <span class="hljs-comment">// query(1, p[4], p[4]);</span><br>    <span class="hljs-comment">// cout &lt;&lt; ret.queryMax() &lt;&lt; endl;</span><br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="牛客第四场多校xor"><a href="#牛客第四场多校xor" class="headerlink" title="牛客第四场多校xor"></a><a href="https://ac.nowcoder.com/acm/contest/884/B">牛客第四场多校xor</a></h2><p><a href="https://ac.nowcoder.com/acm/contest/884/B">牛客第四场多校xor</a></p>
<p>这题求得是一个区间线性基的并，，题目大意是给你一堆数集 $a_i$ ，， 然后一些询问 $l, r, x$ 问你 $a_l….a_r$ 的每一个集合能否异或出 $x$ ，，，</p>
<p>暴力线性基查询肯定会T <del>（说的就是我，，，</del>，，</p>
<p>询问的是一个区间的每一个集合能否可以异或出数 $x$ ，，反过来想，，就是存在不存在一组线性基可以表示 $x$ 的情况下同时是每一组的一个子集，，，也就是说这些集合线性基的交能否表示出 $x$ ，， 一个线性基能否表示数很简单，，关键就是线性基的求交，，，弄好这个就可以用线段树维护区间的线性基的交，，，对于询问，最直接的想法就是求出询问区间的交，然后查看是否可以表示出数 $x$ ，，但是这样没必要，可能会T ，，，<del>（别问我为什么，，，</del> ，，只要判断每一个询问的子区间的交是否可以表示即可，，把这些区间结果合并与就是答案，，，</p>
<p><del>（有一次把ll写成int，疯狂WA，， 还有线性基的交魔改代码爆炸</del> ，，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;iostream&gt;</span><br><span class="hljs-comment">// #include &lt;cstdio&gt;</span><br><span class="hljs-comment">// #include &lt;cstdlib&gt;</span><br><span class="hljs-comment">// #include &lt;string.h&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;algorithm&gt;</span><br><span class="hljs-comment">// #include &lt;set&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-comment">// #include &lt;ctime&gt;</span><br><span class="hljs-comment">// #include &lt;random&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">5e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br>  <br>  <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinearBasis</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxbase = <span class="hljs-number">35</span>;<br>    <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>    ll a[maxbase + <span class="hljs-number">1</span>];<br>    LinearBasis()<br>    &#123;<br>        <span class="hljs-comment">// memset(a, 0, sizeof a);</span><br>    &#125;<br>    LinearBasis(ll *x, <span class="hljs-keyword">int</span> n)<br>    &#123;<br>        LinearBasis();<br>        build(x, n); <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(ll *x, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            insert(x[i]);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> a);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">insert</span><span class="hljs-params">(ll t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t &amp; (<span class="hljs-number">1ll</span> &lt;&lt; i))<br>            &#123;<br>                <span class="hljs-keyword">if</span>(!a[i])<br>                &#123;<br>                    a[i] = t;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                t ^= a[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">0</span>)flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">query</span><span class="hljs-params">(ll t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(t &gt; queryMax())<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t &amp; (<span class="hljs-number">1ll</span> &lt;&lt; i))<br>            &#123;<br>                <span class="hljs-keyword">if</span>(!a[i])<br>                &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>                t ^= a[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(ll t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t &gt;&gt; i &amp; <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(a[i])t ^= a[i];<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    a[i] = t;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; --j)<span class="hljs-keyword">if</span>(a[j] &amp;&amp; (a[i] &gt;&gt; j &amp; <span class="hljs-number">1</span>))a[i] ^= a[j];<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= maxbase; ++j)<span class="hljs-keyword">if</span>(a[j] &gt;&gt; j &amp; <span class="hljs-number">1</span>)a[j] ^= a[i];<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function">LinearBasis <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">const</span> LinearBasis &amp;l1, <span class="hljs-keyword">const</span> LinearBasis &amp;l2)</span></span><br><span class="hljs-function">    </span>&#123;<br>        LinearBasis ret = l1;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-keyword">if</span>(l2.a[i])<br>                ret.insert(l2.a[i]);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-function">LinearBasis <span class="hljs-title">intersection</span><span class="hljs-params">(<span class="hljs-keyword">const</span> LinearBasis &amp;l1, <span class="hljs-keyword">const</span> LinearBasis &amp;l2)</span></span><br><span class="hljs-function">    </span>&#123;<br>        LinearBasis all, ret, full;<br>        ret.clear();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            all.a[i] = l1.a[i];<br>            full.a[i] = <span class="hljs-number">1ll</span> &lt;&lt; i;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(l2.a[i])<br>            &#123;<br>                ll v = l2.a[i], k = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = maxbase; j &gt;= <span class="hljs-number">0</span>; --j)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(v &amp; (<span class="hljs-number">1ll</span> &lt;&lt; j))<br>                    &#123;<br>                        <span class="hljs-keyword">if</span>(all.a[j])<br>                        &#123;<br>                            v ^= all.a[j];<br>                            k ^= full.a[j];<br>                        &#125;<br>                        <span class="hljs-keyword">else</span><br>                        &#123;<br>                            <span class="hljs-comment">// l2&#x27;s basis is not in l1&#x27;s;</span><br>                            flag = <span class="hljs-literal">false</span>;<br>                            all.a[j] = v;<br>                            full.a[j] = k;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(flag)<br>                &#123;<br>                    ll v = <span class="hljs-number">0</span>; <span class="hljs-comment">// get intersection by k;</span><br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = maxbase; j &gt;= <span class="hljs-number">0</span>; --j)<br>                    &#123;<br>                        <span class="hljs-keyword">if</span>(k &amp; (<span class="hljs-number">1ll</span> &lt;&lt; j))<br>                        &#123;<br>                            v ^= l1.a[j];<br>                        &#125;<br>                    &#125;<br>                    ret.insert(v);  <span class="hljs-comment">//save ans</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-function">ll <span class="hljs-title">queryMax</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        ll ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-keyword">if</span>((ret ^ a[i]) &gt; ret)<br>                ret ^= a[i];<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-function">ll <span class="hljs-title">queryMin</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= maxbase; ++i)<br>            <span class="hljs-keyword">if</span>(a[i])<br>                <span class="hljs-keyword">return</span> a[i];<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;lb[maxn];<br>  <br>  <br>LinearBasis node[maxn &lt;&lt; <span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt)</span></span><br><span class="hljs-function"></span>&#123;<br>    node[rt] = node[rt].intersection(node[rt &lt;&lt; <span class="hljs-number">1</span>], node[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l == r)<br>    &#123;<br>        node[rt] = lb[l];<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    build(rt &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    build(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    pushup(rt);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br>LinearBasis ans;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R, ll x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)<br>    &#123;<br>        <span class="hljs-keyword">return</span> node[rt].query(x);<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">bool</span> flag1, flag2;<br>    flag1 = flag2 = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span>(L &lt;= mid)flag1 = query(rt &lt;&lt; <span class="hljs-number">1</span>, l, mid, L, R, x);<br>    <span class="hljs-keyword">if</span>(R &gt;  mid)flag2 = query(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, L, R, x);<br>    <span class="hljs-keyword">return</span> flag1 &amp; flag2;<br>&#125;<br>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>  <br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">int</span> num; <span class="hljs-built_in">cin</span> &gt;&gt; num;<br>        ll x;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= num; ++j)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; x;<br>            lb[i].insert(x);<br>        &#125;<br>    &#125;<br>    build(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-keyword">int</span> l, r;ll x;<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; x;<br>        <span class="hljs-keyword">if</span>(query(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r, x))<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>      <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="杭电多校第一场Operation"><a href="#杭电多校第一场Operation" class="headerlink" title="杭电多校第一场Operation"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6579">杭电多校第一场Operation</a></h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6579">杭电多校第一场Operation</a></p>
<p>这题的大意是对于给定的数组，有两个操作，一个是询问一个区间的异或和的最大值，，另一个是在这个数组后面增加一个值，，，</p>
<p>这题也是诱使我学线性基的原因，，</p>
<p>题解说直接数据结构维护会T，，我也没试，，正解是贪心的维护一个 <strong>前缀线性基</strong> ，在每插入一个数时，，如果能插入，，尽可能的插到高位，，（这样可以保证靠近r的可以插入的数尽可能的在高位，，</p>
<p>也就是说，，对于任意的任意的一个区间，，不管它的长度多大，，，他的线性基最多是30个（针对这题），，，所以我们只需要维护r前面出现的较晚的新基，，这样每次询问，，都看得在r处的线性基中出现比l晚的基即可，，为了实现这个过程，，，给每一个线性基中的每一位都加一个标志位 $p_i$ ，， 在插入一个新的数时，，，尽可能的把他放在高位，，，（碰到一个可以插入的位置时，把他插在这里，，然后下推其它的基，，，</p>
<p>这题不能莽，直接开ll，，，会mle，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;iostream&gt;</span><br><span class="hljs-comment">// #include &lt;cstdio&gt;</span><br><span class="hljs-comment">// #include &lt;cstdlib&gt;</span><br><span class="hljs-comment">// #include &lt;string.h&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;algorithm&gt;</span><br><span class="hljs-comment">// #include &lt;set&gt;</span><br><span class="hljs-comment">// #include &lt;vector&gt;</span><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;stack&gt;</span><br><span class="hljs-comment">// #include &lt;ctime&gt;</span><br><span class="hljs-comment">// #include &lt;random&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">5e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br>  <br>  <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinearBasis</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> type;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxbase = <span class="hljs-number">30</span>;<br>    <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>    type a[maxbase + <span class="hljs-number">1</span>];<br>    type p[maxbase + <span class="hljs-number">1</span>];<br>    LinearBasis()<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> a);<br>        <span class="hljs-built_in">memset</span>(p, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> p);<br>    &#125;<br>    LinearBasis(type *x, <span class="hljs-keyword">int</span> n)<br>    &#123;<br>        LinearBasis();<br>        build(x, n); <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(type *x, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            insert(x[i]);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> a);<br>        <span class="hljs-built_in">memset</span>(p, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> p);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">insert</span><span class="hljs-params">(type t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//暴力插入一个数，维护的是一个上三角型的线性基矩阵，时间复杂度低，当待插入元素能插入时，返回true</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t &amp; (<span class="hljs-number">1ll</span> &lt;&lt; i))<br>            &#123;<br>                <span class="hljs-keyword">if</span>(!a[i])<br>                &#123;<br>                    a[i] = t;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                t ^= a[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">0</span>)flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">insert2</span><span class="hljs-params">(type t, type pos)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t &amp; (<span class="hljs-number">1ll</span> &lt;&lt; i))<br>            &#123;<br>                <span class="hljs-keyword">if</span>(!a[i])<br>                &#123;<br>                    a[i] = t;<br>                    p[i] = pos;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pos &gt; p[i])<br>                &#123;<br>                    swap(pos, p[i]);<br>                    swap(t, a[i]);<br>                &#125;<br>                t ^= a[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">0</span>)flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">query</span><span class="hljs-params">(type t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 询问t是否可以被当前线性基表示，不插入</span><br>        <span class="hljs-keyword">if</span>(t &gt; queryMax())<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t &amp; (<span class="hljs-number">1ll</span> &lt;&lt; i))<br>            &#123;<br>                <span class="hljs-keyword">if</span>(!a[i])<br>                &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>                t ^= a[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(type t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//插入一个线性基，利用高斯消元法维护一个对角矩阵</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t &gt;&gt; i &amp; <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(a[i])t ^= a[i];<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    a[i] = t;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; --j)<span class="hljs-keyword">if</span>(a[j] &amp;&amp; (a[i] &gt;&gt; j &amp; <span class="hljs-number">1</span>))a[i] ^= a[j];<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= maxbase; ++j)<span class="hljs-keyword">if</span>(a[j] &gt;&gt; j &amp; <span class="hljs-number">1</span>)a[j] ^= a[i];<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function">LinearBasis <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">const</span> LinearBasis &amp;l1, <span class="hljs-keyword">const</span> LinearBasis &amp;l2)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 得到两个线性基的并</span><br>        LinearBasis ret = l1;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-keyword">if</span>(l2.a[i])<br>                ret.insert(l2.a[i]);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-function">LinearBasis <span class="hljs-title">intersection</span><span class="hljs-params">(<span class="hljs-keyword">const</span> LinearBasis &amp;l1, <span class="hljs-keyword">const</span> LinearBasis &amp;l2)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//得到两个线性基的交</span><br>        LinearBasis all, ret, full;<br>        ret.clear();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            all.a[i] = l1.a[i];<br>            full.a[i] = <span class="hljs-number">1ll</span> &lt;&lt; i;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(l2.a[i])<br>            &#123;<br>                type v = l2.a[i], k = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = maxbase; j &gt;= <span class="hljs-number">0</span>; --j)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(v &amp; (<span class="hljs-number">1ll</span> &lt;&lt; j))<br>                    &#123;<br>                        <span class="hljs-keyword">if</span>(all.a[j])<br>                        &#123;<br>                            v ^= all.a[j];<br>                            k ^= full.a[j];<br>                        &#125;<br>                        <span class="hljs-keyword">else</span><br>                        &#123;<br>                            <span class="hljs-comment">// l2&#x27;s basis is not in l1&#x27;s;</span><br>                            flag = <span class="hljs-literal">false</span>;<br>                            all.a[j] = v;<br>                            full.a[j] = k;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(flag)<br>                &#123;<br>                    type v = <span class="hljs-number">0</span>; <span class="hljs-comment">// get intersection by k;</span><br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = maxbase; j &gt;= <span class="hljs-number">0</span>; --j)<br>                    &#123;<br>                        <span class="hljs-keyword">if</span>(k &amp; (<span class="hljs-number">1ll</span> &lt;&lt; j))<br>                        &#123;<br>                            v ^= l1.a[j];<br>                        &#125;<br>                    &#125;<br>                    ret.insert(v);  <span class="hljs-comment">//save ans</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-comment">//询问最值</span><br>    <span class="hljs-function">type <span class="hljs-title">queryMax</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        type ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-keyword">if</span>((ret ^ a[i]) &gt; ret)<br>                ret ^= a[i];<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-function">type <span class="hljs-title">queryMax</span><span class="hljs-params">(type l)</span></span><br><span class="hljs-function">    </span>&#123;<br>        type ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-keyword">if</span>((ret ^ a[i]) &gt; ret &amp;&amp; l &lt;= p[i])<br>                ret ^= a[i];<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-function">type <span class="hljs-title">queryMin</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= maxbase; ++i)<br>            <span class="hljs-keyword">if</span>(a[i])<br>                <span class="hljs-keyword">return</span> a[i];<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;lb[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>  <br>    <span class="hljs-keyword">int</span> t; <span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> n, m;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>        ll x;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; x;<br>            lb[i] = lb[i - <span class="hljs-number">1</span>]; <br>            lb[i].insert2(x, i);<br>        &#125;<br>        <span class="hljs-keyword">int</span> op;<br>        ll lstans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(m--)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; op;<br>            <span class="hljs-keyword">if</span>(!op)<br>            &#123;<br>                ll l, r;<span class="hljs-built_in">cin</span> &gt;&gt; l &gt;&gt; r;<br>                l = (l ^ lstans) % n + <span class="hljs-number">1</span>;<br>                r = (r ^ lstans) % n + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(l &gt; r)swap(l, r);<br>                lstans = lb[r].queryMax(l);<br>                <span class="hljs-built_in">cout</span> &lt;&lt; lstans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ll x;<span class="hljs-built_in">cin</span> &gt;&gt; x;<br>                x ^= lstans;<br>                lb[++n] = lb[n - <span class="hljs-number">1</span>];<br>                lb[n].insert2(x, n);<br>            &#125;<br>            <br>        &#125;<br><br>    &#125;<br>      <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="loading"><a href="#loading" class="headerlink" title="loading"></a>loading</h2><p>还有几道题有时间再补把，，，，比如西安区域赛那道 ，，<a href="https://codeforces.com/problemset/problem/1100/F">cf</a>这道，，貌似是杭电的原型题，，，</p>
]]></content>
      <categories>
        <category>ACM-线性基</category>
      </categories>
      <tags>
        <tag>刷题</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>课程设计报告一：个人银行账户管理系统 此文档及源码仅供参考 不得直接复制使用</title>
    <url>/2019/04/12/Java%E5%AE%9E%E9%AA%8C-%E4%B8%AA%E4%BA%BA%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p><strong>作　　者：31415926535x</strong></p>
<p><strong>出　　处：<a href="https://www.cnblogs.com/31415926535x/p/10697659.html">https://www.cnblogs.com/31415926535x/p/10697659.html</a></strong></p>
<p><strong>版权声明：署名 - 非商业性使用 - 禁止演绎，协议普通文本 | 协议法律文本。</strong></p>
<p><strong>不建议直接复制文档、源码，没意义，这东西还是自己手敲一下才能涨经验</strong></p>
<p><strong>项目所有的内容都已上传至本人<a href="https://github.com/31415926535x/CollegeProjectBackup/tree/master/java_shiyan">github</a>，有需自取😀</strong></p>
<h1 id="一、-课程设计要求与目的"><a href="#一、-课程设计要求与目的" class="headerlink" title="一、    课程设计要求与目的"></a>一、    课程设计要求与目的</h1><ul>
<li>1、 模仿个人银行账户管理系统的C++版本（第4章-第8章），使用Java语言重新实现该系统，比较C++与Java在实现上的异同，熟练掌握Java基础及语法。</li>
<li>2、 根据系统需求的演化，逐步完善个人银行账户管理系统的功能，改进代码，体会面向对象思想的封装、继承、多态特性在实际系统中的应用，初步掌握使用Java编写可复用、可扩展、可维护代码的基本技能。</li>
</ul>
<span id="more"></span>
<h1 id="二、课程设计进展记录"><a href="#二、课程设计进展记录" class="headerlink" title="二、课程设计进展记录"></a>二、课程设计进展记录</h1><h2 id="1、-个人银行管理系统版本0-1（对应第4章记录）"><a href="#1、-个人银行管理系统版本0-1（对应第4章记录）" class="headerlink" title="1、 个人银行管理系统版本0.1（对应第4章记录）"></a>1、 个人银行管理系统版本0.1（对应第4章记录）</h2><h3 id="1-1-系统需求"><a href="#1-1-系统需求" class="headerlink" title="1.1    系统需求"></a>1.1    系统需求</h3><p>一个人可以有多个活期账户，一个活期储蓄账户包括 <strong>账号（id）</strong> 、 <strong>余额（balance）</strong> 、 <strong>年利率（rate）</strong> 等信息，还包括 <strong>显示账户信息（show）</strong> 、 <strong>存款（deposit）</strong> 、<strong>取款（withdraw）</strong> 、 <strong>结算利息（settle）</strong> 等操作。</p>
<h3 id="1-2-系统设计"><a href="#1-2-系统设计" class="headerlink" title="1.2    系统设计"></a>1.2    系统设计</h3><p>设计一个 <strong>类 SavingAccount</strong> , 其数据成员为 <strong>id, balance, rate</strong> ， 类的方法有 <strong>show(), deposit(), withdraw(), settle()</strong></p>
<p>UML:</p>
<p><img src="https://raw.githubusercontent.com/31415926535x/CollegeProjectBackup/master/java_shiyan/PersonBankAccountManageSystem/doc/uml/v4_9/uml/uml.png" alt=""></p>
<p>无论是存款、取款还是结算利息，都需要修改当前的余额并且将余额的变动输出，这些公共操作由 <strong>私有成员方法 record</strong> 来执行。</p>
<p>利息的计算： 由于账户的余额是不断变化的，因此不能通过余额与年利率相乘的方法来计算年利，而是需要将一年当中每天的余额累计起来再除以一年的总天数，得到一个日均余额，再乘以年利率。为了计算余额的按日累计值，SavingAccount 类引入了一个 <strong>私有数据成员lastDate</strong> ， accumulation 和私有成员函数 accumulate。 lastDate 用来存储上一次viyue变动的日期，accumulation 用来存储上次计算利息以后直到最近一次余额变动时余额按日累加的值，accumulate 成员函数用来计算截止指定日期的账户余额按日累加值。当余额变动时，需要做的事将变动前的余额与该余额所持续的天数相乘，累加到 accumulation 中，再修改 lastDate。</p>
<p>为了简便，该类中的所有日期均用一个整数来表示，该整数是一个以日为单位的相对日期，例如如果以开户日为1，那么开户日后的第3天就用4来表示， 这样哦他难过将两个日期相减就可以得到两个日期相差的天数。</p>
<h3 id="1-3-系统实现"><a href="#1-3-系统实现" class="headerlink" title="1.3    系统实现"></a>1.3    系统实现</h3><h4 id="SavingAccount-类的定义："><a href="#SavingAccount-类的定义：" class="headerlink" title="SavingAccount() 类的定义："></a><code>SavingAccount()</code> 类的定义：</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SavingsAccount</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure>
<h5 id="数据成员"><a href="#数据成员" class="headerlink" title="数据成员"></a>数据成员</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;				<span class="hljs-comment">//账号</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> balance;			<span class="hljs-comment">//余额</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> rate;			<span class="hljs-comment">//存款的年利率</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> lastDate;			<span class="hljs-comment">//上次变更余额的时期</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> accumulation;	        <span class="hljs-comment">//余额按日累加之和</span><br></code></pre></td></tr></table></figure>
<h5 id="类中方法"><a href="#类中方法" class="headerlink" title="类中方法"></a>类中方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SavingsAccount</span><span class="hljs-params">(<span class="hljs-keyword">int</span> date, <span class="hljs-keyword">int</span> id, <span class="hljs-keyword">double</span> rate)</span> </span>&#123;&#125; <span class="hljs-comment">//构造方法</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">record</span><span class="hljs-params">(<span class="hljs-keyword">int</span> date, <span class="hljs-keyword">double</span> amount)</span> </span>&#123;&#125; <span class="hljs-comment">//记录一笔账</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> <span class="hljs-title">accumulate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> date)</span> </span>&#123;&#125;  <span class="hljs-comment">//获得到指定日期为止的存款金额按日累积值</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;&#125; <span class="hljs-comment">//返回编号</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getBalance</span><span class="hljs-params">()</span> </span>&#123;&#125; <span class="hljs-comment">//返回余额</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getRate</span><span class="hljs-params">()</span> </span>&#123;&#125; <span class="hljs-comment">//返回存款的年利率</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> date, <span class="hljs-keyword">double</span> amount)</span> </span>&#123;&#125; <span class="hljs-comment">//存入现金</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-keyword">int</span> date, <span class="hljs-keyword">double</span> amount)</span> </span>&#123;&#125; <span class="hljs-comment">//取出现金</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">settle</span><span class="hljs-params">(<span class="hljs-keyword">int</span> date)</span> </span>&#123;&#125; <span class="hljs-comment">//结算利息，每年1月1日调用一次该函数</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;&#125; <span class="hljs-comment">//显示账户信息</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;&#125; <span class="hljs-comment">//主函数，呈现所实现的功能</span><br></code></pre></td></tr></table></figure>
<h3 id="1-4-系统测试"><a href="#1-4-系统测试" class="headerlink" title="1.4    系统测试"></a>1.4    系统测试</h3><p>目的：</p>
<ul>
<li>新建两个账户，此时会显示 <code>#xxxxxx is created</code>;</li>
<li>添加几笔帐目，此时会显示对应账户所添加的帐目信息;</li>
<li>开户后第90天到了银行的计息日，结算所有账户的年息,此时会显示所有帐目的年息;</li>
<li>显示所有账户的信息，此时会显示： <code>#xxxxx Balance: xxxx</code></li>
</ul>
<p>无实际输入内容，输出结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">1	#21325302 is created<br>1	#58320212 is created<br>5	#21325302	5000	5000<br>25	#58320212	10000	10000<br>45	#21325302	5500	10500<br>60	#58320212	-4000	6000<br>90	#21325302	27.64	10527.64<br>90	#58320212	21.78	6021.78<br>#21325302	Balance: 10527.64#21325302   Balance: 10527.64<br><br>--------<span class="hljs-number">10527.64</span><br><br>#58320212	Balance: 6021.78#58320212   Balance: 6021.78<br><br>--------<span class="hljs-number">6021.78</span><br></code></pre></td></tr></table></figure>
<p>程序在计算年息时通过四舍五入的方法以及去除整数小数点后的零使得最后的输出结果符合实验预期，同 c++ 实现的输出结果相同。</p>
<h3 id="1-5-体会心得"><a href="#1-5-体会心得" class="headerlink" title="1.5    体会心得"></a>1.5    体会心得</h3><p>与 c++ 实现相比，java 的项目实现更加的严谨，同时也有一些不同的语言特性，例如 java 在输出浮点数时，整数不经过处理时会输出小数点后一位的零，而 c++ 的输出会舍弃。</p>
<p>java 在实例化对象时的语法与 c++ 相比有些不同，例如 <code>className c;</code> 在 c++ 中即表示实例化一个对象，而在 java 中虽然表达相同，但实际仅仅是对象的声明，此时并没有实例化真正的对象，同时 java 实例化对象时需要使用关键字 <code>new</code>。</p>
<h2 id="2、-个人银行管理系统版本0-2（对应第5章记录）"><a href="#2、-个人银行管理系统版本0-2（对应第5章记录）" class="headerlink" title="2、 个人银行管理系统版本0.2（对应第5章记录）"></a>2、 个人银行管理系统版本0.2（对应第5章记录）</h2><h3 id="2-1-系统需求"><a href="#2-1-系统需求" class="headerlink" title="2.1    系统需求"></a>2.1    系统需求</h3><p>此版本的项目在上一版做出如下改进：</p>
<ul>
<li>在活期账户中添加一个用来记录各个账户的总金额的功能，同时可以获取这个总金额；</li>
</ul>
<h3 id="2-2-系统设计"><a href="#2-2-系统设计" class="headerlink" title="2.2    系统设计"></a>2.2    系统设计</h3><ul>
<li>在 <code>SavingAccount</code> 类中添加一个静态数据成员 <code>total</code> , 用来记录各个账户的总金额，并为其增加相应的静态成员方法 <code>getTotal</code> 用来对其进行访问。</li>
<li>将 <code>SavingAccount</code> 类中的例如 <code>getBalance()</code> , <code>accumulate()</code> 这些不需要改变对象状态的成员方法声明为 <strong>常成员方法</strong>。</li>
</ul>
<p>SavingAccount 的UML图为：</p>
<p><img src="https://raw.githubusercontent.com/31415926535x/CollegeProjectBackup/master/java_shiyan/PersonBankAccountManageSystem/doc/uml/v5_11/uml/uml.png" alt=""></p>
<h3 id="2-3-系统实现"><a href="#2-3-系统实现" class="headerlink" title="2.3    系统实现"></a>2.3    系统实现</h3><p>除上版本的数据成员和成员方法外，增加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> total = <span class="hljs-number">0</span>;        <span class="hljs-comment">//所有账户的金额</span><br></code></pre></td></tr></table></figure>
<p>同时在 <code>record()</code> 方法中增加 <code>total += amount;</code> 来实现 各个账户的总金额的计算</p>
<p>增加获取总金额的静态方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getTotal</span><span class="hljs-params">()</span> </span>&#123;&#125; <span class="hljs-comment">//显示总金额</span><br></code></pre></td></tr></table></figure>
<h3 id="2-4-系统测试"><a href="#2-4-系统测试" class="headerlink" title="2.4    系统测试"></a>2.4    系统测试</h3><p>除了和上一版本的测试用例以外，添加一个显示总金额的测试，预期输出为： <code>Total: xxxx</code>;</p>
<p>程序仍无输入操作，最后的输出结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">1	#21325302 is created<br>1	#58320212 is created<br>5	#21325302	5000	5000<br>25	#58320212	10000	10000<br>45	#21325302	5500	10500<br>60	#58320212	-4000	6000<br>90	#21325302	27.64	10527.64<br>90	#58320212	21.78	6021.78<br>#21325302	Balance: 10527.64<br>#58320212	Balance: 6021.78<br>Total: <span class="hljs-number">16549.42</span><br></code></pre></td></tr></table></figure>
<p>除 <code>Total: 16549.42</code> 外，其他的输出结果与 0.1版本 的输出一致。</p>
<h3 id="2-5-体会心得"><a href="#2-5-体会心得" class="headerlink" title="2.5    体会心得"></a>2.5    体会心得</h3><ul>
<li><p>同 c++ 一样，类中的静态变量只占用该类的一个空间，可以当作本类的一个计数器。</p>
</li>
<li><p>静态数据成员仅由静态成员方法来访问。</p>
</li>
</ul>
<h2 id="3、-个人银行管理系统版本0-3（对应第6章记录）"><a href="#3、-个人银行管理系统版本0-3（对应第6章记录）" class="headerlink" title="3、 个人银行管理系统版本0.3（对应第6章记录）"></a>3、 个人银行管理系统版本0.3（对应第6章记录）</h2><h3 id="3-1-系统需求"><a href="#3-1-系统需求" class="headerlink" title="3.1    系统需求"></a>3.1    系统需求</h3><ul>
<li>使用字符串银行账号。</li>
<li>为每笔账户增加说明性文字的功能。</li>
<li>增加 <strong>报告错位</strong> 的功能。</li>
<li>简化测试的实现。</li>
<li>增加一个日期功能，其中的子功能有：存储一个日期，返回年月日，判断是否为闰年，获取两日只差的天数，显示日期的功能。</li>
</ul>
<h3 id="3-2-系统设计"><a href="#3-2-系统设计" class="headerlink" title="3.2    系统设计"></a>3.2    系统设计</h3><ul>
<li>在上两个版本中，银行账号都是用一个整数表示，但这并不是完美的解决方案；例如，如果银行账号以0开头，或账号超出整数的表示范围，或者账号中包括了其他字符等等，所以要使用 <strong>字符串</strong> 来表示银行账号。</li>
<li>前两个版本中所输出的账目列表，每笔账目都没有说明，使用字符串可以为每笔账目增加说明文字。</li>
<li>为 <code>SavingAccount</code> 类专门增加了一个用来 <strong>报告错误</strong> 的方法，当其他函数需要输出错误信息时，直接把信息子字符串形式传递给该方法计科，简化了错误信息的输出。</li>
<li>前两个版本中，主程序创建的两个独立的变量，只能用名字去引用他们，在主程序木哦为分别对两个账户进行结算 <strong>settle</strong> 和显示 <strong>show</strong> 时，需要将几乎相同的代码书写两遍，如果账户数量增多将带来更多麻烦，所以可以将需要对各个账户做的事情放到循环里，避免了代码的冗余。</li>
<li>前几个版本中，日期都是用一个整数表示的，这样计算两个日期距离的天数非常方便，到那时这种表示很不直观，对用户很不友好，所以用一个类来表示日期。</li>
</ul>
<p>UML图为：</p>
<p><img src="https://raw.githubusercontent.com/31415926535x/CollegeProjectBackup/master/java_shiyan/PersonBankAccountManageSystem/doc/uml/v6_25/uml/uml.png" alt=""></p>
<h3 id="3-3-系统实现"><a href="#3-3-系统实现" class="headerlink" title="3.3    系统实现"></a>3.3    系统实现</h3><h4 id="Date类的实现"><a href="#Date类的实现" class="headerlink" title="Date类的实现"></a>Date类的实现</h4><p>为了计算两个日期相差天数，可以先选取一个比较规整的 <strong>基准日期</strong>，在构造日期对象时将该日期到基准日期的相对天数计算出来，（称这个相对天数为 “相对日期”），这样计算两个日期相差的天数时，只需将二者的相对日期相减即可。</p>
<p>假设将公元元年1月1日作为基准日期，将y年m月d日相距这一天的天数记为 $f(y/m/d,1/1/1)$，可以将其分解为3个部分：</p>
<script type="math/tex; mode=display">
{
    f(y/m/d, 1/1/1) = 
        f(y/1/1, 1/1/1) + f(y/m/1, y/1/1) + f(y/m/d, y/m/1)
}</script><p>上面的等数右边的第一项表示当年的1月1日与公元元年1月1日相距的天数，即公元元年到公元y-1年的总天数。平年每年有365天，闰年多一天，因此该值为 $365(y-1)$ 加上公元元年到 y - 1 年之间的闰年数。由于4年一闰，100的倍数免闰，400的倍数再闰，故有：</p>
<script type="math/tex; mode=display">
{
    f(y/m/d, 1/1/1) = 
        365(y-1) + 
        \lfloor{\frac{y-1}{4}} \rfloor - 
        \lfloor{\frac{y-1}{100}} \rfloor + 
        \lfloor{\frac{y+1}{400}} \rfloor
}</script><p>其中 $\lfloor x \rfloor$ 表示对 $x$ 的向下取整， $f(y/m/d, y/1/1)$ 表示y年m月1日与1月1日相距天数。</p>
<p>由于每月的天数不同，所以难以表示为一个同一的公式，但每月的1日与1月1日相差的天数可以有月份m唯一确定，因此可以把每月1日到1月1日由一个数组保存，计算时只需查询该数组即可，对于闰年，当 $m&gt;2$ 时将查得的值加一即可。该值只依赖于x和y，记为 $g(m,y)$。</p>
<p>同时： </p>
<script type="math/tex; mode=display">
    f(y/m/d, y/m/1) = d - 1</script><p>将公元元年1月1日作为基准日期，则公元y年m月d日的相对日期就是；</p>
<script type="math/tex; mode=display">
    f(y/m/d, 1/1/1) + 1 =   
        365(y - 1) + 
        \lfloor{\frac{y-1}{4}} \rfloor - 
        \lfloor{\frac{y-1}{100}} \rfloor + 
        \lfloor{\frac{y+1}{400}} \rfloor + 
        g(m, y) + d</script><p>两个日期的天数的差便可以简单的计算出来。</p>
<p>Date类的数据成员包括 <code>year</code> , <code>month</code> , <code>day</code> 和 <code>totalDays</code> （相对日期）； 成员函数有：<code>getMaxDay</code> 获取当月的天数， <code>isLeapYear</code> 判断当前年是否为闰年， <code>show</code> 输出当前日期， <code>distance</code> 判断当前日期与指定日期相差的天数；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数据成员：</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> year;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> month;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> day;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> totalDays;<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DAYS_BEFORE_MONTH[] = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">31</span>, <span class="hljs-number">59</span>, <span class="hljs-number">90</span>, <span class="hljs-number">120</span>, <span class="hljs-number">151</span>, <span class="hljs-number">181</span>, <span class="hljs-number">212</span>, <span class="hljs-number">243</span>, <span class="hljs-number">273</span>, <span class="hljs-number">304</span>, <span class="hljs-number">334</span>, <span class="hljs-number">365</span> &#125;;<br><br><span class="hljs-comment">//方法：</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Date</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year, <span class="hljs-keyword">int</span> month, <span class="hljs-keyword">int</span> day)</span></span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getYear</span><span class="hljs-params">()</span></span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMonth</span><span class="hljs-params">()</span></span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getDay</span><span class="hljs-params">()</span></span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMaxDay</span><span class="hljs-params">()</span></span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isLeapYear</span><span class="hljs-params">()</span></span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">distance</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Date date)</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure>
<h4 id="SavingsAccount类的改动"><a href="#SavingsAccount类的改动" class="headerlink" title="SavingsAccount类的改动"></a>SavingsAccount类的改动</h4><p>在上一版本的基础上，有如下改动：</p>
<ul>
<li>描述账号的数据类型由 <code>int</code> 改为 <code>string</code>;</li>
<li>描述日期的数据类型由 <code>int</code> 改为 <code>Date</code> 类，并为 <code>deposit</code>, <code>withdraw</code> 和 <code>settle</code> 增加了一个用来存储该笔账目信息的 <code>string</code> 型的 <code>desc</code> 参数;</li>
<li>增加一个专用于输出错误信息的 <code>error</code> 方法;</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String id;				<span class="hljs-comment">//账号</span><br><span class="hljs-keyword">private</span> Date lastDate;			<span class="hljs-comment">//上次变更余额的时期</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">record</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Date date, <span class="hljs-keyword">double</span> amount, <span class="hljs-keyword">final</span> String desc)</span></span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">error</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String msg)</span></span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Date date, <span class="hljs-keyword">double</span> amount, <span class="hljs-keyword">final</span> String desc)</span></span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Date date, <span class="hljs-keyword">double</span> amount, <span class="hljs-keyword">final</span> String desc)</span></span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">settle</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Date date)</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure>
<h3 id="3-4-系统测试"><a href="#3-4-系统测试" class="headerlink" title="3.4    系统测试"></a>3.4    系统测试</h3><p>目的：</p>
<ul>
<li>实例化一个日期对象作为一个基准日期，此时无输出；</li>
<li>声明一个长度为2的活期账户对象数组，同时添加两个账户信息，此时应显示 <code>date #xxxxxx is created</code>；</li>
<li>添加几笔带有说明性信息的帐目，以测试说明性信息的存取功能是否实现，此时应显示： <code>date #xxxxxx xxxx xxxx msg</code></li>
<li>对所有账户设置一个新的日期，同时显示修改日期后信息，此时应显示： <code>date #xxxx xx xxxx interest xxxxxx balance: xxxx</code></li>
<li>显示所有账户的总金额： <code>Total: xxxx</code>;</li>
</ul>
<p>程序无输入操作，输出的结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">2008-11-1	#S3755217 is created<br>2008-11-1	#02342342 is created<br>2008-11-5	#S3755217	5000	5000	salary<br>2008-11-25	#02342342	10000	10000	sell stock 0323<br>2008-12-5	#S3755217	5500	10500	salary<br>2008-12-20	#02342342	-4000	6000	buy a laptop<br><br>2009-1-1	#S3755217	17.77	10517.77	interest<br>S3755217	Balance: <span class="hljs-number">10517.77</span><br>2009-1-1	#02342342	13.2	6013.2	interest<br><span class="hljs-number">02342342</span>	Balance: <span class="hljs-number">6013.2</span><br>Total: <span class="hljs-number">16530.97</span><br></code></pre></td></tr></table></figure>
<p>最后的输出与实验预期相一致。</p>
<h3 id="3-5-体会心得"><a href="#3-5-体会心得" class="headerlink" title="3.5    体会心得"></a>3.5    体会心得</h3><ul>
<li>类的组合可以使一些功能实现更加的容易以及管理，本版本中利用Date类（类的组合）使得有关日期的操作可以和SavingsAccount类的实现相互独立，无需关心Date类的具体实现，同时一些操作的实现也可以直接调用方法来实现；</li>
<li>Main类中使用了对象数组来实现最后的一些操作可以通过循环来实现，减少代码量；</li>
<li>c++与java在功能实现上大同小异，但是一些细节的处理也体现出了两个语言之间的差别，对于这些细碎的东西要善于去用各种资源来寻找；</li>
</ul>
<h2 id="4、-个人银行管理系统版本0-4（对应第7章记录）"><a href="#4、-个人银行管理系统版本0-4（对应第7章记录）" class="headerlink" title="4、 个人银行管理系统版本0.4（对应第7章记录）"></a>4、 个人银行管理系统版本0.4（对应第7章记录）</h2><h3 id="4-1-系统需求"><a href="#4-1-系统需求" class="headerlink" title="4.1    系统需求"></a>4.1    系统需求</h3><p>同上一版本相比，这一版本增加了 <strong>信用账户</strong> 的需求：</p>
<ul>
<li>信用账户允许 <strong>透支</strong>，每一个信用账户都有一定的信用额度，总的透支金额应在这个额度之内。</li>
<li>如果项信用账户内存钱，不会有利息，但使用信用账户透支则需要支付利息，信用账户的利率一般以日为单位，为了简单从透支那一天其就开始计算利息。</li>
<li>信用账户每月进行以及结算，假定结算日为每月的1日。</li>
<li>信用账户每年需要交一次年费，假定每年1月1日结算的时候扣缴年费。</li>
</ul>
<h3 id="4-2-系统设计"><a href="#4-2-系统设计" class="headerlink" title="4.2    系统设计"></a>4.2    系统设计</h3><p>根据需求设计一个 <strong>基类Account</strong> 用来描述所有账户的共性，派生除 <em>SavingsAccount</em> 以及在派生出表示信用账户的类 <em>CreditAccount</em>。</p>
<p>在基类Account中，保留数据成员: <code>id账号</code> ， <code>balance余额</code> ， <code>total静态数据成员账户总金额</code> ， 成员方法: <code>show输出信息</code>。原来的 <code>record</code> , <code>error</code> 方法的访问控制权限修改为 <strong>protected</strong>，供派生类调用，同时还有一个保护的构造方法。</p>
<p>对于 <em>处理存款的成员方法 deposit</em> 、 <em>处理取款的成员方法 withdraw</em> 、 <em>处理结算的成员方法 settle</em> 都放在各个派生类中，原因是两种账户的具体处理方式不同。</p>
<p><em>储蓄账户用来表示年利率的rate</em> 、 <em>信用账户用来表示信用额度的credit 、表示日利率 rate、 表示年费fee</em> 以及其获取他们的成员方法都作为相应的派生类的成员。</p>
<p>创建一个新类用来实现各个账户的按日累加和的功能，有该类题用计算一项数据的按日累加之和所需的接口，在两个派生类中分别将其实例化，通过该类的实例计算利息。这个类命名为 <code>Accumulator</code>。</p>
<p>该类包括3个数据成员： <code>lastDate被累加数值上次变更日期</code> 、 <code>value被累加数值的当前值</code> 、 <code>sum到上次变更被累加数值位置的按日累加总和</code>；</p>
<p>该类包括4个成员方法： 构造方法、 <code>getSum计算到指定日期的累加结果</code> 、 <code>change指定日期更改数值</code> 、 <code>reset将累加器清零并重新设定初始日期和数值</code>;</p>
<p>UML图：</p>
<p><img src="https://raw.githubusercontent.com/31415926535x/CollegeProjectBackup/master/java_shiyan/PersonBankAccountManageSystem/doc/uml/v7_10/uml/uml.png" alt=""></p>
<h3 id="4-3-系统实现"><a href="#4-3-系统实现" class="headerlink" title="4.3    系统实现"></a>4.3    系统实现</h3><h4 id="Account类实现"><a href="#Account类实现" class="headerlink" title="Account类实现"></a>Account类实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String id;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> balance;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> total = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">Account</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Date date, <span class="hljs-keyword">final</span> String id)</span></span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">record</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Date date, <span class="hljs-keyword">double</span> amount, <span class="hljs-keyword">final</span> String desc)</span></span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">error</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String msg)</span></span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title">getId</span><span class="hljs-params">()</span></span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getBalance</span><span class="hljs-params">()</span></span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getTotal</span><span class="hljs-params">()</span></span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure>
<h4 id="Accumulator类"><a href="#Accumulator类" class="headerlink" title="Accumulator类"></a>Accumulator类</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Date lastDate;<br><span class="hljs-keyword">double</span> value;<br><span class="hljs-keyword">double</span> sum;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Accumulator</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Date date, <span class="hljs-keyword">double</span> value)</span></span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getSum</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Date date)</span></span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Date date, <span class="hljs-keyword">double</span> value)</span></span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reset</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Date date, <span class="hljs-keyword">double</span> value)</span></span>&#123;&#125;<br><br></code></pre></td></tr></table></figure>
<h4 id="SavingsAccount类"><a href="#SavingsAccount类" class="headerlink" title="SavingsAccount类"></a>SavingsAccount类</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SavingsAccount</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Account</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> Accumulator acc;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> rate;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SavingsAccount</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Date date, <span class="hljs-keyword">final</span> String id, <span class="hljs-keyword">double</span> rate)</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getRate</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Date date, <span class="hljs-keyword">double</span> amount, <span class="hljs-keyword">final</span> String desc)</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Date date, <span class="hljs-keyword">double</span> amount, <span class="hljs-keyword">final</span> String desc)</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">settle</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Date date)</span></span>&#123;&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="CreditAccount类"><a href="#CreditAccount类" class="headerlink" title="CreditAccount类"></a>CreditAccount类</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreditAccount</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Account</span></span>&#123;<br>    <span class="hljs-keyword">private</span> Accumulator acc;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> cred`it;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> rate;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> fee;`<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getDebt</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CreditAccount</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Date date, <span class="hljs-keyword">final</span> String id, <span class="hljs-keyword">double</span> credit, <span class="hljs-keyword">double</span> rate, <span class="hljs-keyword">double</span> fee)</span> </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getCredit</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getRate</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getFee</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getAvailableCredit</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Date date, <span class="hljs-keyword">double</span> amount, <span class="hljs-keyword">final</span> String desc)</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Date date, <span class="hljs-keyword">double</span> amount, <span class="hljs-keyword">final</span> String desc)</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">settle</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Date date)</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h4><p>Date类与上一版本保持不变</p>
<h3 id="4-4-系统测试"><a href="#4-4-系统测试" class="headerlink" title="4.4    系统测试"></a>4.4    系统测试</h3><p>目的：</p>
<ul>
<li>实例化一个日期，作为初始日期，此时无输出；</li>
<li>实例化两个活期账户以及一个信用账户，此时应该显示： <code>date #xxxxxxxx created</code>;</li>
<li>添加几笔账单，此时应该显示： <code>date #xxxxxxx xxxx xxxx msg</code>;</li>
<li>设置一个日期结算信用账户，此时应显示： <code>date #xxxxxxxx xxxx xxxx interest</code>；</li>
<li>添加几笔账单，此时应该和上面显示的信息类似；</li>
<li>结算所有账户，此时应该显示： <code>date #xxxxxxxx xxxx xxxx interest/annual fee</code>；</li>
<li>显示所有账户的信息，此时应该显示： <code>xxxxxxxxx Balance: xxxx / Available credit: xxxx</code></li>
<li>显示总金额，此时应该显示： <code>Total: xxxx</code>;</li>
</ul>
<p>这一版本仍无输入，所以输出为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">2008-11-1	#S3755217 created<br>2008-11-1	#02342342 created<br>2008-11-1	#C5392394 created<br>2008-11-5	#S3755217	5000	5000	salary<br>2008-11-15	#C5392394	-2000	-2000	buy a cell<br>2008-11-25	#02342342	10000	10000	sell stock 0323<br>2008-12-1	#C5392394	-16	-2016	interest<br>2008-12-1	#C5392394	2016	0	repay the creadit<br>2008-12-5	#S3755217	5500	10500	salary<br>2009-1-1	#S3755217	17.77	10517.77	interest<br>2009-1-1	#02342342	15.16	10015.16	interest<br>2009-1-1	#C5392394	-50	-50	annual fee<br><br>S3755217	Balance: <span class="hljs-number">10517.77</span><br><span class="hljs-number">02342342</span>	Balance: <span class="hljs-number">10015.16</span><br>C5392394	Balance: -<span class="hljs-number">50</span>	Available credit:<span class="hljs-number">9950</span><br>Total: <span class="hljs-number">20482.93</span><br></code></pre></td></tr></table></figure>
<p>输出与预期内容相同。</p>
<h3 id="4-5-体会心得"><a href="#4-5-体会心得" class="headerlink" title="4.5    体会心得"></a>4.5    体会心得</h3><ul>
<li>这一版本因为增加了一个与 储蓄账户 类似的 信用账户类的需求，所以为了简化实现，同时减少代码量，设计一个共同的父类 Account 类来派生出需要的两个子类；</li>
<li>为了更方便的计算累加的日期设计一个 Accumulator 类，而Date类因为没有需求与其有关，所以没有更改；</li>
<li>这一版本更加的体现了面向对象编程设计软件在需求变更时的好处，开发者只需解决增加的需求方面的任务，而不用管其余的东西，同时继承派生使得同类不同功能的实现更加的容易，大大的减小开发的难度。</li>
</ul>
<h2 id="5、-个人银行管理系统版本0-5（对应第8章记录）"><a href="#5、-个人银行管理系统版本0-5（对应第8章记录）" class="headerlink" title="5、 个人银行管理系统版本0.5（对应第8章记录）"></a>5、 个人银行管理系统版本0.5（对应第8章记录）</h2><h3 id="5-1-系统需求"><a href="#5-1-系统需求" class="headerlink" title="5.1    系统需求"></a>5.1    系统需求</h3><p>这一版本改进上一般版本中的两个不足：</p>
<ul>
<li>改进测试方法的实现，使其更加的便于操作，管理；</li>
<li>改进各账户之间的关系，使其更加容易操作；</li>
</ul>
<h3 id="5-2-系统设计"><a href="#5-2-系统设计" class="headerlink" title="5.2    系统设计"></a>5.2    系统设计</h3><ul>
<li>各个账户对象无法通过数组来访问，使得在分别对每个对象执行某个操作时，只能分别写出针对各对象的代码，无法使用循环。</li>
<li>不同派生类的 <code>deposit</code> , <code>withdraw</code> , <code>settle</code> 等函数彼此独立，只有知道一个实例的具体类型之后才能调用这些函数。</li>
</ul>
<h4 id="Account类的改进"><a href="#Account类的改进" class="headerlink" title="Account类的改进"></a>Account类的改进</h4><ul>
<li>在c++中可以使用虚函数，这样 <code>show</code> 函数就可以在具体的类中实现，在Java中的解决方法是子类调用父类实现一部分的功能。</li>
<li>将Account中的 <code>deposit</code> , <code>withdraw</code> , <code>settle</code> 声明为抽象方法，这样可以通过父类的引用来调用子类的方法。</li>
<li>将 <code>settle</code> 方法允许接受的参数统一为每月1日，同时对活期储蓄账户的 <code>settle</code> 进行修改，使它在结算利息之前先判断是否为1月，只有参数所给的日期是1月才进行结算。</li>
<li>通过以上修改之后便可以通过同一个父类的声明来引用不同的子类，这样可以通过一个父类的数组来实现不同的账户的存储操作。</li>
</ul>
<h4 id="Date类的改进"><a href="#Date类的改进" class="headerlink" title="Date类的改进"></a>Date类的改进</h4><p>原来的Date类中的 <code>distance1</code> 函数在c++中改为 <strong>“-“</strong> 运算符重载可以使程序更加的直观，在Java中的解决方法是增加一个 <code>sub</code> 方法来实现两日期相差天数的功能。</p>
<p><img src="https://raw.githubusercontent.com/31415926535x/CollegeProjectBackup/master/java_shiyan/PersonBankAccountManageSystem/doc/uml/v8_8/uml/uml.png" alt=""></p>
<h3 id="5-3-系统实现"><a href="#5-3-系统实现" class="headerlink" title="5.3    系统实现"></a>5.3    系统实现</h3><h4 id="Account类"><a href="#Account类" class="headerlink" title="Account类"></a>Account类</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Date date, <span class="hljs-keyword">double</span> amount, <span class="hljs-keyword">final</span> String desc)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Date date, <span class="hljs-keyword">double</span> amount, <span class="hljs-keyword">final</span> String desc)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">settle</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Date date)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;   <br>        NumberFormat nf = <span class="hljs-keyword">new</span> DecimalFormat(<span class="hljs-string">&quot;0.##&quot;</span>);<br>        System.out.print(id + <span class="hljs-string">&quot;\tBalance: &quot;</span> + nf.format(balance));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="CreditAccount类-1"><a href="#CreditAccount类-1" class="headerlink" title="CreditAccount类"></a>CreditAccount类</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>.show();<br>    NumberFormat nf = <span class="hljs-keyword">new</span> DecimalFormat(<span class="hljs-string">&quot;0.##&quot;</span>);<br>    System.out.print(<span class="hljs-string">&quot;\tAvailable credit:&quot;</span> + nf.format(getAvailableCredit()));<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="Date类-1"><a href="#Date类-1" class="headerlink" title="Date类"></a>Date类</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sub</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Date date)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.totalDays - date.totalDays;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="5-4-系统测试"><a href="#5-4-系统测试" class="headerlink" title="5.4    系统测试"></a>5.4    系统测试</h3><p>目的：</p>
<ul>
<li>实例化一个日期，作为初始日期，此时无输出；</li>
<li>建立两个活期账户，一个信用账户，此时的显示与上一版的输出一致；</li>
<li>实例化一个由以上账户构成的 <code>accounts</code> 对象数组，便于之后的操作，此时无输出；</li>
<li>显示一个可供选择的菜单，列出具体操作指令以及对应的功能，此时输出应该为： <code>(d)deposit (w)withdraw (s)show (c)change day (n)next month (e)exit</code>；</li>
<li>之后的每一个等待输入时都将先输出一行提示指令，同时显示所有账户的总金额，输出的形式为： <code>date Total: xxxx.x command&gt;</code>；</li>
<li>改变当前月份的日期，输入为： <code>c 5</code> ，此时在下一次等待输入的提示指令显示将是合法更改后的日期，对应这条输入输出结果应该为： <code>2008-11-5   Total: 0.0 command&gt;</code>；</li>
<li>向0号账户存入一笔金额为5000，说明信息为 <em>salary</em> 的现金，输入为： <code>d 0 5000 salary</code> ， 此时应该输出： <code>2008-11-5    #S3755217    5000    5000     salary</code>；</li>
<li>向2号账户取出一笔现金，金额为2000，信息为 <em>buy a cell</em> ， 输入为： <code>w 2 2000 buy a cell</code> ， 此时应该输出： <code>2008-11-25    #02342342    10000    10000     sell stock 0323</code>；</li>
<li>进入下一月，输入 <code>n</code> ， 此时输出： <code>2008-12-1    #C5392394    -16    -2016    interest</code> , <code>2008-12-1    Total: 12984.0    command&gt;</code>；</li>
<li>向2号账户存入一笔金额为2016的现金，说明文字为 <em>repay the credit</em>， 此时的输入： <code>d 2 2016 repay the credit</code> , 输出应该为： <code>2008-12-1    #C5392394    2016    0     repay the credit</code>；</li>
<li>改变当前月的日期为5号，输入 <code>c 5</code> , 此时的输出应该为： <code>2008-12-5    Total: 15000.0    command&gt;</code>；</li>
<li>向0号账户存入一笔5500的现金，说明信息为 <em>salary</em> ，输入为： <code>d 0 5500 salary</code> ， 此时的输出应该为： <code>2008-12-5    #S3755217    5500    10500     salary</code>；</li>
<li>进入下一月，输入 <code>n</code> ， 此时输出为:</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs java">2009-1-1	#S3755217	17.77	10517.77	interest<br>2009-1-1	#02342342	15.16	10015.16	interest<br>2009-1-1	#C5392394	-50	-50	annual fee<br></code></pre></td></tr></table></figure>
<ul>
<li>显示所有账户的信息， 输入 <code>s</code> ， 此时应该输出：<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">[<span class="hljs-number">0</span>] S3755217	Balance: <span class="hljs-number">10517.77</span><br>[<span class="hljs-number">1</span>] <span class="hljs-number">02342342</span>	Balance: <span class="hljs-number">10015.16</span><br>[<span class="hljs-number">2</span>] C5392394	Balance: -<span class="hljs-number">50</span>	Available credit:<span class="hljs-number">9950</span><br></code></pre></td></tr></table></figure></li>
<li>终止测试，输入 <code>e</code> ， 此时将退出测试程序；</li>
</ul>
<p>这一版本的系统增加了具体的输入的操作，使得用户能够自行进行一些对各账户的操作，最终的输出与预期的输出相同。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">2008-11-1	#S3755217 created<br>2008-11-1	#02342342 created<br>2008-11-1	#C5392394 created<br>(d)deposit (w)withdraw (s)show (c)<span class="hljs-function">change <span class="hljs-title">day</span> <span class="hljs-params">(n)</span>next <span class="hljs-title">month</span> <span class="hljs-params">(e)</span>exit</span><br><span class="hljs-function">2008-11-1	Total: 0.0	command&gt; c 5</span><br><span class="hljs-function">2008-11-5	Total: 0.0	command&gt; d 0 5000 salary</span><br><span class="hljs-function">2008-11-5	#S3755217	5000	5000	 salary</span><br><span class="hljs-function">2008-11-5	Total: 5000.0	command&gt; c 15</span><br><span class="hljs-function">2008-11-15	Total: 5000.0	command&gt; w 2 2000 buy a cell</span><br><span class="hljs-function">2008-11-15	#C5392394	-2000	-2000	 buy a cell</span><br><span class="hljs-function">2008-11-15	Total: 3000.0	command&gt; c 25</span><br><span class="hljs-function">2008-11-25	Total: 3000.0	command&gt; d 1 10000 sell stock 0323</span><br><span class="hljs-function">2008-11-25	#02342342	10000	10000	 sell stock 0323</span><br><span class="hljs-function">2008-11-25	Total: 13000.0	command&gt; n</span><br><span class="hljs-function">2008-12-1	#C5392394	-16	-2016	interest</span><br><span class="hljs-function">2008-12-1	Total: 12984.0	command&gt; d 2 2016 repay the credit</span><br><span class="hljs-function">2008-12-1	#C5392394	2016	0	 repay the credit</span><br><span class="hljs-function">2008-12-1	Total: 15000.0	command&gt; c 5</span><br><span class="hljs-function">2008-12-5	Total: 15000.0	command&gt; d 0 5500 salary</span><br><span class="hljs-function">2008-12-5	#S3755217	5500	10500	 salary</span><br><span class="hljs-function">2008-12-5	Total: 20500.0	command&gt; n</span><br><span class="hljs-function">2009-1-1	#S3755217	17.77	10517.77	interest</span><br><span class="hljs-function">2009-1-1	#02342342	15.16	10015.16	interest</span><br><span class="hljs-function">2009-1-1	#C5392394	-50	-50	annual fee</span><br><span class="hljs-function">2009-1-1	Total: 20482.93	command&gt; s</span><br><span class="hljs-function">[0] S3755217	Balance: 10517.77</span><br><span class="hljs-function">[1] 02342342	Balance: 10015.16</span><br><span class="hljs-function">[2] C5392394	Balance: -50	Available credit:9950</span><br><span class="hljs-function">2009-1-1	Total: 20482.93	command&gt; e</span><br></code></pre></td></tr></table></figure>
<h3 id="5-5-体会心得"><a href="#5-5-体会心得" class="headerlink" title="5.5    体会心得"></a>5.5    体会心得</h3><ul>
<li>为了能够通过数组的形式来操作同一父类下的子类，修改了父类的实现，使得一些方法的具体实现在其子类中实现，这样可以仅使用父类来引用具体要操作的子类，大大的使操作更加的便捷。</li>
<li>c++中的运算符重载功能在Java中不再存在，而是使用具体的方法来实现，同样也使得代码的书写更加的直观，增加程序的可读性。</li>
</ul>
<h2 id="6、-个人银行管理系统版本0-6（对应第9章记录）"><a href="#6、-个人银行管理系统版本0-6（对应第9章记录）" class="headerlink" title="6、 个人银行管理系统版本0.6（对应第9章记录）"></a>6、 个人银行管理系统版本0.6（对应第9章记录）</h2><h3 id="6-1-系统需求"><a href="#6-1-系统需求" class="headerlink" title="6.1    系统需求"></a>6.1    系统需求</h3><p>进一步改进测试程序中的实现，使得测试程序操作更加的便捷。</p>
<h3 id="6-2-系统设计"><a href="#6-2-系统设计" class="headerlink" title="6.2    系统设计"></a>6.2    系统设计</h3><p>在上一版本中，使用父类对象数组来处理不同派生类对象，从而实现多态性调用，本版本中使用Java中的 <code>ArrayList</code> 来代替原来的对象数组，以实现动态的改变大小，添加新账户的功能。</p>
<p>除 <code>Main</code> 类外，其余类文件都无需更改。在 <code>Main</code> 类中导入Java实用包中的 <code>ArrayList</code>。创建对象数组。</p>
<p>本版本的UML图与上一版本的相同。</p>
<h3 id="6-3-系统实现"><a href="#6-3-系统实现" class="headerlink" title="6.3    系统实现"></a>6.3    系统实现</h3><h4 id="Main类"><a href="#Main类" class="headerlink" title="Main类"></a>Main类</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">ArrayList&lt;Account&gt; accounts = <span class="hljs-keyword">new</span> ArrayList&lt;Account&gt;();<br></code></pre></td></tr></table></figure>
<h3 id="6-4-系统测试"><a href="#6-4-系统测试" class="headerlink" title="6.4    系统测试"></a>6.4    系统测试</h3><p>目的： </p>
<ul>
<li>使用 <em>ArrayList</em> 实现对象数组，同时通过用户来录入账户信息，输入为：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">a s S3755217 <span class="hljs-number">0.015</span><br>a s <span class="hljs-number">02342342</span> <span class="hljs-number">0.015</span><br>a c C5392394 <span class="hljs-number">10000</span> <span class="hljs-number">0.0005</span> <span class="hljs-number">50</span><br></code></pre></td></tr></table></figure>
<p>表示录入两个活期账户和一个信用账户，同时对应显示应该为： <code>date #xxxxxxxx created</code>；</p>
<p>其他的输入输出测试与上一版本的一致；</p>
<p>输入和最后的输出符合预期。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">(a)<span class="hljs-function">add <span class="hljs-title">account</span> <span class="hljs-params">(d)</span><span class="hljs-title">deposit</span> <span class="hljs-params">(w)</span><span class="hljs-title">withdraw</span> <span class="hljs-params">(s)</span><span class="hljs-title">show</span> <span class="hljs-params">(c)</span>change <span class="hljs-title">day</span> <span class="hljs-params">(n)</span>next <span class="hljs-title">month</span> <span class="hljs-params">(e)</span>exit</span><br><span class="hljs-function">2008-11-1	Total: 0.0	command&gt; a s S3755217 0.015</span><br><span class="hljs-function">2008-11-1	#S3755217 created</span><br><span class="hljs-function">2008-11-1	Total: 0.0	command&gt; a s 02342342 0.015</span><br><span class="hljs-function">2008-11-1	#02342342 created</span><br><span class="hljs-function">2008-11-1	Total: 0.0	command&gt; a c C5392394 10000 0.0005 50</span><br><span class="hljs-function">2008-11-1	#C5392394 created</span><br><span class="hljs-function">2008-11-1	Total: 0.0	command&gt; c 5</span><br><span class="hljs-function">2008-11-5	Total: 0.0	command&gt; d 0 5000 salary</span><br><span class="hljs-function">2008-11-5	#S3755217	5000	5000	 salary</span><br><span class="hljs-function">2008-11-5	Total: 5000.0	command&gt; c 15</span><br><span class="hljs-function">2008-11-15	Total: 5000.0	command&gt; w 2 2000 buy a cell</span><br><span class="hljs-function">2008-11-15	#C5392394	-2000	-2000	 buy a cell</span><br><span class="hljs-function">2008-11-15	Total: 3000.0	command&gt; c 25</span><br><span class="hljs-function">2008-11-25	Total: 3000.0	command&gt; d 1 10000 sell stock 0323</span><br><span class="hljs-function">2008-11-25	#02342342	10000	10000	 sell stock 0323</span><br><span class="hljs-function">2008-11-25	Total: 13000.0	command&gt; n</span><br><span class="hljs-function">2008-12-1	#C5392394	-16	-2016	interest</span><br><span class="hljs-function">2008-12-1	Total: 12984.0	command&gt; d 2 2016 repay the credit</span><br><span class="hljs-function">2008-12-1	#C5392394	2016	0	 repay the credit</span><br><span class="hljs-function">2008-12-1	Total: 15000.0	command&gt; c 5</span><br><span class="hljs-function">2008-12-5	Total: 15000.0	command&gt; d 0 5500 salary</span><br><span class="hljs-function">2008-12-5	#S3755217	5500	10500	 salary</span><br><span class="hljs-function">2008-12-5	Total: 20500.0	command&gt; n</span><br><span class="hljs-function">2009-1-1	#S3755217	17.77	10517.77	interest</span><br><span class="hljs-function">2009-1-1	#02342342	15.16	10015.16	interest</span><br><span class="hljs-function">2009-1-1	#C5392394	-50	-50	annual fee</span><br><span class="hljs-function">2009-1-1	Total: 20482.93	command&gt; s</span><br><span class="hljs-function">[0] S3755217	Balance: 10517.77</span><br><span class="hljs-function">[1] 02342342	Balance: 10015.16</span><br><span class="hljs-function">[2] C5392394	Balance: -50	Available credit:9950</span><br><span class="hljs-function">2009-1-1	Total: 20482.93	command&gt; e</span><br></code></pre></td></tr></table></figure>
<h3 id="6-5-体会心得"><a href="#6-5-体会心得" class="headerlink" title="6.5    体会心得"></a>6.5    体会心得</h3><ul>
<li>使用Java类库中的 <em>ArrayList</em> 实现了类的对象数组功能</li>
<li>使用一个共同的父类的对象数组便可一个统一管理他的子类的对象，使得最后的代码更加的简便，操作更符合逻辑性。</li>
</ul>
<h1 id="三、-课程设计总结"><a href="#三、-课程设计总结" class="headerlink" title="三、    课程设计总结"></a>三、    课程设计总结</h1><h2 id="最终实现的系统功能"><a href="#最终实现的系统功能" class="headerlink" title="最终实现的系统功能"></a>最终实现的系统功能</h2><p>系统逐步完善，最后实现的功能有：</p>
<ul>
<li>两个账户系统： <em>SavingsAccount</em> 以及 <em>CreditAccount</em> 他们统一由 <em>Account</em> 派生出来；前者实现的功能有：基本的账户信息的存储以及按日期产生的利息等功能，后者实现的功能有：基本的信用账户信息的存储以及按日期产生的欠款金额，信用额度和年费等功能；</li>
<li>一个适合银行管理系统的日期计算功能，计算出简单的两日之差，存储当前的日期等必要功能；</li>
<li>一个日期累加器功能，用于记录日期的累加值；</li>
<li>一个简单的系统测试模块，供用户测试最终系统的各个功能；</li>
</ul>
<h2 id="面向对象的基本设计思想"><a href="#面向对象的基本设计思想" class="headerlink" title="面向对象的基本设计思想"></a>面向对象的基本设计思想</h2><h3 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h3><p>对于系统的每一个功能，如 <em>SavingAccount</em> , <em>CreditAccount</em> , <em>Account</em> , <em>Date</em> , <em>Main</em> 等功能都是用类实现的，其中每一个类中需要和外界通讯的数据成员、成员方法先定义了具体的权限，如 <strong>public</strong> , <strong>protected</strong> 等，而无需通讯的私有成员则为 <strong>private</strong> ，使得最后的各功能只提供一些接口参数，而不是具体的实现细节，使用（调用）者无需关心其内部的实现便可实现自己的功能；</p>
<h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>该系统设计了一个各账户共同的父类： <strong>Account</strong> ， 其他两个账户类都是由此继承出，他们有一些共同的方法、数据成员由父类实现（或声明），而其不同则由自己声明实现。</p>
<h3 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h3><p>对于一些子类继承自父类的数据成员，成员方法，他们中的一些的实现与父类略有不同，覆盖了原父类的内容，使得最后同一个方法有多种实现以供用户不同的需求；</p>
<h3 id="类的组合"><a href="#类的组合" class="headerlink" title="类的组合"></a>类的组合</h3><p>系统中一些支持类（Date, Accumulation等等）与其他类组合实现了一些基本的功能。</p>
<h2 id="遇到的问题及解决"><a href="#遇到的问题及解决" class="headerlink" title="遇到的问题及解决"></a>遇到的问题及解决</h2><ul>
<li>不同数据的读入： 课程内容未讲解Java中对不同的数据的读入方法，通过查阅互联网以及课本了解到具体的读入方法，最后选择 <code>Scanner</code> 来实现不同情况下的数据读入；</li>
<li>字符的读入： 在后续的功能测试中，使用到了用一个字符来表示选择的操作指令功能，通过查阅他人的经验选择按字符串读入后调用 <code>charAt()</code> 来取得操作指令的字符；</li>
<li>实数小数点的控制： 在前期的测试发现在输出整数时，c++会的标准输出流会舍弃小数点后的0，但是Java会保留一位0，为了功能的统一最后在查找资料后选择使用 <code>NumberFormat</code> 来格式化数字；</li>
<li>数字的四舍五入问题： c++中对于四舍五入的实现使用的是库函数 <code>floor</code> ，尝试调用Java中 <code>math</code> 包中的 <code>floor()</code> 来实现时发现最后的效果不好，换用 <code>bDecimal.setScale(2, RoundingMode.HALF_UP).doubleValue();</code> 语句来实现这个功能；</li>
<li>运算符重载的实现： c++中有运算符重载的功能，可以简单的实现两个类之间逻辑上的四则运算，通过查阅资料后得知Java中取消了运算符重载的功能，统一使用方法调用来代替原有功能；</li>
<li>文档及注释的写法： 通过搜索别人博客了解到Java可以通过一些具体的语法格式进行注释，之后便可自动生成文档；</li>
<li>项目中包的建立： 通过查阅别人博客等资料了解到如何在一个工作环境中新建不同的包；</li>
</ul>
<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>这个银行管理系统的完成让我熟悉了Java的基本语法，同时体会到了Java与c++的不同的程序设计思想；在完成项目的同时遇到了很多的问题，但是都通过自己独立查阅资料逐一解决，了解了Java中基本的输入输出等一些已有的包的功能；最后文档的书写也使我清晰的认识到了一个简单项目从用户需求到系统设计、系统实现以及最后的代码的编写测试这一个流程，同时uml图的书写也让我理清了各功能直接的具体关系，使得最后的代码间的联系更加的清晰明了。</p>
<p>此外通过每一版本的需求的更新以及系统的实现，我体会到了面向对象程序设计在实现功能的过程与面向过程以及c++面向对象程序设计的不同，Java万物皆为类的思想，包括测试用的Main方法都为类，从最开始的一个储蓄活期账户的功能的实现，date类的实现以及累加日期类的实现实现了系统的基本功能，此后新增活期账户功能类似的信用账户的需求，通过比较两个类的共同特点，抽象出其共同的父类 <code>Account</code> ，这样使得一些共同点得以复用，减少代码量的同时也使得各类之间的关系增强，同时在最后几个版本中，因为Java中父类的引用同时可以引用其子类的特点，使得通过一个父类的对象数组便可以轻易的操纵其子类，使得最后的循环处理测试时的代码可以有不同类对应不同操作代码合二为一，大大的使程序的可读性增强，代码量减少，开发的负担也减轻许多，最后的 <em>ArrayList</em> 声明的对象数组也使得开发者不必关心数组空间的分配问题，也使得程序的安全性增强。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>最短路</title>
    <url>/2018/07/27/%E6%9C%80%E7%9F%AD%E8%B7%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h2><p>最短路主要是寻找某个有图问题从起始点到终点的最短的路，，，这是最基本的一种情况，，，由此可以变形出各种各样的其他题型，，，，</p>
<p>本篇主要有 <strong>图的储存</strong> , <strong>Dijstra算法</strong> ， <strong>SPFA算法</strong> , <strong>Floyd算法</strong> , 以及几道练习题和题解。。。</p>
<span id="more"></span>
<h2 id="图的储存"><a href="#图的储存" class="headerlink" title="图的储存"></a>图的储存</h2><p>一般来说图的储存有好几种，，，例如 <strong>邻接矩阵</strong> , <strong>邻接表</strong> , <strong>前向星</strong> , <strong>链式前向星</strong>,,,</p>
<p><img src="http://images.cppblog.com/cppblog_com/menjitianya/cfys_003.png" alt="图"></p>
<h3 id="临界矩阵"><a href="#临界矩阵" class="headerlink" title="临界矩阵"></a>临界矩阵</h3><p><a href="http://www.cppblog.com/menjitianya/archive/2015/11/19/212292.html">直接粘大佬的表达</a></p>
<blockquote>
<p>邻接矩阵是直接利用一个二维数组对边的关系进行存储，矩阵的第i行第j列的值 表示 i -&gt; j 这条边的权值；特殊的，如果不存在这条边，用一个特殊标记来表示；如果i == j，则权值为0。它的优点是实现非常简单，而且很容易理解；缺点也很明显，如果这个图是一个非常稀疏的图，图中边很少，但是点很多，就会造成非常大的内存浪费，点数过大的时候根本就无法存储</p>
</blockquote>
<p><img src="http://images.cppblog.com/cppblog_com/menjitianya/cfys_004.png" alt="邻接矩阵"></p>
<p>一般来说，做题中都是用一个二维向量vector<int> g[maxn]储存，，maxn为向量的最大个数。所有与节点i相连的点都在g[i]这个向量里面。如果还要储存 <strong>边权</strong> 或者其他信息，，将int改为节点结构体即可</p>
<h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><p><a href="http://www.cppblog.com/menjitianya/archive/2015/11/19/212292.html">同样贴大佬表达</a></p>
<blockquote>
<p>邻接表是图中常用的存储结构之一，每个顶点都有一个链表，这个链表的数据表示和当前顶点直接相邻的顶点（如果边有权值，还需要保存边权信息）。邻接表的优点是对于稀疏图不会有数据浪费，缺点就是实现相对麻烦，需要自己实现链表，动态分配内存。</p>
</blockquote>
<p><img src="http://images.cppblog.com/cppblog_com/menjitianya/cfys_005.png" alt="邻接表"></p>
<h3 id="前向星"><a href="#前向星" class="headerlink" title="前向星"></a>前向星</h3><blockquote>
<p>前向星是以存储边的方式来存储图，先将边读入并存储在连续的数组中，然后按照边的起点进行排序，这样数组中起点相等的边就能够在数组中进行连续访问了。它的优点是实现简单，容易理解，缺点是需要在所有边都读入完毕的情况下对所有边进行一次排序，带来了时间开销，实用性也较差，只适合离线算法。</p>
</blockquote>
<p><img src="http://images.cppblog.com/cppblog_com/menjitianya/cfys_006.png" alt="前向星"></p>
<h3 id="链式前向星"><a href="#链式前向星" class="headerlink" title="链式前向星"></a>链式前向星</h3><p><a href="http://www.cppblog.com/menjitianya/archive/2015/11/19/212292.html">同上</a></p>
<blockquote>
<p>链式前向星和邻接表类似，也是链式结构和线性结构的结合，每个结点i都有一个链表，链表的所有数据是从i出发的所有边的集合（对比邻接表存的是顶点集合），边的表示为一个四元组(u, v, w, next)，其中(u, v)代表该条边的有向顶点对，w代表边上的权值，next指向下一条边。<br>具体的，我们需要一个边的结构体数组 edge[MAXM]，MAXM表示边的总数，所有边都存储在这个结构体数组中，并且用head[i]来指向 i 结点的第一条边。<br>边的结构体声明如下：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EDGE</span> &#123;</span><br>                <span class="hljs-keyword">int</span> u, v, w, next;<br>    EDGE() &#123;&#125;<br>    EDGE(<span class="hljs-keyword">int</span> _u, <span class="hljs-keyword">int</span> _v, <span class="hljs-keyword">int</span> _w, <span class="hljs-keyword">int</span> _next) &#123;<br>        u = _u, v = _v, w = _w, next = _next;<br>    &#125;<br>&#125;edge[MAXM];<br></code></pre></td></tr></table></figure></p>
<p>初始化所有的head[i] = INF，当前边总数 edgeCount = 0<br>每读入一条边，调用addEdge(u, v, w)，具体函数的实现如下：</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[ edgeCount ] = EDGE(u, v, w, head[u]);<br>    head[u] = edgeCount ++;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>这个函数的含义是每加入一条边(u, v)，就在原有的链表结构的首部插入这条边，使得每次插入的时间复杂度为O(1)，所以链表的边的顺序和读入顺序正好是逆序的。这种结构在无论是稠密的还是稀疏的图上都有非常好的表现，空间上没有浪费，时间上也是最小开销。<br>调用的时候只要通过head[i]就能访问到由 i 出发的第一条边的编号，通过编号到edge数组进行索引可以得到边的具体信息，然后根据这条边的next域可以得到第二条边的编号，以此类推，直到next域为INF（这里的INF即head数组初始化的那个值，一般取-1即可）。</p>
</blockquote>
<p>集训时的模板，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span>;   <span class="hljs-comment">//无向图的话实际要开边数两倍的空间</span><br><span class="hljs-keyword">int</span> head[maxn];         <span class="hljs-comment">//head[i]表示以i为起点的最后一条边的编号</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to;             <span class="hljs-comment">//这条变得终点</span><br>    <span class="hljs-keyword">int</span> w;              <span class="hljs-comment">//这条变得权值</span><br>    <span class="hljs-keyword">int</span> last;           <span class="hljs-comment">//与自己起点相同的上一条边的编号</span><br>&#125;Edge[maxm];<br><span class="hljs-keyword">int</span> cnt;                <span class="hljs-comment">//记录Edge数据里面的边用到了哪里</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u , <span class="hljs-keyword">int</span> v , <span class="hljs-keyword">int</span> w)</span> <span class="hljs-comment">//加一条边，起点， 终点，权值</span></span><br><span class="hljs-function"></span>&#123;<br>    Edge[cnt].to = v;<br>    Edge[cnt].w = w;<br>    Edge[cnt].last = head[u];   <span class="hljs-comment">//将编号为cnt的边加入</span><br>    head[u] = cnt++;            <span class="hljs-comment">//加边后，cnt为以u为起点的最后一条边</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h3><h4 id="向量储存方式"><a href="#向量储存方式" class="headerlink" title="向量储存方式"></a>向量储存方式</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> len = g[i].size();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; len; j++)<br>    <span class="hljs-keyword">int</span> v = g[i][j];    <span class="hljs-comment">//得到与i相连的所有节点</span><br></code></pre></td></tr></table></figure>
<h4 id="前向星储存方式"><a href="#前向星储存方式" class="headerlink" title="前向星储存方式"></a>前向星储存方式</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = head[i]; j != <span class="hljs-number">-1</span>; j = Edge[j].last)<br>&#123;<br>    <span class="hljs-keyword">int</span> v = Edge[j].to;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>接下来重头戏，，，，</p>
<h2 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h2><h3 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h3><p>Dijkstra算法适用于求 <strong>边权为正</strong> ， 从单个原点出发的最短路。实际他能求初始点到其他所有顶点的最短路径，例如dis[i]表示原点到i这个节点的最短路的值，，，，实际上是基于bfs搜索的</p>
<p><a href="http://www.cppblog.com/menjitianya/archive/2015/11/19/212292.html">大佬的表达：</a></p>
<blockquote>
<p>对于一个有向图或无向图，所有边权为正（边用邻接矩阵的形式给出），给定a和b，求a到b的最短路，保证a一定能够到达b。这条最短路是否一定存在呢？答案是肯定的。相反，最长路就不一定了，由于边权为正，如果遇到有环的时候，可以一直在这个环上走，因为要找最长的，这样就使得路径越变越长，永无止境，所以对于正权图，在可达的情况下最短路一定存在，最长路则不一定存在。这里先讨论正权图的最短路问题。</p>
<p>最短路满足最优子结构性质，所以是一个动态规划问题。最短路的最优子结构可以描述为：<br>D(s, t) = {Vs … Vi … Vj … Vt}表示s到t的最短路，其中i和j是这条路径上的两个中间结点，那么D(i, j)必定是i到j的最短路，这个性质是显然的，可以用反证法证明。<br>基于上面的最优子结构性质，如果存在这样一条最短路D(s, t) = {Vs … Vi Vt}，其中i和t是最短路上相邻的点，那么D(s, i) = {Vs … Vi} 必定是s到i的最短路。Dijkstra算法就是基于这样一个性质，通过最短路径长度递增，逐渐生成最短路。</p>
<p>Dijkstra算法是最经典的最短路算法，用于计算正权图的单源最短路（Single Source Shortest Path，源点给定，通过该算法可以求出起点到所有点的最短路），它是基于这样一个事实：如果源点到x点的最短路已经求出，并且保存在d[x] ( 可以将它理解为D(s, x) )上，那么可以利用x去更新 x能够直接到达的点 的最短路。即：<br>d[y] = min{ d[y], d[x] + w(x, y) }           y为x能够直接到达的点，w(x, y) 则表示x-&gt;y这条有向边的边权<br>具体算法描述如下：对于图G = <V, E>，源点为s，d[i]表示s到i的最短路，visit[i]表示d[i]是否已经确定(布尔值)。<br>1) 初始化 所有顶点 d[i] = INF, visit[i] = false，令d[s] = 0；<br>2) 从所有visit[i]为false的顶点中找到一个d[i]值最小的，令x = i; 如果找不到，算法结束；<br>3) 标记visit[x] = true, 更新和x直接相邻的所有顶点y的最短路： d[y] = min{ d[y], d[x] + w(x, y) }<br>第三步中如果y和x并不是直接相邻，则令w(x, y) = INF）</p>
</blockquote>
<p>集训时的模板:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">105</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">20020</span>;<br><span class="hljs-keyword">int</span> head[maxn];<br><span class="hljs-keyword">int</span> dis[maxn];<br><span class="hljs-keyword">int</span> cnt;<br><span class="hljs-keyword">int</span> n , m;<br><span class="hljs-comment">//存图</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(head , <span class="hljs-number">-1</span> , <span class="hljs-keyword">sizeof</span>(head));<br><span class="hljs-comment">//    memset(dis , inf , sizeof(dis));</span><br><span class="hljs-comment">//    dis[1] = 0;</span><br>    cnt = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to;<br>    <span class="hljs-keyword">int</span> w;<br>    <span class="hljs-keyword">int</span> last;<br>&#125;Edge[maxm];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u , <span class="hljs-keyword">int</span> v , <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    Edge[cnt].to = v;<br>    Edge[cnt].w = w;<br>    Edge[cnt].last = head[u];<br>    head[u] = cnt++;<br>&#125;<br><span class="hljs-comment">//节点</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> u;<br>    <span class="hljs-keyword">int</span> w;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> node &amp;res)<span class="hljs-keyword">const</span>  <span class="hljs-comment">//优先队列使用</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> w &gt; res.w;<br>    &#125;<br>    node (<span class="hljs-keyword">int</span> _u , <span class="hljs-keyword">int</span> _w)                  <span class="hljs-comment">//入队使用</span><br>    &#123;<br>        u = _u;<br>        w = _w;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//Dijkstra算法，，，</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Dijkstra</span><span class="hljs-params">()</span>                             <span class="hljs-comment">//求原点到终点的最短距离，结果在dis[i]中</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)            <span class="hljs-comment">//将每个节点值置为无穷大，，</span><br>        dis[i] = inf;<br>    dis[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;                             <span class="hljs-comment">//原点到自身距离为0</span><br>    <span class="hljs-built_in">priority_queue</span>&lt;node&gt; q;                 <span class="hljs-comment">//优先队列</span><br>    <span class="hljs-keyword">while</span> (!q.empty())  q.pop();<br>    q.push(node(<span class="hljs-number">1</span> , <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">while</span> (!q.empty())<br>    &#123;<br>        node nx = q.top();<br>        q.pop();<br>        <span class="hljs-keyword">int</span> u = nx.u;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i != <span class="hljs-number">-1</span>; i = Edge[i].last)<br>        &#123;<br>            <span class="hljs-keyword">int</span> to = Edge[i].to;<br>            <span class="hljs-keyword">int</span> w = Edge[i].w;<br>            <span class="hljs-keyword">if</span> (dis[u] + w &lt; dis[to])<br>            &#123;<br>                dis[to] = dis[u] + w;<br>                q.push(node(to , dis[to]));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="SPFA算法"><a href="#SPFA算法" class="headerlink" title="SPFA算法"></a>SPFA算法</h3><p>Dijlstra算法只能处理正权值的图，，，可能出现负环，，会一直走下去，，而SPFA则可以处理有负权值的图，，</p>
<p>维护一个队列，里面存放所有需要进行迭代的点，初始时队列中只有一个原点s，用一个布尔数组记录每一个点是否在队列中，，，</p>
<p>大佬的表达:</p>
<blockquote>
<p>SPFA( Shortest Path Faster Algorithm )是基于Bellman-Ford的思想，采用先进先出(FIFO)队列进行优化的一个计算单源最短路的快速算法。<br>类似Bellman-Ford的做法，我们用数组d记录每个结点的最短路径估计值，并用链式前向星来存储图G。利用一个先进先出的队列用来保存待松弛的结点，每次取出队首结点u，并且枚举从u出发的所有边(u, v)，如果d[u] + w(u, v) &lt; d[v]，则更新d[v] = d[u] + w(u, v)，然后判断v点在不在队列中，如果不在就将v点放入队尾。这样不断从队列中取出结点来进行松弛操作，直至队列空为止。 </p>
<p>只要最短路径存在，SPFA算法必定能求出最小值。因为每次将点放入队尾，都是经过松弛操作达到的。即每次入队的点v对应的最短路径估计值d[v]都在变小。所以算法的执行会使d越来越小。由于我们假定最短路一定存在，即图中没有负权圈，所以每个结点都有最短路径值。因此，算法不会无限执行下去，随着d值的逐渐变小，直到到达最短路径值时，算法结束，这时的最短路径估计值就是对应结点的最短路径值。</p>
<p>那么最短路径不存在呢？如果存在负权圈，并且起点可以通过一些顶点到达负权圈，那么利用SPFA算法会进入一个死循环，因为d值会越来越小，并且没有下限，使得最短路不存在。那么我们假设不存在负权圈，则任何最短路上的点必定小于等于n个（没有圈），换言之，用一个数组c[i]来记录i这个点入队的次数，所有的c[i]必定都小于等于n，所以一旦有一个c[i] &gt; n，则表明这个图中存在负权圈。</p>
<p>接下来给出SPFA更加直观的理解，假设图中所有边的边权都为1，那么SPFA其实就是一个BFS（Breadth First Search，广度优先搜索），对于BFS的介绍可以参阅搜索入门。BFS首先到达的顶点所经历的路径一定是最短路(也就是经过的最少顶点数)，所以此时利用数组记录节点访问可以使每个顶点只进队一次，但在至少有一条边的边权不为1的带权图中，最先到达的顶点的路径不一定是最短路，这就是为什么要用d数组来记录当前最短路估计值的原因了。</p>
</blockquote>
<p>集训时的模板:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1010</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">30010</span>;<br><span class="hljs-keyword">int</span> head[maxn];<br><span class="hljs-keyword">int</span> dis[maxn];<br><span class="hljs-keyword">int</span> in[maxn];       <span class="hljs-comment">//in[i]表示点i的入队次数</span><br><span class="hljs-keyword">bool</span> vis[maxn];     <span class="hljs-comment">//vis[i]表示点i是否在队列中</span><br><span class="hljs-keyword">int</span> cnt;<br><span class="hljs-keyword">int</span> n , m;<br><span class="hljs-comment">//int s , t;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(head , <span class="hljs-number">-1</span> , <span class="hljs-keyword">sizeof</span>(head));<br>    cnt = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to;<br>    <span class="hljs-keyword">int</span> w;<br>    <span class="hljs-keyword">int</span> last;<br>&#125;Edge[maxm];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u , <span class="hljs-keyword">int</span> v , <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    Edge[cnt].to = v;<br>    Edge[cnt].w = w;<br>    Edge[cnt].last = head[u];<br>    head[u] = cnt++;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> u;<br>    <span class="hljs-keyword">int</span> w;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> node &amp;res)<span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> w &gt; res.w;<br>    &#125;<br>    node (<span class="hljs-keyword">int</span> _u , <span class="hljs-keyword">int</span> _w)<br>    &#123;<br>        u = _u;<br>        w = _w;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(vis , <span class="hljs-literal">false</span> , <span class="hljs-keyword">sizeof</span>(vis));<br>    <span class="hljs-built_in">memset</span>(in , <span class="hljs-number">0</span> , <span class="hljs-keyword">sizeof</span>(ln));<br>    <span class="hljs-built_in">memset</span>(dis , inf , <span class="hljs-keyword">sizeof</span>(dis));<br>    dis[s] = <span class="hljs-number">0</span>;<br>    q.push(s);<br>    vis[s] = <span class="hljs-literal">true</span>;      <br>    in[s] = <span class="hljs-number">1</span>;                                              <span class="hljs-comment">//顶点入队vis标记，，，同时统计顶点的入队次数</span><br>    <span class="hljs-keyword">while</span> (!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front();<br>        q.pop();<br>        vis[u] = <span class="hljs-literal">false</span>;                                     <span class="hljs-comment">//对头元素出队，并且消除标记</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i != <span class="hljs-number">-1</span>; i = Edge[i].last)    <span class="hljs-comment">//遍历顶点u的邻接表</span><br>        &#123;<br>            <span class="hljs-keyword">int</span> v = Edge[i].to;<br>            <span class="hljs-keyword">int</span> w = Edge[i].w;<br>            <span class="hljs-keyword">if</span> (dis[u] + w &lt; dis[v])<br>            &#123;<br>                dis[v] = dis[u] + w;                        <span class="hljs-comment">//松弛</span><br>                <span class="hljs-keyword">if</span> (!vis[v])                                <span class="hljs-comment">//顶点v不在队内</span><br>                &#123;<br>                    vis[v] = <span class="hljs-literal">true</span>;                          <span class="hljs-comment">//标记</span><br>                    in[v]++;                                <span class="hljs-comment">//统计次数</span><br>                    q.push(v);                              <span class="hljs-comment">//入队</span><br>                    <span class="hljs-keyword">if</span> (in[v] &gt;= n)                         <span class="hljs-comment">//超出入队次数上限，说明有负环</span><br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;                  <span class="hljs-comment">//存在负环返回-1</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h3><p>如果需要求任意两点之间的距离，不必调用n次dijstra或者Bellman-ford算法，可以使用Floyd-Warshall算法</p>
<ul>
<li>Floyd算法利用 <strong>动态规划</strong> ，，</li>
<li>用d[i][j][k]表示从i到j，经过编号不超过k的点所得到的最短距离，则d[i][j][k] = min{d[i][j][k - 1] , d[i][k][k - 1] + d[k][j][k - 1]}</li>
</ul>
<blockquote>
<p>最后介绍一个 <strong>求任意两点最短路</strong> 的算法，很显然，我们可以求n次单源最短路（枚举起点），但是下面这种方法更加容易编码，而且很巧妙，它也是基于动态规划的思想。<br>令d[i][j][k]为只允许经过结点[0, k]的情况下，i 到 j的最短路。那么利用最优子结构性质，有两种情况：</p>
<p>a. 如果最短路经过k点，则d[i][j][k] = d[i][k][k-1] + d[k][j][k-1];</p>
<p>b. 如果最短路不经过k点，则d[i][j][k] = d[i][j][k-1];</p>
<p>于是有状态转移方程： d[i][j][k] = min{ d[i][j][k-1], d[i][k][k-1] + d[k][j][k-1] }  (0 &lt;= i, j, k &lt; n)</p>
<p>这是一个3D/0D问题，只需要按照k递增的顺序进行枚举，就能在O(n^3)的时间内求解，又第三维的状态可以采用滚动数组进行优化，所以空间复杂度为O(n^2)。</p>
</blockquote>
<h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><h3 id="Problem-A-实习生averyboy"><a href="#Problem-A-实习生averyboy" class="headerlink" title="Problem A: 实习生averyboy"></a>Problem A: 实习生averyboy</h3><p>Time Limit: 2 Sec  Memory Limit: 128 MB</p>
<blockquote>
<p>Description</p>
<p>averyboy现在在实习。每天早上他要步行去公司上班，你肯定知道，他是一个非常男孩，所以他会选择最短的路去公司。现在给你averyboy到公司途中的若干个站点，标号为1~N,averyboy的开始在1号站点，它的公司在N号站点，然后给你若干条边代表站点有路可以通过（可能会有重边）。现在你需要告诉averyboy他到公司的最短路径是多少。</p>
<p>Input</p>
<p>第一行一个整数T（T &lt;= 5）代表测试数据的组数</p>
<p>接下来T组测试数据。</p>
<p>每组测试数据第一行为两个整数N，M(1 &lt;= N &lt;= 100, 0 &lt;= M &lt;= 10000)代表站点的个数和边的条数</p>
<p>接下来M行，每一行三个数u, v, w代表站点u,v之间有一条无向边，边的权值为w(1 &lt;= u, v &lt;= N, 0 &lt;= w &lt;= 1000)</p>
<p>Output</p>
<p>对于每组测试数据，如果存在路径使得averyboy能够到达公司，输出一个整数代表这个最短路径的长度，反之输出averyboynb</p>
<p>Sample Input<br>2<br>3 2<br>1 2 1<br>2 3 1<br>3 1<br>1 2 1</p>
<p>Sample Output<br>2<br>averyboynb</p>
</blockquote>
<p>我的代码，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">105</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">20020</span>;         <span class="hljs-comment">//无向图边开两倍</span><br><span class="hljs-keyword">int</span> head[maxn];<br><span class="hljs-keyword">int</span> dis[maxn];<br><span class="hljs-keyword">int</span> cnt;<br><span class="hljs-keyword">int</span> n , m;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(head , <span class="hljs-number">-1</span> , <span class="hljs-keyword">sizeof</span>(head));<br><span class="hljs-comment">//    memset(dis , inf , sizeof(dis));</span><br><span class="hljs-comment">//    dis[1] = 0;</span><br>    cnt = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to;<br>    <span class="hljs-keyword">int</span> w;<br>    <span class="hljs-keyword">int</span> last;<br>&#125;Edge[maxm];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u , <span class="hljs-keyword">int</span> v , <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    Edge[cnt].to = v;<br>    Edge[cnt].w = w;<br>    Edge[cnt].last = head[u];<br>    head[u] = cnt++;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> u;<br>    <span class="hljs-keyword">int</span> w;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> node &amp;res)<span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> w &gt; res.w;<br>    &#125;<br>    node (<span class="hljs-keyword">int</span> _u , <span class="hljs-keyword">int</span> _w)<br>    &#123;<br>        u = _u;<br>        w = _w;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        dis[i] = inf;<br>    <span class="hljs-built_in">priority_queue</span>&lt;node&gt; q;<br>    <span class="hljs-keyword">while</span> (!q.empty())  q.pop();<br>    dis[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    q.push(node(<span class="hljs-number">1</span> , <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">while</span> (!q.empty())<br>    &#123;<br>        node nx = q.top();<br>        q.pop();<br>        <span class="hljs-keyword">int</span> u = nx.u;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i != <span class="hljs-number">-1</span>; i = Edge[i].last)<br>        &#123;<br>            <span class="hljs-keyword">int</span> to = Edge[i].to;<br>            <span class="hljs-keyword">int</span> w = Edge[i].w;<br>            <span class="hljs-keyword">if</span> (dis[u] + w &lt; dis[to])<br>            &#123;<br>                dis[to] = dis[u] + w;<br>                q.push(node(to , dis[to]));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">//freopen(&quot;data.in&quot;, &quot;r&quot;, stdin);</span><br><span class="hljs-comment">//    freopen(&quot;test.out&quot;, &quot;w&quot;, stdout);</span><br>    <span class="hljs-keyword">int</span> t;<br>    <span class="hljs-comment">//cin &gt;&gt; t;</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;t);<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-comment">//cin &gt;&gt; n &gt;&gt; m;</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span> , &amp;n , &amp;m);<br>        <span class="hljs-keyword">int</span> u , v , w;<br>        init();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        &#123;<br>            <span class="hljs-comment">//cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span> , &amp;u , &amp;v , &amp;w);<br>            add(u , v , w);<br>            add(v , u , w);<br>        &#125;<br>        Dijkstra();<br><span class="hljs-comment">//        for (int i = 0; i &lt; n; i++)</span><br><span class="hljs-comment">//            cout &lt;&lt; dis[i] &lt;&lt; endl;</span><br>        <span class="hljs-keyword">if</span> (dis[n] != inf)<br>            <span class="hljs-comment">//cout &lt;&lt; dis[n] &lt;&lt; endl;</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span> , dis[n]);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-comment">//cout &lt;&lt; &quot;averyboynb&quot; &lt;&lt; endl;</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;averyboynb\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>学长的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">100</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxe = <span class="hljs-number">10000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">int</span> N, M;<br><span class="hljs-keyword">int</span> dis[maxn];<br><span class="hljs-keyword">int</span> cnt;<br><span class="hljs-keyword">int</span> head[maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> to, w, last;<br>&#125;Edge[maxe&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cnt = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(head));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    Edge[cnt].to = v;<br>    Edge[cnt].w = w;<br>    Edge[cnt].last = head[u];<br>    head[u] = cnt++;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> u, w;<br>    node(<span class="hljs-keyword">int</span> _u, <span class="hljs-keyword">int</span> _w)&#123;<br>        u = _u;<br>        w = _w;<br>    &#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> node &amp;res) <span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> w &gt; res.w;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++) dis[i] = inf;<br>    <span class="hljs-built_in">priority_queue</span>&lt;node&gt; q;<br>    dis[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    q.push(node(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        node nx = q.top();<br>        q.pop();<br>        <span class="hljs-keyword">int</span> u = nx.u;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; i != <span class="hljs-number">-1</span>; i = Edge[i].last)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = Edge[i].to;<br>            <span class="hljs-keyword">int</span> w = Edge[i].w;<br>            <span class="hljs-keyword">if</span>(dis[u] + w &lt; dis[v])<br>            &#123;<br>                dis[v] = dis[u] + w;<br>                q.push(node(v, dis[v]));<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dis[N];<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//freopen(&quot;data.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">//freopen(&quot;data.out&quot;, &quot;w&quot;, stdout);</span><br>    <span class="hljs-keyword">int</span> T;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;T);<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);<br>        init();<br>        <span class="hljs-keyword">int</span> u, v, w;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= M; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);<br>            add(u, v, w);<br>            add(v, u, w);<br>        &#125;<br>        <span class="hljs-keyword">int</span> ans = Dijkstra();<br>        <span class="hljs-keyword">if</span>(ans &gt;= inf) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;averyboynb\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h3 id="Problem-B-实习生averyboy2"><a href="#Problem-B-实习生averyboy2" class="headerlink" title="Problem B: 实习生averyboy2"></a>Problem B: 实习生averyboy2</h3><p>Time Limit: 1 Sec  Memory Limit: 128 MB</p>
<blockquote>
<p>Description</p>
<p>averyboy现在在实习。每天早上他要步行去公司上班，你肯定知道，他是一个非常男孩，所以他会选择最短的路去公司。现在给你averyboy到公司途中的若干个站点，标号为1~N,现在averyboy的起点可以是多个点，averyboy的终点也就是公司也可以是多个点，给你站点之间的边和它们的权值。现在你需要告诉averyboy他到公司的最短路径是多少（只需从任意一个起点开始到达任意一个终点就行）。</p>
<p>Input</p>
<p>第一行一个整数T（T &lt;= 5）代表测试数据的组数</p>
<p>接下来T组测试数据。</p>
<p>每组测试数据第一行为两个整数N，M，k1, k2(1 &lt;= N &lt;= 1000, 0 &lt;= M &lt;= 10000)代表站点的个数和边的条数以及起点的个数，终点的个数（1 &lt;= k1, k2 &lt;= N）</p>
<p>接下来一行k1个数x[i]，代表averyboy起点（1 &lt;= x[i] &lt;= N)</p>
<p>接下来一行k2个数y[i]，代表终点(1 &lt;= y[i] &lt;= N)</p>
<p>接下来M行，每一行三个数u, v, w代表站点u,v之间有一条无向边（可能会有重边），边的权值为w(1 &lt;= u, v &lt;= N, 0 &lt;= w &lt;= 1000)</p>
<p>Output</p>
<p>对于每组测试数据，如果存在路径使得averyboy能够到达公司，输出一个整数代表这个最短路径的长度，反之输出averyboynb</p>
<p>Sample Input<br>1<br>4 5 2 2<br>1 4<br>2 3<br>1 2 1<br>2 3 2<br>3 4 4<br>1 3 3<br>1 4 5</p>
<p>Sample Output<br>1</p>
<p>HINT</p>
<p>选择起点为1终点为2，此时有最短路径1.</p>
</blockquote>
<p>因为最短路主要是求两点之间的最短路，，对于这种多个起点和多个终点的可以先找一个 <strong>超级起点</strong> 原点s和一个 <strong>汇点t</strong>,,,构建这两个点到相应的每一个起点、终点的边，，并且权值为零，，，这样化求多个起点和终点之间的最短路为原点s和汇点t之间最短路，，，，</p>
<p>我的代码(当时做时dijkstra算法的模板打错了，，所以换spfa做的，，，差不多都):<br><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1010</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">30010</span>;<br><span class="hljs-keyword">int</span> head[maxn];<br><span class="hljs-keyword">int</span> dis[maxn];<br><span class="hljs-keyword">int</span> ln[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> cnt;<br><span class="hljs-keyword">int</span> n , m , k1 , k2;<br><span class="hljs-comment">//int s , t;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(head , <span class="hljs-number">-1</span> , <span class="hljs-keyword">sizeof</span>(head));<br>    cnt = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to;<br>    <span class="hljs-keyword">int</span> w;<br>    <span class="hljs-keyword">int</span> last;<br>&#125;Edge[maxm];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u , <span class="hljs-keyword">int</span> v , <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    Edge[cnt].to = v;<br>    Edge[cnt].w = w;<br>    Edge[cnt].last = head[u];<br>    head[u] = cnt++;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> u;<br>    <span class="hljs-keyword">int</span> w;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> node &amp;res)<span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> w &gt; res.w;<br>    &#125;<br>    node (<span class="hljs-keyword">int</span> _u , <span class="hljs-keyword">int</span> _w)<br>    &#123;<br>        u = _u;<br>        w = _w;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(vis , <span class="hljs-literal">false</span> , <span class="hljs-keyword">sizeof</span>(vis));<br>    <span class="hljs-built_in">memset</span>(ln , <span class="hljs-number">0</span> , <span class="hljs-keyword">sizeof</span>(ln));<br>    <span class="hljs-built_in">memset</span>(dis , inf , <span class="hljs-keyword">sizeof</span>(dis));<br>    dis[s] = <span class="hljs-number">0</span>;<br>    q.push(s);<br>    vis[s] = <span class="hljs-literal">true</span>;<br>    ln[s] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front();<br>        q.pop();<br>        vis[u] = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i != <span class="hljs-number">-1</span>; i = Edge[i].last)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = Edge[i].to;<br>            <span class="hljs-keyword">int</span> w = Edge[i].w;<br>            <span class="hljs-keyword">if</span> (dis[u] + w &lt; dis[v])<br>            &#123;<br>                dis[v] = dis[u] + w;<br>                <span class="hljs-keyword">if</span> (!vis[v])<br>                &#123;<br>                    vis[v] = <span class="hljs-literal">true</span>;<br>                    ln[v]++;<br>                    q.push(v);<br>                    <span class="hljs-keyword">if</span> (ln[v] &gt;= n)<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-keyword">int</span> t;<br>    <span class="hljs-comment">//cin &gt;&gt; t;</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;t);<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-comment">//cin &gt;&gt; n &gt;&gt; m;</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span> , &amp;n , &amp;m , &amp;k1 , &amp;k2);<br>        <span class="hljs-keyword">int</span> u , v , w;<br>        init();<br>        <span class="hljs-comment">//设原点s = 0;汇点t = n + 1;</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k1; i++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> tmp;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;tmp);<br>            add(<span class="hljs-number">0</span> , tmp , <span class="hljs-number">0</span>);<br>            add(tmp , <span class="hljs-number">0</span> , <span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k2; i++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> tmp;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;tmp);<br>            add(tmp , n + <span class="hljs-number">1</span> , <span class="hljs-number">0</span>);<br>            add(n + <span class="hljs-number">1</span> , tmp , <span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        &#123;<br>            <span class="hljs-comment">//cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span> , &amp;u , &amp;v , &amp;w);<br>            add(u , v , w);<br>            add(v , u , w);<br>        &#125;<br><br>        spfa(<span class="hljs-number">0</span>);<br><br>        <span class="hljs-keyword">if</span> (dis[n + <span class="hljs-number">1</span>] != inf)<br>            <span class="hljs-comment">//cout &lt;&lt; dis[n] &lt;&lt; endl;</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span> , dis[n + <span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-comment">//cout &lt;&lt; &quot;averyboynb&quot; &lt;&lt; endl;</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;averyboynb\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><br>学长的代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">10000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxe = <span class="hljs-number">100000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">int</span> N, M;<br><span class="hljs-keyword">int</span> k1, k2;<br><span class="hljs-keyword">int</span> dis[maxn];<br><span class="hljs-keyword">int</span> cnt;<br><span class="hljs-keyword">int</span> head[maxn];<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; s1, s2;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> to, w, last;<br>&#125;Edge[maxe&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cnt = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(head));<br>    s1.clear();<br>    s2.clear();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    Edge[cnt].to = v;<br>    Edge[cnt].w = w;<br>    Edge[cnt].last = head[u];<br>    head[u] = cnt++;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> u, w;<br>    node(<span class="hljs-keyword">int</span> _u, <span class="hljs-keyword">int</span> _w)&#123;<br>        u = _u;<br>        w = _w;<br>    &#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> node &amp;res) <span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> w &gt; res.w;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= N + <span class="hljs-number">1</span>; i++) dis[i] = inf;<br>    <span class="hljs-built_in">priority_queue</span>&lt;node&gt; q;<br>    dis[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    q.push(node(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        node nx = q.top();<br>        q.pop();<br>        <span class="hljs-keyword">int</span> u = nx.u;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; i != <span class="hljs-number">-1</span>; i = Edge[i].last)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = Edge[i].to;<br>            <span class="hljs-keyword">int</span> w = Edge[i].w;<br>            <span class="hljs-keyword">if</span>(dis[u] + w &lt; dis[v])<br>            &#123;<br>                dis[v] = dis[u] + w;<br>                q.push(node(v, dis[v]));<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dis[N + <span class="hljs-number">1</span>];<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//freopen(&quot;data.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">//freopen(&quot;data.out&quot;, &quot;w&quot;, stdout);</span><br>    <span class="hljs-keyword">int</span> T;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;T);<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;N, &amp;M, &amp;k1, &amp;k2);<br>        init();<br>        <span class="hljs-keyword">int</span> u, v, w;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k1; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;u);<br>            s1.push_back(u);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k2; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;u);<br>            s2.push_back(u);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= M; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);<br>            add(u, v, w);<br>            add(v, u, w);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k1; i++)<br>        &#123;<br>            add(<span class="hljs-number">0</span>, s1[i], <span class="hljs-number">0</span>);<br>            add(s1[i], <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k2; i++)<br>        &#123;<br>            add(s2[i], N + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>            add(N + <span class="hljs-number">1</span>, s2[i], <span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">int</span> ans = Dijkstra();<br>        <span class="hljs-keyword">if</span>(ans &gt;= inf) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;averyboynb\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="Problem-C-商人averyboy"><a href="#Problem-C-商人averyboy" class="headerlink" title="Problem C: 商人averyboy"></a>Problem C: 商人averyboy</h3><p>Time Limit: 2 Sec  Memory Limit: 128 MB</p>
<blockquote>
<p>Description</p>
<p>averyboy最近想买一个新的mac，所以他想赚点钱。所以他选择去卖书。现在有N个城市，书在每一个城市价格不一样，但是在同一个城市，买一本书和卖一本书的价格一样，然后如果城市x,y之间有一条权值为w的边，averyboy从城市x到y需要支付w费用，现在给你书在N个城市的价格和城市之间的边以及权值（N - 1条边，刚好使N个城市想连通），averyboy需要选择一个城市为起点，买一本书，然后跑到另外一个城市将这本书卖掉。averyboy数学不太好，你能告诉他他最多能赚多少钱吗？</p>
<p>Input</p>
<p>第一行一个整数T（T &lt;= 5）代表测试数据的组数</p>
<p>接下来T组测试数据</p>
<p>每组测试数据第一行为一个正整数N（N &lt;= 1e5）代表城市的个数</p>
<p>接下来一行N个整数a[i]，代表书在每个城市的价格(1 &lt;= a[i] &lt;= 10000)</p>
<p>接下来N - 1行，每行三个数u, v, w（1 &lt;= u, v &lt;= N, 1 &lt;= w &lt;= 1000）代表城市u,v之间有一条权值为w的边</p>
<p>Output</p>
<p>对于每组测试数据,输出一个整数，表示averyboy能赚到的最多的钱。</p>
<p>Sample Input<br>1<br>4<br>10 40 15 30<br>1 2 30<br>1 3 2<br>3 4 10</p>
<p>Sample Output<br>8</p>
<p>HINT</p>
<p>他选择从1号城市买书，到4号城市卖书，然后他买书和路费一共花费10 + 2 + 10 = 22，到了4号城市把书卖掉，赚30元，所以最终赚了30 - 22 = 8元，这种情况下他能赚的最多。</p>
</blockquote>
<p>因为有加有减，点还有值，，，所以可以建立原点和汇点分离他的值，，也就是题里的买书钱和卖书钱，，，其中s到每一个点的权值为正的书价钱，，，t到每一个点的权值为负的书价钱，，，</p>
<p>又因为有负权值的边，，，所以选用SPFA算法，，，，对s做SPFA之后dis[t] = 买书钱 + 路费 - 卖书钱，，，这个dis[t]是最小的 ，，，，取负值即为卖书钱 - 买书钱 - 路费，，，也就是最终赚的最大值</p>
<p>我的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">500010</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">500020</span>;<br><span class="hljs-keyword">int</span> head[maxn];<br><span class="hljs-keyword">int</span> dis[maxn];<br><span class="hljs-keyword">int</span> in[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> money[maxn];<br><span class="hljs-keyword">int</span> cnt;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-comment">//int s , t;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(head , <span class="hljs-number">-1</span> , <span class="hljs-keyword">sizeof</span>(head));<br>    cnt = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to;<br>    <span class="hljs-keyword">int</span> w;<br>    <span class="hljs-keyword">int</span> last;<br>&#125;Edge[maxm];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u , <span class="hljs-keyword">int</span> v , <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    Edge[cnt].to = v;<br>    Edge[cnt].w = w;<br>    Edge[cnt].last = head[u];<br>    head[u] = cnt++;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> u;<br>    <span class="hljs-keyword">int</span> w;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> node &amp;res)<span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> w &gt; res.w;<br>    &#125;<br>    node (<span class="hljs-keyword">int</span> _u , <span class="hljs-keyword">int</span> _w)<br>    &#123;<br>        u = _u;<br>        w = _w;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(vis , <span class="hljs-literal">false</span> , <span class="hljs-keyword">sizeof</span>(vis));<br>    <span class="hljs-built_in">memset</span>(in , <span class="hljs-number">0</span> , <span class="hljs-keyword">sizeof</span>(in));<br>    <span class="hljs-built_in">memset</span>(dis , inf , <span class="hljs-keyword">sizeof</span>(dis));<br>    dis[s] = <span class="hljs-number">0</span>;<br>    q.push(s);<br>    vis[s] = <span class="hljs-literal">true</span>;<br>    in[s] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front();<br>        q.pop();<br>        vis[u] = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i != <span class="hljs-number">-1</span>; i = Edge[i].last)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = Edge[i].to;<br>            <span class="hljs-keyword">int</span> w = Edge[i].w;<br>            <span class="hljs-keyword">if</span> (dis[u] + w &lt; dis[v])<br>            &#123;<br>                dis[v] = dis[u] + w;<br>                <span class="hljs-keyword">if</span> (!vis[v])<br>                &#123;<br>                    vis[v] = <span class="hljs-literal">true</span>;<br>                    in[v]++;<br>                    q.push(v);<br>                    <span class="hljs-keyword">if</span> (in[v] &gt;= n)<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-keyword">int</span> t;<br>    <span class="hljs-comment">//cin &gt;&gt; t;</span><br>    <span class="hljs-comment">//freopen(&quot;data.in&quot; , &quot;r&quot; , stdin);</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;t);<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-comment">//cin &gt;&gt; n &gt;&gt; m;</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;n);<br>        <span class="hljs-keyword">int</span> u , v , w;<br>        init();<br>        <span class="hljs-keyword">int</span> money[maxn];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;money[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            add(<span class="hljs-number">0</span> , i , money[i]);              <span class="hljs-comment">//0为原点</span><br>            <span class="hljs-comment">//add(i , 0 , money);</span><br>            <span class="hljs-comment">//add(n + 1 , i , -money);      </span><br>            add(i , n + <span class="hljs-number">1</span> , -money[i]);         <span class="hljs-comment">//n + 1即为汇点，权值取负</span><br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;  n; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span> , &amp;u , &amp;v , &amp;w);<br>            add(u , v , w);<br>            add(v , u , w);<br>        &#125;<br><br>        spfa(<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span> , -dis[n + <span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>学长的代码:<br>不是用前向星存的图，，而且貌似思路与上面那个不同，，，先放在这，，之后再看一下<br><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">100000</span> + <span class="hljs-number">100</span>;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> d[maxn];<br><span class="hljs-keyword">bool</span> visit[maxn];<br><span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> v;<br>    <span class="hljs-keyword">int</span> w;<br>    node(<span class="hljs-keyword">int</span> _v = <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> _w = <span class="hljs-number">0</span>)&#123;<br>        v = _v;<br>        w = _w;<br>    &#125;<br>&#125;;<br><span class="hljs-built_in">queue</span>&lt;node&gt; q;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span> ,<span class="hljs-keyword">int</span>&gt; &gt; g[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-built_in">memset</span>(d, -inf, <span class="hljs-keyword">sizeof</span>(d));<br>   <span class="hljs-built_in">memset</span>(visit, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span>(visit));<br>   <span class="hljs-keyword">while</span>(!q.empty()) q.pop();<br>   d[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>   q.push(node(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br>   <span class="hljs-keyword">while</span>(!q.empty())<br>   &#123;<br>       node nx = q.front();<br>       q.pop();<br>       <span class="hljs-keyword">int</span> v = nx.v;<br>       visit[v] = <span class="hljs-literal">false</span>;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; g[v].size(); i++)<br>       &#123;<br>           <span class="hljs-keyword">int</span> u = g[v][i].first;<br>           <span class="hljs-keyword">int</span> ww = g[v][i].second;<br>           <span class="hljs-keyword">if</span>(d[v] + ww &gt; d[u] &amp;&amp; u != <span class="hljs-number">0</span>)<br>           &#123;<br>               d[u] = d[v] + ww;<br>               <span class="hljs-keyword">if</span>(visit[u]) <span class="hljs-keyword">continue</span>;<br>               visit[u] = <span class="hljs-literal">true</span>;<br>               q.push(node(u, d[u]));<br>           &#125;<br>       &#125;<br>   &#125;<br>   <span class="hljs-keyword">if</span>(d[n + <span class="hljs-number">1</span>] &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> d[n + <span class="hljs-number">1</span>];<br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n + <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        g[i].clear();<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//freopen(&quot;data.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">//freopen(&quot;data.out&quot;, &quot;w&quot;, stdout);</span><br>    <span class="hljs-keyword">int</span> T;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;T);<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>        init();<br>        <span class="hljs-keyword">int</span> u, v, w;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;w);<br>            g[<span class="hljs-number">0</span>].push_back(<span class="hljs-built_in">make_pair</span>(i, w));<br>            g[i].push_back(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">0</span>, w));<br>            g[n + <span class="hljs-number">1</span>].push_back(<span class="hljs-built_in">make_pair</span>(i, -w));<br>            g[i].push_back(<span class="hljs-built_in">make_pair</span>(n + <span class="hljs-number">1</span>, -w));<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);<br>            g[u].push_back(<span class="hljs-built_in">make_pair</span>(v, -w));<br>            g[v].push_back(<span class="hljs-built_in">make_pair</span>(u, -w));<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, spfa());<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p>
<h3 id="Problem-D-老司机averyboy"><a href="#Problem-D-老司机averyboy" class="headerlink" title="Problem D: 老司机averyboy"></a>Problem D: 老司机averyboy</h3><p>Time Limit: 2 Sec  Memory Limit: 128 MB</p>
<blockquote>
<p>Description</p>
<p>averyboy不仅是一个非常男孩，他还是一位老司机。现在averyboy在开火车，一共有N个火车站，每个火车站出站口只有若干个出口，这些出口分别对应一些其他的火车站，代表如果从这一个出口开出火车，下一站将会达到该出口对应的火车站。每一个火车站有一个默认的出口，如果此次averyboy想要出站的出口不是默认出口，他将会被他的上级批评一次。现在averyboy需要从A站到B站，给你每一个火车站出站口的出口的情况，你需要告诉averyboy他最少要被批评多少次</p>
<p>Input</p>
<p>第一行一个整数T（T &lt;= 5）代表测试数据的组数</p>
<p>接下来T组测试数据</p>
<p>每组测试数据的第一行三个整数N, A, B（1 &lt;= N &lt;= 100, 1 &lt;= A, B &lt;= N）分别代表火车站的数量以及averyboy的起点站和终点站<br>接下来N行数据，第i行第一个数为k，代表第i个火车站有k个出口，后面k个整数（k个整数可能会有若干个相同），代表每个出口通向的下一个火车站编号，k个数中的第一个表示这个火车站默认的出口。（0 &lt;= k &lt;= N）</p>
<p>Output</p>
<p>对于每组测试数据，如果A能够达到B，输出一个整数，代表averyboy最小被批评的次数反之输出averyboynb</p>
<p>Sample Input<br>2<br>3 2 1<br>2 2 3<br>2 3 1<br>2 1 2<br>3 1 2<br>2 3 2<br>1 3<br>1 1</p>
<p>Sample Output<br>0<br>1</p>
</blockquote>
<p>根据题意默认的出口的权值可以设为0，其他的为1，，即加一次被批评的次数，，，最少的批评次数即为求最短路，，，</p>
<p>我的代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//#include &lt;iostream&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1010</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">30010</span>;<br><span class="hljs-keyword">int</span> head[maxn];<br><span class="hljs-keyword">int</span> dis[maxn];<br><span class="hljs-keyword">int</span> ln[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> cnt;<br><span class="hljs-keyword">int</span> n , acfun , bilibili;<br><span class="hljs-comment">//int s , t;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(head , <span class="hljs-number">-1</span> , <span class="hljs-keyword">sizeof</span>(head));<br>    cnt = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to;<br>    <span class="hljs-keyword">int</span> w;<br>    <span class="hljs-keyword">int</span> last;<br>&#125;Edge[maxm];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u , <span class="hljs-keyword">int</span> v , <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    Edge[cnt].to = v;<br>    Edge[cnt].w = w;<br>    Edge[cnt].last = head[u];<br>    head[u] = cnt++;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> u;<br>    <span class="hljs-keyword">int</span> w;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> node &amp;res)<span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> w &gt; res.w;<br>    &#125;<br>    node (<span class="hljs-keyword">int</span> _u , <span class="hljs-keyword">int</span> _w)<br>    &#123;<br>        u = _u;<br>        w = _w;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(vis , <span class="hljs-literal">false</span> , <span class="hljs-keyword">sizeof</span>(vis));<br>    <span class="hljs-built_in">memset</span>(ln , <span class="hljs-number">0</span> , <span class="hljs-keyword">sizeof</span>(ln));<br>    <span class="hljs-built_in">memset</span>(dis , inf , <span class="hljs-keyword">sizeof</span>(dis));<br>    dis[s] = <span class="hljs-number">0</span>;<br>    q.push(s);<br>    vis[s] = <span class="hljs-literal">true</span>;<br>    ln[s] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front();<br>        q.pop();<br>        vis[u] = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i != <span class="hljs-number">-1</span>; i = Edge[i].last)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = Edge[i].to;<br>            <span class="hljs-keyword">int</span> w = Edge[i].w;<br>            <span class="hljs-keyword">if</span> (dis[u] + w &lt; dis[v])<br>            &#123;<br>                dis[v] = dis[u] + w;<br>                <span class="hljs-keyword">if</span> (!vis[v])<br>                &#123;<br>                    vis[v] = <span class="hljs-literal">true</span>;<br>                    ln[v]++;<br>                    q.push(v);<br>                    <span class="hljs-keyword">if</span> (ln[v] &gt;= n)<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-keyword">int</span> t;<br>    <span class="hljs-comment">//cin &gt;&gt; t;</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;t);<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-comment">//cin &gt;&gt; n &gt;&gt; m;</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span> , &amp;n , &amp;acfun , &amp;bilibili);<br>        <span class="hljs-keyword">int</span> u , v , w;<br>        init();<br>        <span class="hljs-comment">//设原点s = 0;汇点t = n + 1;</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> k;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;k);<br>            <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;t);<br>            add(i , t , <span class="hljs-number">0</span>);                 <span class="hljs-comment">//默认出口</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>; j &lt;= k; j++)<br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;t);           <span class="hljs-comment">//会被批评的出口</span><br>                add(i , t , <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br><br>        spfa(acfun);<br><br>        <span class="hljs-keyword">if</span> (dis[bilibili] != inf)<br>            <span class="hljs-comment">//cout &lt;&lt; dis[n] &lt;&lt; endl;</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span> , dis[bilibili]);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-comment">//cout &lt;&lt; &quot;averyboynb&quot; &lt;&lt; endl;</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;averyboynb\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>学长的代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">100</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxe = <span class="hljs-number">10000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">int</span> N, A, B;<br><span class="hljs-keyword">int</span> dis[maxn];<br><span class="hljs-keyword">int</span> cnt;<br><span class="hljs-keyword">int</span> head[maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> to, w, last;<br>&#125;Edge[maxe&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cnt = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(head));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    Edge[cnt].to = v;<br>    Edge[cnt].w = w;<br>    Edge[cnt].last = head[u];<br>    head[u] = cnt++;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> u, w;<br>    node(<span class="hljs-keyword">int</span> _u, <span class="hljs-keyword">int</span> _w)&#123;<br>        u = _u;<br>        w = _w;<br>    &#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> node &amp;res) <span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> w &gt; res.w;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++) dis[i] = inf;<br>    <span class="hljs-built_in">priority_queue</span>&lt;node&gt; q;<br>    dis[s] = <span class="hljs-number">0</span>;<br>    q.push(node(s, <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        node nx = q.top();<br>        q.pop();<br>        <span class="hljs-keyword">int</span> u = nx.u;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; i != <span class="hljs-number">-1</span>; i = Edge[i].last)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = Edge[i].to;<br>            <span class="hljs-keyword">int</span> w = Edge[i].w;<br>            <span class="hljs-keyword">if</span>(dis[u] + w &lt; dis[v])<br>            &#123;<br>                dis[v] = dis[u] + w;<br>                q.push(node(v, dis[v]));<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dis[t];<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    freopen(<span class="hljs-string">&quot;data.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>);<br>    freopen(<span class="hljs-string">&quot;data.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-built_in">stdout</span>);<br>    <span class="hljs-keyword">int</span> T;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;T);<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;N, &amp;A, &amp;B);<br>        init();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> k, x;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;k);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= k; j++)<br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>                <span class="hljs-keyword">if</span>(j == <span class="hljs-number">1</span>) add(i, x, <span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">else</span> add(i, x, <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> ans = Dijkstra(A, B);<br>        <span class="hljs-keyword">if</span>(ans &gt;= inf) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;averyboynb\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="http://www.cnblogs.com/chenxiwenruo/p/4513754.html">一个大佬的模板,,,</a></p>
<p>没了，，，假期再看一遍看能再补些啥，，，，</p>
]]></content>
      <tags>
        <tag>acm</tag>
        <tag>算法</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM-网络流-网络流24题</title>
    <url>/2019/08/04/ACM-%E7%BD%91%E7%BB%9C%E6%B5%81-%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p><a href="https://loj.ac/problems/tag/30,6">所有题目</a></p>
<p><a href="https://www.cnblogs.com/xseventh/p/7912202.html">参考</a></p>
<p>曾经放弃的网络流，，没想到前期的多校每次都是一道签到题，，，emmmmm，，，，不得不去补一下这些经典的网络流模型，，，</p>
<p>图论题大多数都是以建图为主，，建图的一大部分都是依靠已有的模型来搞得，，，</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">题目</th>
<th style="text-align:center">模型</th>
<th style="text-align:center">转化模型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">搭配飞行员</td>
<td style="text-align:center">二分图最大匹配</td>
<td style="text-align:center">最大流</td>
</tr>
<tr>
<td style="text-align:center">太空飞行计划</td>
<td style="text-align:center">最大权闭合子图</td>
<td style="text-align:center">最大流最小割</td>
</tr>
<tr>
<td style="text-align:center">最小路径覆盖</td>
<td style="text-align:center">有向无环图的最小路径覆盖</td>
<td style="text-align:center">拆点、最大流</td>
</tr>
<tr>
<td style="text-align:center">魔术球</td>
<td style="text-align:center">有向无环图的最小路径覆盖</td>
<td style="text-align:center">拆点、最大流或贪心</td>
</tr>
<tr>
<td style="text-align:center">圆桌聚餐</td>
<td style="text-align:center">二分图多重匹配</td>
<td style="text-align:center">最大流</td>
</tr>
<tr>
<td style="text-align:center">最长递增子序列问题</td>
<td style="text-align:center">最多不相交路径</td>
<td style="text-align:center">网络最大流</td>
</tr>
<tr>
<td style="text-align:center">试题库</td>
<td style="text-align:center">二分图多重匹配</td>
<td style="text-align:center">网络最大流</td>
</tr>
<tr>
<td style="text-align:center">方格取数问题</td>
<td style="text-align:center">二分图点权最大独立集</td>
<td style="text-align:center">网络最小割</td>
</tr>
<tr>
<td style="text-align:center">数字梯形问题</td>
<td style="text-align:center">最大权不相交路径</td>
<td style="text-align:center">最小费用最大流</td>
</tr>
</tbody>
</table>
</div>
<span id="more"></span>
<h1 id="搭配飞行员"><a href="#搭配飞行员" class="headerlink" title="搭配飞行员"></a><a href="https://loj.ac/problem/6000">搭配飞行员</a></h1><p><a href="https://loj.ac/problem/6000">搭配飞行员</a></p>
<p>网络流拆点建图或者二分图最大匹配</p>
<p>ps: 网络流的复杂度真是 $O(玄学)$ ，，某些题最快的板子有时贼慢，，</p>
<h2 id="网络流HLPP"><a href="#网络流HLPP" class="headerlink" title="网络流HLPP"></a>网络流HLPP</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">int</span> MAXN, <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span> =</span> <span class="hljs-keyword">int</span>&gt;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HLPP</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">const</span> T INF = numeric_limits&lt;T&gt;::max();<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">    &#123;</span><br>        <span class="hljs-keyword">int</span> to, nxt;<br>        T flow;<br>        edge(<span class="hljs-keyword">int</span> _to, <span class="hljs-keyword">int</span> _nxt, T _flow):to(_to), nxt(_nxt), flow(_flow)&#123;&#125;<br>    &#125;;<br>    <span class="hljs-keyword">int</span> s = MAXN - <span class="hljs-number">1</span>, t = MAXN - <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">vector</span>&lt;edge&gt; g[MAXN];<br>    <span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; lst[MAXN];<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; gap[MAXN];<br>    <span class="hljs-keyword">int</span> ptr[MAXN];<br>    T excess[MAXN];<br>    <span class="hljs-keyword">int</span> highest, height[MAXN], cnt[MAXN], work;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, T flow, <span class="hljs-keyword">bool</span> isDirected = <span class="hljs-literal">true</span>)</span></span><br><span class="hljs-function">    </span>&#123;<br>        g[u].push_back(edge(v, g[v].size(), flow));<br>        g[v].push_back(edge(u, g[u].size() - <span class="hljs-number">1</span>, isDirected ? <span class="hljs-number">0</span> : flow));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upHeight</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> nh)</span></span><br><span class="hljs-function">    </span>&#123;<br>        ++work;<br>        <span class="hljs-keyword">if</span>(height[v] != MAXN)--cnt[height[v]];<br>        height[v] = nh;<br>        <span class="hljs-keyword">if</span>(nh == MAXN) <span class="hljs-keyword">return</span>;<br>        ++cnt[nh]; highest = nh;<br>        gap[nh].push_back(v);<br>        <span class="hljs-keyword">if</span>(excess[v] &gt; <span class="hljs-number">0</span>)lst[nh].push_back(v), ++ptr[nh];<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">globalRelabel</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        work = <span class="hljs-number">0</span>;<br>        fill(begin(height), end(height), MAXN);<br>        fill(begin(cnt), end(cnt), <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= highest; ++i)lst[i].clear(), gap[i].clear();<br>        height[t] = <span class="hljs-number">0</span>;<br>        <span class="hljs-function"><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">q</span><span class="hljs-params">(&#123;t&#125;)</span></span>;<br>        <span class="hljs-keyword">while</span>(!q.empty())<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = q.front(); q.pop();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;e: g[v])<br>                <span class="hljs-keyword">if</span>(height[e.to] == MAXN &amp;&amp; g[e.to][e.nxt].flow &gt; <span class="hljs-number">0</span>)<br>                    q.push(e.to), upHeight(e.to, height[v] + <span class="hljs-number">1</span>);<br>            highest = height[v];<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v, edge &amp;e)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(excess[e.to] == <span class="hljs-number">0</span>)lst[height[e.to]].push_back(e.to), ++ptr[height[e.to]];<br>        T df = min(excess[v], e.flow);<br>        e.flow -= df; g[e.to][e.nxt].flow += df;<br>        excess[v] -= df; excess[e.to] += df;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">discharge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">int</span> nh = MAXN;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;e: g[v])<br>        &#123;<br>            <span class="hljs-keyword">if</span>(e.flow &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(height[v] == height[e.to] + <span class="hljs-number">1</span>)<br>                &#123;<br>                    push(v, e);<br>                    <span class="hljs-keyword">if</span>(excess[v] &lt;= <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                    nh = min(nh, height[e.to] + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cnt[height[v]] &gt; <span class="hljs-number">1</span>)upHeight(v, nh);<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = height[v]; i &lt; MAXN; ++i)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> j: gap[i])upHeight(j, MAXN);<br>                gap[i].clear(); ptr[i] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function">T <span class="hljs-title">MaxFlow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> heur_n = MAXN)</span></span><br><span class="hljs-function">    </span>&#123;<br>        fill(begin(excess), end(excess), <span class="hljs-number">0</span>);<br>        excess[s] = INF; excess[t] = -INF;<br>        globalRelabel();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;e: g[s])push(s, e);<br>        <span class="hljs-keyword">for</span>(; highest &gt;= <span class="hljs-number">0</span>; --highest)<br>        &#123;<br>            <span class="hljs-keyword">while</span>(!lst[highest].empty())<br>            &#123;<br>                <span class="hljs-keyword">int</span> v = lst[highest].back();<br>                lst[highest].pop_back();<br>                discharge(v);<br>                <span class="hljs-keyword">if</span>(work &gt; heur_n &lt;&lt; <span class="hljs-number">2</span>)globalRelabel();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> excess[t] + INF;<br>    &#125;<br>&#125;;<br>HLPP&lt;maxn, <span class="hljs-keyword">int</span>&gt; hlpp;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>  <br>    <span class="hljs-keyword">int</span> n, m; <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>, t = n &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>;<br>    hlpp.s = s; hlpp.t = t;<br>    <span class="hljs-keyword">int</span> u, v;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v)<br>    &#123;<br>        hlpp.addedge(s, u, <span class="hljs-number">1</span>);<br>        hlpp.addedge(u + n, v, <span class="hljs-number">1</span>);<br>        hlpp.addedge(v + n, t, <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)hlpp.addedge(i, i + n, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; hlpp.MaxFlow() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="二分图hungary"><a href="#二分图hungary" class="headerlink" title="二分图hungary"></a>二分图hungary</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">egde</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> linker[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">bool</span> used[maxn];<br><span class="hljs-keyword">int</span> un;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(!used[v])<br>        &#123;<br>            used[v] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(linker[v] == <span class="hljs-number">-1</span> || dfs(linker[v]))<br>            &#123;<br>                linker[v] = u;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">hungary</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(linker, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> linker);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> u = <span class="hljs-number">0</span>; u &lt; un; ++u)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(used, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> used);<br>        <span class="hljs-keyword">if</span>(dfs(u))++res;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>  <br>    <span class="hljs-keyword">int</span> n, m; <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    un = n;<br>    init();<br>    <span class="hljs-keyword">int</span> u, v;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v)addedge(u - <span class="hljs-number">1</span>, v - <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; hungary() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="太空飞行计划"><a href="#太空飞行计划" class="headerlink" title="太空飞行计划"></a><a href="https://loj.ac/problem/6001">太空飞行计划</a></h1><p><a href="https://loj.ac/problem/6001">太空飞行计划</a></p>
<p>最大权闭合子图模板题，，</p>
<p>虽然很早之前做过最大权闭合子图的题，，但是当时只是硬几组了当时那几道题的模型： 源点连的点是正点，，汇点连的边是负点，，然后中间的点的容量是正无穷，，，跑最大流最小割，，答案就是正点和和减去最大流，，，题A了之后就不了了之了，，貌似当时也就放弃了网络流，，，去弄别的了，，，</p>
<p>这次再做这种模型的题时，，，虽然知道是这个模型，，最后建出的图也是上面的思路，，但是就是不知道怎么建，，，问题不能抽象出来，，</p>
<p>后来在洛谷和<a href="https://codeforces.com/blog/entry/63544">cf的G题题解</a>看到了一个关于这模型简单理解：想像这样一个问题，，有一些工程，每完成一个工程都可以获得一定的收益，，而每一个工程需要一些工具才能完成，，每购买一个工具会有一个花费，，然后问你选择一些工程以及购买相应的工具后的最大收益，，，显然收益的值是正的，，也就对应上面的正点，，购买工具的花费是负的，，对应的就是负点，，每一项工程里所需的工具连边为无穷，，这样就建出一个左边是一排工程，右边是所有的工具的图，，</p>
<p><img src="https://cdn.luogu.org/upload/pic/21712.png" alt=""></p>
<p>为什么要跑最大流呢，，，最大流等于最小割，，最小割也就是砍掉一些边用最小的花费来使源汇点处于两个不相交的集合，，，这样我们相当于最后的最优解就是S点集的工程以及对应的工具，，，最小割割集中一部分是丢弃的工程一部分是选择的工具，，这样用所有可能的收益，，也就是工程的边权和减去最小割就是最后的最大的收益，，，</p>
<p>至于怎么求S集中的点，，dinic等增广路算法中可以在遍历一遍残留网络，，能从s到达的点就是S集，，，对于hlpp这样的算法应该是和源点高度相同的点即为S集合的点，，（至于为什么，，我也没法证明，，，只是根据我对hlpp和增广路算法中dep数组的理解试了一下，，然后样例过了，，交上去也没问题就这样用了，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e2</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">int</span> MAXN, <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span> =</span> <span class="hljs-keyword">int</span>&gt;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HLPP</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">const</span> T INF = numeric_limits&lt;T&gt;::max();<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">    &#123;</span><br>        <span class="hljs-keyword">int</span> to, nxt;<br>        T flow;<br>        edge(<span class="hljs-keyword">int</span> _to, <span class="hljs-keyword">int</span> _nxt, T _flow):to(_to), nxt(_nxt), flow(_flow)&#123;&#125;<br>    &#125;;<br>    <span class="hljs-keyword">int</span> s = MAXN - <span class="hljs-number">1</span>, t = MAXN - <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">vector</span>&lt;edge&gt; g[MAXN];<br>    <span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; lst[MAXN];<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; gap[MAXN];<br>    <span class="hljs-keyword">int</span> ptr[MAXN];<br>    T excess[MAXN];<br>    <span class="hljs-keyword">int</span> highest, height[MAXN], cnt[MAXN], work;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, T flow, <span class="hljs-keyword">bool</span> isDirected = <span class="hljs-literal">true</span>)</span></span><br><span class="hljs-function">    </span>&#123;<br>        g[u].push_back(edge(v, g[v].size(), flow));<br>        g[v].push_back(edge(u, g[u].size() - <span class="hljs-number">1</span>, isDirected ? <span class="hljs-number">0</span> : flow));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upHeight</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> nh)</span></span><br><span class="hljs-function">    </span>&#123;<br>        ++work;<br>        <span class="hljs-keyword">if</span>(height[v] != MAXN)--cnt[height[v]];<br>        height[v] = nh;<br>        <span class="hljs-keyword">if</span>(nh == MAXN)<span class="hljs-keyword">return</span>;<br>        ++cnt[nh]; highest = nh;<br>        gap[nh].push_back(v);<br>        <span class="hljs-keyword">if</span>(excess[v] &gt; <span class="hljs-number">0</span>)lst[nh].push_back(v), ++ptr[nh];<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">globalRelabel</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        work = <span class="hljs-number">0</span>;<br>        fill(begin(height), end(height), MAXN);<br>        fill(begin(cnt), end(cnt), <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= highest; ++i)lst[i].clear(), gap[i].clear();<br>        height[t] = <span class="hljs-number">0</span>;<br>        <span class="hljs-function"><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">q</span><span class="hljs-params">(&#123;t&#125;)</span></span>;<br>        <span class="hljs-keyword">while</span>(!q.empty())<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = q.front(); q.pop();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;e: g[v])<br>                <span class="hljs-keyword">if</span>(height[e.to] == MAXN &amp;&amp; g[e.to][e.nxt].flow &gt; <span class="hljs-number">0</span>)<br>                    q.push(e.to), upHeight(e.to, height[v] + <span class="hljs-number">1</span>);<br>            highest = height[v];<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v, edge &amp;e)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(excess[e.to] == <span class="hljs-number">0</span>)lst[height[e.to]].push_back(e.to), ++ptr[height[e.to]];<br>        T df = min(excess[v], e.flow);<br>        e.flow -= df; g[e.to][e.nxt].flow += df;<br>        excess[v] -= df; excess[e.to] += df;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">discharge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">int</span> nh = MAXN;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;e: g[v])<br>        &#123;<br>            <span class="hljs-keyword">if</span>(e.flow &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(height[v] == height[e.to] + <span class="hljs-number">1</span>)<br>                &#123;<br>                    push(v, e);<br>                    <span class="hljs-keyword">if</span>(excess[v] &lt;= <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                    nh = min(nh, height[e.to] + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cnt[height[v]] &gt; <span class="hljs-number">1</span>)upHeight(v, nh);<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = height[v]; i &lt; MAXN; ++i)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> j: gap[i])upHeight(j, MAXN);<br>                gap[i].clear(); ptr[i] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function">T <span class="hljs-title">MaxFlow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> heur_n = MAXN)</span></span><br><span class="hljs-function">    </span>&#123;<br>        fill(begin(excess), end(excess), <span class="hljs-number">0</span>);<br>        excess[s] = INF; excess[t] = -INF;<br>        globalRelabel();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;e: g[s])push(s, e);<br>        <span class="hljs-keyword">for</span>(; highest &gt;= <span class="hljs-number">0</span>; --highest)<br>        &#123;<br>            <span class="hljs-keyword">while</span>(!lst[highest].empty())<br>            &#123;<br>                <span class="hljs-keyword">int</span> v = lst[highest].back();<br>                lst[highest].pop_back();<br>                discharge(v);<br>                <span class="hljs-keyword">if</span>(work &gt; heur_n &lt;&lt; <span class="hljs-number">2</span>)globalRelabel();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> excess[t] + INF;<br>    &#125;<br>    <span class="hljs-comment">//hlpp求割集判断height数组是否和源点的值相等即可，，（待确认</span><br>&#125;;<br><br>HLPP&lt;maxn, <span class="hljs-keyword">int</span>&gt; hlpp;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br>  <br>    <span class="hljs-keyword">int</span> m, n; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;m, &amp;n);<br>    hlpp.s = <span class="hljs-number">0</span>; hlpp.t = n + m + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-keyword">int</span> w, u;<br>        <span class="hljs-keyword">char</span> ch;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;w);<br>        hlpp.addedge(hlpp.s, i, w);<br>        sum += w;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>, &amp;u, &amp;ch);<br>            hlpp.addedge(i, m + u, inf);<br>            <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;\n&#x27;</span> || ch == <span class="hljs-string">&#x27;\r&#x27;</span>)<span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-keyword">int</span> w;<span class="hljs-built_in">cin</span> &gt;&gt; w;<br>        hlpp.addedge(i + m, hlpp.t, w);<br>    &#125;<br>    sum -= hlpp.MaxFlow();<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ans1, ans2;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<span class="hljs-keyword">if</span>(hlpp.height[i] == hlpp.height[hlpp.s])ans1.push_back(i);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-keyword">if</span>(hlpp.height[i + m] == hlpp.height[hlpp.s])ans2.push_back(i);<br>    <span class="hljs-keyword">if</span>(ans1.size())<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, ans1[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; ans1.size(); ++i)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>, ans1[i]);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ans2.size())<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, ans2[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; ans2.size(); ++i)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>, ans2[i]);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, sum);<br>    <br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="最小路径覆盖"><a href="#最小路径覆盖" class="headerlink" title="最小路径覆盖"></a><a href="https://loj.ac/problem/6002">最小路径覆盖</a></h1><p><a href="https://loj.ac/problem/6002">最小路径覆盖</a></p>
<p>之前准备学二分图以及相关的知识点，，然后因为一些时间原因放弃了，，，，</p>
<p>这道是二分图中的一个概念： 最小路径覆盖，，</p>
<p>最小路径覆盖指的是给你一张图，，然后对于一些简单路的集合P，，，如果这个集合中每一条路径的点的集合正好就是原图的点集的话，，，就说这个P是这个图的一个路径覆盖，，然后路径数最少的一个P就称为 最小路径覆盖，，，</p>
<p>在二分图的学习中，，有这么一个推论： 最小路径覆盖 = 点数 - 最大匹配</p>
<p>这里的最大匹配要在拆点后的图上跑，，这里的拆点是为了保证每找到一个匹配就会将这条边的起点加入到P中，，并且舍弃到其他的从他出发的边，，</p>
<p><a href="https://www.cnblogs.com/qixingzhi/p/9418690.html">具体的解释可以看这里</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld; <br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-comment">// const int mod = 1e9 + 7;</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">998244353</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt, cap, flow;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> rw = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v; edge[tot].cap = w; edge[tot].flow = <span class="hljs-number">0</span>;<br>    edge[tot].nxt = head[u]; head[u] = tot++;<br>    edge[tot].to = u; edge[tot].cap = rw; edge[tot].flow = <span class="hljs-number">0</span>;<br>    edge[tot].nxt = head[v]; head[v] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> q[maxn];<br><span class="hljs-keyword">int</span> dep[maxn], cur[maxn], sta[maxn];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> front = <span class="hljs-number">0</span>, tail = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(dep, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(dep[<span class="hljs-number">0</span>]) * (n + <span class="hljs-number">1</span>));<br>    dep[s] = <span class="hljs-number">0</span>;<br>    q[tail++] = s;<br>    <span class="hljs-keyword">while</span>(front &lt; tail)<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q[front++];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(edge[i].cap &gt; edge[i].flow &amp;&amp; dep[v] == <span class="hljs-number">-1</span>)<br>            &#123;<br>                dep[v] = dep[u] + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(v == t)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                q[tail++] = v;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dinic</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> maxflow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(bfs(s, t, n))<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)cur[i] = head[i];<br>        <span class="hljs-keyword">int</span> u = s, tail = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(cur[s] != <span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(u == t)<br>            &#123;<br>                <span class="hljs-keyword">int</span> tp = inf;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = tail - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i)<br>                    tp = min(tp, edge[sta[i]].cap - edge[sta[i]].flow);<br>                maxflow += tp;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = tail - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i)<br>                &#123;<br>                    edge[sta[i]].flow += tp;<br>                    edge[sta[i] ^ <span class="hljs-number">1</span>].flow -= tp;<br>                    <span class="hljs-keyword">if</span>(edge[sta[i]].cap - edge[sta[i]].flow == <span class="hljs-number">0</span>)tail = i;<br>                &#125;<br>                u = edge[sta[tail] ^ <span class="hljs-number">1</span>].to;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cur[u] != <span class="hljs-number">-1</span> &amp;&amp; edge[cur[u]].cap &gt; edge[cur[u]].flow &amp;&amp; dep[u] + <span class="hljs-number">1</span> == dep[edge[cur[u]].to])<br>            &#123;<br>                sta[tail++] = cur[u];<br>                u = edge[cur[u]].to;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">while</span>(u != s &amp;&amp; cur[u] == <span class="hljs-number">-1</span>)<br>                    u = edge[sta[--tail] ^ <span class="hljs-number">1</span>].to;<br>                cur[u] = edge[cur[u]].nxt;<br>            &#125;<br>            <br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxflow;<br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">findpath</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">bool</span> &amp;flag, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> loc = x + n;<br>    vis[x] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[loc]; ~i; i = edge[i].nxt)<br>        <span class="hljs-keyword">if</span>(edge[i].flow == <span class="hljs-number">-1</span> &amp;&amp; edge[i].to != n * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>)<br>            findpath(edge[i].to, flag, n);<br>    <span class="hljs-keyword">if</span>(flag)<span class="hljs-built_in">cout</span> &lt;&lt; x;<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; x;<br>    <span class="hljs-keyword">if</span>(flag)flag = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>, t = n &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>;<br>    init();<br>    <span class="hljs-keyword">int</span> u, v;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;<br>        addedge(u, v + n, <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)addedge(s, i, <span class="hljs-number">1</span>), addedge(i + n, t, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> ans = n - dinic(s, t, n &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// for(int i = s; i &lt;= t; ++i)</span><br>    <span class="hljs-comment">//     for(int j = head[i]; ~j; j = edge[j].nxt)</span><br>    <span class="hljs-comment">//         cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; edge[j].to &lt;&lt; &quot; &quot; &lt;&lt; edge[j].cap &lt;&lt; &quot; &quot; &lt;&lt; edge[j].flow &lt;&lt; endl;</span><br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[t]; ~i; i = edge[i].nxt)<br>    &#123;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">// cout &lt;&lt; edge[i].flow &lt;&lt; endl;</span><br>        <span class="hljs-keyword">if</span>(edge[i].flow == <span class="hljs-number">-1</span> &amp;&amp; !vis[edge[i].to - n])<br>        &#123;<br>            findpath(edge[i].to - n, flag, n);<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="魔术球"><a href="#魔术球" class="headerlink" title="魔术球"></a><a href="https://loj.ac/problem/6003">魔术球</a></h1><p><a href="https://loj.ac/problem/6003">魔术球</a></p>
<p>这题也是一个最小路径覆盖的问题，，一开始我又像成了简单的 每个点仅取一次 的那种问题了，，因为要找到一个最多的个数，，，把球看成点，满足条件的点间连边的话，，这样并不能知道我们要的东西，，，拆点跑网络流得到的也只是一个最小路径覆盖，，也就相当于是柱子数，，，所以要动态建图，，不断的加点，，判断此时加了一个点后的柱子数是几个，，当加到某个点超过给定的柱子数使停下来即可，，，</p>
<p>因为是动态加点，，所以这里拆点我是将一个用 $i &lt;&lt; 1$ 表示，，反点就是 $i &lt;&lt; 1 | 1$ ，，这样直接左移一位便是原来点的编号，，</p>
<p>输出路径和上面那题一样，，，</p>
<p>当然这题可以直接暴力贪心做，，<a href="https://blog.csdn.net/xy20130630/article/details/51336960">贪心正确性的证明：</a></p>
<h2 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld; <br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-comment">// const int mod = 1e9 + 7;</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">998244353</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt, cap, flow;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> tot, head[maxn];<br><span class="hljs-keyword">int</span> gap[maxn], dep[maxn], cur[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> rw = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v; edge[tot].cap = w; edge[tot].flow = <span class="hljs-number">0</span>;<br>    edge[tot].nxt = head[u]; head[u] = tot++;<br>    edge[tot].to = u; edge[tot].cap = rw; edge[tot].flow = <span class="hljs-number">0</span>;<br>    edge[tot].nxt = head[v]; head[v] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> q[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dep, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> dep);<br>    <span class="hljs-built_in">memset</span>(gap, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> gap);<br>    gap[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> front = <span class="hljs-number">0</span>, rear = <span class="hljs-number">0</span>;<br>    dep[t] = <span class="hljs-number">0</span>;<br>    q[rear++] = t;<br>    <span class="hljs-keyword">while</span>(front != rear)<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q[front++];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(dep[v] != <span class="hljs-number">-1</span>)<span class="hljs-keyword">continue</span>;<br>            q[rear++] = v;<br>            dep[v] = dep[u] + <span class="hljs-number">1</span>;<br>            ++gap[dep[v]];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> sta[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">isap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    bfs(s, t);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= tot; ++i)cur[i] = head[i];<br>    <span class="hljs-keyword">int</span> top = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> u = s;<br>    <span class="hljs-keyword">int</span> maxflow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(dep[s] &lt; n)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(u == t)<br>        &#123;<br>            <span class="hljs-keyword">int</span> min = inf;<br>            <span class="hljs-keyword">int</span> inser;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(min &gt; edge[sta[i]].cap - edge[sta[i]].flow)<br>                &#123;<br>                    min = edge[sta[i]].cap - edge[sta[i]].flow;<br>                    inser = i;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i)<br>            &#123;<br>                edge[sta[i]].flow += min;<br>                edge[sta[i] ^ <span class="hljs-number">1</span>].flow -= min;<br>            &#125;<br>            maxflow += min;<br>            top = inser;<br>            u = edge[sta[top] ^ <span class="hljs-number">1</span>].to;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">int</span> v; <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = cur[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dep[v] + <span class="hljs-number">1</span> == dep[u])<br>            &#123;<br>                flag = <span class="hljs-literal">true</span>;<br>                cur[u] = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)<br>        &#123;<br>            sta[top++] = cur[u];<br>            u = v;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> min = n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dep[edge[i].to] &lt; min)<br>            &#123;<br>                min = dep[edge[i].to];<br>                cur[u] = i;<br>            &#125;<br>        &#125;<br>        --gap[dep[u]];<br>        <span class="hljs-keyword">if</span>(!gap[dep[u]])<span class="hljs-keyword">return</span> maxflow;<br>        dep[u] = min + <span class="hljs-number">1</span>;<br>        ++gap[dep[u]];<br>        <span class="hljs-keyword">if</span>(u != s)u = edge[sta[--top] ^ <span class="hljs-number">1</span>].to;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxflow;<br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">findpath</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">bool</span> &amp;f)</span></span><br><span class="hljs-function"></span>&#123;<br>    vis[x] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">int</span> loc = x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[loc]; ~i; i = edge[i].nxt)<br>        <span class="hljs-keyword">if</span>(edge[i].flow == <span class="hljs-number">-1</span> &amp;&amp; edge[i].to != maxn - <span class="hljs-number">1</span>)<br>            findpath(edge[i].to &gt;&gt; <span class="hljs-number">1</span>, f);<br>    <span class="hljs-keyword">if</span>(f)<span class="hljs-built_in">cout</span> &lt;&lt; x;<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; x;<br>    <span class="hljs-keyword">if</span>(f)f = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">int</span> n; <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    init();<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>, i;<br>    <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>, t = maxn - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i - ans &lt;= n + <span class="hljs-number">1</span>; ++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i - <span class="hljs-number">1</span>; ++j)<br>            <span class="hljs-keyword">if</span>((<span class="hljs-keyword">int</span>)<span class="hljs-built_in">sqrt</span>(i + j) * (<span class="hljs-keyword">int</span>)<span class="hljs-built_in">sqrt</span>(i + j) == i + j) <br>                addedge(j &lt;&lt; <span class="hljs-number">1</span>, i &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        addedge(s, i &lt;&lt; <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        addedge(i &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, t, <span class="hljs-number">1</span>);<br>        ans += isap(s, t, i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>);<br>    &#125;<br>    ans = i - <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-comment">// for(int i = s; i &lt;= t; ++i)</span><br>    <span class="hljs-comment">//     for(int j = head[i]; ~j; j = edge[j].nxt)</span><br>    <span class="hljs-comment">//         cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; edge[j].to &lt;&lt; &quot; &quot; &lt;&lt; edge[j].cap &lt;&lt; &quot; &quot; &lt;&lt; edge[j].flow &lt;&lt; endl;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[t]; ~i; i = edge[i].nxt)<br>    &#123;<br>        <span class="hljs-keyword">bool</span> f = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(edge[i].flow == <span class="hljs-number">-1</span> &amp;&amp; !vis[edge[i].to &gt;&gt; <span class="hljs-number">1</span>])<br>        &#123;<br>            findpath(edge[i].to &gt;&gt; <span class="hljs-number">1</span>, f);<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= ans; ++i)<span class="hljs-keyword">if</span>(!vis[i])<span class="hljs-built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld; <br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-comment">// const int mod = 1e9 + 7;</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">998244353</span>;<br><br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br><br>    <span class="hljs-keyword">int</span> n; <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; ++i)<br>        &#123;<br>            <span class="hljs-keyword">int</span> tmp = v[i].back();<br>            <span class="hljs-keyword">if</span>((<span class="hljs-keyword">int</span>)<span class="hljs-built_in">sqrt</span>(tmp + ans) * (<span class="hljs-keyword">int</span>)<span class="hljs-built_in">sqrt</span>(tmp + ans) == tmp + ans)<br>            &#123;<br>                flag = <span class="hljs-literal">false</span>;<br>                v[i].push_back(ans++);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)<br>        &#123;<br>            v[++cnt].push_back(ans++);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cnt &gt; n)<span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans - <span class="hljs-number">2</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt - <span class="hljs-number">1</span>; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; v[i][<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; v[i].size(); ++j)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; v[i][j];<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="圆桌聚餐"><a href="#圆桌聚餐" class="headerlink" title="圆桌聚餐"></a><a href="https://loj.ac/problem/6004">圆桌聚餐</a></h1><p><a href="https://loj.ac/problem/6004">圆桌聚餐</a></p>
<p>简单的网络流，，</p>
<p>源点到每个单位建边，，容量为每个单位的代表数，，</p>
<p>每个餐桌到汇点建边，，容量为每个餐桌的容量，，，</p>
<p>每个单位向每一个餐桌建边，，容量为1，，</p>
<p>这样就限制了每个单位只取代表数的人，，，</p>
<p>最后跑完网络流之后，，正着遍历一遍图即可，，，</p>
<p><del>看别人的题解说这是一道 二分图的多重匹配，，，有时间再看一下</del></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld; <br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt, cap, flow;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> tot, head[maxn];<br><span class="hljs-keyword">int</span> gap[maxn], dep[maxn], cur[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> rw = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v; edge[tot].cap = w; edge[tot].flow = <span class="hljs-number">0</span>;<br>    edge[tot].nxt = head[u]; head[u] = tot++;<br>    edge[tot].to = u; edge[tot].cap = rw; edge[tot].flow = <span class="hljs-number">0</span>;<br>    edge[tot].nxt = head[v]; head[v] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> q[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dep, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> dep);<br>    <span class="hljs-built_in">memset</span>(gap, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> gap);<br>    gap[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> front = <span class="hljs-number">0</span>, rear = <span class="hljs-number">0</span>;<br>    dep[t] = <span class="hljs-number">0</span>;<br>    q[rear++] = t;<br>    <span class="hljs-keyword">while</span>(front != rear)<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q[front++];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(dep[v] != <span class="hljs-number">-1</span>)<span class="hljs-keyword">continue</span>;<br>            q[rear++] = v;<br>            dep[v] = dep[u] + <span class="hljs-number">1</span>;<br>            ++gap[dep[v]];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> sta[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">isap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    bfs(s, t);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= tot; ++i)cur[i] = head[i];<br>    <span class="hljs-keyword">int</span> top = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> u = s;<br>    <span class="hljs-keyword">int</span> maxflow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(dep[s] &lt; n)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(u == t)<br>        &#123;<br>            <span class="hljs-keyword">int</span> min = inf;<br>            <span class="hljs-keyword">int</span> inser;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(min &gt; edge[sta[i]].cap - edge[sta[i]].flow)<br>                &#123;<br>                    min = edge[sta[i]].cap - edge[sta[i]].flow;<br>                    inser = i;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i)<br>            &#123;<br>                edge[sta[i]].flow += min;<br>                edge[sta[i] ^ <span class="hljs-number">1</span>].flow -= min;<br>            &#125;<br>            maxflow += min;<br>            top = inser;<br>            u = edge[sta[top] ^ <span class="hljs-number">1</span>].to;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">int</span> v; <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = cur[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dep[v] + <span class="hljs-number">1</span> == dep[u])<br>            &#123;<br>                flag = <span class="hljs-literal">true</span>;<br>                cur[u] = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)<br>        &#123;<br>            sta[top++] = cur[u];<br>            u = v;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> min = n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dep[edge[i].to] &lt; min)<br>            &#123;<br>                min = dep[edge[i].to];<br>                cur[u] = i;<br>            &#125;<br>        &#125;<br>        --gap[dep[u]];<br>        <span class="hljs-keyword">if</span>(!gap[dep[u]])<span class="hljs-keyword">return</span> maxflow;<br>        dep[u] = min + <span class="hljs-number">1</span>;<br>        ++gap[dep[u]];<br>        <span class="hljs-keyword">if</span>(u != s)u = edge[sta[--top] ^ <span class="hljs-number">1</span>].to;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxflow;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">int</span> n, m; <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    init();<br>    <span class="hljs-keyword">int</span> k, sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>, t = n + m + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; k;<br>        sum += k;<br>        addedge(s, i, k);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)addedge(i, n + j, <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; k;<br>        addedge(n + i, t, k);<br>    &#125;<br>    <span class="hljs-keyword">int</span> ans = isap(s, t, n + m + <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span>(ans == sum)<br>    &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = head[i]; ~j; j = edge[j].nxt)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(edge[j].flow == <span class="hljs-number">1</span> &amp;&amp; edge[j].to != s &amp;&amp; edge[j].to != t)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(flag)<span class="hljs-built_in">cout</span> &lt;&lt; edge[j].to - n;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; edge[j].to - n;<br>                    <span class="hljs-keyword">if</span>(flag)flag = <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <br><br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="最长递增子序列"><a href="#最长递增子序列" class="headerlink" title="最长递增子序列"></a><a href="https://loj.ac/problem/6005">最长递增子序列</a></h1><p><a href="https://loj.ac/problem/6005">最长递增子序列</a></p>
<p>这道题也是我重新开始肝网络流的原因之一，，，</p>
<p>这道题的模型起先是今年的一场多校中的网络流签到题，，，但是之前从来没有见过这个模型，，压根不会建图，，，</p>
<p>那道题的解法是利用了这个模型的思想，然后用最小费用最大流，，<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6611">杭电这题地址</a></p>
<p>我的做法在另一篇博客，，，</p>
<p>这题的题意很简单，，第一问就是一个简单线性dp，，，</p>
<p>第二问的建模方式是这样的：首先保证每个数只用一次，，按照之前的套路，，每个点拆成两个点 $u, u’$ 其中边的容量为1，，表示这个点只能选择一次，，然后利用dp的数组来判断每两个数 $a_i, a_j$ 如果满足 $a_i \le a_j \  \&amp;\&amp; \  dp_i + 1 == dp_j$ ，，那么建边，容量为1，，这样保证一条选择的路径就是一个最长递增子序列，，，因为题目要保证其长度为最长的，，所以我们不能直接将所有点都连到汇点 $t$ ，，而是对于dp数组中标记为lisans的连到汇点，，对于每一个开头，，也就是 $dp_i == 1$ 的连源点，，，最后跑最大流即为答案，，，</p>
<p>对于第三问，，因为不限制第一个数和最后一个数，，那么我们增加源点到第一个点的容量为inf， ，，**如果最后一个点可以作为lis的末尾，，也就是 $dp_n == lisans$ 那么就连汇点，，再跑最大流，累加答案即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e6</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><br><span class="hljs-keyword">int</span> a[maxn], n, lisans;<br><span class="hljs-keyword">int</span> dp[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lis</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dp[i] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; i; ++j)<br>            <span class="hljs-keyword">if</span>(a[i] &gt;= a[j])<br>                dp[i] = max(dp[i], dp[j] + <span class="hljs-number">1</span>);<br>    lisans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)lisans = max(lisans, dp[i]);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt, cap, flow;<br>&#125;edge[maxn];<br><span class="hljs-keyword">int</span> tot, head[maxn];<br><span class="hljs-keyword">int</span> gap[maxn], dep[maxn], cur[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> rw = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v; edge[tot].cap = w; edge[tot].flow = <span class="hljs-number">0</span>;<br>    edge[tot].nxt = head[u]; head[u] = tot++;<br>    edge[tot].to = u; edge[tot].cap = rw; edge[tot].flow = <span class="hljs-number">0</span>;<br>    edge[tot].nxt = head[v]; head[v] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> q[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dep, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> dep);<br>    <span class="hljs-built_in">memset</span>(gap, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> gap);<br>    gap[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> front = <span class="hljs-number">0</span>, rear = <span class="hljs-number">0</span>;<br>    dep[t] = <span class="hljs-number">0</span>;<br>    q[rear++] = t;<br>    <span class="hljs-keyword">while</span>(front != rear)<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q[front++];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(dep[v] != <span class="hljs-number">-1</span>)<span class="hljs-keyword">continue</span>;<br>            q[rear++] = v;<br>            dep[v] = dep[u] + <span class="hljs-number">1</span>;<br>            ++gap[dep[v]];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> sta[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">isap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    bfs(s, t);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= tot; ++i)cur[i] = head[i];<br>    <span class="hljs-keyword">int</span> top = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> u = s;<br>    <span class="hljs-keyword">int</span> maxflow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(dep[s] &lt; n)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(u == t)<br>        &#123;<br>            <span class="hljs-keyword">int</span> min = inf;<br>            <span class="hljs-keyword">int</span> inser;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(min &gt; edge[sta[i]].cap - edge[sta[i]].flow)<br>                &#123;<br>                    min = edge[sta[i]].cap - edge[sta[i]].flow;<br>                    inser = i;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i)<br>            &#123;<br>                edge[sta[i]].flow += min;<br>                edge[sta[i] ^ <span class="hljs-number">1</span>].flow -= min;<br>            &#125;<br>            maxflow += min;<br>            top = inser;<br>            u = edge[sta[top] ^ <span class="hljs-number">1</span>].to;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">int</span> v; <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = cur[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dep[v] + <span class="hljs-number">1</span> == dep[u])<br>            &#123;<br>                flag = <span class="hljs-literal">true</span>;<br>                cur[u] = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)<br>        &#123;<br>            sta[top++] = cur[u];<br>            u = v;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> min = n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dep[edge[i].to] &lt; min)<br>            &#123;<br>                min = dep[edge[i].to];<br>                cur[u] = i;<br>            &#125;<br>        &#125;<br>        --gap[dep[u]];<br>        <span class="hljs-keyword">if</span>(!gap[dep[u]])<span class="hljs-keyword">return</span> maxflow;<br>        dep[u] = min + <span class="hljs-number">1</span>;<br>        ++gap[dep[u]];<br>        <span class="hljs-keyword">if</span>(u != s)u = edge[sta[--top] ^ <span class="hljs-number">1</span>].to;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxflow;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">quersion1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    init();<br>    <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>, t = n &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-keyword">if</span>(dp[i] == <span class="hljs-number">1</span>)addedge(s, i, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)addedge(i, i + n, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>            <span class="hljs-keyword">if</span>(dp[i] == dp[j] - <span class="hljs-number">1</span> &amp;&amp; a[i] &lt;= a[j])<br>                addedge(i + n, j, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-keyword">if</span>(dp[i] == lisans)addedge(i + n, t, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> isap(s, t, (n + <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">quersion2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// init();</span><br>    <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>, t = n &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// for(int i = 1; i &lt;= n; ++i)if(dp[i] == 1)addedge(s, i, 1);</span><br>    <span class="hljs-comment">// for(int i = 1; i &lt;= n; ++i)addedge(i, i + n, 1);</span><br>    <span class="hljs-comment">// for(int i = 1; i &lt;= n; ++i)</span><br>    <span class="hljs-comment">//     for(int j = i + 1; j &lt;= n; ++j)</span><br>    <span class="hljs-comment">//         if(dp[i] == dp[j] - 1 &amp;&amp; a[i] &lt;= a[j])</span><br>    <span class="hljs-comment">//             addedge(i + n, j, 1);</span><br>    <span class="hljs-comment">// for(int i = 1; i &lt;= n; ++i)if(dp[i] == lisans)addedge(i + n, t, 1);</span><br>    addedge(s, <span class="hljs-number">1</span>, inf), addedge(<span class="hljs-number">1</span>, <span class="hljs-number">1</span> + n, inf); <br>    <span class="hljs-keyword">if</span>(lisans == dp[n])addedge(n, n + n, inf), addedge(n + n, t, inf);<br>    <span class="hljs-keyword">return</span> isap(s, t, (n + <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>    <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    lis();<span class="hljs-built_in">cout</span> &lt;&lt; lisans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">int</span> ans = quersion1();<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; ans + quersion2() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="试题库"><a href="#试题库" class="headerlink" title="试题库"></a><a href="https://loj.ac/problem/6006">试题库</a></h1><p><a href="https://loj.ac/problem/6006">试题库</a></p>
<p>和上面那道 圆桌聚餐 很像，，</p>
<p>建图是这样的：左边k个点表示试卷的类型，右边n个点，，表示试题，，</p>
<p>源点连每个类型，，容量为该类型所需的试题数，，这样当全部跑满时就是满足题意的一种选择</p>
<p>每个类型连每一个对应点，容量为1，，，比如第i份试题的类型有1,3,那么左边的1，3两个点连这个试题的点，，</p>
<p>最后我为了保证每个试题只选一次，，拆点容量为1，，</p>
<p>最后将所有右边试题的点连到汇点就可以了，，容量也为1，，，</p>
<p>（貌似kuangbin的板子中 <code>memcpy</code> 可能会re，，因为复制的缓冲区大小的问题吧，，，head和cur大小不一样就会re，，，可以将 <code>memcpy</code> 参数改为tot，，，或者直接手动复制，，，</p>
<p>具体的方案就是正着遍历k个点就阔以了，，，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e6</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt, cap, flow;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> rw = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v; edge[tot].cap = w; edge[tot].flow = <span class="hljs-number">0</span>;<br>    edge[tot].nxt = head[u]; head[u] = tot++;<br>    edge[tot].to = u; edge[tot].cap = rw; edge[tot].flow = <span class="hljs-number">0</span>;<br>    edge[tot].nxt = head[v]; head[v] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> q[maxn];<br><span class="hljs-keyword">int</span> gap[maxn], dep[maxn], cur[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dep, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> dep);<br>    <span class="hljs-built_in">memset</span>(gap, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> gap);<br>    gap[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> front = <span class="hljs-number">0</span>, tail = <span class="hljs-number">0</span>;<br>    dep[t] = <span class="hljs-number">0</span>;<br>    q[tail++] = t;<br>    <span class="hljs-keyword">while</span>(front != tail)<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q[front++];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(dep[v] != <span class="hljs-number">-1</span>)<span class="hljs-keyword">continue</span>;<br>            q[tail++] = v;<br>            dep[v] = dep[u] + <span class="hljs-number">1</span>;<br>            ++gap[dep[v]];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> sta[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">isap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    bfs(s, t);<br>    <span class="hljs-built_in">memcpy</span>(cur, head, <span class="hljs-keyword">sizeof</span> head);<br>    <span class="hljs-keyword">int</span> top = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> u = s;<br>    <span class="hljs-keyword">int</span> maxflow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(dep[s] &lt; n)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(u == t)<br>        &#123;<br>            <span class="hljs-keyword">int</span> min = inf;<br>            <span class="hljs-keyword">int</span> inser;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(min &gt; edge[sta[i]].cap - edge[sta[i]].flow)<br>                &#123;<br>                    min = edge[sta[i]].cap - edge[sta[i]].flow;<br>                    inser = i;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i)<br>            &#123;<br>                edge[sta[i]].flow += min;<br>                edge[sta[i] ^ <span class="hljs-number">1</span>].flow -= min;<br>            &#125;<br>            maxflow += min;<br>            top = inser;<br>            u = edge[sta[top] ^ <span class="hljs-number">1</span>].to;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">int</span> v;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = cur[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dep[v] + <span class="hljs-number">1</span> == dep[u])<br>            &#123;<br>                flag = <span class="hljs-literal">true</span>;<br>                cur[u] = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)<br>        &#123;<br>            sta[top++] = cur[u];<br>            u = v;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> min = n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dep[edge[i].to] &lt; min)<br>            &#123;<br>                min = dep[edge[i].to];<br>                cur[u] = i;<br>            &#125;<br>        &#125;<br>        --gap[dep[u]];<br>        <span class="hljs-keyword">if</span>(!gap[dep[u]])<span class="hljs-keyword">return</span> maxflow;<br>        dep[u] = min + <span class="hljs-number">1</span>;<br>        ++gap[dep[u]];<br>        <span class="hljs-keyword">if</span>(u != s)u = edge[sta[--top] ^ <span class="hljs-number">1</span>].to;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxflow;<br>&#125;<br><span class="hljs-keyword">int</span> n, k, m, a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    init();<br>    <span class="hljs-built_in">cin</span> &gt;&gt; k &gt;&gt; n;<br>    m = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i)m += a[i];<br>    <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>, t = n * <span class="hljs-number">2</span> + k + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i)addedge(s, i, a[i]);<br>    <span class="hljs-keyword">int</span> num, p;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; num;<br>        <span class="hljs-keyword">while</span>(num--)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; p;<br>            addedge(p, i + k, <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)addedge(i + k, i + k + n, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)addedge(i + k + n, t, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(isap(s, t, t + <span class="hljs-number">1</span>) == m)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= k; ++u)<br>        &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; u &lt;&lt; <span class="hljs-string">&quot;:&quot;</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(edge[i].to != s &amp;&amp; edge[i].flow == <span class="hljs-number">1</span>)<br>                    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; edge[i].to - k;<br>            &#125;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;No Solution!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="方格取数"><a href="#方格取数" class="headerlink" title="方格取数"></a><a href="https://loj.ac/problem/6007">方格取数</a></h1><p><a href="https://loj.ac/problem/6007">方格取数</a></p>
<p>这道题不错，，相比前面那几道一眼就能看出建图方式，，这道题的建图第一次见，，拆图的方式很奇特，，<del>（说到底是做题少，，见的模型不多，，，</del></p>
<p>首先这道题有一个特点要看出来：因为相邻的两个不取，，那么答案一定是斜着一列一列的，，</p>
<p>也就是将方格分成两种：<img src="https://img-blog.csdn.net/20180726134513229?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4OTQ0MTYz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p>
<p>显然属于黑白的两个数是不能同时选择的，，于是我们这样子可以将方格变成一个二分图，，假设一边是黑色的数，，那么另一边就是白色的数，，也就是奇数点在左，，偶数点在右，，</p>
<p><img src="https://img-blog.csdn.net/20180726135237167?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4OTQ0MTYz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p>
<p>按照题意，，相邻的两个数不能选择，，那我们就将不满足题意的点之间连边，，例如 <code>u-&gt;v</code> 就表示选择了点 <code>u</code> 就不能选择点 <code>v</code> ，，为了最后选的点权值最大，，我们需要去掉一些点，，，也就是说我们要在这个二分图中选择一个点集，，然后去掉他，，使得其他的点之间是互不相邻的同时保证权值最大，，</p>
<p>如果不管权值只看点的关系，，那么这个问题就是一个二分图的经典问题： <strong>二分图最大独立集</strong> </p>
<p>二分图最大独立集的描述是这样的： 在一个二分图中，选择最多的点（两边都可以选择），使得所选的点集中任意两点间没有边，，相当于是求用最少的点覆盖所有的边集，，也就是一个最小点覆盖，，然后去掉他即可，，</p>
<p>它的求解是： $二分图的最大独立集=节点数-二分图的最大匹配数$ </p>
<p>那这道题有点权怎么办，，<del>因为是网络流24题，所以</del> 用网络流来解决，，，反正二分图也是可以用网络流来搞定的，，只要左边的每个点的点权变成与源点s的容量，，右边点的点权变成与汇点的容量，，最后跑最大流最小割就行了，，</p>
<p><img src="https://img-blog.csdn.net/20180726135647728?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4OTQ0MTYz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p>
<p>再看最小割的定义，选取尽可能小的边，去掉后形成一个 $ST$ 割，，也就是说明 $ST$ 割两边的点间是没有边的，，这样我们就得到了选择最小的点集，，答案就是与总和的差</p>
<p><a href="[方格取数](https://loj.ac/problem/6007">参考</a>)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e6</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt, cap, flow;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> rw = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// cout &lt;&lt; u &lt;&lt; &quot; &quot; &lt;&lt; v &lt;&lt; &quot; &quot; &lt;&lt; w &lt;&lt; endl;</span><br>    edge[tot].to = v; edge[tot].cap = w; edge[tot].flow = <span class="hljs-number">0</span>;<br>    edge[tot].nxt = head[u]; head[u] = tot++;<br>    edge[tot].to = u; edge[tot].cap = rw; edge[tot].flow = <span class="hljs-number">0</span>;<br>    edge[tot].nxt = head[v]; head[v] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> q[maxn];<br><span class="hljs-keyword">int</span> gap[maxn], dep[maxn], cur[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dep, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> dep);<br>    <span class="hljs-built_in">memset</span>(gap, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> gap);<br>    gap[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> front = <span class="hljs-number">0</span>, tail = <span class="hljs-number">0</span>;<br>    dep[t] = <span class="hljs-number">0</span>;<br>    q[tail++] = t;<br>    <span class="hljs-keyword">while</span>(front != tail)<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q[front++];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(dep[v] != <span class="hljs-number">-1</span>)<span class="hljs-keyword">continue</span>;<br>            q[tail++] = v;<br>            dep[v] = dep[u] + <span class="hljs-number">1</span>;<br>            ++gap[dep[v]];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> sta[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">isap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    bfs(s, t);<br>    <span class="hljs-built_in">memcpy</span>(cur, head, <span class="hljs-keyword">sizeof</span> head);<br>    <span class="hljs-keyword">int</span> top = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> u = s;<br>    <span class="hljs-keyword">int</span> maxflow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(dep[s] &lt; n)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(u == t)<br>        &#123;<br>            <span class="hljs-keyword">int</span> min = inf;<br>            <span class="hljs-keyword">int</span> inser;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(min &gt; edge[sta[i]].cap - edge[sta[i]].flow)<br>                &#123;<br>                    min = edge[sta[i]].cap - edge[sta[i]].flow;<br>                    inser = i;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i)<br>            &#123;<br>                edge[sta[i]].flow += min;<br>                edge[sta[i] ^ <span class="hljs-number">1</span>].flow -= min;<br>            &#125;<br>            maxflow += min;<br>            top = inser;<br>            u = edge[sta[top] ^ <span class="hljs-number">1</span>].to;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">int</span> v;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = cur[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dep[v] + <span class="hljs-number">1</span> == dep[u])<br>            &#123;<br>                flag = <span class="hljs-literal">true</span>;<br>                cur[u] = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)<br>        &#123;<br>            sta[top++] = cur[u];<br>            u = v;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> min = n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dep[edge[i].to] &lt; min)<br>            &#123;<br>                min = dep[edge[i].to];<br>                cur[u] = i;<br>            &#125;<br>        &#125;<br>        --gap[dep[u]];<br>        <span class="hljs-keyword">if</span>(!gap[dep[u]])<span class="hljs-keyword">return</span> maxflow;<br>        dep[u] = min + <span class="hljs-number">1</span>;<br>        ++gap[dep[u]];<br>        <span class="hljs-keyword">if</span>(u != s)u = edge[sta[--top] ^ <span class="hljs-number">1</span>].to;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxflow;<br>&#125;<br><span class="hljs-keyword">int</span> a[maxn][maxn], n, m;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getidx</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> (x - <span class="hljs-number">1</span>) * m + y;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> l)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(i == k)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(j == l || j == l + <span class="hljs-number">1</span> || j == l - <span class="hljs-number">1</span>)flag = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(j == l)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(i == k || i == k - <span class="hljs-number">1</span> || i == k + <span class="hljs-number">1</span>)flag = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    init();<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>            <span class="hljs-built_in">cin</span> &gt;&gt; a[i][j];<br>    <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>, p = n * m;<br>    <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>, t = p + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) <br>            sum += a[i][j];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>            <span class="hljs-keyword">if</span>((i + j) &amp; <span class="hljs-number">1</span>)<br>                addedge(s, getidx(i, j), a[i][j]);<br>            <span class="hljs-keyword">else</span><br>                addedge(getidx(i, j), t, a[i][j]);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; ++k)<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>; l &lt;= m; ++l)<br>                    <span class="hljs-keyword">if</span>(check(i, j, k, l) &amp;&amp; (i + j) &amp; <span class="hljs-number">1</span>)<br>                        addedge(getidx(i, j), getidx(k, l), inf);<br><br>    <span class="hljs-keyword">int</span> ans = sum - isap(s, t, t + <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-comment">// cout &lt;&lt; sum - ans &lt;&lt; endl;</span><br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="数字梯形"><a href="#数字梯形" class="headerlink" title="数字梯形"></a><a href="https://loj.ac/problem/6010">数字梯形</a></h1><p><a href="https://loj.ac/problem/6010">数字梯形</a></p>
<p>这题算是费用流的基础题吧，，，<del>（也想了一会把建图理清</del> </p>
<p>题意很简单，，就是给你一个等腰梯形阵，，上底是m，，共n层，，，然后从顶部到底部引出m条路径，，路径间的限制条件有三个，，然后问你找出的路径的点的和最大值是多少，，</p>
<p>感觉费用流的题一个特点就是不仅要保证点的使用次数，，也就是容量大小，，还要保存其另一个属性，，也就是单位费用，，</p>
<p>因为要保证每一个点使用的次数，，例如第一问就是只用一次，第二问就是可以多次使用等等，，所以我们可以拆点用容量大小来限制点的取的次数，，，</p>
<p>对于点权显然就是费用，，加在拆点的两个点之间就行了，，，</p>
<p>这样见三次图，，跑三次费用流就行了，，，</p>
<p>这样的问题的模型是 最大权不相交路径，，，那个子序列的是 最多的不相交的路径数</p>
<p>dijkstra居然比spfa的费用流慢一些，，，emmmm</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e6</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">MinCostMaxFlow</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> n, h[maxn], dis[maxn], prev[maxn], pree[maxn];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">    &#123;</span><br>        <span class="hljs-keyword">int</span> to, nxt, cap, cost;<br>        edge()&#123;&#125;<br>        edge(<span class="hljs-keyword">int</span> _to, <span class="hljs-keyword">int</span> _nxt, <span class="hljs-keyword">int</span> _cap, <span class="hljs-keyword">int</span> _cost):to(_to), nxt(_nxt), cap(_cap), cost(_cost)&#123;&#125;<br>    &#125;;<br>    <span class="hljs-built_in">vector</span>&lt;edge&gt; g[maxn];<br>    MinCostMaxFlow(<span class="hljs-keyword">int</span> _n)<br>    &#123;<br>        n = _n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)g[i].clear();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// cout &lt;&lt; u &lt;&lt; &quot; &quot; &lt;&lt; v &lt;&lt; &quot; &quot; &lt;&lt; w &lt;&lt; &quot; &quot; &lt;&lt; c &lt;&lt; endl;</span><br>        g[u].push_back(edge(v, g[v].size(), w, c));<br>        g[v].push_back(edge(u, g[u].size() - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -c));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mincostmaxflow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t, ll f, ll &amp;flow, ll &amp;cost)</span></span><br><span class="hljs-function">    </span>&#123;<br>        flow = cost = <span class="hljs-number">0</span>;fill(h, h + n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">while</span>(f)<br>        &#123;<br>            <span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt;, greater&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt; &gt; q;<br>            fill(dis, dis + n + <span class="hljs-number">1</span>, inf);<br>            dis[s] = <span class="hljs-number">0</span>;<br>            q.push(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">0</span>, s));<br>            <span class="hljs-keyword">while</span>(!q.empty())<br>            &#123;<br>                <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; u = q.top(); q.pop();<br>                <span class="hljs-keyword">int</span> v = u.second;<br>                <span class="hljs-keyword">if</span>(dis[v] &lt; u.first)<span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; g[v].size(); ++i)<br>                &#123;<br>                    edge &amp;e = g[v][i];<br>                    <span class="hljs-keyword">if</span>(e.cap &gt; <span class="hljs-number">0</span> &amp;&amp; dis[e.to] &gt; dis[v] + e.cost + h[v] - h[e.to])<br>                    &#123;<br>                        dis[e.to] = dis[v] + e.cost + h[v] - h[e.to];<br>                        prev[e.to] = v;<br>                        pree[e.to] = i;<br>                        q.push(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(dis[e.to], e.to));<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(dis[t] == inf)<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)h[i] += dis[i];<br>            <span class="hljs-keyword">int</span> d = f;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> v = t; v != s; v = prev[v])d = min(d, g[prev[v]][pree[v]].cap);<br>            f -= d; flow += d; cost += d * h[t];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> v = t; v != s; v = prev[v])<br>            &#123;<br>                edge &amp;e = g[prev[v]][pree[v]];<br>                e.cap -= d;<br>                g[v][e.nxt].cap += d;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">maxcostmaxflow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> f, <span class="hljs-keyword">int</span> &amp;flow, <span class="hljs-keyword">int</span> &amp;cost)</span></span><br><span class="hljs-function">    </span>&#123;<br>        flow = cost = <span class="hljs-number">0</span>;<br>        fill(h, h + n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">while</span>(f)<br>        &#123;<br>            <span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt;, greater&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt; &gt;q;<br>            fill(dis, dis + n + <span class="hljs-number">1</span>, -inf);<br>            dis[s] = <span class="hljs-number">0</span>;<br>            q.push(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">0</span>, s));<br>            <span class="hljs-keyword">while</span>(!q.empty())<br>            &#123;<br>                <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; u = q.top(); q.pop();<br>                <span class="hljs-keyword">int</span> v = u.second;<br>                <span class="hljs-keyword">if</span>(dis[v] &gt; u.first)<span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; g[v].size(); ++i)<br>                &#123;<br>                    edge &amp;e = g[v][i];<br>                    <span class="hljs-keyword">if</span>(e.cap &gt; <span class="hljs-number">0</span> &amp;&amp; dis[e.to] &lt; dis[v] + e.cost + h[v] - h[e.to])<br>                    &#123;<br>                        dis[e.to] = dis[v] + e.cost + h[v] - h[e.to];<br>                        prev[e.to] = v;<br>                        pree[e.to] = i;<br>                        q.push(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(dis[e.to], e.to));<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(dis[t] == -inf)<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)h[i] += dis[i];<br>            <span class="hljs-keyword">int</span> d = f;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> v = t; v != s; v = prev[v])d = min(d, g[prev[v]][pree[v]].cap);<br>            f -= d; flow += d; cost += d * h[t];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> v = t; v != s; v = prev[v])<br>            &#123;<br>                edge &amp;e = g[prev[v]][pree[v]];<br>                e.cap -= d;<br>                g[v][e.nxt].cap += d;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">30</span>][<span class="hljs-number">30</span>], n, m;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getidx</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span>&#123;<span class="hljs-keyword">return</span> (<span class="hljs-number">2</span> * m + i - <span class="hljs-number">2</span>) * (i - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> + j;&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-built_in">cin</span> &gt;&gt; m &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m + i - <span class="hljs-number">1</span>; ++j)<br>            <span class="hljs-built_in">cin</span> &gt;&gt; a[i][j];<br>    <span class="hljs-keyword">int</span> p = n * (<span class="hljs-number">2</span> * m + n - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>, t = p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-function">MinCostMaxFlow <span class="hljs-title">mcmf</span><span class="hljs-params">(t + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)mcmf.addedge(s, i, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m + i - <span class="hljs-number">1</span>; ++j)<br>            mcmf.addedge(getidx(i, j) + p, getidx(i + <span class="hljs-number">1</span>, j), <span class="hljs-number">1</span>, <span class="hljs-number">0</span>), <br>            mcmf.addedge(getidx(i, j) + p, getidx(i + <span class="hljs-number">1</span>, j) + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m + i - <span class="hljs-number">1</span>; ++j)<br>            mcmf.addedge(getidx(i, j), getidx(i, j) + p, <span class="hljs-number">1</span>, a[i][j]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m + n - <span class="hljs-number">1</span>; ++i)mcmf.addedge(getidx(n, i) + p, t, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">int</span> flow, cost;<br>    mcmf.maxcostmaxflow(s, t, inf, flow, cost);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; cost &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>    <span class="hljs-comment">// delete &amp;mcmf;</span><br>    <span class="hljs-comment">//////////////////2</span><br>    mcmf = MinCostMaxFlow(t + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)mcmf.addedge(s, i, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m + i - <span class="hljs-number">1</span>; ++j)<br>            mcmf.addedge(getidx(i, j) + p, getidx(i + <span class="hljs-number">1</span>, j), <span class="hljs-number">1</span>, <span class="hljs-number">0</span>), <br>            mcmf.addedge(getidx(i, j) + p, getidx(i + <span class="hljs-number">1</span>, j) + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m + i - <span class="hljs-number">1</span>; ++j)<br>            mcmf.addedge(getidx(i, j), getidx(i, j) + p, m, a[i][j]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m + n - <span class="hljs-number">1</span>; ++i)mcmf.addedge(getidx(n, i) + p, t, m, <span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-comment">// for(int i = 1; i &lt;= n; ++i)</span><br>    <span class="hljs-comment">//     for(int j = 2; j &lt;= m + i - 1 - 1; ++j)</span><br>    <span class="hljs-comment">//         mcmf.addedge(getidx(i, j), getidx(i, j) + p, m - 1, a[i][j]);</span><br>    <br>    mcmf.maxcostmaxflow(s, t, inf, flow, cost);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; cost &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-comment">/////////////3</span><br>    mcmf = MinCostMaxFlow(t + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)mcmf.addedge(s, i, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m + i - <span class="hljs-number">1</span>; ++j)<br>            mcmf.addedge(getidx(i, j) + p, getidx(i + <span class="hljs-number">1</span>, j), m, <span class="hljs-number">0</span>), <br>            mcmf.addedge(getidx(i, j) + p, getidx(i + <span class="hljs-number">1</span>, j) + <span class="hljs-number">1</span>, m, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m + i - <span class="hljs-number">1</span>; ++j)<br>            mcmf.addedge(getidx(i, j), getidx(i, j) + p, m, a[i][j]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m + n - <span class="hljs-number">1</span>; ++i)mcmf.addedge(getidx(n, i) + p, t, m, <span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-comment">// for(int i = s; i &lt;= t; ++i)cout &lt;&lt; mcmf.g[i].size() &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;</span><br>    <span class="hljs-comment">// for(int i = 1; i &lt;= n; ++i)</span><br>    <span class="hljs-comment">//     for(int j = 2; j &lt;= m + i - 1 - 1; ++j)</span><br>    <span class="hljs-comment">//         mcmf.addedge(getidx(i, j), getidx(i, j) + p, m - 1, a[i][j]);</span><br>    <br>    <span class="hljs-comment">// for(int i = s; i &lt;= t; ++i)cout &lt;&lt; mcmf.g[i].size() &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;</span><br>    mcmf.maxcostmaxflow(s, t, inf, flow, cost);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; cost &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><a href="https://loj.ac/submission/603451">spfa版的</a></p>
<h1 id=""><a href="#" class="headerlink" title=" "></a> </h1>]]></content>
  </entry>
  <entry>
    <title>笔记-JUC学习</title>
    <url>/2021/05/19/%E7%AC%94%E8%AE%B0-JUC%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p><a href="https://www.bilibili.com/video/BV1B7411L7tE">学习juc时的个人笔记</a></p>
<h1 id="1、线程"><a href="#1、线程" class="headerlink" title="1、线程"></a>1、线程</h1><h2 id="Enum-Thread-State"><a href="#Enum-Thread-State" class="headerlink" title="Enum Thread.State"></a>Enum Thread.State</h2><blockquote>
<p>A thread state. A thread can be in one of the following states:<br><strong>NEW</strong><br>A thread that has not yet started is in this state.<br><strong>RUNNABLE</strong><br>A thread executing in the Java virtual machine is in this state.<br><strong>BLOCKED</strong><br>A thread that is blocked waiting for a monitor lock is in this state.<br><strong>WAITING</strong><br>A thread that is waiting indefinitely for another thread to perform a particular action is in this state.<br><strong>TIMED_WAITING</strong><br>A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.<br><strong>TERMINATED</strong><br>A thread that has exited is in this state.<br>A thread can be in only one state at a given point in time. These states are virtual machine states which do not reflect any operating system thread states.</p>
</blockquote>
<h2 id="wait-sleep区别"><a href="#wait-sleep区别" class="headerlink" title="wait/sleep区别"></a>wait/sleep区别</h2><blockquote>
<p>实际开发中一般使用juc.TimeUnit来休眠</p>
</blockquote>
<h3 id="来自不同类"><a href="#来自不同类" class="headerlink" title="来自不同类"></a>来自不同类</h3><ul>
<li>wait：object</li>
<li>sleep：thread</li>
</ul>
<h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><ul>
<li>wait： 释放锁</li>
<li>sleep：不释放锁</li>
</ul>
<h3 id="使用范围"><a href="#使用范围" class="headerlink" title="使用范围"></a>使用范围</h3><ul>
<li>wait：仅能在同步代码块中使用</li>
<li>sleep： 任何地方</li>
</ul>
<h3 id="是否捕获异常"><a href="#是否捕获异常" class="headerlink" title="是否捕获异常"></a>是否捕获异常</h3><ul>
<li>wait：<del>不需要</del> （这里我查到的资料有说也需要抛出异常，有IllegalMonitorStateException和InterruptedException）</li>
<li>sleep：需要捕获超时等待异常</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>一般情况下，使用wait的格式是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span> (obj)&#123;<br>	<span class="hljs-keyword">while</span>(condition does not hold)&#123;<br>		obj.wait(timeout)<br>	&#125;<br>	<span class="hljs-comment">// ohter perform</span><br>	obj.notifyAll()<br>&#125;<br></code></pre></td></tr></table></figure>
<p>这里使用 <code>while</code> 判断的原因是，如果使用 <code>if</code> 可能存在多个线程并发出现<strong>虚假唤醒</strong>情况。（就是多个线程在判断时满足条件，但都执行了）</p>
<h2 id="Threadlocal"><a href="#Threadlocal" class="headerlink" title="Threadlocal"></a>Threadlocal</h2><p>这里只是我对 threadlocal的个人理解（不保证正确）：</p>
<p>首先，每一个 thread 中都维护一个 threadlocalmap （这里的map并不是和hashmap一样的map，仅是相似）</p>
<p>其中map的每一个 Key 是所用到的 threadlocal 对象的引用，value即为threadlocal 对象所设置的共享变量的副本值</p>
<p>当线程要使用变量副本值时，将直接查找到对应 threadlocal 的引用对应的 entry ，然后获取到值</p>
<p>OOM问题：map中的entry 是一个弱引用，当 key 没有引用后就会被gc，但是value是一个强引用，所以需要手动调用 remove() 来保证使用完后销毁，否着，如果线程一直存在并且总是使用threadlocal的值， map就会越来越大，出现OOM异常</p>
<h2 id="普通的多线程例子"><a href="#普通的多线程例子" class="headerlink" title="普通的多线程例子"></a>普通的多线程例子</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.sql.Time;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br><br>        Ticket ticket = <span class="hljs-keyword">new</span> Ticket();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; ++i) &#123;<br>                    ticket.sale();<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;A&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; ++i) &#123;<br>                    ticket.sale();<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;B&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; ++i) &#123;<br>                    ticket.sale();<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;C&quot;</span>).start();<br><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ticket</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number = <span class="hljs-number">20</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (number &gt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; get &quot;</span> + (number--) + <span class="hljs-string">&quot; th&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="2、LOCK"><a href="#2、LOCK" class="headerlink" title="2、LOCK"></a>2、LOCK</h1><p>创建锁的方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br></code></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210418104827181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""><br>默认情况下，建立的锁是 <strong>非公平锁</strong> （<code>NonfairSync()</code>）</p>
<ul>
<li>公平锁：先来后到</li>
<li>非公平锁：可以插队</li>
</ul>
<p>使用lock 加解锁的方式要使用trycatchfinally语句块，其中要将 <code>unlock()</code> 放在finally中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.sql.Time;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br><br>        Ticket ticket = <span class="hljs-keyword">new</span> Ticket();<br>        <span class="hljs-comment">// new Thread(()-&gt;&#123;for(int i = 0; i &lt; 20; ++i)&#123;ticket.sale();&#125;&#125;, &quot;A&quot;).start();</span><br>        <span class="hljs-comment">// new Thread(()-&gt;&#123;for(int i = 0; i &lt; 20; ++i)&#123;ticket.sale();&#125;&#125;, &quot;B&quot;).start();</span><br>        <span class="hljs-comment">// new Thread(()-&gt;&#123;for(int i = 0; i &lt; 20; ++i)&#123;ticket.sale();&#125;&#125;, &quot;C&quot;).start();</span><br><br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; ++i) &#123;<br>                    ticket.sale();<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;A&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; ++i) &#123;<br>                    ticket.sale();<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;B&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; ++i) &#123;<br>                    ticket.sale();<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;C&quot;</span>).start();<br>    &#125;<br><br>        <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ticket</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number = <span class="hljs-number">20</span>;<br>    Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span> </span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (number &gt; <span class="hljs-number">0</span>) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; get &quot;</span> + (number--) + <span class="hljs-string">&quot; th&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> handle exception</span><br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="synchronized-与-Lock的区别"><a href="#synchronized-与-Lock的区别" class="headerlink" title="synchronized 与 Lock的区别"></a>synchronized 与 Lock的区别</h2><ul>
<li>synchronized 内置关键字；lock是一个类</li>
<li>synchronized 无法判断锁的状态；lock可以判断是否获取到锁（<code>tryLock()</code>）</li>
<li>synchronized 会自动释放锁；lock需要通过 <code>unlock</code> 来手动释放，（不释放可能死锁）</li>
<li>synchronized 如果一个线程在获取到锁阻塞，其他线程会等待；lock可以使用 <code>tryLock</code> 尝试获取锁</li>
<li>synchronized 可重入锁，不可中断，非公平；可重入锁，可以判断中断，可以手动设置是否公平（默认构造非公平，false设置为公平）</li>
<li>synchronized 适合锁少量的代码同步；lock适合锁大量同步的代码（灵活）</li>
</ul>
<h2 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a>生产者消费者模型</h2><h3 id="synchronized实现"><a href="#synchronized实现" class="headerlink" title="synchronized实现"></a>synchronized实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.sql.Time;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br><br>        Data data = <span class="hljs-keyword">new</span> Data();<br>        <br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    data.inc();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-comment">// TODO Auto-generated catch block</span><br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;A&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    data.dec();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-comment">// TODO Auto-generated catch block</span><br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;B&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    data.dec();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-comment">// TODO Auto-generated catch block</span><br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;C&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    data.inc();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-comment">// TODO Auto-generated catch block</span><br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;D&quot;</span>).start();<br>        <br>    &#125;<br><br>        <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Data</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException</span>&#123;<br>        <span class="hljs-keyword">while</span>(number != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">this</span>.wait();<br>        &#125;<br>        ++number;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; -&gt; &quot;</span> + number);<br>        <span class="hljs-keyword">this</span>.notifyAll();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dec</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException</span>&#123;<br>        <span class="hljs-keyword">while</span>(number == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">this</span>.wait();<br>        &#125;<br>        --number;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; -&gt; &quot;</span> + number);<br>        <span class="hljs-keyword">this</span>.notifyAll();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>（注意同步方法的写法：循环判断等待、业务、通知唤醒；其中循环判断的原因是防止出现虚假唤醒）</p>
<h3 id="Lock实现"><a href="#Lock实现" class="headerlink" title="Lock实现"></a>Lock实现</h3><p><img src="https://img-blog.csdnimg.cn/2021041909195555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p>
<p>如图，Lock相当于是synchronized，而wait和notifyAll相当于condition中的await和signal</p>
<p>jdk中的示例如下：</p>
<p><img src="https://img-blog.csdnimg.cn/2021041909223997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""><br>还是循环判断条件await等待、业务、signal唤醒（signalAll可以唤醒全部）；最后再将lock、unlock加上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.sql.Time;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br><br>        Data data = <span class="hljs-keyword">new</span> Data();<br>        <br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    data.inc();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-comment">// TODO Auto-generated catch block</span><br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;A&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    data.dec();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-comment">// TODO Auto-generated catch block</span><br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;B&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    data.dec();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-comment">// TODO Auto-generated catch block</span><br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;C&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    data.inc();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-comment">// TODO Auto-generated catch block</span><br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;D&quot;</span>).start();<br>        <br>    &#125;<br><br>        <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Data</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>    <span class="hljs-keyword">private</span> Condition condition = lock.newCondition();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException</span>&#123;<br><br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span>(number != <span class="hljs-number">0</span>)&#123;<br>                condition.await();<br>            &#125;<br>            ++number;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; -&gt; &quot;</span> + number);<br>            condition.signalAll();<br>            <br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> handle exception</span><br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            lock.unlock();<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dec</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException</span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span>(number == <span class="hljs-number">0</span>)&#123;<br>                condition.await();<br>            &#125;<br>            --number;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; -&gt; &quot;</span> + number);<br>            condition.signalAll();<br>            <br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> handle exception</span><br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="多通知循环线程："><a href="#多通知循环线程：" class="headerlink" title="多通知循环线程："></a>多通知循环线程：</h3><p>即使用多个信号量来处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.sql.Time;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br><br>        Data data = <span class="hljs-keyword">new</span> Data();<br>        <br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>                    data.printA();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;A&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>                    data.printB();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;B&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>                    data.printC();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;C&quot;</span>).start();    <br>    &#125;<br><br>        <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Data</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>    <span class="hljs-keyword">private</span> Condition condition1 = lock.newCondition();<br>    <span class="hljs-keyword">private</span> Condition condition2 = lock.newCondition();<br>    <span class="hljs-keyword">private</span> Condition condition3 = lock.newCondition();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printA</span><span class="hljs-params">()</span></span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span>(number != <span class="hljs-number">1</span>)&#123;<br>                condition1.await();<br>            &#125;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;AAAAAAAAA&quot;</span>);<br>            number = <span class="hljs-number">2</span>;<br>            condition2.signal();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> handle exception</span><br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printB</span><span class="hljs-params">()</span></span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span>(number != <span class="hljs-number">2</span>)&#123;<br>                condition2.await();<br>            &#125;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;BBBBBBBBB&quot;</span>);<br>            number = <span class="hljs-number">3</span>;<br>            condition3.signal();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> handle exception</span><br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printC</span><span class="hljs-params">()</span></span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span>(number != <span class="hljs-number">3</span>)&#123;<br>                condition3.await();<br>            &#125;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;CCCCCCCCC&quot;</span>);<br>            number = <span class="hljs-number">1</span>;<br>            condition1.signal();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> handle exception</span><br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="3、八锁问题"><a href="#3、八锁问题" class="headerlink" title="3、八锁问题"></a>3、八锁问题</h1><p>其实就是对 <code>synchronized</code> 所锁的情况进行讨论即可：<a href="https://blog.csdn.net/qq_31748587/article/details/105498566">参考</a></p>
<h1 id="4、并发集合操作"><a href="#4、并发集合操作" class="headerlink" title="4、并发集合操作"></a>4、并发集合操作</h1><p><img src="https://img-blog.csdnimg.cn/20210419165535986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p>
<h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><p>对于普通的集合多线程操作可能会出现 `java.util.ConcurrentModificationException`` 即 <strong>并发修改异常</strong> 如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.sql.Time;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                list.add(UUID.randomUUID().toString().substring(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>));<br>                System.out.println(list);<br>            &#125;, String.valueOf(i)).start();;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210419154616354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""><br>(可能需要多次运行才能复现，jdk版本较高的话也不容易出现，我的是jdk11）</p>
<p>解决方案：</p>
<ul>
<li><code>List&lt;String&gt; list = new Vector&lt;&gt;();</code> 这个是之前常用的，但是很慢（它比arraylist出现的要早）</li>
<li><code>List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;&gt;());</code> </li>
<li>JUC</li>
</ul>
<p>如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.sql.Time;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><span class="hljs-keyword">import</span> java.util.Vector;<br><span class="hljs-keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br><br>        <span class="hljs-comment">// List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br>        <span class="hljs-comment">// List&lt;String&gt; list = new Vector&lt;&gt;();</span><br>        <span class="hljs-comment">// List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;&gt;());</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> CopyOnWriteArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                list.add(UUID.randomUUID().toString().substring(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>));<br>                System.out.println(list);<br>            &#125;, String.valueOf(i)).start();;<br>        &#125;<br>    &#125;<br><br>        <br>&#125;<br></code></pre></td></tr></table></figure>
<p>(在jdk11后，CopyOnWriteArrayList中的是通过 synchronized 实现的，因为 synchronized 升级了）：</p>
<p><img src="https://img-blog.csdnimg.cn/20210419163528257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20210419163624943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p>
<h2 id="CopyOnWriteArraySet"><a href="#CopyOnWriteArraySet" class="headerlink" title="CopyOnWriteArraySet"></a>CopyOnWriteArraySet</h2><p>同理，set：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Set&lt;String&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>Set&lt;String&gt; set = Collections.synchronizedSet(<span class="hljs-keyword">new</span> HashSet&lt;&gt;());<br>Set&lt;String&gt; set = <span class="hljs-keyword">new</span> CopyOnWriteArraySet&lt;&gt;();<br></code></pre></td></tr></table></figure>
<h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><p>map:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>Map&lt;String, String&gt; map = Collections.synchronizedMap(<span class="hljs-keyword">new</span> HashMap&lt;&gt;());<br>Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;();<br></code></pre></td></tr></table></figure>
<p>(不支持key、value为null)</p>
<h2 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h2><p>与 runnable 区别：</p>
<ul>
<li>可以有返回值</li>
<li>可以抛出异常</li>
<li>方法不同： <code>call</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;<br><span class="hljs-keyword">import</span> java.util.concurrent.CopyOnWriteArraySet;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException, ExecutionException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br>        <br>        Mythread thread = <span class="hljs-keyword">new</span> Mythread();<br>        FutureTask futureTask = <span class="hljs-keyword">new</span> FutureTask&lt;&gt;(thread);<br>        <span class="hljs-keyword">new</span> Thread(futureTask, <span class="hljs-string">&quot;A&quot;</span>).start();<br>        System.out.println(futureTask.get());<br><br>    &#125;<br><br>        <br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mythread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">String</span>&gt;</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;call....&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;233333333&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>get方法可能会阻塞</li>
<li>多个调用时，后调用因为状态会不执行，直接使用保存的返回值（未认真确认）</li>
</ul>
<h1 id="5、常用辅助类"><a href="#5、常用辅助类" class="headerlink" title="5、常用辅助类"></a>5、常用辅助类</h1><h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p>减法计数器，当计数器被子线程（子任务）完成后减一归零后，包含计数器的线程才会执行。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException, ExecutionException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br>        <br>        CountDownLatch countDownLatch = <span class="hljs-keyword">new</span> CountDownLatch(<span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i)&#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                System.out.println(Thread.currentThread().getName());<br>                countDownLatch.countDown();<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br>        countDownLatch.await();<br><br>        System.out.println(<span class="hljs-string">&quot;main....&quot;</span>);<br>        <br>    &#125;<br>   <br></code></pre></td></tr></table></figure>
<h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><p>加法计数器（每指定个数个执行一次父线程）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">CyclicBarrier cyclicBarrier = <span class="hljs-keyword">new</span> CyclicBarrier(<span class="hljs-number">7</span>, ()-&gt;&#123;<br>  System.out.println(<span class="hljs-string">&quot;main...&quot;</span>);<br>&#125;);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; ++i)&#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> tmp = i;<br>    <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; &quot;</span> + tmp);<br>        <span class="hljs-keyword">try</span> &#123;<br>            cyclicBarrier.await();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; &quot;</span> + tmp + <span class="hljs-string">&quot;....&quot;</span>);<br>    &#125;).start();<br>&#125;<br></code></pre></td></tr></table></figure>
<p><code>cyclicBarrier.await();</code> : 加一操作，会阻塞<br><code>new CyclicBarrier(int, runnable)</code> 初始化计数器大小，以及所有子任务执行完后要调用的线程</p>
<h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>信号量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ExecutionException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br>        <br>        Semaphore semaphore = <span class="hljs-keyword">new</span> Semaphore(<span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    semaphore.acquire();<br>                    <span class="hljs-keyword">int</span> time = <span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">5</span>) + <span class="hljs-number">1</span>;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; acquire... for &quot;</span> + time);<br>                    TimeUnit.SECONDS.sleep(time);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-comment">// TODO Auto-generated catch block</span><br>                    e.printStackTrace();<br>                &#125;<br>                <span class="hljs-keyword">finally</span>&#123;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; release...&quot;</span>);<br>                    semaphore.release();<br>                &#125;<br>                <br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br>        <br>    &#125;<br></code></pre></td></tr></table></figure>
<ul>
<li><code>Semaphore semaphore = new Semaphore(3);</code> 创建信号量个数</li>
<li><code>semaphore.acquire();</code> 获取到一个信号量，</li>
<li><code>semaphore.release();</code> 释放</li>
</ul>
<h1 id="6、ReadWriteLock"><a href="#6、ReadWriteLock" class="headerlink" title="6、ReadWriteLock"></a>6、ReadWriteLock</h1><p>没有锁的情况：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ExecutionException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br>        <br>        Cache cache = <span class="hljs-keyword">new</span> Cache();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; ++i)&#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> tmp = i;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                cache.put(tmp + <span class="hljs-string">&quot;&quot;</span>, tmp + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; ++i)&#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> tmp = i;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                cache.get(tmp + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br>        <br>        <br>    &#125;<br><br>        <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cache</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(String key, Object val)</span></span>&#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; write &quot;</span> + key);<br>        map.put(key, val);<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; write done!&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get</span><span class="hljs-params">(String key)</span></span>&#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; get &quot;</span> + key);<br>        map.get(key);<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; get done!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>使用读写锁后可以保证并发操作的原子性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CacheLock</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-keyword">private</span> ReadWriteLock readWriteLock = <span class="hljs-keyword">new</span> ReentrantReadWriteLock();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(String key, Object val)</span></span>&#123;<br>        readWriteLock.writeLock().lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; write &quot;</span> + key);<br>            map.put(key, val);<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; write done!&quot;</span>);<br>            <br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> handle exception</span><br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            readWriteLock.writeLock().unlock();<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get</span><span class="hljs-params">(String key)</span></span>&#123;<br>        readWriteLock.readLock().lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; get &quot;</span> + key);<br>            map.get(key);<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; get done!&quot;</span>);<br>            <br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> handle exception</span><br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            readWriteLock.readLock().unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>其实也就是之前 lock中的一种更加具体的所得使用。这里对于写操作，使用写锁，保证每一个线程的写操作是原子性的，不会被其他写操作插队。对于读操作，使用锁的目的是不会出现写操作时读数据出现幻读。即写锁未独占锁，读锁未共享锁。</p>
<h1 id="7、阻塞队列-BlockingQueue"><a href="#7、阻塞队列-BlockingQueue" class="headerlink" title="7、阻塞队列 BlockingQueue"></a>7、阻塞队列 BlockingQueue</h1><p>阻塞队列的四种方式：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>方式</th>
<th>抛出异常</th>
<th>有返回值，但不抛出异常</th>
<th>阻塞并等待</th>
<th>超时等待</th>
</tr>
</thead>
<tbody>
<tr>
<td>添加</td>
<td>add()</td>
<td>offer()</td>
<td>put()</td>
<td>offer(时间)</td>
</tr>
<tr>
<td>移除</td>
<td>remove()</td>
<td>poll()</td>
<td>take()</td>
<td>poll(时间)</td>
</tr>
<tr>
<td>队首</td>
<td>element</td>
<td>peek()</td>
<td>-</td>
<td>-</td>
</tr>
</tbody>
</table>
</div>
<h1 id="8、SynchronousQueue"><a href="#8、SynchronousQueue" class="headerlink" title="8、SynchronousQueue"></a>8、SynchronousQueue</h1><p>同步队列，只能放入一个元素，再取走后才能继续放入。</p>
<h1 id="9、线程池"><a href="#9、线程池" class="headerlink" title="9、线程池"></a>9、线程池</h1><p>线程池的好处：</p>
<ul>
<li>降低资源消耗</li>
<li>提高响应速度</li>
<li>方便管理</li>
</ul>
<p>即，线程复用、控制最大并发数、管理线程</p>
<p>线程池的主要知识点: 三大方法、七大参数、四种拒绝策略</p>
<h2 id="三大方法"><a href="#三大方法" class="headerlink" title="三大方法"></a>三大方法</h2><p>（注意，线程池的创建在项目中一般是不允许使用 <code>Excutors</code> 来创建，因为 <code>FixedThreadPool</code> 和 <code>SingleThreadPool</code> 允许的请求队列长度最大为intmax；其次 <code>CacheThreadPool</code> 和 <code>ScheduledThreadPool</code> 允许创建的线程数为 intmax 可能创建大量线程；两者都会导致OOM，故建议使用 <code>ThreadPoolExecutor</code>）</p>
<p>三种基本的实现方式是:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">ExecutorService threadPool = Executors.newSingleThreadExecutor();       <span class="hljs-comment">// 单个线程池</span><br>ExecutorService threadPool = Executors.newFixedThreadPool(<span class="hljs-number">5</span>);           <span class="hljs-comment">// 指定大小的线程池</span><br>ExecutorService threadPool = Executors.newCachedThreadPool();           <span class="hljs-comment">// 可自动扩充的线程池</span><br></code></pre></td></tr></table></figure>
<p>添加线程的方式是: <code>threadPool.execute(Runnable);</code></p>
<p>最后要在结束处使用 <code>threadPool.shutdown();</code> 关闭线程池</p>
<h2 id="七大参数"><a href="#七大参数" class="headerlink" title="七大参数"></a>七大参数</h2><p>首先对于以上三种创建线程池的方式，查看其具体实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title">newSingleThreadExecutor</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FinalizableDelegatedExecutorService<br>        (<span class="hljs-keyword">new</span> ThreadPoolExecutor(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<br>                                <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                <span class="hljs-keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title">newFixedThreadPool</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nThreads)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,<br>                                    <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                    <span class="hljs-keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title">newCachedThreadPool</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ThreadPoolExecutor(<span class="hljs-number">0</span>, Integer.MAX_VALUE,<br>                                    <span class="hljs-number">60L</span>, TimeUnit.SECONDS,<br>                                    <span class="hljs-keyword">new</span> SynchronousQueue&lt;Runnable&gt;());<br>&#125;<br></code></pre></td></tr></table></figure>
<p>可以看出，具体的实现方式都是通过 <code>ThreadPoolExecutor</code> 这个方法实现的，仅仅是调用时的参数不同，其参数共有<strong>七个</strong>，查看其实际的构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> corePoolSize,             // 核心线程池大小</span></span><br><span class="hljs-function"><span class="hljs-params">                            <span class="hljs-keyword">int</span> maximumPoolSize,        // 最大核心线程池大小</span></span><br><span class="hljs-function"><span class="hljs-params">                            <span class="hljs-keyword">long</span> keepAliveTime,         // 超时时没有调用释放</span></span><br><span class="hljs-function"><span class="hljs-params">                            TimeUnit unit,              // 超时单位</span></span><br><span class="hljs-function"><span class="hljs-params">                            BlockingQueue&lt;Runnable&gt; workQueue,  // 阻塞队列</span></span><br><span class="hljs-function"><span class="hljs-params">                            ThreadFactory threadFactory,    // 线程工厂，一般使用默认的</span></span><br><span class="hljs-function"><span class="hljs-params">                            RejectedExecutionHandler handler // 拒绝策略)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (corePoolSize &lt; <span class="hljs-number">0</span> ||<br>        maximumPoolSize &lt;= <span class="hljs-number">0</span> ||<br>        maximumPoolSize &lt; corePoolSize ||<br>        keepAliveTime &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>    <span class="hljs-keyword">if</span> (workQueue == <span class="hljs-keyword">null</span> || threadFactory == <span class="hljs-keyword">null</span> || handler == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>    <span class="hljs-keyword">this</span>.corePoolSize = corePoolSize;<br>    <span class="hljs-keyword">this</span>.maximumPoolSize = maximumPoolSize;<br>    <span class="hljs-keyword">this</span>.workQueue = workQueue;<br>    <span class="hljs-keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);<br>    <span class="hljs-keyword">this</span>.threadFactory = threadFactory;<br>    <span class="hljs-keyword">this</span>.handler = handler;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>整个线程池的结构大致如下：<br><img src="https://img-blog.csdnimg.cn/20210420224435631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p>
<p>其中核心线程数表示的就是当前可以使用的线程资源，最大线程数就是最多可以使用的线程资源<br>阻塞队列是一个暂存区域</p>
<p>当任务到来时，如果核心线程数的线程资源可以使用，就直接使用即可，<br>如果都在使用，这时会添加到阻塞队列中，<br>如果阻塞队列也满了，并且核心线程数未达到最大线程数，此时扩大核心线程数<br>如果此时全都满了，线程池都在使用、阻塞队列满了，此时会根据预先设定的拒绝策略来进行操作（即最大承载量为队列容量+最大核心线程数）</p>
<p>超时时间是指，当并发量减少后，一定时间里没有任务添加，，会收回大与核心线程数的资源</p>
<h2 id="四种拒绝策略"><a href="#四种拒绝策略" class="headerlink" title="四种拒绝策略"></a>四种拒绝策略</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> ThreadPoolExecutor.AbortPolicy(): 不处理，抛出异常<br><span class="hljs-keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy()：哪来去哪，让线程调用者处理<br><span class="hljs-keyword">new</span> ThreadPoolExecutor.DiscardPolicy()：不处理，不抛出异常<br><span class="hljs-keyword">new</span> ThreadPoolExecutor.DiscardOldestPolicy()：替换最早的，不抛出异常<br></code></pre></td></tr></table></figure>
<p>使用方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">ExecutorService threadPool = <span class="hljs-keyword">new</span> ThreadPoolExecutor(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, TimeUnit.SECONDS, <span class="hljs-keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="hljs-number">3</span>), Executors.defaultThreadFactory(), <span class="hljs-keyword">new</span> ThreadPoolExecutor.DiscardOldestPolicy());<br></code></pre></td></tr></table></figure>
<h2 id="CPU密集型和IO密集型"><a href="#CPU密集型和IO密集型" class="headerlink" title="CPU密集型和IO密集型"></a>CPU密集型和IO密集型</h2><p>最大线程如何定义：</p>
<p>看情况，看当前使用到线程池的任务情况，</p>
<ul>
<li>如果是 CPU密集型的任务，可以动态获取当前代码运行环境的CPU核数来设置为最大线程数： <code>Runtime.getRuntime().availableProcessors()</code></li>
<li>如果是 IO密集型任务，即有很多需要IO操作的任务，可以设置为IO任务数两倍左右</li>
</ul>
<h1 id="10、四大函数式接口"><a href="#10、四大函数式接口" class="headerlink" title="10、四大函数式接口"></a>10、四大函数式接口</h1><p><del>lambda表达式、链式编程、函数式接口、stream流式计算</del> </p>
<p>四大原生函数式接口：</p>
<p>Function<br>Consumer<br>Predicate<br>Supplier</p>
<h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p><img src="https://img-blog.csdnimg.cn/20210422100624276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""><br>传入参数T，返回R类型结果，及一个函数 R=T，使用时重写 apply即可（如同使用runnable接口重写run方法一样）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Function&lt;String, Integer&gt; function = <span class="hljs-keyword">new</span> Function&lt;String,Integer&gt;()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">apply</span><span class="hljs-params">(String t)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> t.hashCode();<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// Function&lt;String, Integer&gt; function = (str)-&gt;&#123;</span><br><span class="hljs-comment">//     return str.hashCode();</span><br><span class="hljs-comment">// &#125;;</span><br><br>System.out.println(function.apply(<span class="hljs-string">&quot;2333&quot;</span>));<br></code></pre></td></tr></table></figure>
<p>（因为是函数式接口，所以可以使用lambda简化）</p>
<h2 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h2><p><img src="https://img-blog.csdnimg.cn/20210422101243962.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""><br>断定性接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Predicate&lt;String&gt; predicate = <span class="hljs-keyword">new</span> Predicate&lt;String&gt;()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">test</span><span class="hljs-params">(String t)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (t != <span class="hljs-keyword">null</span> &amp;&amp; !t.isEmpty());<br>    &#125;<br>&#125;;<br><span class="hljs-comment">// Predicate&lt;String&gt; predicate = (str)-&gt;&#123;</span><br><span class="hljs-comment">//     return (str != null &amp;&amp; !str.isEmpty());</span><br><span class="hljs-comment">// &#125;;</span><br>System.out.println(predicate.test(<span class="hljs-string">&quot;2333&quot;</span>));<br>System.out.println(predicate.test(<span class="hljs-string">&quot;&quot;</span>));<br></code></pre></td></tr></table></figure>
<h2 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h2><p><img src="https://img-blog.csdnimg.cn/2021042210212370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p>
<p>消费型接口，只有一个参数，没有返回值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Consumer&lt;String&gt; consumer = <span class="hljs-keyword">new</span> Consumer&lt;String&gt;()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(String t)</span> </span>&#123;<br>        System.out.println(t);<br>    &#125;<br>&#125;;<br><span class="hljs-comment">// Consumer&lt;String&gt; consumer = (str)-&gt;&#123;System.out.println(str);&#125;;</span><br>consumer.accept(<span class="hljs-string">&quot;2333333&quot;</span>);<br></code></pre></td></tr></table></figure>
<h2 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h2><p><img src="https://img-blog.csdnimg.cn/20210422102436556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>供给式接口，仅有返回值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Supplier&lt;String&gt; supplier = <span class="hljs-keyword">new</span> Supplier&lt;String&gt;()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;get&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;233333333&quot;</span>;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">// Supplier&lt;String&gt; supplier = ()-&gt;&#123;return &quot;233333333&quot;;&#125;;</span><br>System.out.println(supplier.get());<br></code></pre></td></tr></table></figure>
<h2 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br>        <br>        User u1 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;AA&quot;</span>, <span class="hljs-number">20</span>);<br>        User u2 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;BB&quot;</span>, <span class="hljs-number">21</span>);<br>        User u3 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;CC&quot;</span>, <span class="hljs-number">22</span>);<br>        User u4 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;DD&quot;</span>, <span class="hljs-number">23</span>);<br>        User u5 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;EE&quot;</span>, <span class="hljs-number">24</span>);<br>        List&lt;User&gt; list = Arrays.asList(u1, u2, u3, u4, u5);<br>        list.stream()<br>            .filter(u-&gt;&#123;<span class="hljs-keyword">return</span> u.getId() % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>;&#125;)<br>            .filter(u-&gt;&#123;<span class="hljs-keyword">return</span> u.getAge() &gt; <span class="hljs-number">21</span>;&#125;)<br>            .map(u-&gt;&#123;<span class="hljs-keyword">return</span> u.getName().toLowerCase();&#125;)<br>            .forEach(System.out::println);<br>        <br>    &#125;<br><br>        <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">int</span> id;<br>    String name;<br>    <span class="hljs-keyword">int</span> age;<br>    User(<span class="hljs-keyword">int</span> id, String name, <span class="hljs-keyword">int</span> age)&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[user: &quot;</span> + <span class="hljs-string">&quot;id: &quot;</span> + id + <span class="hljs-string">&quot;, name: &quot;</span> + name + <span class="hljs-string">&quot;, age: &quot;</span> + age + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="11、ForkJoin"><a href="#11、ForkJoin" class="headerlink" title="11、ForkJoin"></a>11、ForkJoin</h1><p>分治思想，将大任务拆分为小任务操作，适合大数据处理情景</p>
<p><img src="https://img-blog.csdnimg.cn/20210424100651478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""><br>forkjoin：工作窃取，当某个任务执行完毕后，他会窃取其他未完成的任务，提高效率：</p>
<p><img src="https://img-blog.csdnimg.cn/20210424100846913.png" alt=""></p>
<p>使用：</p>
<ul>
<li>forkjoinpool</li>
<li>forkjoinpool.executor(forkjointask)</li>
<li>继承forkjointask，重写compute方法，使用fork,join计算</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><span class="hljs-keyword">import</span> java.util.concurrent.ForkJoinPool;<br><span class="hljs-keyword">import</span> java.util.concurrent.RecursiveTask;<br><span class="hljs-keyword">import</span> java.util.stream.LongStream;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> END = <span class="hljs-number">10_0000_0000L</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException, ExecutionException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br>        <br>        test1();<br>        test2();<br>        test3();<br>        <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <span class="hljs-keyword">long</span> sum = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i = <span class="hljs-number">1</span>; i &lt;= END; ++i)&#123;<br>            sum += i;<br>        &#125;<br>        <br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;sum: &quot;</span> + sum + <span class="hljs-string">&quot; time: &quot;</span> + (end - start));<br>    &#125;<br>    <span class="hljs-comment">// forkjoin</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException, ExecutionException</span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <br>        <span class="hljs-keyword">long</span> sum = <span class="hljs-number">0</span>;<br>        ForkJoinPool forkJoinPool = <span class="hljs-keyword">new</span> ForkJoinPool();<br>        sum = forkJoinPool.submit(<span class="hljs-keyword">new</span> ForkJoinDemo(<span class="hljs-number">0</span>, END)).get();<br><br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;sum: &quot;</span> + sum + <span class="hljs-string">&quot; time: &quot;</span> + (end - start));<br>    &#125;<br>    <span class="hljs-comment">//并行流 </span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <span class="hljs-keyword">long</span> sum = LongStream.rangeClosed(<span class="hljs-number">0</span>, END).parallel().reduce(<span class="hljs-number">0</span>, Long::sum);<br><br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;sum: &quot;</span> + sum + <span class="hljs-string">&quot; time: &quot;</span> + (end - start));<br>    &#125;<br><br>        <br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ForkJoinDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RecursiveTask</span>&lt;<span class="hljs-title">Long</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> start;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> end;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> temp = <span class="hljs-number">10000</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ForkJoinDemo</span><span class="hljs-params">(<span class="hljs-keyword">long</span> start, <span class="hljs-keyword">long</span> end)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.start = start;<br>        <span class="hljs-keyword">this</span>.end = end;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Long <span class="hljs-title">compute</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>((end - start) &lt;= temp)&#123;<br>            <span class="hljs-keyword">long</span> sum = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i = start; i &lt;= end; ++i)&#123;<br>                sum += i;<br>            &#125;<br>            <span class="hljs-keyword">return</span> sum;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">long</span> mid = (start + end) / <span class="hljs-number">2</span>;<br>            ForkJoinDemo task1 = <span class="hljs-keyword">new</span> ForkJoinDemo(start, mid);<br>            ForkJoinDemo task2 = <span class="hljs-keyword">new</span> ForkJoinDemo(mid + <span class="hljs-number">1</span>, end);<br>            task1.fork();<br>            task2.fork();<br>            <span class="hljs-keyword">return</span> task1.join() + task2.join();<br><br>        &#125;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210424164415157.png" alt=""></p>
<p>并行流最快，其次是forkjoin，最后是普通方法。</p>
<h1 id="12、异步调用"><a href="#12、异步调用" class="headerlink" title="12、异步调用"></a>12、异步调用</h1><p>使用 <code>CompletableFuture</code> 可以实现异步调用（即实现类似ajax的带有返回值的异步调用）</p>
<h1 id="13、JMM"><a href="#13、JMM" class="headerlink" title="13、JMM"></a>13、JMM</h1><h2 id="关于JMM的一些同步约定"><a href="#关于JMM的一些同步约定" class="headerlink" title="关于JMM的一些同步约定"></a>关于JMM的一些同步约定</h2><ul>
<li>线程解锁前，必须把共享变量立刻刷回主存（线程工作时，回将共享变量从主存拷贝到自己的工作内存空间中，间接操作变量）</li>
<li>线程加锁前，必须读取主存中的最新值到工作内存中</li>
<li>加锁解锁是用一把锁</li>
</ul>
<h2 id="JMM中的八种操作"><a href="#JMM中的八种操作" class="headerlink" title="JMM中的八种操作"></a>JMM中的八种操作</h2><p><img src="https://img-blog.csdnimg.cn/20210424182409571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""><br><del>（write和store反了）</del></p>
<p>因为各操作不是原子性的，所以可能出现主存值与线程的工作内存中的值不同的情况：<br><img src="https://img-blog.csdnimg.cn/20210424182635814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p>
<ul>
<li><strong>lock（锁定）</strong>：作用于主内存的变量，把一个变量标识为一条线程独占状态。</li>
<li><strong>unlock（解锁）</strong>：作用于主内存变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</li>
<li><strong>read（读取）</strong>：作用于主内存变量，把一个变量值从主内存传输到线程的工作内存中，以便随后的load动作使用</li>
<li><strong>load（载入）</strong>：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。</li>
<li><strong>use（使用）</strong>：作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时将会执行这个操作。</li>
<li><strong>assign（赋值）</strong>：作用于工作内存的变量，它把一个从执行引擎接收到的值赋值给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</li>
<li><strong>store（存储）</strong>：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的write的操作。</li>
<li><strong>write（写入）</strong>：作用于主内存的变量，它把store操作从工作内存中一个变量的值传送到主内存的变量中。</li>
</ul>
<p>Java内存模型还规定了在执行上述八种基本操作时，必须满足如下规则：</p>
<ul>
<li>如果要把一个变量从主内存中复制到工作内存，就需要按顺寻地执行read和load操作， 如果把变量从工作内存中同步回主内存中，就要按顺序地执行store和write操作。但Java内存模型只要求上述操作必须按顺序执行，而没有保证必须是连续执行。</li>
<li>不允许read和load、store和write操作之一单独出现</li>
<li>不允许一个线程丢弃它的最近assign的操作，即变量在工作内存中改变了之后必须同步到主内存中。</li>
<li>不允许一个线程无原因地（没有发生过任何assign操作）把数据从工作内存同步回主内存中。</li>
<li>一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量。即就是对一个变量实施use和store操作之前，必须先执行过了assign和load操作。</li>
<li>一个变量在同一时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。lock和unlock必须成对出现</li>
<li>如果对一个变量执行lock操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前需要重新执行load或assign操作初始化变量的值</li>
<li>如果一个变量事先没有被lock操作锁定，则不允许对它执行unlock操作；也不允许去unlock一个被其他线程锁定的变量。</li>
<li>对一个变量执行unlock操作之前，必须先把此变量同步到主内存中（执行store和write操作）。</li>
</ul>
<h1 id="14、volatile"><a href="#14、volatile" class="headerlink" title="14、volatile"></a>14、volatile</h1><p><code>volatile</code> 是Java虚拟机的一个轻量级的 <strong>同步机制</strong>：</p>
<ul>
<li>保证可见性（即线程读取修饰的变量都会从主内存中读取，而不是直接使用工作内存中的副本）</li>
<li>不保证原子性（可以使用synchronized、lock、atomic解决）</li>
<li>禁止指令重排（通过内存屏障实现）</li>
</ul>
<p>使用atomic实现原子性的 <code>num++</code> 操作：</p>
<p>其内部实现是通过unsafe类中的一些 cas操作实现，对内存修改值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> AtomicInteger num = <span class="hljs-keyword">new</span> AtomicInteger();<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>&#123;<br>        num.getAndIncrement();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException, ExecutionException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; ++i)&#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">20000</span>; ++j)&#123;<br>                    add();<br>                &#125;<br>            &#125;).start();<br>        &#125;<br>        <span class="hljs-keyword">while</span>(Thread.activeCount() &gt;= <span class="hljs-number">2</span>);<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; num: &quot;</span> + num);<br>        <br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="15、单例模式"><a href="#15、单例模式" class="headerlink" title="15、单例模式"></a>15、单例模式</h1><h2 id="饿汉式单例模式"><a href="#饿汉式单例模式" class="headerlink" title="饿汉式单例模式"></a>饿汉式单例模式</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hungry</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Hungry HUNGRY = <span class="hljs-keyword">new</span> Hungry();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">byte</span>[] data1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">byte</span>[] data2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">byte</span>[] data3 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Hungry</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Hungry <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.HUNGRY;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>缺点：启动时就加载，可能会造成内存空间的浪费</p>
<h2 id="懒汉式单例模式"><a href="#懒汉式单例模式" class="headerlink" title="懒汉式单例模式"></a>懒汉式单例模式</h2><p>普通的饿汉模式在多线程的情况下会失效：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazyMan</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> LazyMan LAZYMAN;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">LazyMan</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(Thread.currentThread().getName());<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazyMan <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(LAZYMAN == <span class="hljs-keyword">null</span>)&#123;<br>            LAZYMAN = <span class="hljs-keyword">new</span> LazyMan();<br>        &#125;<br>        <span class="hljs-keyword">return</span> LAZYMAN;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>一种解决方式就是对 <code>getInstance()</code> 加锁，即使用 双重检验+volatile实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// DCL实现</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazyMan</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> LazyMan LAZYMAN;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">LazyMan</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(Thread.currentThread().getName());<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazyMan <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(LAZYMAN == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span>(LazyMan.class)&#123;<br>                <span class="hljs-keyword">if</span>(LAZYMAN == <span class="hljs-keyword">null</span>)&#123;<br>                    LAZYMAN = <span class="hljs-keyword">new</span> LazyMan();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> LAZYMAN;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>其中使用 <code>synchronized</code> 来加锁同步整个类对象；</p>
<p>同时使用 <code>volatile</code> 保证在实例化过程中的指令不重排：实例化对象过程并不是原子操作，有很多指令实现，如：</p>
<ul>
<li>分配内存空间</li>
<li>执行构造方法，初始化对象</li>
<li>将对象指向内存空间</li>
</ul>
<p>如果进行指令重排，可能会出现先指向内存地址，在初始化的情况，此时如果在操作中间访问，对象是不为null的，直接返回的结果就是一个为初始化构造的对象</p>
<h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><p>基于类加载机制的懒汉模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazyMan</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InnerClass</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> LazyMan LAZYMAN = <span class="hljs-keyword">new</span> LazyMan();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">LazyMan</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazyMan <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> InnerClass.LAZYMAN;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>以上几种对于反射机制不安全：<br><img src="https://img-blog.csdnimg.cn/20210424222408858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>可以使用枚举类来实现单例模式，保证不会被反射实例化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// enum:</span><br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">LazyMan</span></span>&#123;<br>    INSTANCE;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> LazyMan <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>原因：<br>反射类中实例化时会判断是否为枚举类的反射：<br><img src="https://img-blog.csdnimg.cn/20210424223951558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p>
<p><strong>注意</strong> 此处如要使用枚举类进行反射测试：<br><img src="https://img-blog.csdnimg.cn/20210424223629621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p>
<p>反射构造器的参数不能为空或null，必须为 <code>String.class, int.class</code>，否则此时异常为：<br><img src="https://img-blog.csdnimg.cn/2021042422374276.png" alt=""><br>而不是因为枚举类反射实例化所抛出的异常：<br><img src="https://img-blog.csdnimg.cn/20210424223813371.png" alt=""></p>
<p>因为enum实际会产生一个 <code>String.class, int.class</code> 为形参的构造器，而不是空的构造器，这里需要通过 jdx来查看反汇编后的代码</p>
<p><a href="https://www.bilibili.com/video/BV1B7411L7tE?p=33">更加具体的讲解强烈建议观看此视频：</a></p>
<h1 id="16、CAS"><a href="#16、CAS" class="headerlink" title="16、CAS"></a>16、CAS</h1><p>比较并交换：当所期望的值相同时才进行更新：<code>compareAndSet</code></p>
<p>底层是通过c++编写的更靠近底层的代码实现（具体到CPU指令，unsafe类）</p>
<p>例如 atomicInteger中的加一线程安全的加一操作的内部实现是通过 cas自旋实现（注意不同jdk源码可能不一致）：</p>
<p><img src="https://img-blog.csdnimg.cn/20210425165210230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""><br>其中while就是一种自旋操作，通过循环判断来实现一种比加锁效率更高的方式；字段解释：判断 o 对象中偏移值为 offset处的数据值是否为 v ，如果是就加 delta 。这种实现方式就是自旋锁。</p>
<p>总结：CAS是不断比较当前内存中的值和期望的值是否一致，如果一致，则进行set操作；如果不一致就通过循环实现自旋。</p>
<p>缺点：</p>
<ul>
<li>循环会有一定的耗时</li>
<li>一次仅能保证对一个共享变量的原子性</li>
<li>ABA问题</li>
</ul>
<h2 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h2><p>ABA问题就是指，多个线程对共享变量进行操作，其中A和B都读取到变量a=1，但是B线程做了两次操作：a=3，a=1，对于A线程来说，可能并不知道A在期间被修改过（狸猫换太子）</p>
<p><img src="https://img-blog.csdnimg.cn/20210425181058287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p>
<h2 id="解决方式：原子引用"><a href="#解决方式：原子引用" class="headerlink" title="解决方式：原子引用"></a>解决方式：原子引用</h2><p>通过使用一个带有时间戳（版本号）的原子引用即可以解决ABA问题，思想是 <em>乐观锁</em>  </p>
<p>原子引用： <code>AtomicStampedReference</code> 来实现，可以通过获取当前的stamp来保证不会出现ABA问题</p>
<h1 id="17、锁"><a href="#17、锁" class="headerlink" title="17、锁"></a>17、锁</h1><h2 id="公平锁、非公平锁"><a href="#公平锁、非公平锁" class="headerlink" title="公平锁、非公平锁"></a>公平锁、非公平锁</h2><ul>
<li>公平锁： 非常公平，不可以插队，即必须按照先来后到执行</li>
<li>非公平锁：非常不公平，可以插队（默认的锁是非公平锁）</li>
</ul>
<h2 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h2><p>可重入锁即当调用加锁的方法后，该方法又调用其他方法，相当于加锁多次，但不产生死锁；某个线程获取某个锁后，可以再次获取锁而不死锁。即可理解为一种递归锁，外层函数获取锁，内层函数自动获取，解决死锁。</p>
<p>对于 <code>synchronized</code> 的可重入锁直接使用即可，对于 <code>Lock</code> 的锁，需要保证前后加解锁次数一致，否则会出现死锁现象。</p>
<h2 id="自旋锁-spinlock"><a href="#自旋锁-spinlock" class="headerlink" title="自旋锁 spinlock"></a>自旋锁 spinlock</h2><p>就是通过一个循环CAS操作实现自旋，使用循环来代替加解锁的较低效操作。</p>
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p><strong>多线程下</strong>出现：</p>
<ul>
<li>互斥</li>
<li>循环等待</li>
<li>请求与保持</li>
<li>不可剥夺</li>
</ul>
<ul>
<li>（查看Java的进程可以使用 <code>jps</code> 命令）</li>
<li>使用 <code>jstack</code> 可以查看进程的堆栈信息，可以发现死锁等</li>
</ul>
<h1 id="18、AQS"><a href="#18、AQS" class="headerlink" title="18、AQS"></a>18、AQS</h1><p>这里我只是简单的学习了一下，具体的学习建议查看其它博主的学习笔记。</p>
<p>AQS 即 抽象 队列 同步器</p>
<p>是juc包中几乎所有类的基础，可以实现独占锁（lock）或者是共享锁（信号量、计数器等等）</p>
<p>他的内部结构主要有一个 state 状态、一个 CLH队列</p>
<p>原理：</p>
<p>当新增一个线程时，首先会尝试获取资源，如果可以获取到 state 会为1，当然因为可重入原因，同一个线程多次获取会增加</p>
<p>如果再来多个线程，此时会通过 封装为一个 node 节点，插入队列后，同时设定自身的状态，等待唤醒</p>
<p>当头节点的下一个节点（即头节点为空节点）使用完毕资源并释放后，他会从后往前找到最近的一个可以获取资源的线程，并唤醒，同时设置后继等待状态，如此循环下去，实现多线程对资源的操作。</p>
<p>所有操作都是CAS实现的。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>【日记】2021-12-12 周记随笔</title>
    <url>/2021/12/12/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%912021-12-12-%E5%91%A8%E8%AE%B0%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fa73a0506e640f39a65ff50ace5c8ccacec4b6a61d07b6623724dfa67013b79e">68e938e120fddc22e7fcedd6f4fb68d666d7fdb9ecbc745b7a2bc8f6442cba52c07dea8a15849da5bc0b8579c559c0000fdaa13026bbb37df3f2395c8a25f7e3227826dea022173f6b2166b416facb426c6ddfffaf0389152036fde4b20ec6066379e2e98257bcd6478ce74c61742cb467a44a6cce20eeaad70ddad613d9e8ab8f1d14ad3d82aa4a5b8ad450d44d9878dbf14e3c448b3fe3fb82f01e9d3e14a014199cecbf5036195a36bf20e250b73f0e6c1179f2f25e53946e5ef88f8ee0ebda050f711fe15ebcdb7af6c6d0f2ad0a3f2e90c0eeb147feaa4e5ba708c5c5b943e1d8343acfcd0bda85c807126fc34160d9232fdb8fc9d25b8b2de2aa9fcdb99baa7aee31fb4d2f60321e0966519e4227a978a3f32b728cc66f65ae20f41f5040f5711bb40a7b743fc78b0bad32c300837b24b82226787f54809edb242cbca0fff84f58f1ed687e1df40431da178596aeb8b7c0ea9df65ffcf57e60202499c4b022197ba1f31fc1b7b5efbd9ec4088cd92b75a55e24e153f1135d416ff140936c6eb1ed894008194d1d0eabe893a3b2d96da17ae0acc370a5ca0bf1f53a748e7dd5e1a50432393c2a65a52eb0093ba31eaa769567cdbe5bf3760b5f17b5dfcf85754c3b7a225db22f89131ce1507efd1fea22536915f090a4544e8cd51770878583c23948d3ca6630bfb84cf9ba2c38964a1f70c35944be02e9a56872201b62b3e062da60207cec8ba38726a40bde833bb7cc21934aea6fdcf57fd6213a5ec5faf3ab0b9aa2ad4b8c7d8d58f2636bcf054d87e41fc76bc1c123e9ec8d74b43e09cffe8467caaaafdb66eb39bd886aed3de73a4e95c0c370afa5dfdcc3908489a3978535ec8568d2619dcb881c44ce53a4014979f420af39f5506474fe8229e630ef95228badc7a097ace53c0f6656131a33c2ccc7df6488c55af94b16b74361173b1eb99e609842009a84ffeda26af94dc9c36086c949e968ff30e3b2cd2d9b2c4e8ba19133149f56e47c999492ca90d536f209cb4a14ec4af8905d666ce3ef06b5c96eeae2d490af9ee330acc57d64915ff8c1b1f99ca086016bd228c3caa05ccc52a32f0d7b7526552cc87774fe7c8a2d7938aead085c1f8c151721e9efb06c68977ed032ab2ad544d751fe2c21713cd939d5fd1d4a3f1166bbc24613124847b57f9fb3ebf2e70883703f2af30dab716a66b200efa2d11a98d2d5463b924141470f6476de10165d49593d9923448c3d2a5dd954315b4a00fdfd42533aa84fb7aae290248313d8b56fbc66b0c3a9894dd2da0be5bc30f3c207877dd58a3fb64940d668a3b8c8d81cafc10b271249c2d983ff24fc7cda5719a5a13249e66092dad7495eeab37ca93a4a73f94b113198233163d2cf61337dda578f3d1ee23dfc1e0e788412122b3ce0afdf7ff004ac42f72a67e042dd0d88fc5d7ac806db009860b035dcda3e83f90a7b20dce9cd29082a731c029c262ad744bdfda2ed41a9fa03b2c1124edee8c7f8e248d88fa518d4c5c49454ccfc84648918c7e23851b8ef04ccffb42580867cf901dfcd1948c4a02f5bfae48efe56e16fd481b5899c2fc3399787736f5d849074d114bb321b709b3829bea1939052409f6c343bbc47f5c67712c9ee12a1551b747583228144c45b324b0f26394275095db5d8c14ca47f2a5dd276ccc8ad3a65e0fc6c64a317c7c1b4f0355ef5958cef4de12861e4d03766a4903a4bea62cd50d909556ff69a3e5b6c0249ab60f0e9643948e2220d0df0b141926c4c9e16d50d254f76b24606aac5c02c898905d2ecd9acfc123af14efaa406129116422e2c388d540ff51ac36c5be7a9e6e1284ea691eae2f4855f77f99fa4669ac724c06a88cf81f988f41de94ca860ad6a784f12d0b33d4890706828a1ff70efd2ee41841cbcda3b3df1a645a848379c8be3da957a1115d6fffd01fcbbe843146bce0bf03bffdd432eecd49e1e93210d321e173939a8adcdf9640526f57319f21c8035c3d41ec10bb6d4a3898544dacfe9e25befd6f9495e8e828ef8c8a4a891392ae2dfe656f8301d000bf42b0defa76d04ff840a78c03a48be2685e5cc1fed51d1b47e97c9a4b0b09d8ec075fbe219d34faa9f9d36897b4b4fa9110b065ea3ffe009a6344125c5e0feff679fcd32645619724b3341dcce3d0481bcf1b8663e946bfed246b5d099530cda5077d2e69acae154c406813707811a13b3085bfe9067737c00eba9d3161c0663712ae907d1467f8b23217c70f5abe00ea6b5d39033e62a28ebb44ff68ad4fc5b25fbed01991af94a6cdd76b70067d611a1dbe823a491e94c2350f6fb977a16aa8c4698402a64e39b0a3998f9327a0ce49ea4b7cc386858a81780037ec90cdd040f1d916e52824bf554bdfb3a9b67c86243088273dce030e50e5ddac70735ee739f8c5cb31b48f691df602f85656b83c64053da9442b99caad75ec0714858b1d4c4e700c1c68e6ba491c9768506ed3ce3d9672f23cc0011ab05ad4b87ac8385e3da2022e019fec8a0cb068892e79a87294c80e6171d5526bf72305720b44f70d64364d193673f3c606f0e7ee9cf7b02ab70977603a2cc6457d20974a5866188109dffaa812abaebf1556662581852dfe5b23de8e23ec3e1ae89fca82371d87e19b1eeed77d8298839c75c418f07e5397853504a980dcfe8c5f5320885f194e408c96cf96d3d19e8f5c8678838a04d638b51f3cea828fb671bd1881be54a881923ac0b07b195da1b0433bc57fb07f3786d420440c5bc76239d765840d58c66d9f196c1819004ab92b9be4271ba4e74704f4ccac59365d545d958a1a83c6fb7d473b32fdc1b4227298e23b3ed4ddf1d9af61e3a0a999e442e931f1fee872c351263822c9ed4eb3bb881afe508a201b7a5effd8935edd2318b6600e808562b3c9f29a4f69b3a1b4e25ee88a6229e521d0c483f7a84e1a6d56f164c5eb868e91ea40814398e0762013ccf3c1a5700f38bd540d0cfde454bbd5066df52767017b91c99a508871fc5bc4f5ae7079e126b017f46b6e8d31d9858f0f60968c8b7e14ae3db1720ff9873142bff7e3ef70a832ec7245b44b53241d77fbb103b636fc00e74762c82b21c3d9c9b78cd941bf6c769f11d0bbe6249597004a2f652f92f587b903ddebf414e0f020bb5767ead9cdedf00c6c4a8a52f23bf39e6dbff7e7f9bc9e9de0be168675e5fa0f771700d05d1728dc0167b730ab7ac64c229d14b8f401ef69aaec6cfa11769ab97856caf76241fe77ffc581c558c7169cf7f50c742135c6d8152a350827e4c93bedc3c549033d18eae99d04ab020c2d7798609b1788d5db9efc7561345441d3d21533388fd7d11f7dd495a90ab98644a4a1625cb8bfca077751b2667beb15c0c17801e705c822613d2ee7092f64dfcd854014f9e300e6e17c2d9f22723468bfed276e3cd4e046b93a623b12bc8213a35642f49eaaa19042200940edb00e7dceedf674285e120953f665765c53fbcb301d50183f5aa1cbe684bc6f88b03d0b16990d4666d2987007f03cecbd6ac6c09a84ba8d977fccf4ef8c03bb1041502293c568eb30baa1aa2c645ead12fbd0070ca6e66acf0dea600f48cb399188f73cd8d1fc72d0fcc3a71dc987ed3d7c02d79b652a005978466a5bf945090d2e2702ba7c068e6c70590ac54f57d2f905d6d5b7de43d456599d5a67f4178249fbd4a368e16b2b2d4bf4f815864d241d311a896ab3dc3529fe80dd81dddc4d82e86dff250cb18497fa6f8eee1b2c74a737a74ec78563a52c53aed6a206c35fa12e493e9591123ea71853050672f769644cf6d9b45a9d251c751ef309911fc3ec6ba311b694d967277d3938420cb593a5d5fa1b28e716505c5951c6c2da2e401476809cfe3feaedd17645c624dd3b61249ead0da74e29e5ffb62953eaf108065e4d4d1e8ffed0ae75f26ec68bce2c426dfebaa0205ce8852a4d9eaca9f303afd13ef03392dd5b9ed368f1559c8016d5bc639cebfb890b870ca0069b32299843d9bea1b30f7bb9de8b509149bc17d750b16023ce903296311347ffcd0bae53649d871308d42fe2dbcae84f1cd3f54f80ced70b58f846a1f0024eac60ff460294650b102c304646ac0947acdede113c5d1e739e16cba212924990034b8dab0d2022c8b65d1a9531567a9e5d608d4bcade78a9265d641cb5fd5f3a73663fb2132cbc5460d82228bec876ed7258b3aedc43ea134aa0c3a6a8a769ae5d918c4437c93614e5eb8b08f2ed1e693d74603009cd57f271d898d1db108643cdf541b44c95e58c01b02a862f400daf8f66f4b0a13a78096db4bd2dba217757ded515dc860c1</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>diary</category>
      </categories>
  </entry>
  <entry>
    <title>笔记-LIS最长不下降子序列</title>
    <url>/2021/12/19/%E7%AC%94%E8%AE%B0-LIS%E6%9C%80%E9%95%BF%E4%B8%8D%E4%B8%8B%E9%99%8D%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>最长不下降子序列的本质思想是 贪心+dp：以 <code>a[i]</code> 为结尾的LIS可以通过以 <code>a[i - 1]</code> 为结尾的 <code>LIS +</code> 求得</p>
<span id="more"></span>
<p>按这种思想可以很快得到 <code>o(n^2)</code> 的一种写法，但是一般来说这种写法没有用武之地</p>
<p>尝试改进，首先对每一个位置的遍历是不可避免的，所以只能优化后面的更新LIS的操作：</p>
<p>空间换时间，可以将 以 <code>a[i]</code> 为结尾的LIS的存储下来，长度为 <code>m</code> 的LIS的 <strong>最小</strong> 的LIS记为 <code>low[m]</code> ，后续更新时，对于位于 <code>a[i]</code> 的值，如果他大与 <code>low[最后一个]</code> ，这表明，原先最长的LIS可以加上 <code>a[i]</code> 成为一个新的长度增一的LIS；否则的话，需要尝试去找 <code>low</code> 中的每一个值，看哪一个可以用更小的 <code>a[i]</code> 代替，而 <code>low</code> 是不下降的，所以可以通过二分实现优化计算过程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> DP;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * date: 2021/12/19 22:53</span><br><span class="hljs-comment"> * author: 31415926535x</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LIS</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> m;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] low;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">LIS</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        n = arr.length;<br>        m = arr.length;<br>        low = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[m];<br>        <span class="hljs-keyword">int</span> tot = <span class="hljs-number">0</span>;<br>        low[<span class="hljs-number">0</span>] = arr[<span class="hljs-number">0</span>];<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &gt;= low[tot]) &#123;<br>                low[++tot] = arr[i];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">int</span> idx = binSearch(arr, arr[i]);<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> tot;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = arr.length, mid;<br>        <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>            mid = l + r &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (arr[mid] &gt;= x) &#123;<br>                r = mid - <span class="hljs-number">1</span>;<br>                ret = <span class="hljs-number">0</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                l = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <br>    <br>&#125;<br><br><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>【日记】2021-12-25 平静的一天</title>
    <url>/2021/12/25/%E3%80%90%E6%97%A5%E8%AE%B0%E3%80%912021-12-25-%E5%B9%B3%E9%9D%99%E7%9A%84%E4%B8%80%E5%A4%A9/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e4ae3c75f645f986315b6ac0d9f8199da70333a5546d013acab51fced87121ab"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>diary</category>
      </categories>
  </entry>
</search>
