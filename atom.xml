<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>31415926535x</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.31415x.cf/"/>
  <updated>2021-01-22T06:32:12.139Z</updated>
  <id>http://blog.31415x.cf/</id>
  
  <author>
    <name>31415926535x</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[资源]一些电子书下载集合</title>
    <link href="http://blog.31415x.cf/2020/09/30/%E8%B5%84%E6%BA%90-%E4%B8%80%E4%BA%9B%E7%94%B5%E5%AD%90%E4%B9%A6%E4%B8%8B%E8%BD%BD%E9%9B%86%E5%90%88/"/>
    <id>http://blog.31415x.cf/2020/09/30/资源-一些电子书下载集合/</id>
    <published>2020-09-30T06:38:29.000Z</published>
    <updated>2021-01-22T06:32:12.139Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>(仅罗列资源，不代表任何立场）</p><ul><li><a href="https://github.com/sxcool1024/Machinery-Industry-Press" target="_blank" rel="noopener">https://github.com/sxcool1024/Machinery-Industry-Press</a> 文件提取码：2014 文件解压密码：1024</li><li><a href="https://github.com/fuhmmin/it-ebooks-cn" target="_blank" rel="noopener">https://github.com/fuhmmin/it-ebooks-cn</a> <a href="http://it-ebooks.flygon.net/" target="_blank" rel="noopener">http://it-ebooks.flygon.net/</a></li><li><a href="https://github.com/programthink/books" target="_blank" rel="noopener">https://github.com/programthink/books</a></li><li><a href="https://jikbook.com/" target="_blank" rel="noopener">https://jikbook.com/</a> 缺点：百度云</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;script src=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一个简单的爬取b站up下所有视频的所有评论信息的爬虫</title>
    <link href="http://blog.31415x.cf/2020/03/03/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E5%8F%96b%E7%AB%99up%E4%B8%8B%E6%89%80%E6%9C%89%E8%A7%86%E9%A2%91%E7%9A%84%E6%89%80%E6%9C%89%E8%AF%84%E8%AE%BA%E4%BF%A1%E6%81%AF%E7%9A%84%E7%88%AC%E8%99%AB/"/>
    <id>http://blog.31415x.cf/2020/03/03/一个简单的爬取b站up下所有视频的所有评论信息的爬虫/</id>
    <published>2020-03-02T16:23:39.000Z</published>
    <updated>2020-03-02T16:41:12.898Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>心血来潮搞了一个简单的爬虫，主要是想知道某个人的b站账号，但是你知道，b站在搜索一个用户时，如果这个用户没有投过稿，是搜不到的，，，这时就只能想方法搞到对方的mid，，就是 <code>space.bilibili.com/9444976</code> 后面的那一串数字。偶然看到这个人关注了某个主播，，想到可能这个人会回复主播的视频，于是想着爬到所有up下的视频的评论对应的用户，这样我就可以在数据库里检索昵称得到mid，，，嘿嘿嘿（然而失败了，，不是所有人都像我这么无聊，，，，有些人真的看视频不会回复，，</p><p><a href="https://github.com/31415926535x/CollegeProjectBackup/tree/master/BilibiliSpiders" target="_blank" rel="noopener">项目地址: https://github.com/31415926535x/CollegeProjectBackup/tree/master/BilibiliSpiders</a></p><a id="more"></a><p>这个爬虫的主要功能是爬取某个指定up主下的所有视频中的评论（不包括评论的回复，当然可以实现，但是感觉都差不多，就没考虑这块），最后将爬到的用户数据存到数据库里。<a href="https://www.zhihu.com/question/291554395" target="_blank" rel="noopener"><strong>整个项目只是抱着学习相关内容的心态来完成，不要做大批量的爬取网站(DDOS)及其敏感数据的事，也不要用作商业用途，，（虽然写的很丑，，，）</strong></a></p><h1 id="简要说明"><a href="#简要说明" class="headerlink" title="简要说明"></a>简要说明</h1><p>整个项目的分为三个部分，首先是爬取指定mid up的所有视频的av号，即 <code>CrawlAllVideosOfAUP.py</code> 这个脚本，使用的api是 <code>https://api.bilibili.com/x/space/arc/search?mid=mid&amp;ps=30&amp;tid=0&amp;pn=pn&amp;keyword=&amp;order=pubdate&amp;jsonp=jsonp</code> 具体的说明见脚本内注释。</p><p>之后有了所有的av号，使用 <code>CrawlCommentUsersByVideo.py</code> 爬取指定av号下的所有评论，使用的api是 <code>https://api.bilibili.com/x/v2/reply?pn=**&amp;type=1&amp;oid=***&amp;sort=2</code> 爬取av号为 oid 下第 pn 页的评论的信息（sort对应的应该是评论的展示顺序用不到没管。可以爬取到很多的信息，根据自己需求来修改脚本计科。</p><p>最后将这两个整合，加一点点细节就行了，，大致是一个能用的脚本（虽然最后没有找到我想要的一个信息，，，，</p><p>具体看注释吧，，很简单的一些东西吧，，长见识为主，留印象。。。。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>之前很早就接触了Python爬虫，，但是只是用一下就扔了，没有自己完全的编写一个，，所以心血来擦写一个练练手，，说不定以后还会遇到这样类似的事，，，</p><p>这个脚本最后将爬取到的数据扔到了数据库里，，因为之前看别人的代码，他是获取一条写入一条，，数据量一大就很慢，，（尤其是用了线程一边获取一遍写入时，因为爬虫一次会获得很多的数据，但是如果保存数据库时一条一条的 <code>commit</code> 些磁盘的io瓶颈就会显露出来，，所以可以加一个 flag ，写入到1000或者某个值时再 <code>commit</code> 这样就很有效率了，，跑偏了）</p><p>大概了解了一下python下的线程的写法，思路都是那个思路，，算是简单的见识一下，，，</p><p>关于windows下的mysql数据库：我们通常会备份一个数据库的某些表的结构到一个文件中，例如 <code>233.sql</code> ，使用的命令可能是 <code>mysqldump -uroot -p databases &gt; 233.sql</code> 等等类似的，，但是这个命令在windows的 <code>PowerShell</code> 会有bug，，具体原因没有深究（猜测是编码的锅），导出的文件不能使用 <code>source 233.sql</code> 导入，，会爆什么 <code>&#39;\0&#39;</code> 等 ASCII错误，，这时的解决方法就是换 <code>cmd</code> ，，这个错误第一次见，，而且不好解决，，迷惑性太大，，容易带偏QAQ，，，太浪费时间了，，，</p><p>好像没啥了。。。(end)</p><p>哦对，加个参考。。。</p><p><a href="https://github.com/airingursb/bilibili-user/blob/master/bilibili_user.py" target="_blank" rel="noopener">这是一个暴力爬所有用户信息的，思路差不多的</a></p><p><a href="https://github.com/zhang0peter/bilibili-user-information-spider/blob/master/spider.py" target="_blank" rel="noopener">这个也是，简单些的</a></p><p><a href="https://github.com/airingursb/bilibili-user/blob/master/user_agents.txt" target="_blank" rel="noopener">user-agents看到一个很全的ua，因为我的数据量不大，所以就没用，记录一下</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;心血来潮搞了一个简单的爬虫，主要是想知道某个人的b站账号，但是你知道，b站在搜索一个用户时，如果这个用户没有投过稿，是搜不到的，，，这时就只能想方法搞到对方的mid，，就是 &lt;code&gt;space.bilibili.com/9444976&lt;/code&gt; 后面的那一串数字。偶然看到这个人关注了某个主播，，想到可能这个人会回复主播的视频，于是想着爬到所有up下的视频的评论对应的用户，这样我就可以在数据库里检索昵称得到mid，，，嘿嘿嘿（然而失败了，，不是所有人都像我这么无聊，，，，有些人真的看视频不会回复，，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/31415926535x/CollegeProjectBackup/tree/master/BilibiliSpiders&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目地址: https://github.com/31415926535x/CollegeProjectBackup/tree/master/BilibiliSpiders&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://blog.31415x.cf/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具使用" scheme="http://blog.31415x.cf/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>笔记-观视频-未曾设想的道路</title>
    <link href="http://blog.31415x.cf/2020/03/01/%E7%AC%94%E8%AE%B0-%E8%A7%82%E8%A7%86%E9%A2%91-%E6%9C%AA%E6%9B%BE%E8%AE%BE%E6%83%B3%E7%9A%84%E9%81%93%E8%B7%AF/"/>
    <id>http://blog.31415x.cf/2020/03/01/笔记-观视频-未曾设想的道路/</id>
    <published>2020-02-29T16:33:14.000Z</published>
    <updated>2020-02-29T16:34:55.439Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>观视频-未曾设想的道路-笔记<br><a href="https://www.bilibili.com/video/av92679623" target="_blank" rel="noopener">https://www.bilibili.com/video/av92679623</a><br>制度变迁有两种道路：1. （传统的历史唯物主义，生产力的变化引致生产关系的变化）生产力决定生产关系，经济基础决定上层建筑，自下而上的进行制度的变迁，例如：封建领主向封建地主制的变化为何会发生在战国末期，发生在秦国？结合考古史料来看，就是秦国的农业生产出现了升级，主要是铁器和耕牛的使用，使得小农经济的出现成为可能，从而为商鞅变法等一系列改革提供了土壤。 2. 完全反过来，通过先改变生产关系，从而促进了生产力，自上而下的进行制度的变迁，也就是一条“未曾设想的道路”。但是这种道路是在偶然性和机遇之下才会形成的，比如，英国当年会走上资本主义，其实就是一条英国人“未曾设想的道路”</p><a id="more"></a><p>列宁在《论我国革命》提出两个问题：1.世界历史是由一般性和特殊性共同组成，所以第二国际的批评家片面的强调了一般性，而忽略了世界历史的特殊的原则。2.凭什么不能够先夺取上层建筑，然后在文化上或者在生产力上赶上先进国家的水平呢。（是对传统的历史唯物主义的一个创造性的解释。）</p><p>葛兰西讲 十月革命 是一场反对资本论的革命，是一场反对历史唯物主义的革命。</p><p>生产力水平的质的提高是 崭新的经济社会形态确立的前提。</p><p>铁器和牛耕的使用使一家一户的小农经济有可能存在，所以这是商鞅变法中采取 <strong>析户</strong> 政策的生产力基础。</p><p>美国UCLA的历史学家：罗伯特·保罗·布伦纳的研究：14世纪到16世纪欧洲三个不同地区的制度变迁的轨迹：英格兰、法国、易北河以东的东欧地区。14世纪时期，三个地区的生产力水平大体一致，并且农奴制都已经出现解体。而16世纪后，</p><ul><li>英格兰：黑死病造成农奴大量死亡，（8:06为阻止文艺蔓延至北方“鼠疫小镇”亚姆村民拒绝逃离）、封建君主间的兼并战争导致英国贵族数量大量减少，后果是 <em>大土地所有制</em> —圈地运动（兰开斯特家族和约克家族为了争夺王位而引发内战，又称“玫瑰战争”）。英格兰由农奴制转向农业的资本主义生产关系的雏形：贵族将土地租给善于重点的农奴，农奴之间为土地的租约进行竞争，拿到地的农奴雇佣其他的农奴—&gt; 马克思在资本论中研究过的一种阶级结构：土地所有者、租地的农场主、农业的雇佣工人。原因：特殊历史形势造成阶级斗争形势的变化。所有人为了利益的最大化，导致农业的技术进步也就是生产力的发展。布伦纳提出英国资本主义的农业起源的理论。</li><li>东欧：三十年战争和德国农民起义导致东欧工商业大量破坏，使农奴制得以复辟，绝对主义集权的君主制。</li><li>法国：法国资产阶级革命摧毁了旧的土地关系，将贵族和教会的土地分给农民，使得广泛建立起小生产者个体经济。传统的农奴关系向一种汪洋大海般的小农经济过渡</li></ul><p>布伦纳归结为三个地区阶级斗争的具体形势，不同阶级力量斗争关系对比的变化。属于第二条道路，变革的动力来自上层建筑</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;观视频-未曾设想的道路-笔记&lt;br&gt;&lt;a href=&quot;https://www.bilibili.com/video/av92679623&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/video/av92679623&lt;/a&gt;&lt;br&gt;制度变迁有两种道路：1. （传统的历史唯物主义，生产力的变化引致生产关系的变化）生产力决定生产关系，经济基础决定上层建筑，自下而上的进行制度的变迁，例如：封建领主向封建地主制的变化为何会发生在战国末期，发生在秦国？结合考古史料来看，就是秦国的农业生产出现了升级，主要是铁器和耕牛的使用，使得小农经济的出现成为可能，从而为商鞅变法等一系列改革提供了土壤。 2. 完全反过来，通过先改变生产关系，从而促进了生产力，自上而下的进行制度的变迁，也就是一条“未曾设想的道路”。但是这种道路是在偶然性和机遇之下才会形成的，比如，英国当年会走上资本主义，其实就是一条英国人“未曾设想的道路”&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://blog.31415x.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="思想记录" scheme="http://blog.31415x.cf/categories/%E7%AC%94%E8%AE%B0/%E6%80%9D%E6%83%B3%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="http://blog.31415x.cf/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="杂记" scheme="http://blog.31415x.cf/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>hexo更新域名以及配置</title>
    <link href="http://blog.31415x.cf/2020/02/21/hexo%E6%9B%B4%E6%96%B0%E5%9F%9F%E5%90%8D%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.31415x.cf/2020/02/21/hexo更新域名以及配置/</id>
    <published>2020-02-21T02:01:00.000Z</published>
    <updated>2020-02-21T02:34:10.460Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>现在这个博客的域名是用的是 freenom 下的免费域名进行解析，所以每年都要进行更新一次域名，以及对应的 cloudflare 下的解析，这篇博客是用来记录这一过程，为了之后再重复这个操作做个记录。</p><a id="more"></a><ul><li>首先在 <a href="freenom.com">freenom</a> 上申请新的域名，貌似申请过的域名在一年后可以再次申请，2333</li><li>去 <a href="cloudflare.com">cloudflare</a> 上配置DNS解析：</li><li>Add Site, Select Plan, Add more DNS records:</li><li>添加一项A类型、域名为新域名、IP 为 <code>192.30.252.153</code> Auto TTL、 DNS ONLY(灰色)记录</li><li>添加一项A类型、域名为新域名、IP 为 <code>192.30.252.154</code> Auto TTL、 DNS ONLY(灰色)记录</li><li>添加一项CNAME类型、www、31415926535x.github.io、Proxied(黄色)记录</li><li>更改域名服务器：去 freenom 下的 nameservers，添加 <code>burt.ns.cloudflare.com</code> 和 <code>molly.ns.cloudflare.com</code> cdn域名</li><li>修改 <code>hexo\source\CNAME</code> </li><li>修改 <code>hexo\_config.yml</code> 中的 <code>url</code> </li><li>hexo 更新即可</li></ul><p>end</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在这个博客的域名是用的是 freenom 下的免费域名进行解析，所以每年都要进行更新一次域名，以及对应的 cloudflare 下的解析，这篇博客是用来记录这一过程，为了之后再重复这个操作做个记录。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>笔记-编译原理</title>
    <link href="http://blog.31415x.cf/2020/02/20/%E7%AC%94%E8%AE%B0-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    <id>http://blog.31415x.cf/2020/02/20/笔记-编译原理/</id>
    <published>2020-02-20T06:57:08.000Z</published>
    <updated>2020-02-21T08:37:31.308Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>编译原理学习笔记</p><a id="more"></a><h1 id="第一章-引论"><a href="#第一章-引论" class="headerlink" title="第一章 引论"></a>第一章 引论</h1><p>课程内容： 介绍程序设计语言 <strong>编译程序构造</strong> 的 <strong>基本原理</strong> 和 <strong>基本实现技术</strong> 。</p><h2 id="1-1-什么是编译程序"><a href="#1-1-什么是编译程序" class="headerlink" title="1.1 什么是编译程序"></a>1.1 什么是编译程序</h2><h3 id="翻译程序-Translator"><a href="#翻译程序-Translator" class="headerlink" title="翻译程序(Translator)"></a>翻译程序(Translator)</h3><p>把某一种语言程序（称为 <code>源语言程序</code>） <strong>等价</strong> 的转换成另一种语言程序（称为 <code>目标语言程序</code>） 的程序。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200221134848398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt="翻译程序" title>                </div>                <div class="image-caption">翻译程序</div>            </figure><h3 id="编译程序-Complier"><a href="#编译程序-Complier" class="headerlink" title="编译程序(Complier)"></a>编译程序(Complier)</h3><p>把某一种 <code>高级语言程序</code> 等价的转化成另一种 <code>低级语言程序</code> （如汇编语言或机器语言程序）的程序。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200221140032874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt="编译程序" title>                </div>                <div class="image-caption">编译程序</div>            </figure><p>编译程序可分为： <code>诊断编译程序</code>、<code>优化编译程序</code>、<code>交叉编译程序</code>、<code>可变目标编译程序</code> 。</p><h3 id="解释程序-Interpretor"><a href="#解释程序-Interpretor" class="headerlink" title="解释程序(Interpretor)"></a>解释程序(Interpretor)</h3><p>把 <code>源语言</code> 写的源程序作为输入，但不产生目标 程序，而是 <code>边解释边执行</code> 源程序。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200221140310198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt="j解释程序" title>                </div>                <div class="image-caption">j解释程序</div>            </figure><h2 id="1-2-为什么学习编译原理"><a href="#1-2-为什么学习编译原理" class="headerlink" title="1.2 为什么学习编译原理"></a>1.2 为什么学习编译原理</h2><h3 id="从计算机科学与技术可以学到什么："><a href="#从计算机科学与技术可以学到什么：" class="headerlink" title="从计算机科学与技术可以学到什么："></a>从计算机科学与技术可以学到什么：</h3><ul><li>理解计算系统</li><li>设计计算系统</li><li>训练计算思维(Computational Thinking)</li></ul><h3 id="计算思维是什么："><a href="#计算思维是什么：" class="headerlink" title="计算思维是什么："></a>计算思维是什么：</h3><p>计算思维是运用计算集科学的基础概念去求解问题，设计系统和理解人类行为。</p><h3 id="计算思维的广泛方法："><a href="#计算思维的广泛方法：" class="headerlink" title="计算思维的广泛方法："></a>计算思维的广泛方法：</h3><p>抽象、自动化、问题分解、递归、权衡、保护、冗余、容错、纠错、和恢复、启发式等等。</p><h2 id="1-3-编译过程"><a href="#1-3-编译过程" class="headerlink" title="1.3 编译过程"></a>1.3 编译过程</h2><p>编译程序工作的五个阶段： <code>词法分析</code> 、 <code>语法分析</code> 、 <code>中间代码生成</code> 、 <code>优化</code> 、 <code>目标代码产生</code> 。</p><h3 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h3><ul><li>任务: 输入源程序，对构成源程序的字符串进行 扫描和分解，识别出单词符号 </li><li>依循的原则：<code>构词规则</code></li><li>描述工具：<code>有限自动机</code> </li></ul><h3 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h3><ul><li>任务：在词法分析的基础上，根据语法规则把 单词符号串分解成各类 <code>语法单位(语法范畴)</code></li><li>依循的原则：<code>语法规则</code></li><li>描述工具：<code>上下文无关文法</code></li></ul><h3 id="中间代码产生"><a href="#中间代码产生" class="headerlink" title="中间代码产生"></a>中间代码产生</h3><ul><li>任务：对各类语法单位按语言的语义进行初步翻译 </li><li>依循的原则：<code>语义规则</code></li><li>描述工具：<code>属性文法</code></li><li>中间代码：<code>三元式，四元式，树，...</code></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200221142138306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title>                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul><li>任务：对前阶段产生的中间代码进行加工变换， 以期在最后阶段产生更高效的目标代码 </li><li>依循的原则：<code>程序的等价变换规则</code> </li></ul><h3 id="目标代码产生"><a href="#目标代码产生" class="headerlink" title="目标代码产生"></a>目标代码产生</h3><ul><li>任务: 把中间代码变换成特定机器上的目标代码</li><li><p>依赖于硬件系统结构和机器指令的含义</p><p>目标代码三种形式</p></li><li>汇编指令代码: 需要进行汇编</li><li>绝对指令代码: 可直接运行</li><li>可重新定位指令代码: 需要连接</li></ul><p>可以直接运行的目标代码是绝对指令代码。</p><h2 id="1-4-编译程序的结构"><a href="#1-4-编译程序的结构" class="headerlink" title="1.4 编译程序的结构"></a>1.4 编译程序的结构</h2><h3 id="编译程序总框"><a href="#编译程序总框" class="headerlink" title="编译程序总框"></a>编译程序总框</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200221142533213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt="编译程序总框" title>                </div>                <div class="image-caption">编译程序总框</div>            </figure><h3 id="出错处理"><a href="#出错处理" class="headerlink" title="出错处理"></a>出错处理</h3><ul><li>出错处理程序：发现源程序中的错误，把有关错误信息报告给用户 </li><li>语法错误： 源程序中不符合语法（或词法）规则的错误；非法字符、括号不匹配、缺少；、… </li><li>语义错误： 源程序中不符合语义规则的错误 ；说明错误、作用域错误、类型不一致、…</li></ul><h3 id="遍-pass"><a href="#遍-pass" class="headerlink" title="遍(pass)"></a>遍(pass)</h3><p>遍： 对源程序或源程序的中间表示 从头到尾扫描一次</p><p>阶段与遍是不同的概念</p><ul><li>一遍可以由若干段组成 </li><li>一个阶段也可以分若干遍来完成</li></ul><h3 id="编译前端与后端"><a href="#编译前端与后端" class="headerlink" title="编译前端与后端"></a>编译前端与后端</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200221142853433.png" alt="编译前端和后端" title>                </div>                <div class="image-caption">编译前端和后端</div>            </figure><p>编译前端</p><ul><li>与源语言有关，如词法分析，语法分析，语义分析与 中间代码产生，与机器无关的优化</li></ul><p>编译后端 </p><ul><li>与目标机有关，与目标机有关的优化，目标代码产生 </li></ul><p>带来的好处</p><ul><li>程序逻辑结构清晰 </li><li>优化更充分，有利于移植</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200221144922676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt="前后端" title>                </div>                <div class="image-caption">前后端</div>            </figure><h2 id="1-5-编译程序生成"><a href="#1-5-编译程序生成" class="headerlink" title="1.5 编译程序生成"></a>1.5 编译程序生成</h2><h3 id="以汇编语言和机器语言为工具"><a href="#以汇编语言和机器语言为工具" class="headerlink" title="以汇编语言和机器语言为工具"></a>以汇编语言和机器语言为工具</h3><ul><li>优点:  可以针对具体的机器，充分发挥计算机的系统 功能；生成的程序效率高 </li><li>缺点:  程序难读、难写、易出错、难维护、生产的效 率低</li></ul><h3 id="高级语言书写"><a href="#高级语言书写" class="headerlink" title="高级语言书写"></a>高级语言书写</h3><h4 id="一个高级语言编写的编译器："><a href="#一个高级语言编写的编译器：" class="headerlink" title="一个高级语言编写的编译器："></a>一个高级语言编写的编译器：</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200221145126579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt="一个高级语言编写的编译器" title>                </div>                <div class="image-caption">一个高级语言编写的编译器</div>            </figure><h4 id="利用已有的某种语言的编译程序实现另一语言的编译程序"><a href="#利用已有的某种语言的编译程序实现另一语言的编译程序" class="headerlink" title="利用已有的某种语言的编译程序实现另一语言的编译程序"></a>利用已有的某种语言的编译程序实现另一语言的编译程序</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200221150000429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt="利用已有某种语言的编译程序实现另一种语言的编译程序" title>                </div>                <div class="image-caption">利用已有某种语言的编译程序实现另一种语言的编译程序</div>            </figure><p>P1是一个可以在A机器上运行的编译程序（类似gcc.exe）即 <code>L1ToA.A</code>，可以将一个L1语言的代码编译成一个可以在A上运行的程序</p><p>这时我们用L1语言写一个编译L2语言的编译器P2，即 <code>L2ToA.L1</code> 为了能够在A机器上运行，所以我们需要上面的编译器来编译这个代码，得到 <code>L2ToA.A</code> 这样就得到了一个L2语言的编译器（例如我们用C++语言编写一个Python的编译器python.cpp，然后用g++.exe 编译链接得到一个可以运行的Python的编译器 python.exe）</p><h4 id="移植方法：把一种机器上的编译程序移植到另一种机器上"><a href="#移植方法：把一种机器上的编译程序移植到另一种机器上" class="headerlink" title="移植方法：把一种机器上的编译程序移植到另一种机器上"></a>移植方法：把一种机器上的编译程序移植到另一种机器上</h4><p><img src="https://img-blog.csdnimg.cn/20200221151228280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt="编译器的移植"></p><p>例如现在有一个在A平台（例如Windows）下的L语言（例如c++)的编译器，要移植这个编译器到B平台（Linux）下，我们拥有A平台下的一个L语言的编译器（例如g++.exe）即 <code>LToA.A</code> ，，</p><p>我们可以用L语言写一个针对B平台下的L语言的编译器（例如Linux中的g++.cpp）即 <code>LToB.L</code> ，</p><p>在A平台下编译即可得到一个在A平台下运行并可以编译出在B平台的下运行的L语言的编译器(P2: <code>LToB.A</code>)</p><p>然后再用这个A平台下的编译器编译我们的代码（ <code>LToB.L</code>）就可以得到一个在B平台下运行的编译器 <code>LToB.B</code> </p><p>打个比方：</p><p>我们用c++ 编写一个 <code>g++ForLinux.cpp</code> 然后用 <code>g++.exe</code> 编译，得到 <code>g++ForLinux.exe</code> 然后用 <code>g++ForLinux.exe</code> 编译 <code>g++ForLinux.cpp</code> 就可以得到在Linux下运行的 <code>g++ForLinux</code> c++编译器了。</p><h4 id="自编译方式"><a href="#自编译方式" class="headerlink" title="自编译方式"></a>自编译方式</h4><p>就是编写L的编译器就用L的一小部分 $L_1$ 写一个编译器，然后编译 $L_1 + L_2$ 得到一个较大的编译器，这样不断的重复下去，利用语言自己来写完整的编译器。</p><h4 id="编译程序自动产生"><a href="#编译程序自动产生" class="headerlink" title="编译程序自动产生"></a>编译程序自动产生</h4><p>编译程序-编译程序，编译程序产生器，编译程序书 写系统</p><p>LEX：词法分析程序产生器 </p><p>YACC：语法分析程序产生器</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/2020022115405237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt="编译程序自动产生" title>                </div>                <div class="image-caption">编译程序自动产生</div>            </figure><h1 id="第二章-高级程序设计语言概述"><a href="#第二章-高级程序设计语言概述" class="headerlink" title="第二章 高级程序设计语言概述"></a>第二章 高级程序设计语言概述</h1><h2 id="2-1-常用的高级程序设计语言"><a href="#2-1-常用的高级程序设计语言" class="headerlink" title="2.1 常用的高级程序设计语言"></a>2.1 常用的高级程序设计语言</h2><h3 id="高级程序设计语言的优点"><a href="#高级程序设计语言的优点" class="headerlink" title="高级程序设计语言的优点"></a>高级程序设计语言的优点</h3><p>相对机器语言或汇编语言，高级程序设计语言</p><ul><li>更接近于数学语言和工程语言，更直观、自然和易 于理解</li><li>更容易验证其正确性、改错 </li><li>编写程序的效率更高</li><li>更容易移植</li></ul><h2 id="2-2-程序设计语言的定义"><a href="#2-2-程序设计语言的定义" class="headerlink" title="2.2 程序设计语言的定义"></a>2.2 程序设计语言的定义</h2><p><strong>标识符是语法概念，名字是语义概念</strong></p><p>程序语言的定义： <strong>语法 、语义 、语用</strong></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>程序本质上是一定字符集上的字符串 </p><p><strong>语法</strong>：一组规则，用它可以形成和产生一个 <strong>合式(well-formed)</strong> 的程序。</p><p><strong>词法规则</strong> ：单词符号的形成规则。</p><ul><li>单词符号是语言中具有独立意义的最基本结构 </li><li>一般包括：常数、标识符、基本字、算符、界符等 </li><li><strong>描述工具：有限自动机</strong></li></ul><p><strong>语法规则</strong> ：语法单位的形成规则。</p><ul><li>语法单位通常包括：表达式、语句、分程序、过程、 函数、程序等; </li><li>描述工具：上下文无关文法</li></ul><p><strong>语法规则</strong> 和 <strong>词法规则</strong> 定义了程序的形式结构。</p><p>定义语法单位的意义属于 <strong>语义</strong> 问题。</p><h3 id="语义"><a href="#语义" class="headerlink" title="语义"></a>语义</h3><p><strong>语义</strong> ：一组规则，用它可以定义一个程序的意义 。</p><p>描述方法 ：</p><ul><li>自然语言描述：二义性、隐藏错误和不完整性</li><li>形式描述：<em>操作语义 、指称语义 、代数语义</em></li></ul><h3 id="程序语言的基本功能和层次结构"><a href="#程序语言的基本功能和层次结构" class="headerlink" title="程序语言的基本功能和层次结构"></a>程序语言的基本功能和层次结构</h3><p>程序，本质上说是描述一定数据的处理过程 。</p><p>程序语言的基本功能 ：<strong>描述数据</strong> 和 <strong>对数据的运算</strong> 。</p><h3 id="程序的层次结构"><a href="#程序的层次结构" class="headerlink" title="程序的层次结构"></a>程序的层次结构</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200221155855232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt="层次结构" title>                </div>                <div class="image-caption">层次结构</div>            </figure><h3 id="程序语言成分的逻辑和实现意义"><a href="#程序语言成分的逻辑和实现意义" class="headerlink" title="程序语言成分的逻辑和实现意义"></a>程序语言成分的逻辑和实现意义</h3><ul><li>抽象的逻辑的意义：数学意义</li><li>计算机实现的意义：具体实现</li></ul><h2 id="2-3-高级程序设计语言的一般特性"><a href="#2-3-高级程序设计语言的一般特性" class="headerlink" title="2.3 高级程序设计语言的一般特性"></a>2.3 高级程序设计语言的一般特性</h2><h3 id="高级语言的分类"><a href="#高级语言的分类" class="headerlink" title="高级语言的分类"></a>高级语言的分类</h3><ul><li>强制式语言(Imperative Languge)/过程式语言：命令驱动，面向语句，C、Pascal</li><li>应用式语言(Applicative Language)： 注重程序所表示的功能，而不是一个语句接一个语 句地执行 LISP、ML </li><li>基于规则的语言( Rule-based Language)： 检查一定的条件，当它满足值，则执行适当的动作 Prolog </li><li>面向对象语言(Object-Oriented Language)： 封装、继承和多态性 Smalltalk，C++，Java </li></ul><h3 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h3><ul><li>FORTRAN ： 主程序段+辅程序段、没有嵌套和递归==&gt; 模块化的特点</li><li>PASCAL ：程序本身可以看成是一个操作系统调用的过 程，过程可以嵌套和递归 </li><li>作用域：一个名字能被使用的区域范围。</li><li>名字作用域规则—— <strong>“最近嵌套原则”</strong></li><li>JAVA ：面向对象</li></ul><h3 id="数据结构与操作"><a href="#数据结构与操作" class="headerlink" title="数据结构与操作"></a>数据结构与操作</h3><p><strong>数据类型</strong> 通常包括三要素：</p><ul><li>用于区别这种类型数据对象的 <strong>属性</strong> </li><li>这种类型的数据对象可以具有的 <strong>值</strong></li><li>可以作用于这种类型的数据对象的 <strong>操作</strong></li></ul><p>初等数据类型 ： 数值类型 、逻辑类型 、字符类型、指针类型。</p><h3 id="标识符与名字"><a href="#标识符与名字" class="headerlink" title="标识符与名字"></a>标识符与名字</h3><p><strong>标识符是语法概念，名字是语义概念</strong></p><ul><li>标识符：以字母开头的，由字母数字组成的字符串</li><li>名字：标识程序中的对象</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200221161139933.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt="标识符绑定成名字" title>                </div>                <div class="image-caption">标识符绑定成名字</div>            </figure><p>名字的意义和属性 ：</p><ul><li>值：单元中的内容 </li><li>属性：类型和作用域 </li></ul><p>名字的说明方式：</p><ul><li>由说明语句来明确规定的 </li><li>隐含说明 </li><li>动态确定 </li></ul><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>n维矩形结构、长度可变和不可变、存放方式：按行存放、案列存放</p><p><strong>数组元素地址计算</strong>：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200221161932550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt="数组地址计算通项" title>                </div>                <div class="image-caption">数组地址计算通项</div>            </figure><p>编译器程序会维护一个这样的向量：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200221162137368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt="内情向量" title>                </div>                <div class="image-caption">内情向量</div>            </figure><h4 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h4><p>由已知类型的数据组合在一起的一种结构 （就是结构体。。。）</p><p>其中内部的元素也称为 域（field）</p><h4 id="字符串、表格、栈"><a href="#字符串、表格、栈" class="headerlink" title="字符串、表格、栈"></a>字符串、表格、栈</h4><h4 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h4><p>其内容包括：</p><ul><li>数据对象集合</li><li>作用于这些数据对象的抽象运算的集合 </li><li>这种类型对象的封装，即，除了使用类型中所定义 的运算外，用户不能对这些对象进行操作 </li></ul><p>程序设计语言对抽象数据类型的支持 </p><h3 id="语句与控制结构"><a href="#语句与控制结构" class="headerlink" title="语句与控制结构"></a>语句与控制结构</h3><h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><ul><li>表达式由 <strong>运算量（也称操作数，即数据引用或函数 调用）</strong> 和 <strong>算符（运算符，操作符）</strong> 组成 。</li><li>形式：中缀、前缀、后缀 </li><li>表达式形成规则 </li></ul><h4 id="算符的优先次序"><a href="#算符的优先次序" class="headerlink" title="算符的优先次序"></a>算符的优先次序</h4><p>一般的规定 ：</p><ul><li>PASCAL：左结合A+B+C=(A+B)+C </li><li>FORTRAN： 对于满足左、右结合的算符可任取一种</li></ul><p>注意： </p><ul><li>代数性质能引用到什么程度视具体的语言而定 </li><li>在数学上成立的代数性质在计算机上未必完全成立（多个函数间的返回值的运算）</li></ul><h4 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h4><ul><li>赋值语句：<strong>左值-&gt;地址、右值-&gt;内容</strong></li><li>控制语句 ：无条件转移语句、条件语句 、循环语句、过程调用语句 、返回语句 </li></ul><p>语句的分类：</p><p>1.按功能：</p><ul><li>执行语句：描述程序的动作</li><li>说明语句：定义各种不同数据类型的变量或运算， 定义名字的性质</li></ul><p>2.按形式 ：</p><ul><li>简单句：不包含其他语句成分的基本句 </li><li>复合句：句中有句的语句 </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编译原理学习笔记&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://blog.31415x.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://blog.31415x.cf/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>笔记-物联网工程</title>
    <link href="http://blog.31415x.cf/2020/02/18/%E7%AC%94%E8%AE%B0-%E7%89%A9%E8%81%94%E7%BD%91%E5%B7%A5%E7%A8%8B/"/>
    <id>http://blog.31415x.cf/2020/02/18/笔记-物联网工程/</id>
    <published>2020-02-18T06:36:40.000Z</published>
    <updated>2020-02-18T07:55:16.995Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>物联网工程相关笔记</p><a id="more"></a><h1 id="第一章-物联网概论"><a href="#第一章-物联网概论" class="headerlink" title="第一章 物联网概论"></a>第一章 物联网概论</h1><h2 id="物联网发展的社会背景-（了解）"><a href="#物联网发展的社会背景-（了解）" class="headerlink" title="物联网发展的社会背景 （了解）"></a>物联网发展的社会背景 （了解）</h2><h3 id="物联网概念的提出"><a href="#物联网概念的提出" class="headerlink" title="物联网概念的提出"></a>物联网概念的提出</h3><ul><li>比尔·盖茨的 “电子别针”</li><li>Auto-ID 实验室、RFID与物联网</li><li>ITU 提出的物联网概念：物联网 <strong>(Internet of Things, IOT)</strong></li></ul><h3 id="物联网与智慧地球"><a href="#物联网与智慧地球" class="headerlink" title="物联网与智慧地球"></a>物联网与智慧地球</h3><ul><li>智慧地球将传感器嵌入和装备到电网、铁路、桥梁、隧道、公路、建筑、供水系统、大坝、油气管道等各种物体中，并通过超级计算机和云计算组成物联网，实现 <strong>“人-机-物”</strong> 的融合</li><li><strong>智慧地球=互联网+物联网</strong></li></ul><h3 id="欧盟与各国政府物联网产业发展规划"><a href="#欧盟与各国政府物联网产业发展规划" class="headerlink" title="欧盟与各国政府物联网产业发展规划"></a>欧盟与各国政府物联网产业发展规划</h3><h4 id="欧盟发展物联网产业的规划"><a href="#欧盟发展物联网产业的规划" class="headerlink" title="欧盟发展物联网产业的规划"></a>欧盟发展物联网产业的规划</h4><p>第一阶段（2010年前）：基于RFID技术实现低功耗、低成本的单个物体间的互联，并在物流、零售、制药等领域开展局部的应用</p><p>第二阶段（2010～2015年）：利用传感网与无处不在的RFID标签实现物与物之间的广泛互联，针对特定的产业制定技术标准，并完成部分网络的融合</p><p>第三阶段（2015～2020年）：具有可执行指令的RFID标签广泛应用，物体进入半智能化，物联网中异构网络互联的标准制定完成，网络具有高速数据传输能力</p><p>第四阶段（2020年之后）：物体具有完全的智能响应能力，异构系统能够实现协同工作，人、物、服务与网络达到深度地融合</p><h2 id="物联网发展的技术背景"><a href="#物联网发展的技术背景" class="headerlink" title="物联网发展的技术背景"></a>物联网发展的技术背景</h2><h3 id="从人类对技术需求的角度认识物联网发展的必然性"><a href="#从人类对技术需求的角度认识物联网发展的必然性" class="headerlink" title="从人类对技术需求的角度认识物联网发展的必然性"></a>从人类对技术需求的角度认识物联网发展的必然性</h3><h3 id="从互联网技术发展的角度认识物联网发展的必然性"><a href="#从互联网技术发展的角度认识物联网发展的必然性" class="headerlink" title="从互联网技术发展的角度认识物联网发展的必然性"></a>从互联网技术发展的角度认识物联网发展的必然性</h3><h3 id="从普适计算研究的角度认识物联网发展的必然性（普适计算（PervasiveComputing）—-无处不在的计算"><a href="#从普适计算研究的角度认识物联网发展的必然性（普适计算（PervasiveComputing）—-无处不在的计算" class="headerlink" title="从普适计算研究的角度认识物联网发展的必然性（普适计算（PervasiveComputing）— 无处不在的计算"></a>从普适计算研究的角度认识物联网发展的必然性（普适计算（PervasiveComputing）— 无处不在的计算</h3><h3 id="从CPS-Cyber-Physical-Systems-研究的角度认识物联网发展的必然性-（重点）"><a href="#从CPS-Cyber-Physical-Systems-研究的角度认识物联网发展的必然性-（重点）" class="headerlink" title="从CPS(Cyber-Physical Systems)研究的角度认识物联网发展的必然性 （重点）"></a>从CPS(Cyber-Physical Systems)研究的角度认识物联网发展的必然性 （重点）</h3><h4 id="设计自动泊车系统需要应用的技术"><a href="#设计自动泊车系统需要应用的技术" class="headerlink" title="设计自动泊车系统需要应用的技术"></a><strong>设计自动泊车系统需要应用的技术</strong></h4><p>（重点）自动泊车系统： 车位识别、轨迹生成、轨迹控制</p><p>自动泊车是无人驾驶汽车重要的功能与研究内容之一，它是感知、智能、计算、通信与控制技术交叉融合的产物，是一种典型的信息物理融合的CPS系统</p><h4 id="CPS的主要技术特征"><a href="#CPS的主要技术特征" class="headerlink" title="CPS的主要技术特征"></a><strong>CPS的主要技术特征</strong></h4><ul><li>CPS是“人-机-物”深度融合的系统</li><li>CPS是“3C”与物理设备深度融合的系统（Computation Communication and Control）</li><li>CPS 是环境感知、嵌入式计算、网络通信深度融合的系统</li></ul><h4 id="CPS的主要功能"><a href="#CPS的主要功能" class="headerlink" title="CPS的主要功能"></a><strong>CPS的主要功能</strong></h4><ul><li>“感”：多感知器协同感知物理世界的状态信息</li><li>“联”：连接物理世界与信息世界的各种对象，实现信息交互</li><li>“知”：通过对感知信息的智能处理，正确、全面地认知物理世界</li><li>“控”：根据正确的认知，确定控制策略，发出指令，指挥执行器协同控制物理世界</li></ul><p><strong>CPS 是环境感知、嵌入式计算、网络通信深度融合的系统</strong></p><h2 id="物联网定义与主要技术特征"><a href="#物联网定义与主要技术特征" class="headerlink" title="物联网定义与主要技术特征"></a>物联网定义与主要技术特征</h2><h3 id="物联网的定义-（重点、填空）"><a href="#物联网的定义-（重点、填空）" class="headerlink" title="物联网的定义 （重点、填空）"></a>物联网的定义 （重点、填空）</h3><p>按照规定的协议，将具有 <strong>“感知、通信、计算”</strong> 功能的 <em>智能物体(smart objects)、系统、信息资源</em>互联起来，实现对物理世界 <strong>“泛在感知、可靠传输、智慧处理”</strong> 的智能服务系统</p><h4 id="理解物联网的定义与技术特征需要注意的问题："><a href="#理解物联网的定义与技术特征需要注意的问题：" class="headerlink" title="理解物联网的定义与技术特征需要注意的问题："></a>理解物联网的定义与技术特征需要注意的问题：</h4><ul><li><strong>物联网是在互联网基础上发展起来的</strong>，它与互联网在基础设施上有一定程度的重合，但是它不是互联网概念、技术与应用的简单扩展</li><li>互联网扩大了人与人之间信息共享的深度与广度，物联网更加强调它在人类社会生活的各个方面、国民经济的各个领域广泛与深入地应用</li><li>物联网主要特征是：泛在感知、可靠传输、智慧处理</li></ul><p>互联网中的物被抽象成为“智能物体” 或 “智能对象”</p><h3 id="物联网的主要技术特征"><a href="#物联网的主要技术特征" class="headerlink" title="物联网的主要技术特征"></a>物联网的主要技术特征</h3><ul><li>物联网的智能物体具有感知、通信与计算能力</li><li>物联网可以提供所有对象在 <strong>任何时间、任何地点</strong> 的互联</li><li>物联网的目标是 <strong>实现物理世界与信息世界</strong> 的融合</li></ul><h3 id="1-3-3-物联网与互联网的比较"><a href="#1-3-3-物联网与互联网的比较" class="headerlink" title="1.3.3  物联网与互联网的比较"></a>1.3.3  物联网与互联网的比较</h3><h4 id="物联网与互联网的不同之处（重点、填空）"><a href="#物联网与互联网的不同之处（重点、填空）" class="headerlink" title="物联网与互联网的不同之处（重点、填空）"></a>物联网与互联网的不同之处（重点、填空）</h4><ul><li>物联网提供 <strong>行业性、专业性与区域性</strong> 的服务：互联网提供全球性公共信息服务、物联网提供行业性、专业性、区域性应用</li><li>物联网数据主要是通过 <strong>自动方式</strong> 获取的：互联网数据主要是以人工方式生成、物联网的数据主要是由传感器、RFID等设备自动生成</li><li>物联网是 <strong>可反馈、可控制</strong> 的“闭环”系统</li></ul><h3 id="1-3-4-物联网与“互联网-”的关系"><a href="#1-3-4-物联网与“互联网-”的关系" class="headerlink" title="1.3.4  物联网与“互联网+”的关系"></a>1.3.4  物联网与“互联网+”的关系</h3><ul><li>“互联网+”是对我国社会与经济发展思路高度凝练的表述，它涵盖着互联网、移动互联网与物联网与各行各业、社会各个层面“跨界融合”的丰富内容</li><li>物联网是支撑“互联网+” 发展的核心技术之一</li><li>推进“互联网+” 将为物联网产业开辟更加广阔的发展空间</li></ul><h2 id="1-4-物联网体系结构"><a href="#1-4-物联网体系结构" class="headerlink" title="1.4  物联网体系结构"></a>1.4  物联网体系结构</h2><h3 id="1-4-1-物联网体系结构的基本概念"><a href="#1-4-1-物联网体系结构的基本概念" class="headerlink" title="1.4.1  物联网体系结构的基本概念"></a>1.4.1  物联网体系结构的基本概念</h3><h3 id="1-4-2-人对物理世界问题处理的基本方法"><a href="#1-4-2-人对物理世界问题处理的基本方法" class="headerlink" title="1.4.2  人对物理世界问题处理的基本方法"></a>1.4.2  人对物理世界问题处理的基本方法</h3><p>物联网三层结构模型： </p><ul><li>应用层： 行业应用层、管理服务层</li><li>网络层： 核心交换层、汇聚层、接入层</li><li>感知层： 各种类型的传感器、RFID标签与读写设备等</li></ul><h3 id="1-4-3-物联网感知层"><a href="#1-4-3-物联网感知层" class="headerlink" title="1.4.3  物联网感知层"></a>1.4.3  物联网感知层</h3><h4 id="感知层设备的分类"><a href="#感知层设备的分类" class="headerlink" title="感知层设备的分类"></a>感知层设备的分类</h4><ul><li>自动感知设备</li><li>人工生成信息设备</li></ul><h4 id="感知能力与控制能力"><a href="#感知能力与控制能力" class="headerlink" title="感知能力与控制能力"></a>感知能力与控制能力</h4><p>从一块简单的RFID标签、一个温度传感器或测控装置，到<br>一个复杂的智能机器人，它们之间最重要的区别表现在：<br>是不是需要同时具备感知能力和控制、执行能力，以及需<br>要什么样的控制、执行能力</p><p>不同结构的物联网应用系统：</p><h3 id="1-4-4-物联网网络层"><a href="#1-4-4-物联网网络层" class="headerlink" title="1.4.4  物联网网络层"></a>1.4.4  物联网网络层</h3><h4 id="接入层、汇聚层与核心交换层的概念"><a href="#接入层、汇聚层与核心交换层的概念" class="headerlink" title="接入层、汇聚层与核心交换层的概念"></a>接入层、汇聚层与核心交换层的概念</h4><p>网络层次结构模型有两种基本的方法:</p><ul><li>方法1：开放系统互联（OSI）参考模型，将计算机网络分成从物理层到应用层的七层结构</li><li>方法2：参考自顶向下的研究方法，将为计算机网络分成两部分，提供数据传输服务的核心交换部分叫做传输网，将联网计算机设备叫做端系统</li><li>物联网在网络结构研究时更适合用方法2，将连接感知层与应用层的传输网归为物联网的网络层，再进一步分析物联网网络层的特点</li><li>根据物联网网络结构的特点，需要将网络层进一步划分为三个子层：接入层、汇聚层与核心交换层</li></ul><p>接入层、汇聚层与核心交换层的基本功能：</p><ul><li>接入层连接各种传感器、传感网、感知设备与执行设备，将感知数据传送到汇聚层，并将控制指令反馈给执行设备</li><li>汇聚层聚合接入层的用户流量，实现感知数据与控制指令的路由、转发与交换</li><li>核心交换层连接应用层，为物联网提供一个高速、安全与保证服务质量的数据传输环境</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;物联网工程相关笔记&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://blog.31415x.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://blog.31415x.cf/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>笔记-软件体系结构于设计模式</title>
    <link href="http://blog.31415x.cf/2020/02/10/%E7%AC%94%E8%AE%B0-%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%BA%8E%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.31415x.cf/2020/02/10/笔记-软件体系结构于设计模式/</id>
    <published>2020-02-10T00:36:23.000Z</published>
    <updated>2020-02-10T00:37:11.103Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>软件体系结构与设计模式的部分笔记。</p><a id="more"></a><p>#</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;软件体系结构与设计模式的部分笔记。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://blog.31415x.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://blog.31415x.cf/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>[工具使用]-新版正方教务系统导出课程表-油猴脚本</title>
    <link href="http://blog.31415x.cf/2020/01/31/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8-%E6%96%B0%E7%89%88%E6%AD%A3%E6%96%B9%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F%E5%AF%BC%E5%87%BA%E8%AF%BE%E7%A8%8B%E8%A1%A8-%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC/"/>
    <id>http://blog.31415x.cf/2020/01/31/工具使用-新版正方教务系统导出课程表-油猴脚本/</id>
    <published>2020-01-30T16:02:32.000Z</published>
    <updated>2020-03-02T16:29:12.056Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://greasyfork.org/zh-CN/scripts/395847-%E6%96%B0%E7%89%88%E6%AD%A3%E6%96%B9%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F%E5%AF%BC%E5%87%BA%E8%AF%BE%E7%A8%8B%E8%A1%A8" target="_blank" rel="noopener">这个油猴脚本</a>主要是针对新版的正方教务系统，实现将课程表转化为一个 <code>courses.ics</code> 文件，这样就可以 <strong>愉快</strong> 的使用 <code>Google Calendar</code> 来看课程表了，<del>（唉，我好像快毕业了哎，，，</del> ，</p><a id="more"></a><h1 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h1><p>安装油猴扩展，然后安装脚本</p><p>在使用前进入到要导出课程表的页面，<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/31415926535x/CollegeProjectBackup/master/ZhengfangClassScheduleToICS/img/1.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p>然后确定这学期开学的第一周的周一的日期，<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/31415926535x/CollegeProjectBackup/master/ZhengfangClassScheduleToICS/img/2.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p>点击 <code>生成课表</code> 然后就会提示导出成功，这时点击旁边的 <code>下载ics文件</code> 即可下载 <code>course.ics</code> 文件，<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/31415926535x/CollegeProjectBackup/master/ZhengfangClassScheduleToICS/img/3.PNG" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p>之后怎么使用就看你了，，这样可以不再使用各种 **课程表 等看个课程表还要等半天，看半天广告，而且还占空间。。<del>（深受其害.jpg）</del></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>第一次写脚本，js用的也不熟练，这个脚本参照了一个学长之前根据旧版教务系统的课程表导出脚本写的，一直想自己写一个，一直拖到了新版教务系统，，，无聊时练下手，所以脚本的只是一个可以使用的状况，其中的一些处理没有考虑效率的问题<del>（数据量又不大，暴力就完事了嘛）</del> ，其中可能还存在一些bug每一处理，希望遇到的朋友可以提个issues，嘿嘿。</p><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>有时间将考试信息也加上。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://greasyfork.org/zh-CN/scripts/395847-%E6%96%B0%E7%89%88%E6%AD%A3%E6%96%B9%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F%E5%AF%BC%E5%87%BA%E8%AF%BE%E7%A8%8B%E8%A1%A8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这个油猴脚本&lt;/a&gt;主要是针对新版的正方教务系统，实现将课程表转化为一个 &lt;code&gt;courses.ics&lt;/code&gt; 文件，这样就可以 &lt;strong&gt;愉快&lt;/strong&gt; 的使用 &lt;code&gt;Google Calendar&lt;/code&gt; 来看课程表了，&lt;del&gt;（唉，我好像快毕业了哎，，，&lt;/del&gt; ，&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://blog.31415x.cf/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具使用" scheme="http://blog.31415x.cf/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>[笔记]应用写作</title>
    <link href="http://blog.31415x.cf/2019/12/21/%E7%AC%94%E8%AE%B0-%E5%BA%94%E7%94%A8%E5%86%99%E4%BD%9C/"/>
    <id>http://blog.31415x.cf/2019/12/21/笔记-应用写作/</id>
    <published>2019-12-21T08:11:38.000Z</published>
    <updated>2020-01-30T16:27:05.780Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><ul><li>写作的分类： <strong>文学创作</strong> 艺术写作、 <strong>应用写作</strong> 实用写作；</li><li>应用写作的发展： <strong>萌芽期</strong> ： 上古至先秦时期（周易·系辞、尚书（典、谟、训、诰、誓、命）） <strong>初步形成时期</strong> ： 秦汉时期（李斯 《谏逐客书》 晁盖 《论贵粟书》 司马迁 《报任安书》）<strong>发展期</strong> ： 三国魏晋南北朝 （曹操 《求贤令》 诸葛亮《出师表》 <strong>成熟期</strong> ： 唐宋时期（苏轼《答刘巨济书》） <strong>完善期</strong> ：元明清 分上行、平行、下行文 <strong>改革期</strong> ： 辛亥革命至今</li><li>应用写作的特点： 功能实用性、内容的真实性、体式的规定性、表述的简约性、运作的时效性</li><li>学习应用写作的原因： 社会-需要杰出的表达者、个人-个人基本素质，技能之一、自身特点发展趋势</li></ul><a id="more"></a><h1 id="系统写作理论"><a href="#系统写作理论" class="headerlink" title="系统写作理论"></a>系统写作理论</h1><h2 id="系统写作理论-1"><a href="#系统写作理论-1" class="headerlink" title="系统写作理论"></a>系统写作理论</h2><ul><li>系统论的核心思想是 <strong>系统的整体观念</strong> ，分析系统的结构功能， 研究系统、要素、环境 三者的相互关系和变动规律</li><li>基本内容： 考察系统的 <strong>语境、功能、结构及其演化规律</strong></li><li><strong>文体分类</strong> ： 认知功能文体、行事功能文体、人际功能文体</li></ul><h2 id="文本语境"><a href="#文本语境" class="headerlink" title="文本语境"></a>文本语境</h2><ul><li>文本的非语言语境：指不以文本文字形式存在的语境因素，包括 <strong>情景语境</strong> 和 <strong>文化语境</strong></li><li>情景语境： 指构成说话和写作活动的现实条件，包括 <strong>语篇范围（写作对象）</strong> 、 <strong>语篇方式（写作方式）</strong> 、 <strong>语篇基调（写作主体）</strong> 、写作时间和场所</li><li>语篇基调（写作主体）： 作者、协作者、读者</li><li>语言语境： 指以语言文字形式存在的语境因素，包括 <strong>篇际语境</strong> 和 <strong>篇内语境</strong></li><li>篇际语境： 即生产的文本与 <strong>其他</strong> 文本之间的语境关系</li><li>篇内语境： 包括 <strong>篇 与 各部分的语境</strong> 和 **篇中各部分的语境（上下文关系）</li></ul><h2 id="文本功能与结构"><a href="#文本功能与结构" class="headerlink" title="文本功能与结构"></a>文本功能与结构</h2><ul><li>文本的三大功能： 知行功能（写作对象）、人际功能（写作主体）、语篇功能（写作方式）</li></ul><h2 id="文本生产过程"><a href="#文本生产过程" class="headerlink" title="文本生产过程"></a>文本生产过程</h2><ul><li>文本生产过程阶段划分： <strong>准备阶段</strong> 、 <strong>起草阶段</strong> 、 <strong>修改阶段</strong></li><li>文本生产策略： <strong>认知图式策略</strong> 、 <strong>主体互动策略</strong> 、 <strong>创新思维策略</strong> 、</li></ul><h1 id="新闻写作"><a href="#新闻写作" class="headerlink" title="新闻写作"></a>新闻写作</h1><h2 id="新闻文体"><a href="#新闻文体" class="headerlink" title="新闻文体"></a>新闻文体</h2><p>新闻的定义：</p><ul><li>反映说： 新闻是新近发生事实的反映；</li><li>功能说： 新闻是报道或评述重要事实以影响舆论的特殊手段；</li><li>事实说： 新闻是一种新的重要事实；</li><li><strong>公认定义</strong> ：新闻是 向社会成员传递具有新闻价值的真实信息；</li></ul><p>新闻的原则：追求真实的原则、公正报道的原则、准确报道的原则、客观报道的原则</p><p>消息一词最早出现在 《易经》</p><p>消息的特点： 短、快、新、真、社会价值</p><p>消息=事实+价值+传播</p><p>反映新闻价值的要素： 时间性、显著性、接近性、新奇性、重要性、人情味</p><h2 id="消息写作"><a href="#消息写作" class="headerlink" title="消息写作"></a>消息写作</h2><ul><li>消息的结构： 标题、<strong>消息头</strong> 、导语、主体、结尾</li><li>消息头是消息前面那段： <strong><em>出版社</em></strong>电（记者<em>*</em>） 作用：声明版权、发稿来源、时间等</li><li>消息的经典结构： 倒金字塔结构，其他结构： 悬念式结构（金字塔结构）、时间循序结构</li><li>倒金字塔结构： 标题、导语、主体</li></ul><h2 id="消息标题的写作"><a href="#消息标题的写作" class="headerlink" title="消息标题的写作"></a>消息标题的写作</h2><ul><li>多行标题： 引题/眉题、正题/主题、副题/辅题</li><li>双行标题、虚实结合： 引题+正题、正题+副题</li></ul><h2 id="消息导语、主体、背景的写作"><a href="#消息导语、主体、背景的写作" class="headerlink" title="消息导语、主体、背景的写作"></a>消息导语、主体、背景的写作</h2><p>消息的导语： </p><ul><li>位置： 消息的第一段</li><li>功能： 简短笔墨反映要点、为整篇报道定下基调、唤起读者的注意</li><li><strong>写法</strong> ：叙述式、描写式、引用式、评论式等</li></ul><p>消息的主体：</p><ul><li>位置： 导语之后展开的部分</li><li>功能： 对新闻事实做充分而具体的报道和说明，或对导语进行解释、深化，或补充新的事实</li><li>注意： 紧扣主题；具体充实；避免重复</li></ul><p>消息的背景：</p><ul><li>解释、烘托和深化主题，帮助读者理解新闻事实</li><li>代替记者发表议论，使报的现得客观</li><li>补充情况、介绍知识</li></ul><h1 id="调查报告"><a href="#调查报告" class="headerlink" title="调查报告"></a>调查报告</h1><h2 id="何为调查"><a href="#何为调查" class="headerlink" title="何为调查"></a>何为调查</h2><ul><li>调查的过程： 确立调查主题、设计调查方案、实施调查方案、统计分析调查资料、撰写并修改调查报告</li></ul><h2 id="调查的主要方法"><a href="#调查的主要方法" class="headerlink" title="调查的主要方法"></a>调查的主要方法</h2><ul><li>主要方法： 文件调查、实验研究、实地考察、文献查阅</li></ul><h2 id="调查的功能、分类、写作"><a href="#调查的功能、分类、写作" class="headerlink" title="调查的功能、分类、写作"></a>调查的功能、分类、写作</h2><ul><li>功能： 通过定量和定性的分析方法，获取真实的信息反映客观情况、经验、问题或者规律性的东西，满足读者的认知需求</li><li>类型： <strong>情况调查型、典型分析型、探讨研究型</strong></li><li>写作的结构： 标题、概要、正文、结尾、附件</li><li>写作过程： 确定选题并不断优化、科学分析、结构合理、论证充分、深化研究成果</li></ul><h1 id="演讲稿与求职信"><a href="#演讲稿与求职信" class="headerlink" title="演讲稿与求职信"></a>演讲稿与求职信</h1><h2 id="演讲与演讲稿"><a href="#演讲与演讲稿" class="headerlink" title="演讲与演讲稿"></a>演讲与演讲稿</h2><ul><li>演讲稿的特点： 使人信（记叙、描述）、使人知（修辞）、使人行（议论）</li><li>演讲稿的突出特点： 针对性、鲜明性、通俗性、鼓动性</li><li>写作特点： 因时而发、因事而发、因景而发、因情而发</li><li>演讲稿的结构： 标题、开头、主体、结尾</li><li>标题的分类： 概括式、设问式、鼓动式、比喻式</li><li>开头的分类： 开门见山式、提出问题式、引用名句式、实例导入式、现场引入式</li><li>主体的分类： 并列式、递进式、时间顺序式</li><li>结尾的分类： 发出号召、提出建议、展望未来、总结要点</li></ul><h2 id="求职信"><a href="#求职信" class="headerlink" title="求职信"></a>求职信</h2><ul><li>求职信的基本内容： 求职目标、求职缘起、求职条件</li><li>求职信的结构： 称呼、开头、主体、结尾、落款、附件</li></ul><h1 id="规章制度"><a href="#规章制度" class="headerlink" title="规章制度"></a>规章制度</h1><h1 id="党政机关公文"><a href="#党政机关公文" class="headerlink" title="党政机关公文"></a>党政机关公文</h1><h2 id="党政机关公文-1"><a href="#党政机关公文-1" class="headerlink" title="党政机关公文"></a>党政机关公文</h2><ul><li>党政机关公文的概念： 党政机关公文是 党政机关实施领导、履行职能、处理事务 的具有 <strong>特定效力</strong> 和 <strong>规范体式</strong> 的文书；</li><li>特点： 权威性、规范性</li><li>分类：按行文关系和行文方向： 下行文（11种）、平行文（4种）、上行文（3种），其中意见三个都有，通知是下行文和平行文都有</li><li>决议： 适用于 会议讨论通过的重大决策事项</li><li>决定： 适用于 对重要事项作出决策和部署、奖惩有关单位和人员、变更或者撤销下级机关不适当的决定</li><li>命令： 适用于 公布行政法规和规章、宣布实施重大强制性措施、批准授予和晋级衔级、嘉奖有关单位和人员</li><li>公报： 适用于 公布重要决议或重大事项</li><li>公告： 适用于 向国内外宣布重要事项或者法定事项</li><li>通告： 适用于 在一定范围内公布应当遵守或周知的事项</li><li>党政机关公文的格式： 项目和版式</li><li>格式类型： 文件格式、信函格式、命令格式、纪要格式</li><li>文件格式要素三部分： 版头、主体、版记</li></ul><h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><ul><li>通知的功能： 适用于发布、传达要求 <strong>下级</strong> 机关执行和有关单位周知或者执行的事项，批转、转发公文</li><li>通知的特征： 广泛性、指示性、知照性、时效性</li><li>通知的分类： 发布性通知（印发性通知、批转性通知、转发性通知）、 指示性通知（向下级机关安排工作）、 会议通知 、 知照性通知</li><li>发布性通知的结构： 被发布文件、发布根据、发布语、执行要求</li><li>指示性通知： 缘由（用过度语句引起下文）、事项、结尾</li><li>会议通知： 缘由、事项、结尾</li><li>知照性通知： 缘由、事项、结尾</li></ul><h2 id="通报"><a href="#通报" class="headerlink" title="通报"></a>通报</h2><ul><li>通报的文种特征： 实例的典型性、重要性，内容的知照性，教育的知晓性</li><li>通报的分类： 表彰性通报、批评性通报、传达性通报</li></ul><h1 id="报告"><a href="#报告" class="headerlink" title="报告"></a>报告</h1><ul><li>报告的功能： 适用于向上级汇报工作、反映情况、回复上级机关的询问</li><li>报告的特点： 陈述性</li><li>报告的分类： 工作报告、情况报告、答复报告、报送报告</li><li>工作报告的结构： 报告前言、报告主体、报告结语</li></ul><h1 id="请示与批复"><a href="#请示与批复" class="headerlink" title="请示与批复"></a>请示与批复</h1><ul><li>请示的功能： 向上级机关请求指示、批准； 祈请性</li><li>请示的分类： 请求指示性请示、请求批准性请示</li><li>批复的功能： 答复下级机关请示事项； 针对性、政策性</li><li>批复的分类： 指示性批复、审批性批复</li><li>批复的结构： 批复缘由、批复意见、结语</li></ul><h1 id="函"><a href="#函" class="headerlink" title="函"></a>函</h1><ul><li>函的分类： 两类六种： <strong>发函</strong> ：商洽性发函、询问性发函、审批性发函； <strong>复函</strong> ： 商洽性复函、答复性复函、审批性复函</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;绪论&quot;&gt;&lt;a href=&quot;#绪论&quot; class=&quot;headerlink&quot; title=&quot;绪论&quot;&gt;&lt;/a&gt;绪论&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;写作的分类： &lt;strong&gt;文学创作&lt;/strong&gt; 艺术写作、 &lt;strong&gt;应用写作&lt;/strong&gt; 实用写作；&lt;/li&gt;
&lt;li&gt;应用写作的发展： &lt;strong&gt;萌芽期&lt;/strong&gt; ： 上古至先秦时期（周易·系辞、尚书（典、谟、训、诰、誓、命）） &lt;strong&gt;初步形成时期&lt;/strong&gt; ： 秦汉时期（李斯 《谏逐客书》 晁盖 《论贵粟书》 司马迁 《报任安书》）&lt;strong&gt;发展期&lt;/strong&gt; ： 三国魏晋南北朝 （曹操 《求贤令》 诸葛亮《出师表》 &lt;strong&gt;成熟期&lt;/strong&gt; ： 唐宋时期（苏轼《答刘巨济书》） &lt;strong&gt;完善期&lt;/strong&gt; ：元明清 分上行、平行、下行文 &lt;strong&gt;改革期&lt;/strong&gt; ： 辛亥革命至今&lt;/li&gt;
&lt;li&gt;应用写作的特点： 功能实用性、内容的真实性、体式的规定性、表述的简约性、运作的时效性&lt;/li&gt;
&lt;li&gt;学习应用写作的原因： 社会-需要杰出的表达者、个人-个人基本素质，技能之一、自身特点发展趋势&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://blog.31415x.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://blog.31415x.cf/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>[机器学习]-sklearn下的特征选择</title>
    <link href="http://blog.31415x.cf/2019/11/16/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-sklearn%E4%B8%8B%E7%9A%84%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9/"/>
    <id>http://blog.31415x.cf/2019/11/16/机器学习-sklearn下的特征选择/</id>
    <published>2019-11-16T14:05:10.000Z</published>
    <updated>2019-11-16T14:05:11.170Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;script src=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ACM-图论-同余最短路</title>
    <link href="http://blog.31415x.cf/2019/10/15/ACM-%E5%9B%BE%E8%AE%BA-%E5%90%8C%E4%BD%99%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    <id>http://blog.31415x.cf/2019/10/15/ACM-图论-同余最短路/</id>
    <published>2019-10-15T12:23:07.000Z</published>
    <updated>2019-10-17T05:48:30.702Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>一种没见过的处理模型，，记录一下，，主要是用来处理一个多元一次方程的解的数量的问题，，数据量小时可以用看成背包处理，，数据很大时可以转换成最短路模型+一点数学来处理，，（体积模域下的最短路的问题，，求的一个最简的表示形式有模数来得到所有解</p><a id="more"></a><h1 id="墨墨的等式"><a href="#墨墨的等式" class="headerlink" title="墨墨的等式"></a>墨墨的等式</h1><p><a href="https://www.luogu.org/problem/P2371" target="_blank" rel="noopener">题目</a></p><p>因为只是求满足的解的数量，，所以可以将方程转换成一个模方程组，，这样的方程组的解显然也是原来的解的子集，，同时可以利用模数来得到所有解，，</p><p>模数的选择是最小的那个系数，，因为如果任意选择，，会出现一些多考虑的情况</p><p>弄 mi 个点，表示从0到mi-1的所有数，，建边的方法是 <code>i-&gt;(i+a[j])%mi</code> 边权为 a[j] ，，表示从i这个点变成后面一个数的费用，，（因为两边都是取模的，，所以每一个数取几次后的和的余数就是那些经过的点，，也就是说一条路径就是得到一个右边为 i(mod mi) 的一个最小解，，这个最小的解就是费用和，，也就是一条最短路dis[i]</p><p>这样我们对于每一个取模的右边的B都计算一下区间里的数量，，，<del>（计算这玩意推错了一次，，emmm</del></p><p><a href="https://www.luogu.org/blog/0-00-0/solution-p2371" target="_blank" rel="noopener">参考</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(TM(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e7</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">ll n, l, r, a[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt; ll w;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].w = w;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v; ll w;</span><br><span class="line">    node()&#123;&#125;</span><br><span class="line">    node(<span class="keyword">int</span> _v, ll _w):v(_v), w(_w)&#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;r)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> w &gt; r.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tmp;</span><br><span class="line">ll dis[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, inf, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    priority_queue&lt;node&gt; q;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line">    q.push(node(s, <span class="number">0</span>));</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = q.top(); q.pop();</span><br><span class="line">        <span class="keyword">if</span>(vis[tmp.v])<span class="keyword">continue</span>;</span><br><span class="line">        vis[tmp.v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[tmp.v]; ~i; i = edge[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dis[v] &gt; dis[tmp.v] + edge[i].w)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = dis[tmp.v] + edge[i].w;</span><br><span class="line">                q.push(node(v, dis[v]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; l &gt;&gt; r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">int</span> mi = a[<span class="number">1</span>];</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= mi - <span class="number">1</span>; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            addedge(i, (i + a[j]) % mi, a[j]);</span><br><span class="line">    dijkstra(<span class="number">0</span>);</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= mi - <span class="number">1</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dis[i] &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[i] == <span class="number">0</span>)dis[i] = mi;</span><br><span class="line">            ans += (r - dis[i]) / mi + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(l &gt; dis[i])ans -= (l - dis[i] - <span class="number">1</span>) / mi + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="P3403-跳楼机"><a href="#P3403-跳楼机" class="headerlink" title="P3403 跳楼机"></a>P3403 跳楼机</h1><p><a href="https://www.luogu.org/problem/P3403" target="_blank" rel="noopener">题目</a></p><p>比上面那个简单些，，就是注意细节，，从1开始，，有一个是1那么值一定是h，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(TM(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e7</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">ll n, l, r, a[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt; ll w;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].w = w;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v; ll w;</span><br><span class="line">    node()&#123;&#125;</span><br><span class="line">    node(<span class="keyword">int</span> _v, ll _w):v(_v), w(_w)&#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;r)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> w &gt; r.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tmp;</span><br><span class="line">ll dis[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, inf, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    priority_queue&lt;node&gt; q;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line">    q.push(node(s, <span class="number">0</span>));</span><br><span class="line">    dis[s] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = q.top(); q.pop();</span><br><span class="line">        <span class="keyword">if</span>(vis[tmp.v])<span class="keyword">continue</span>;</span><br><span class="line">        vis[tmp.v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[tmp.v]; ~i; i = edge[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dis[v] &gt; dis[tmp.v] + edge[i].w)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = dis[tmp.v] + edge[i].w;</span><br><span class="line">                q.push(node(v, dis[v]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; ++i)<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    sort(a + <span class="number">1</span>, a + <span class="number">1</span> + <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">1</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mi = a[<span class="number">1</span>];</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= mi - <span class="number">1</span>; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= <span class="number">3</span>; ++j) </span><br><span class="line">            addedge(i, (i + a[j]) % mi, a[j]);</span><br><span class="line">    dijkstra(<span class="number">1</span>);</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= mi - <span class="number">1</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span>(dis[i] &lt;= n)</span><br><span class="line">            ans += (n - dis[i]) / mi + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="遥远的旅途"><a href="#遥远的旅途" class="headerlink" title="遥远的旅途"></a>遥远的旅途</h1><p><a href="http://www.51nod.com/Challenge/Problem.html#problemId=1326" target="_blank" rel="noopener">题目</a></p><p>这题的大致思路是将dp问题用最短路来优化，，</p><p>设 <code>dp[i][j]</code> 表示从起点走到i时的长度为j的一条路是否存在，，但是空间都会爆掉，，</p><p>考虑第二维，假设是通过经过若干个环来达到T，，也就是 <code>len+kw==T</code> ，，这里的w即为环的长度的两倍，，如果取模w就是 <code>len%w==T%w</code> ，，这样子dp方程就变成了到达 i 点时路径长度取模等于j的一条路径的长度，，利用spfa来转移，，只要最后 <code>dp[n][T%w] &lt;= T</code> 就表示存在解，这样子利用模数来压缩了状态，，找等同的就行了，，，<a href="https://blog.csdn.net/crybymyself/article/details/54974562" target="_blank" rel="noopener">参考</a> <a href="https://www.cnblogs.com/renjianshige/p/7588125.html" target="_blank" rel="noopener">参考</a> </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(TM(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e2</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e7</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">ll n, m, T, a[maxn], ww;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt; ll w;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].w = w;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line">ll dp[maxn][<span class="number">20005</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn][<span class="number">20005</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, ll&gt; &gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp, inf, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>; vis[<span class="number">1</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    q.push(make_pair(<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front().first; ll w = q.front().second; q.pop(); </span><br><span class="line">        vis[u][w] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to; ll vw = edge[i].w;</span><br><span class="line">            <span class="keyword">if</span>(dp[v][(w + vw) % ww] &gt; dp[u][w] + vw)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[v][(w + vw) % ww] = dp[u][w] + vw;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v][(w + vw) % ww])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[v][(w + vw) % ww] = <span class="literal">true</span>;</span><br><span class="line">                    q.push(make_pair(v, (w + vw) % ww));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; T;</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">            ++u, ++v;</span><br><span class="line">            addedge(u, v, w);</span><br><span class="line">            addedge(v, u, w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[n]; ~i; i = edge[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            ww = edge[i].w &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            spfa();</span><br><span class="line">            <span class="keyword">if</span>(dp[n][T % ww] &lt;= T)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)<span class="built_in">cout</span> &lt;&lt; <span class="string">"Possible"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(end)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一种没见过的处理模型，，记录一下，，主要是用来处理一个多元一次方程的解的数量的问题，，数据量小时可以用看成背包处理，，数据很大时可以转换成最短路模型+一点数学来处理，，（体积模域下的最短路的问题，，求的一个最简的表示形式有模数来得到所有解&lt;/p&gt;
    
    </summary>
    
      <category term="ACM-最短路" scheme="http://blog.31415x.cf/categories/ACM-%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
    
      <category term="ACM" scheme="http://blog.31415x.cf/tags/ACM/"/>
    
      <category term="最短路" scheme="http://blog.31415x.cf/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>2017北京区域赛</title>
    <link href="http://blog.31415x.cf/2019/10/13/2017%E5%8C%97%E4%BA%AC%E5%8C%BA%E5%9F%9F%E8%B5%9B/"/>
    <id>http://blog.31415x.cf/2019/10/13/2017北京区域赛/</id>
    <published>2019-10-13T13:48:01.000Z</published>
    <updated>2019-10-29T13:32:46.674Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>模拟题场啊，，，，，</p><p><a href="https://vjudge.net/contest/200099" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h1 id="E-Cats-and-Fish"><a href="#E-Cats-and-Fish" class="headerlink" title="E - Cats and Fish"></a>E - Cats and Fish</h1><p>签到题吧，，读完题后感觉是模拟，，然后写完之后一测样例wa了，，这时队友说推出公式了，，于是我就放弃调去看别的题了，，，但是wa了几发后又用模拟过的，，，</p><p>直接模拟时间，，记录每只猫的状态，，每次判断一下就行了，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(TM(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+ <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e7</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn], n, m, x;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> TM[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)vis[i] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)TM[i] = <span class="number">0</span>;</span><br><span class="line">        sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">        <span class="keyword">int</span> all = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= x; ++t)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">if</span>(!vis[i] &amp;&amp; all &lt; m)</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[i] = <span class="literal">true</span>;</span><br><span class="line">                    ++all;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)<span class="keyword">if</span>(vis[i])++TM[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">if</span>(vis[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    TM[i] %= a[i];</span><br><span class="line">                    <span class="keyword">if</span>(TM[i] == <span class="number">0</span>)vis[i] = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)<span class="keyword">if</span>(vis[i])++ans;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; m - all &lt;&lt; <span class="string">" "</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F-Secret-Poems"><a href="#F-Secret-Poems" class="headerlink" title="F - Secret Poems"></a>F - Secret Poems</h1><p>小模拟</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(TM(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+ <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e7</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn][maxn];</span><br><span class="line"><span class="keyword">char</span> str[maxn * maxn];</span><br><span class="line"><span class="keyword">char</span> t[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)<span class="built_in">cin</span> &gt;&gt; s[i] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; s[<span class="number">1</span>] + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>, tot = <span class="number">1</span>;</span><br><span class="line">        str[tot++] = s[i][j];</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= n &amp;&amp; j &lt;= n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j == n)</span><br><span class="line">            &#123;</span><br><span class="line">                ++i;</span><br><span class="line">                str[tot++] = s[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ++j; </span><br><span class="line">                str[tot++] = s[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ++i; --j;</span><br><span class="line">                str[tot++] = s[i][j];</span><br><span class="line">                <span class="keyword">if</span>(j == <span class="number">1</span> || i == n)<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j == <span class="number">1</span> &amp;&amp; i != n)</span><br><span class="line">            &#123;</span><br><span class="line">                ++i;</span><br><span class="line">                str[tot++] = s[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i == n)</span><br><span class="line">            &#123;</span><br><span class="line">                ++j;</span><br><span class="line">                str[tot++] = s[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                --i; ++j;</span><br><span class="line">                str[tot++] = s[i][j];</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">1</span> || j == n)<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// for(int i = 1; i &lt;= tot; ++i)cout &lt;&lt; str[i];cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>, r = n, up = <span class="number">1</span>, dn = n;</span><br><span class="line">        tot = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r &amp;&amp; up &lt;= dn)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; ++i)t[up][i] = str[tot++];</span><br><span class="line">            ++up;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = up; i &lt;= dn; ++i)t[i][r] = str[tot++];</span><br><span class="line">            --r;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = r; i &gt;= l; --i)t[dn][i] = str[tot++];</span><br><span class="line">            --dn;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = dn; i &gt;= up; --i)t[i][l] = str[tot++];</span><br><span class="line">            ++l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; t[i][j];</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="G-Liaoning-Ship’s-Voyage"><a href="#G-Liaoning-Ship’s-Voyage" class="headerlink" title="G - Liaoning Ship’s Voyage"></a>G - Liaoning Ship’s Voyage</h1><p>啊，，，计算几何+bfs，，</p><p>判断一下每一个点之间合不合法，，连边bfs即可，，</p><p>判断就是看这两个点在不在三角形里，，三角形里的点一定是没有边的，有相交的也不行，，，但是因为边上点可以走，，所以要判断一下在边上的情况，，尤其是：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20180830233455689?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2MjE1MjU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt title>                </div>                <div class="image-caption"></div>            </figure><p>这样的情况我以为中间判了，，但是实际没判，，，疯狂wa，，，自闭，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(TM(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e7</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .......</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    Point()&#123;&#125;</span><br><span class="line">    Point(<span class="keyword">double</span> _x, <span class="keyword">double</span> _y)&#123;</span><br><span class="line">        x = _x; y = _y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// scanf("%lf%lf", &amp;x, &amp;y);</span></span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(Point b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sgn(x - b.x) == <span class="number">0</span> &amp;&amp; sgn(y - b.y) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(Point b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sgn(x - b.x) == <span class="number">0</span> ? sgn(y - b.y) &lt; <span class="number">0</span> : x &lt; b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x - b.x, y - b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span>*(<span class="keyword">const</span> Point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x * b.x + y * b.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span>^(<span class="keyword">const</span> Point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x * b.y - y * b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">distance</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hypot(x - p.x, y - p.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;p1, p2, p3;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span>&#123;</span></span><br><span class="line">    Point s, e;</span><br><span class="line">    Line()&#123;&#125;</span><br><span class="line">    Line(Point _s, Point _e)&#123;</span><br><span class="line">        s = _s;</span><br><span class="line">        e = _e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(Line v)&#123;</span><br><span class="line">        <span class="keyword">return</span> (s == v.s) &amp;&amp; (e == v.e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(Point a, Point b)</span></span>&#123;</span><br><span class="line">        s = a;</span><br><span class="line">        e = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.distance(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">dispointtoline</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fabs</span>((p - s) ^ (e - s)) / length();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">dispointtoseg</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sgn((p - s) * (e - s)) &lt; <span class="number">0</span> || sgn((p - e) * (s - e)) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> min(p.distance(s), p.distance(e));</span><br><span class="line">        <span class="keyword">return</span> dispointtoline(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">segcrosseg</span><span class="params">(Line v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d1 = sgn((e - s) ^ (v.s - s));</span><br><span class="line">        <span class="keyword">int</span> d2 = sgn((e - s) ^ (v.e - s));</span><br><span class="line">        <span class="keyword">int</span> d3 = sgn((v.e - v.s) ^ (s - v.s));</span><br><span class="line">        <span class="keyword">int</span> d4 = sgn((v.e - v.s) ^ (e - v.s));</span><br><span class="line">        <span class="keyword">if</span>((d1 ^ d2) == <span class="number">-2</span> &amp;&amp; (d3 ^ d4) == <span class="number">-2</span>)<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (d1 == <span class="number">0</span> &amp;&amp; sgn((v.s - s) * (v.s - e)) &lt;= <span class="number">0</span>) ||</span><br><span class="line">            (d2 == <span class="number">0</span> &amp;&amp; sgn((v.e - s) * (v.e - e)) &lt;= <span class="number">0</span>) ||</span><br><span class="line">            (d3 == <span class="number">0</span> &amp;&amp; sgn((s - v.s) * (s - v.e)) &lt;= <span class="number">0</span>) ||</span><br><span class="line">            (d4 == <span class="number">0</span> &amp;&amp; sgn((e - v.s) * (e - v.e)) &lt;= <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">pointonseg</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sgn((p - s) ^ (e - s)) == <span class="number">0</span> &amp;&amp; sgn((p - s) * (p - e)) &lt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getarea</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> area = dispointtoline(p) * length() / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> area;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;l1, l2, l3;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ........</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">egde</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="comment">// if(!(tot &amp; 1))cout &lt;&lt; u &lt;&lt; "-&gt;" &lt;&lt; v &lt;&lt; endl;</span></span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="built_in">memset</span>(dis, inf, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line">    q.push(s);</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dis[v] &gt; dis[u] + <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = dis[u] + <span class="number">1</span>;</span><br><span class="line">                q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> mp[<span class="number">25</span>][<span class="number">25</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;Point, <span class="keyword">bool</span>&gt; mp1, mp2, mp3, p;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getidx</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> x * n + y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Line l = Line(a, b);</span><br><span class="line">    <span class="comment">// if(a.x == 0 &amp;&amp; a.y == 1)&#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; a.x &lt;&lt; " " &lt;&lt; a.y &lt;&lt; "; " &lt;&lt; b.x &lt;&lt; " " &lt;&lt; b.y &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; l.segcrosseg(l1) &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; l.segcrosseg(l2) &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; l.segcrosseg(l3) &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">if</span>(l.segcrosseg(l1) == <span class="number">2</span> || l.segcrosseg(l2) == <span class="number">2</span> || l.segcrosseg(l3) == <span class="number">2</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(mp1[a] &amp;&amp; mp1[b])<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(mp2[a] &amp;&amp; mp2[b])<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(mp3[a] &amp;&amp; mp3[b])<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(!p[a] || !p[b])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((mp1[a] &amp;&amp; mp2[b]) || (mp1[a] &amp;&amp; mp3[b]) || (mp2[a] &amp;&amp; mp1[b]) || (mp2[a] &amp;&amp; mp3[b]) || (mp3[a] &amp;&amp; mp1[b]) || (mp3[a] &amp;&amp; mp2[b]))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(l.segcrosseg(l1) == <span class="number">1</span> &amp;&amp; l.segcrosseg(l2) == <span class="number">1</span> &amp;&amp; l.segcrosseg(l3) == <span class="number">1</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(l.segcrosseg(l1) == <span class="number">1</span> || l.segcrosseg(l2) == <span class="number">1</span> || l.segcrosseg(l3) == <span class="number">1</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if(l.segcrosseg(l1) == 1 || l.segcrosseg(l2) == 1 || l.segcrosseg(l3) == 1)return false;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        p1.input(); p2.input(); p3.input();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)<span class="built_in">cin</span> &gt;&gt; mp[i];</span><br><span class="line">        mp[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">'.'</span>;</span><br><span class="line">        l1.init(p1, p2); l2.init(p1, p3); l3.init(p2, p3);</span><br><span class="line">        <span class="keyword">double</span> area = l1.getarea(p3);</span><br><span class="line">        mp1.clear(); mp2.clear(); mp3.clear(); p.clear();</span><br><span class="line">        p[p1] = <span class="literal">true</span>; p[p2] = <span class="literal">true</span>; p[p3] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n - <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n - <span class="number">1</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(mp[i][j] == <span class="string">'#'</span>)<span class="keyword">continue</span>;</span><br><span class="line">                Point p = Point(j, i);</span><br><span class="line">                <span class="keyword">double</span> area1 = l1.getarea(p);</span><br><span class="line">                <span class="keyword">double</span> area2 = l2.getarea(p);</span><br><span class="line">                <span class="keyword">double</span> area3 = l3.getarea(p);</span><br><span class="line">                <span class="keyword">if</span>(l1.pointonseg(p))mp1[p] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>(l2.pointonseg(p))mp2[p] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>(l3.pointonseg(p))mp3[p] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>(sgn(area1 + area2 + area3 - area) == <span class="number">0</span>)mp[i][j] = <span class="string">'#'</span>;</span><br><span class="line">                <span class="keyword">if</span>(mp1[p] || mp2[p] || mp3[p])mp[i][j] = <span class="string">'.'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> dx[] = &#123;<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> dy[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">        Point p, q;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n - <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n - <span class="number">1</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(mp[i][j] == <span class="string">'#'</span>)<span class="keyword">continue</span>;</span><br><span class="line">                p = Point((<span class="keyword">double</span>)j, (<span class="keyword">double</span>)i);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">7</span>; ++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> x = j + dx[k];</span><br><span class="line">                    <span class="keyword">int</span> y = i + dy[k];</span><br><span class="line">                    <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= n || y &lt; <span class="number">0</span> || y &gt;= n)<span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(mp[y][x] == <span class="string">'#'</span>)<span class="keyword">continue</span>;</span><br><span class="line">                    q = Point((<span class="keyword">double</span>)x, (<span class="keyword">double</span>)y);</span><br><span class="line">                    <span class="keyword">if</span>(check(p, q))</span><br><span class="line">                        addedge(getidx(j, i), getidx(x, y)), addedge(getidx(x, y), getidx(j, i));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dijkstra(n * n, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// for(int i = 0; i &lt;= n * n; ++i)cout &lt;&lt; i &lt;&lt; ": " &lt;&lt; dis[i] &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span>(dis[getidx(n - <span class="number">1</span>, n - <span class="number">1</span>)] == inf)<span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; dis[getidx(n - <span class="number">1</span>, n - <span class="number">1</span>)] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(end)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;模拟题场啊，，，，，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://vjudge.net/contest/200099&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM-比赛补题" scheme="http://blog.31415x.cf/categories/ACM-%E6%AF%94%E8%B5%9B%E8%A1%A5%E9%A2%98/"/>
    
      <category term="ACM-题解" scheme="http://blog.31415x.cf/categories/ACM-%E6%AF%94%E8%B5%9B%E8%A1%A5%E9%A2%98/ACM-%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="ACM" scheme="http://blog.31415x.cf/tags/ACM/"/>
    
      <category term="题解" scheme="http://blog.31415x.cf/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>ACM-简单图论刷题</title>
    <link href="http://blog.31415x.cf/2019/10/07/ACM-%E7%AE%80%E5%8D%95%E5%9B%BE%E8%AE%BA%E5%88%B7%E9%A2%98/"/>
    <id>http://blog.31415x.cf/2019/10/07/ACM-简单图论刷题/</id>
    <published>2019-10-07T09:58:20.000Z</published>
    <updated>2019-10-15T12:32:05.488Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>做一些简单图论题，， <a href="https://codeforces.com/problemset?order=BY_RATING_ASC&amp;tags=graphs%2C2000-" target="_blank" rel="noopener">list</a></p><a id="more"></a><h1 id="463D-Gargari-and-Permutations-多个串的LCS"><a href="#463D-Gargari-and-Permutations-多个串的LCS" class="headerlink" title="463D    Gargari and Permutations 多个串的LCS"></a>463D    Gargari and Permutations 多个串的LCS</h1><p>对于每一对数： <code>&lt;i, j&gt;</code> ，，如果每一个串的j都在i前面的话连一条边 <code>i-&gt;j</code> ，，然后跑找一个最长路，，<a href="https://codeforces.com/problemset/submission/463/62052575" target="_blank" rel="noopener">code</a></p><h1 id="449B-Jzzhu-and-Cities-最短路判必经边"><a href="#449B-Jzzhu-and-Cities-最短路判必经边" class="headerlink" title="449B    Jzzhu and Cities 最短路判必经边"></a>449B    Jzzhu and Cities 最短路判必经边</h1><p>直接跑最短路并记录每个点的路径数，最后可删边对的点v如果路径数大于1或者是这条边的权值小于最短路的值就说明这边可删 （路径数很多以单模），，，记得前面去重就行了，，或者跑完最短路抠出的新图判这个点的入度大于1否，，</p><p>本来是道乱搞题，，最开始的想法错了些就全否了，，不断的写假算法，，，<del>（失去理智</del> <a href="https://codeforces.com/contest/449/submission/62090227" target="_blank" rel="noopener">code</a></p><h1 id="558C-Amr-and-Chemistry-暴力？？"><a href="#558C-Amr-and-Chemistry-暴力？？" class="headerlink" title="558C    Amr and Chemistry 暴力？？"></a>558C    Amr and Chemistry 暴力？？</h1><p>一开始看到tag有一个shortest path 以为是根据一些关系来建张图，，然后跑最短路得到答案，，，但是发现不管怎么建边，，最短路都是求得的，，，和最短路没啥关系，，妥妥的暴力，，最后看了官方题解，，才发现将求每个数的情况的搜索看成了最短路，，我,,,emmmmmmm <a href="https://codeforces.com/contest/558/submission/62109249" target="_blank" rel="noopener">code</a></p><h1 id="739B-Alyona-and-a-tree-dfs-路径二分"><a href="#739B-Alyona-and-a-tree-dfs-路径二分" class="headerlink" title="739B    Alyona and a tree dfs+路径二分"></a>739B    Alyona and a tree dfs+路径二分</h1><p>这题不错，，</p><p>假定 $dep[u]$ 表示从根节点到点 <code>u</code> 的一条链的前缀路径长度，，这样这条链上的任意一条路径长度就知道了，，然后对于当前访问的一个点 <code>v</code> ，先考虑这个点对上面的某些满足条件的点的贡献：上面的点中存在这样的点 <code>u</code> ，使得 $dep[v] - dep[u] &lt;= a[v]$ 也就是说 <code>v</code> 在 <code>u</code> 的子树中并且路径长度是不大于点权的，，这样的话 <code>u</code> 的个数加一，，</p><p>同样，，这段路径间的点的也满足这样的条件，，因为路径长度是单调的，，所以，，我们只要找到一个满足条件的最远的一个点 <code>u</code> 的上一个，</p><p>（寻找的方法是：将上面的条件转换以下，， $dep[v] - a[v] &lt;= dep[u]$ 又因为dep是单调递增的，，所以找这个 <code>u</code> 就是找一个刚好 $dep[u]$ 是大于等于 $dep[v] - a[v]$ 的点即可），，，，</p><p>将其的答案减一，，然后利用他更新他的上面的点（看成都不算这个点的贡献，，而 <code>u</code> 到 <code>v</code> 的点都会加上一个1），，，对于每一个点考虑dfs中的所有儿子节点的贡献和即可，，<a href="https://codeforces.com/contest/739/submission/62394729" target="_blank" rel="noopener">code</a></p><h1 id="1217D-Coloring-Edges-判环-染色"><a href="#1217D-Coloring-Edges-判环-染色" class="headerlink" title="1217D    Coloring Edges 判环+染色"></a>1217D    Coloring Edges 判环+染色</h1><p><a href="https://codeforces.com/contest/1217/submission/61395907" target="_blank" rel="noopener">直接拓扑排序判环染色</a>，，<a href="https://codeforces.com/contest/1217/submission/61365723" target="_blank" rel="noopener">或者利用dfs的性质来染色判环</a></p><h1 id="842C-Ilya-And-The-Tree-dfs-优化"><a href="#842C-Ilya-And-The-Tree-dfs-优化" class="headerlink" title="842C    Ilya And The Tree dfs+优化"></a>842C    Ilya And The Tree dfs+优化</h1><p>一道搜索题，，刚开始我直接将搜索到的每一条路径的所有数的因数扔到了map中，，然后遍历尝试找一个最大的因数并且其数量是大于等于n-1的，，，但是这样会随着路径的长度map的大小不断地增加，，即使控制反向遍历也会爆栈等等，，可以先假设每一条路径都去掉根节点，这样每一个点的答案就是 $ans[v]=__gcd(ans[u], a[v])$ ，，，然后如果一定加上根节点的话，答案一定是根节点的一个因数，，所以map直接保存的就是根节点的因数，，再像上面那样遍历一遍和第一次得到的答案取最大就行了，，<a href="https://codeforces.com/contest/842/submission/62238501" target="_blank" rel="noopener">code</a></p><h1 id="1213G-Path-Queries-并查集"><a href="#1213G-Path-Queries-并查集" class="headerlink" title="1213G    Path Queries 并查集"></a>1213G    Path Queries 并查集</h1><p>离线询问，然后利用并查集将符合当前询问的所有两个点放到一堆集合中，，此时的答案就是每一个集合的边数 $m$ 的 $m(m + 1)/2$ ，，，询问排序后之前加的边也是满足条件的，，，这样就可以利用前一个答案来获得当前的询问的答案，，更新的方式是，，，将这条边的两个点所在的集合的大小 $a, b$ 清空，，然后答案 $ans = ans - (a <em> (a + 1) / 2) - (b </em> (b + 1) / 2) + ((a + b + 1) * (a + b + 2) / 2))$  ，，最后合并集合即可，，刚开始我是用并查集维护边，，，因为要建图，，一直T，，，emmm <a href="https://codeforces.com/contest/1213/submission/62347660" target="_blank" rel="noopener">code</a></p><h1 id="776D-The-Door-Problem-2sat"><a href="#776D-The-Door-Problem-2sat" class="headerlink" title="776D    The Door Problem 2sat"></a>776D    The Door Problem 2sat</h1><p>2sat板子题吧，，直接按题意找出限制关系建图判以下就行了，，之前写过，，<a href="https://codeforces.com/contest/776/submission/52218310" target="_blank" rel="noopener">code</a></p><h1 id="767C-Garland-dfs-贪心"><a href="#767C-Garland-dfs-贪心" class="headerlink" title="767C    Garland dfs+贪心"></a>767C    Garland dfs+贪心</h1><p>dfs搜出所有的 $sum/3$ 和 $2*sum/3$ 的子树，，记前者为1，后面的为2，，</p><p>记录搜的过程中的1的出现位置，如果出现一个2，并且它的子树中有一个1，那么这就是一个答案，，直接输出后退出程序就行了，，没有跳过</p><p>如果找到一个1的同时他的子树中有一个1，，那么这个1不要，，继续搜，，，最后如果搜到的1超过两个输出就行了，，没有的话就是无解，，，<a href="https://codeforces.com/contest/767/submission/62419845" target="_blank" rel="noopener">code</a></p><p><del>（很简单的一道题，，思路很早就通了，，就是实现的时候因为一些细节疯狂wa，，emmmmm</del></p><h1 id><a href="#" class="headerlink" title=" "></a> </h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做一些简单图论题，， &lt;a href=&quot;https://codeforces.com/problemset?order=BY_RATING_ASC&amp;amp;tags=graphs%2C2000-&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;list&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Codeforces" scheme="http://blog.31415x.cf/categories/Codeforces/"/>
    
    
      <category term="刷题" scheme="http://blog.31415x.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="ACM" scheme="http://blog.31415x.cf/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>2019-ccpc秦皇岛现场赛</title>
    <link href="http://blog.31415x.cf/2019/10/05/2019-ccpc%E7%A7%A6%E7%9A%87%E5%B2%9B%E7%8E%B0%E5%9C%BA%E8%B5%9B/"/>
    <id>http://blog.31415x.cf/2019/10/05/2019-ccpc秦皇岛现场赛/</id>
    <published>2019-10-05T10:08:28.000Z</published>
    <updated>2019-10-05T11:14:30.066Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>昨天和队友模拟了下今年秦皇岛的区域赛，，，<del>（我全程在演</del></p><p><a href="https://codeforces.com/gym/102361" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h1 id="D-Decimal"><a href="#D-Decimal" class="headerlink" title="D - Decimal"></a>D - Decimal</h1><p>签到题，，，<del>（感觉在cf上做过，，</del></p><p><del>（然后写反输出白白wa一发,,,,,emmmmmmmm</del></p><h1 id="F-Forest-Program"><a href="#F-Forest-Program" class="headerlink" title="F - Forest Program"></a>F - Forest Program</h1><p>这题我感觉是第二道签到题，，，很简单，，但是我一个人读完题后就想着怎么写代码，，，然后wa了无数发才反应过来还要考虑树边的情况，，，<del>丧失理智</del> ，，，，</p><p>题意就是给一个 <strong>仙人掌图</strong> ，，仙人掌图就是对于每一条边都最多属于一个简单环中，，，然后问你删去一些边使得最后的图是一片森林的方案数，，，显然答案就是每一个环至少删去一个边，，这样每一个环的贡献就是 $2^i-1$ ，，累乘每一个环便是环的情况，，，然后还要考虑剩余边的情况，，然后我就是忘记这个wa的怀疑人生，，，</p><p>找图的环直接dfs就可以个了，，用一个dis数组记录一下到最初的点的距离，，碰到一个环就直接相减就能得到到环的长度，，，<del>(刚好前几天见过这样的dfs判环和求环大小的问题</del></p><p><del>（为什么弧优化后还慢了啊，，，emmmmm</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">6e5</span> + <span class="number">233</span>;</span><br><span class="line"><span class="comment">// const int mod = 1e9 + 7;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line">&#125;edge[maxm &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxm &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].flag = <span class="literal">false</span>;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; ans;</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line">ll dis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, ll len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[u] = <span class="number">1</span>; dis[u] = len;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> &amp;i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(edge[i].flag)<span class="keyword">continue</span>;</span><br><span class="line">        edge[i].flag = edge[i ^ <span class="number">1</span>].flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(vis[v] == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans.push_back(len - dis[v] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(v, len + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    vis[u] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">pow_</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)ret = (ret * a) % mod;</span><br><span class="line">        a = (a * a) % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, m; <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        addedge(u, v);</span><br><span class="line">        addedge(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    ans.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)vis[i] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span>(vis[i] != <span class="number">2</span>)</span><br><span class="line">            dfs(i, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// for(auto i: ans)cout &lt;&lt; i &lt;&lt; " ";cout &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    ll ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); ++i)</span><br><span class="line">        ret = ret * ((pow_(<span class="number">2</span>, ans[i]) - <span class="number">1</span>) + mod) % mod;</span><br><span class="line">    ll sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); ++i)sum += ans[i];</span><br><span class="line">    sum = pow_(<span class="number">2</span>, m - sum) % mod;</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">0</span>)ret = sum;</span><br><span class="line">    <span class="keyword">else</span> ret = (ret * sum) % mod;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ret &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="I-Invoker"><a href="#I-Invoker" class="headerlink" title="I - Invoker"></a>I - Invoker</h1><p><del>（在我自闭的时候</del> ，，队友过了这题，，这题的题目很像 <del>（基本完全一致</del> 我们的新生赛，，只是求得东西反了过来，，，队友想了暴力+dp过的，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">5e5</span> + <span class="number">233</span>;</span><br><span class="line"><span class="comment">// const int mod = 1e9 + 7;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; special;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> skill[] = &#123;<span class="string">'Q'</span>, <span class="string">'W'</span>, <span class="string">'E'</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[<span class="number">15</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">3</span>; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> tmp = <span class="string">""</span>;</span><br><span class="line">                tmp += skill[i];</span><br><span class="line">                tmp += skill[j];</span><br><span class="line">                tmp += skill[k];</span><br><span class="line">                mp[tmp] = i*<span class="number">9</span> + j*<span class="number">3</span> + k;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">0</span>; a&lt;<span class="number">27</span>; a++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">0</span>; b&lt;<span class="number">27</span>; b++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> i = a, j = b;</span><br><span class="line">            <span class="built_in">string</span> tmpi = <span class="string">""</span>;</span><br><span class="line">            <span class="built_in">string</span> tmpj = <span class="string">""</span>;</span><br><span class="line">            tmpi += skill[i/<span class="number">9</span>];</span><br><span class="line">            i %= <span class="number">9</span>;</span><br><span class="line">            tmpi += skill[i/<span class="number">3</span>];</span><br><span class="line">            i %= <span class="number">3</span>;</span><br><span class="line">            tmpi += skill[i];</span><br><span class="line">            tmpj += skill[j/<span class="number">9</span>];</span><br><span class="line">            j %= <span class="number">9</span>;</span><br><span class="line">            tmpj += skill[j/<span class="number">3</span>];</span><br><span class="line">            j %= <span class="number">3</span>;</span><br><span class="line">            tmpj += skill[j];</span><br><span class="line">            <span class="keyword">if</span>(tmpi == tmpj)</span><br><span class="line">                dis[a][b] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(tmpi[<span class="number">1</span>] == tmpj[<span class="number">0</span>] &amp;&amp; tmpi[<span class="number">2</span>] == tmpj[<span class="number">1</span>])</span><br><span class="line">                dis[a][b] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(tmpi[<span class="number">2</span>] == tmpj[<span class="number">0</span>])</span><br><span class="line">                dis[a][b] = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dis[a][b] = <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    special[<span class="string">'Y'</span>] = <span class="number">0</span>;</span><br><span class="line">    special[<span class="string">'V'</span>] = <span class="number">1</span>;</span><br><span class="line">    special[<span class="string">'G'</span>] = <span class="number">2</span>;</span><br><span class="line">    special[<span class="string">'C'</span>] = <span class="number">3</span>;</span><br><span class="line">    special[<span class="string">'X'</span>] = <span class="number">4</span>;</span><br><span class="line">    special[<span class="string">'Z'</span>] = <span class="number">5</span>;</span><br><span class="line">    special[<span class="string">'T'</span>] = <span class="number">6</span>;</span><br><span class="line">    special[<span class="string">'F'</span>] = <span class="number">7</span>;</span><br><span class="line">    special[<span class="string">'D'</span>] = <span class="number">8</span>;</span><br><span class="line">    special[<span class="string">'B'</span>] = <span class="number">9</span>;</span><br><span class="line">    g[<span class="number">0</span>].push_back(mp[<span class="string">"QQQ"</span>]);</span><br><span class="line">    g[<span class="number">1</span>].push_back(mp[<span class="string">"QQW"</span>]);</span><br><span class="line">    g[<span class="number">1</span>].push_back(mp[<span class="string">"QWQ"</span>]);</span><br><span class="line">    g[<span class="number">1</span>].push_back(mp[<span class="string">"WQQ"</span>]);</span><br><span class="line">    g[<span class="number">2</span>].push_back(mp[<span class="string">"QQE"</span>]);</span><br><span class="line">    g[<span class="number">2</span>].push_back(mp[<span class="string">"QEQ"</span>]);</span><br><span class="line">    g[<span class="number">2</span>].push_back(mp[<span class="string">"EQQ"</span>]);</span><br><span class="line">    g[<span class="number">3</span>].push_back(mp[<span class="string">"WWW"</span>]);</span><br><span class="line">    g[<span class="number">4</span>].push_back(mp[<span class="string">"QWW"</span>]);</span><br><span class="line">    g[<span class="number">4</span>].push_back(mp[<span class="string">"WQW"</span>]);</span><br><span class="line">    g[<span class="number">4</span>].push_back(mp[<span class="string">"WWQ"</span>]);</span><br><span class="line">    g[<span class="number">5</span>].push_back(mp[<span class="string">"WWE"</span>]);</span><br><span class="line">    g[<span class="number">5</span>].push_back(mp[<span class="string">"WEW"</span>]);</span><br><span class="line">    g[<span class="number">5</span>].push_back(mp[<span class="string">"EWW"</span>]);</span><br><span class="line">    g[<span class="number">6</span>].push_back(mp[<span class="string">"EEE"</span>]);</span><br><span class="line">    g[<span class="number">7</span>].push_back(mp[<span class="string">"QEE"</span>]);</span><br><span class="line">    g[<span class="number">7</span>].push_back(mp[<span class="string">"EQE"</span>]);</span><br><span class="line">    g[<span class="number">7</span>].push_back(mp[<span class="string">"EEQ"</span>]);</span><br><span class="line">    g[<span class="number">8</span>].push_back(mp[<span class="string">"WEE"</span>]);</span><br><span class="line">    g[<span class="number">8</span>].push_back(mp[<span class="string">"EWE"</span>]);</span><br><span class="line">    g[<span class="number">8</span>].push_back(mp[<span class="string">"EEW"</span>]);</span><br><span class="line">    g[<span class="number">9</span>].push_back(mp[<span class="string">"QWE"</span>]);</span><br><span class="line">    g[<span class="number">9</span>].push_back(mp[<span class="string">"QEW"</span>]);</span><br><span class="line">    g[<span class="number">9</span>].push_back(mp[<span class="string">"WQE"</span>]);</span><br><span class="line">    g[<span class="number">9</span>].push_back(mp[<span class="string">"WEQ"</span>]);</span><br><span class="line">    g[<span class="number">9</span>].push_back(mp[<span class="string">"EWQ"</span>]);</span><br><span class="line">    g[<span class="number">9</span>].push_back(mp[<span class="string">"EQW"</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn][<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">6</span>; j++)</span><br><span class="line">            dp[i][j] = inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g[special[s[<span class="number">0</span>]]].size(); i++)</span><br><span class="line">        dp[<span class="number">0</span>][i] = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;g[special[s[i<span class="number">-1</span>]]].size(); j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;g[special[s[i]]].size(); k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> tmpj = g[special[s[i<span class="number">-1</span>]]][j];</span><br><span class="line">                <span class="keyword">int</span> tmpk = g[special[s[i]]][k];</span><br><span class="line">                dp[i][k] = min(dp[i][k], dp[i<span class="number">-1</span>][j] + dis[tmpj][tmpk]);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)</span><br><span class="line">        ans = min(ans, dp[len<span class="number">-1</span>][i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans+len);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="J-MUV-LUV-EXTRA"><a href="#J-MUV-LUV-EXTRA" class="headerlink" title="J - MUV LUV EXTRA"></a>J - MUV LUV EXTRA</h1><p>这题我读完题之后感觉是字符串的题，，不知道怎么搞，，最后队友弄出来的，，</p><p>枚举+kmp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">LL a, b;</span><br><span class="line"><span class="keyword">const</span> LL inf=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> LL maxn=<span class="number">1e7</span>+<span class="number">7</span>;</span><br><span class="line"><span class="built_in">string</span> tem,s=<span class="string">""</span>;</span><br><span class="line">LL nex[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;tem;</span><br><span class="line">    <span class="keyword">for</span>(LL i=tem.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tem[i]!=<span class="string">'.'</span>) s+=tem[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    nex[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=s.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        nex[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> k=nex[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">while</span>(k!=<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i<span class="number">-1</span>]==s[k]) &#123;nex[i]=k+<span class="number">1</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> k=nex[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++) nex[i]=nex[i+<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//for(int i =0;i&lt;s.size();i++) cout&lt;&lt;nex[i]&lt;&lt;' ';</span></span><br><span class="line">    LL ans=-inf;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        LL tem=a*(i+<span class="number">1</span>)-b*(i+<span class="number">1</span>-nex[i]);</span><br><span class="line">        ans=ans&gt;tem?ans:tem;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans==-inf) <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Escape"><a href="#E-Escape" class="headerlink" title="E - Escape"></a>E - Escape</h1><p>晚上看的这题，，网络流简单题，，主要是建图的方式，，，</p><p>题意就是一个矩形的迷宫（或者地图），，有些障碍，，而其他的地方可以放置一个转向器，，这个转向器有4中类型，，然后地图的上方有a个机器人，，下方有b个出口，，问你在随意添加一些转向器后的地图中，，机器人能否全部进入出口，，</p><p><a href="https://blog.csdn.net/weixin_43826249/article/details/101616967" target="_blank" rel="noopener">以下内容参考自</a></p><p>首先，，任意两个机器人如果在某一段的路线一致，，那么一定会进入同一个出口，，而且如果两个机器人的路线相反一定会去到对方的起点，，</p><p>于是，，可以看出如果一个机器人经过一个转向器，，其他的机器人是不会经过这个转向器的，，</p><p>因为一开始的机器人都是先下走的，，如果两个进入同一个转向器A，，那么其中一个一定之前经过一个转向器B，，而且这个转向器B会在A的一端的那个方向，，这样子的话前面那个机器人又到不了转向器A了，，，所以是矛盾的，，因此一个转向器上只会经过一个机器人，，，也就是说这个点只能经过一次，，，也就是说如果将这个点看成一个转向器的话，，他只能经过一次，，就是流量是1，，</p><p>再考虑某个点不是转向器的情况: 显然不是转向器的话，，这个点可以经过两次： 一次横的一次竖的，，，也就是说将这点看成两个边： 竖的一条边和横着一条边，，他们的流量都是1，，，</p><p>但是有了竖边和横边怎么表示转向呢，，直接将连起来不就行了，，，</p><p>这样，，如果一条流是经过竖边表示从这个点经过，，然后想着竖直方向走下去，，同理横边，，，而如果是经过竖边-&gt;中间边-&gt;横边，，或者反过来就表示是这个点是一个转向器，，而且，，，这样的网络也会保证每个点只可能是一个转向器或者不是，，</p><p>最后将机器人连向对应的最上面的点，，表示机器人只能竖直向下走，，同理出口，，加上源汇点跑最大流，，如果流量等于机器人数就是说有一种方案使得每一个机器人进入出口，，，</p><p>然后我第一次写的建图方式会访问到第0行和第n+1行，，只想了第0行不会产生影响，，忘记了后面的那行会被多组数据覆盖，，wa到怀疑板子抄错-&gt;建图有锅，，，</p><p><del>话说isap为什么会跑出 <code>998ms</code> ，，这个可怕，，，那现场赛不是会有一堆人T穿，，，hlpp 就是友好的 <code>233ms</code> ,, 好吧，，是数组开大了，，，，</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">2e6</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt, cap, flow;</span><br><span class="line">&#125;edge[maxm];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxm];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> rw = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; u &lt;&lt; " " &lt;&lt; v &lt;&lt; endl;</span></span><br><span class="line">    edge[tot].to = v; edge[tot].cap = w; edge[tot].nxt = head[u];</span><br><span class="line">    edge[tot].flow = <span class="number">0</span>; head[u] = tot++;</span><br><span class="line">    edge[tot].to = u; edge[tot].cap = rw; edge[tot].nxt = head[v];</span><br><span class="line">    edge[tot].flow = <span class="number">0</span>; head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> gap[maxm], dep[maxm], pre[maxm], cur[maxm];</span><br><span class="line"><span class="keyword">int</span> que[maxm];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dep, <span class="number">-1</span>, <span class="keyword">sizeof</span> dep);</span><br><span class="line">    <span class="built_in">memset</span>(gap, <span class="number">0</span>, <span class="keyword">sizeof</span> gap);</span><br><span class="line">    gap[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> front = <span class="number">0</span>, rear = <span class="number">0</span>;</span><br><span class="line">    dep[t] = <span class="number">0</span>;</span><br><span class="line">    que[rear++] = t;</span><br><span class="line">    <span class="keyword">while</span>(front != rear)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = que[front++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dep[v] != <span class="number">-1</span>)<span class="keyword">continue</span>;</span><br><span class="line">            que[rear++] = v;</span><br><span class="line">            dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">            ++gap[dep[v]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sta[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isap</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bfs(s, t);</span><br><span class="line">    <span class="built_in">memcpy</span>(cur, head, <span class="keyword">sizeof</span> head);</span><br><span class="line">    <span class="keyword">int</span> u = s;</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> maxflow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(dep[s] &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(u == t)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mi = inf;</span><br><span class="line">            <span class="keyword">int</span> inser;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; top; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(mi &gt; edge[sta[i]].cap - edge[sta[i]].flow)</span><br><span class="line">                &#123;</span><br><span class="line">                    mi = edge[sta[i]].cap - edge[sta[i]].flow;</span><br><span class="line">                    inser = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; top; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                edge[sta[i]].flow += mi;</span><br><span class="line">                edge[sta[i] ^ <span class="number">1</span>].flow -= mi;</span><br><span class="line">            &#125;</span><br><span class="line">            maxflow += mi;</span><br><span class="line">            top = inser;</span><br><span class="line">            u = edge[sta[top] ^ <span class="number">1</span>].to;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = cur[u]; ~i; i = edge[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dep[v] + <span class="number">1</span> == dep[u])</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                cur[u] = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">        &#123;</span><br><span class="line">            sta[top++] = cur[u];</span><br><span class="line">            u = v;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mi = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dep[edge[i].to] &lt; mi)</span><br><span class="line">            &#123;</span><br><span class="line">                mi = dep[edge[i].to];</span><br><span class="line">                cur[u] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        --gap[dep[u]];</span><br><span class="line">        <span class="keyword">if</span>(!gap[dep[u]])<span class="keyword">return</span> maxflow;</span><br><span class="line">        dep[u] = mi + <span class="number">1</span>;</span><br><span class="line">        ++gap[dep[u]];</span><br><span class="line">        <span class="keyword">if</span>(u != s)u = edge[sta[--top] ^ <span class="number">1</span>].to;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxflow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m, a, b;</span><br><span class="line"><span class="keyword">char</span> mp[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> bots[<span class="number">105</span>], exits[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">getidx</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> x * m + y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ca; <span class="built_in">cin</span> &gt;&gt; ca;</span><br><span class="line">    <span class="keyword">while</span>(ca--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)<span class="built_in">cin</span> &gt;&gt; mp[i] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a; ++i)<span class="built_in">cin</span> &gt;&gt; bots[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= b; ++i)<span class="built_in">cin</span> &gt;&gt; exits[i];</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)mp[n + <span class="number">1</span>][i] = <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = (n + <span class="number">2</span>) * m;</span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>, t = sum * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a; ++i)addedge(s, bots[i], <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">                <span class="keyword">if</span>(mp[i][j] != <span class="string">'1'</span> &amp;&amp; mp[i + <span class="number">1</span>][j] != <span class="string">'1'</span>)</span><br><span class="line">                    addedge(getidx(i, j), getidx(i + <span class="number">1</span>, j), <span class="number">1</span>),</span><br><span class="line">                    addedge(getidx(i + <span class="number">1</span>, j), getidx(i, j), <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m - <span class="number">1</span>; ++j)</span><br><span class="line">                <span class="keyword">if</span>(mp[i][j] != <span class="string">'1'</span> &amp;&amp; mp[i][j + <span class="number">1</span>] != <span class="string">'1'</span>)</span><br><span class="line">                    addedge(getidx(i, j) + sum, getidx(i, j + <span class="number">1</span>) + sum, <span class="number">1</span>),</span><br><span class="line">                    addedge(getidx(i, j + <span class="number">1</span>) + sum, getidx(i, j) + sum, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">                <span class="keyword">if</span>(mp[i][j] != <span class="string">'1'</span>)</span><br><span class="line">                    addedge(getidx(i, j), getidx(i, j) + sum, <span class="number">1</span>),</span><br><span class="line">                    addedge(getidx(i, j) + sum, getidx(i, j), <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= b; ++i)addedge(getidx(n + <span class="number">1</span>, exits[i]), t, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(isap(s, t, t + <span class="number">1</span>) == a)<span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个拆点的方式很不错，，，</p><p>(end)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天和队友模拟了下今年秦皇岛的区域赛，，，&lt;del&gt;（我全程在演&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/gym/102361&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Codeforces" scheme="http://blog.31415x.cf/categories/Codeforces/"/>
    
    
      <category term="刷题" scheme="http://blog.31415x.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="ACM" scheme="http://blog.31415x.cf/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>ACM-图论刷题</title>
    <link href="http://blog.31415x.cf/2019/10/01/ACM-%E5%9B%BE%E8%AE%BA%E5%88%B7%E9%A2%98/"/>
    <id>http://blog.31415x.cf/2019/10/01/ACM-图论刷题/</id>
    <published>2019-10-01T12:43:00.000Z</published>
    <updated>2019-10-17T07:46:36.665Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>自称是一个图论选手，，<del>（但是到头来只是一个板子王</del>，，，稍微变一变的图论题就不怎么会解决了，，，所以决定刷一段时间的图论题，，</p><a id="more"></a><p><a href="https://codeforces.com/problemset?order=BY_RATING_ASC&amp;tags=graphs%2C2600-" target="_blank" rel="noopener">ProblemsList</a></p><h1 id="786B-Legacy-区间图最短路"><a href="#786B-Legacy-区间图最短路" class="headerlink" title="786B Legacy 区间图最短路"></a>786B Legacy 区间图最短路</h1><p>区间图最短路板子题，，关于什么是区间图最短路上一篇博客有写，，，</p><h1 id="741C-Arpa’s-overnight-party-and-Mehrdad’s-silent-entering-构造-二分图染色"><a href="#741C-Arpa’s-overnight-party-and-Mehrdad’s-silent-entering-构造-二分图染色" class="headerlink" title="741C    Arpa’s overnight party and Mehrdad’s silent entering 构造+二分图染色"></a>741C    Arpa’s overnight party and Mehrdad’s silent entering 构造+二分图染色</h1><p>二分图染色吧，，二分图，，一个似懂非懂的知识点，，每次看到像二分图的题就想着那几个经典的解法，，然后发现不是就乱想其他的模型，，，就是不会利用到二分图这个东西的一些知识点，，然后搜就完事了，，，</p><p>这题的题意就是2*n个点，，给出n对关系，，然后要保证这n对关系的点以及相邻的三个点中至少两个是 不同的，，，类似染色，，染成两种颜色，，，</p><p>每次看到二分图的题总是局限到左右两边n个点，，然后求一些匹配等等的东西，，，总是忘记最基本的那些，，</p><p>这题要保证一些点间是不同的，，可以看成不断的染色，，一层1，一层2，，这样子，，，</p><p>对于第二个限制条件，，直接保证相邻的两个点不同就行了，，，</p><p>一条边的两端不同就是解，，</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20161214222817695?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcnpPX0tRUF9Pcno=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt title>                </div>                <div class="image-caption"></div>            </figure><p>同时这样子建图可以保证形成的环是简单环，，因为显然每一个点只有题目给出的一条边，，还有我们自己建的一条边，，所以度数都是2，，，因此一定是一个二分图，，，也就是一定有解，，</p><p><strong>不存在奇环的图（也就是环都是偶数）一定是二分图</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e7</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> col[maxn];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line">    col[s] = <span class="number">0</span>;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span>(vis[v])<span class="keyword">continue</span>;</span><br><span class="line">            col[v] = col[u] ^ <span class="number">1</span>;</span><br><span class="line">            q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; p[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        p[i].first = u; p[i].second = v;</span><br><span class="line">        addedge(u, v);</span><br><span class="line">        addedge(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        addedge(i &lt;&lt; <span class="number">1</span>, i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">        addedge(i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, i &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    addedge(n &lt;&lt; <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    addedge(<span class="number">1</span>, n &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="built_in">memset</span>(col, <span class="number">-1</span>, <span class="keyword">sizeof</span> col);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; ++i)<span class="keyword">if</span>(!vis[i])bfs(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)<span class="built_in">cout</span> &lt;&lt; col[p[i].first] + <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; col[p[i].second] + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="567E-President-and-Roads-最短路-DAG必经路"><a href="#567E-President-and-Roads-最短路-DAG必经路" class="headerlink" title="567E    President and Roads 最短路+DAG必经路"></a>567E    President and Roads 最短路+DAG必经路</h1><p><a href="https://codeforces.com/contest/567/problem/E" target="_blank" rel="noopener">题目</a></p><p>这题用到的知识点是 <strong>最短路+DAG必经路</strong> ，，，</p><p>必经路是什么呢，，首先单源最短路中有些点是到不了终点的，，有一些点（边）是必须要走的，，而另一些就是多条最短路中不同的分支，，，这些边是可以任意选择一条路径的，，</p><p>求最短路中必经边我找到两种方法，一种是在跑dijkstra时增加一个信息：当前点的最短路的数量，，另一种是将图转为无向图找桥，，</p><h2 id="最短路径数量解法"><a href="#最短路径数量解法" class="headerlink" title="最短路径数量解法"></a>最短路径数量解法</h2><p>我们假设正着求一边最短路的dis为 <code>dis[0][i]</code> ，，而它的反图的dis是 <code>dis[1][i]</code> ，， 利用这两个信息我们可以简单的判断一条边 <code>u-&gt;v</code> 是不是某一个最短路径中的一条边，，判断方法是： <code>dis[0][u] + w + dis[1][v] == dis[0][t]</code> 这里的w即为边权，，满足这个条件就说明这条边是最短路的一条路，，但是，，这并不能也说明他是最短路的一条必经边，，，</p><p>所以我们需要另一个信息： 最短路径数量，，用 <code>num[0][u]</code> 表示正图中从源点到 <code>u</code> 这个点的最短路的路径数量，，，同理对于返图用 <code>num[1][v]</code> 表示</p><p>我们在跑最短路的时候如果当前遍历的边 <code>u-&gt;v</code> 是可以缩小到这个点 <code>v</code> 的最短路的大小的，，那么到这个点 <code>v</code> 的最短路的数量就等于到 <code>u</code> 这个点的最短路的数量，，而对于那些从不同 <code>u</code> 到 <code>v</code> 的路径且最短路大小相同的情况，，累加即可，，，</p><p>当得到这些信息后，，对于任意一条边 <code>u-&gt;v</code> ，，当他满足第一个条件时，，即他是众多最短路方案中的一条边时，，如果满足到 <code>u</code> 的路径数 乘上 到 <code>v</code> 的路径数 敲好等于从原点到终点的最短路的数量时，，，说明这条边一定是必经路，，</p><p>注意： 最短路的路径数可能很多，，爆ll情况，，，所以可以取个模，，但是只取一次模可能 <del>（一定）</del> 被卡掉，，可以换一个不常见的模数，，或者直接双模即可，，</p><h2 id="判桥"><a href="#判桥" class="headerlink" title="判桥"></a>判桥</h2><p>从上面的分析也可以看出，，我们选择出的必经路一定是 <strong>最短路径</strong> 中的桥，，，删去某一座桥，，原点一定不可达终点，，（注意是最短路路径中的边组成的新的无向图中的桥，，用上面的第一个条件判断即可，，</p><p>所以我们可以在跑完正反图的最短路之后，，挑出最短路的边组成一个新图（最短路DAG），，跑一边 tarjan 来求出所有的桥即可，，</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>这道题的题意就是一个有向图，，首先判断一条边是不是最短路上的边，，然后对于一定要走的边输出YES，，而不一定非得走的输出一个减少的值，，使得这条边的边权减小后的最短路经过这条边，，，</p><h3 id="最短路路径数解法"><a href="#最短路路径数解法" class="headerlink" title="最短路路径数解法"></a>最短路路径数解法</h3><p>模数是 <code>1e9+7</code> 会冲突，，，换一个或者双模数，，</p><h4 id="单模"><a href="#单模" class="headerlink" title="单模"></a>单模</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e7</span> + <span class="number">233</span>;</span><br><span class="line"><span class="comment">// const int mod = 1e9 + 7;</span></span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">258280327</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt; ll w;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].w = w;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">e</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v; ll w;</span><br><span class="line">&#125;e[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    ll w;</span><br><span class="line">    node()&#123;&#125;;</span><br><span class="line">    node(<span class="keyword">int</span> _v, ll _w):v(_v), w(_w)&#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;r)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> w &gt; r.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tmp;</span><br><span class="line">ll dis[<span class="number">2</span>][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">2</span>][maxn];</span><br><span class="line">ll num[<span class="number">2</span>][maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">bool</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> u, v; ll w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        u = e[i].u; v = e[i].v; w = e[i].w;</span><br><span class="line">        <span class="keyword">if</span>(flag)swap(u, v);</span><br><span class="line">        addedge(u, v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)dis[flag][i] = linf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)vis[flag][i] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)num[flag][i] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;node&gt; p;</span><br><span class="line">    <span class="keyword">while</span>(!p.empty())p.pop();</span><br><span class="line">    dis[flag][s] = <span class="number">0</span>;</span><br><span class="line">    num[flag][s] = <span class="number">1</span>;</span><br><span class="line">    p.push(node(s, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(!p.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = p.top(); p.pop();</span><br><span class="line">        <span class="keyword">if</span>(vis[flag][tmp.v])<span class="keyword">continue</span>;</span><br><span class="line">        vis[flag][tmp.v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[tmp.v]; ~i; i = edge[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[flag][edge[i].to])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(dis[flag][edge[i].to] &gt; dis[flag][tmp.v] + edge[i].w)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[flag][edge[i].to] = dis[flag][tmp.v] + edge[i].w;</span><br><span class="line">                num[flag][edge[i].to] = num[flag][tmp.v];</span><br><span class="line">                p.push(node(edge[i].to, dis[flag][edge[i].to]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(dis[flag][edge[i].to] == dis[flag][tmp.v] + edge[i].w)</span><br><span class="line">            &#123;</span><br><span class="line">                num[flag][edge[i].to] = (num[flag][edge[i].to] + num[flag][tmp.v]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> n, m, s, t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)<span class="built_in">cin</span> &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].w;</span><br><span class="line">    dijkstra(t, n, m, <span class="literal">true</span>);</span><br><span class="line">    dijkstra(s, n, m, <span class="literal">false</span>);</span><br><span class="line">    ll mi = dis[<span class="number">0</span>][t];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dis[<span class="number">0</span>][e[i].u] + e[i].w + dis[<span class="number">1</span>][e[i].v] == dis[<span class="number">0</span>][t] &amp;&amp; (num[<span class="number">0</span>][e[i].u] * num[<span class="number">1</span>][e[i].v]) % mod == num[<span class="number">0</span>][t])</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(dis[<span class="number">0</span>][t] - dis[<span class="number">0</span>][e[i].u] - dis[<span class="number">1</span>][e[i].v] - <span class="number">1</span> &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"CAN "</span> &lt;&lt; e[i].w - (dis[<span class="number">0</span>][t] - dis[<span class="number">0</span>][e[i].u] - dis[<span class="number">1</span>][e[i].v] - <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双模"><a href="#双模" class="headerlink" title="双模"></a>双模</h3><p>双模比单模都快，，什么情况，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e7</span> + <span class="number">233</span>;</span><br><span class="line"><span class="comment">// const int mod = 1e9 + 7;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod1 = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod2 = <span class="number">1e9</span> + <span class="number">9</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt; ll w;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].w = w;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">e</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v; ll w;</span><br><span class="line">&#125;e[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    ll w;</span><br><span class="line">    node()&#123;&#125;;</span><br><span class="line">    node(<span class="keyword">int</span> _v, ll _w):v(_v), w(_w)&#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;r)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> w &gt; r.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tmp;</span><br><span class="line">ll dis[<span class="number">2</span>][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">2</span>][maxn];</span><br><span class="line">ll num1[<span class="number">2</span>][maxn];</span><br><span class="line">ll num2[<span class="number">2</span>][maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">bool</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> u, v; ll w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        u = e[i].u; v = e[i].v; w = e[i].w;</span><br><span class="line">        <span class="keyword">if</span>(flag)swap(u, v);</span><br><span class="line">        addedge(u, v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)dis[flag][i] = linf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)vis[flag][i] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)num1[flag][i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)num2[flag][i] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;node&gt; p;</span><br><span class="line">    <span class="keyword">while</span>(!p.empty())p.pop();</span><br><span class="line">    dis[flag][s] = <span class="number">0</span>;</span><br><span class="line">    num1[flag][s] = num2[flag][s] = <span class="number">1</span>;</span><br><span class="line">    p.push(node(s, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(!p.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = p.top(); p.pop();</span><br><span class="line">        <span class="keyword">if</span>(vis[flag][tmp.v])<span class="keyword">continue</span>;</span><br><span class="line">        vis[flag][tmp.v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[tmp.v]; ~i; i = edge[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[flag][edge[i].to])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(dis[flag][edge[i].to] &gt; dis[flag][tmp.v] + edge[i].w)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[flag][edge[i].to] = dis[flag][tmp.v] + edge[i].w;</span><br><span class="line">                num1[flag][edge[i].to] = num1[flag][tmp.v];</span><br><span class="line">                num2[flag][edge[i].to] = num2[flag][tmp.v];</span><br><span class="line">                p.push(node(edge[i].to, dis[flag][edge[i].to]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(dis[flag][edge[i].to] == dis[flag][tmp.v] + edge[i].w)</span><br><span class="line">            &#123;</span><br><span class="line">                num1[flag][edge[i].to] = (num1[flag][edge[i].to] + num1[flag][tmp.v]) % mod1;</span><br><span class="line">                num2[flag][edge[i].to] = (num2[flag][edge[i].to] + num2[flag][tmp.v]) % mod2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> n, m, s, t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)<span class="built_in">cin</span> &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].w;</span><br><span class="line">    dijkstra(t, n, m, <span class="literal">true</span>);</span><br><span class="line">    dijkstra(s, n, m, <span class="literal">false</span>);</span><br><span class="line">    ll mi = dis[<span class="number">0</span>][t];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dis[<span class="number">0</span>][e[i].u] + e[i].w + dis[<span class="number">1</span>][e[i].v] == dis[<span class="number">0</span>][t] &amp;&amp;</span><br><span class="line">         (num1[<span class="number">0</span>][e[i].u] * num1[<span class="number">1</span>][e[i].v]) % mod1 == num1[<span class="number">0</span>][t] &amp;&amp;</span><br><span class="line">         (num2[<span class="number">0</span>][e[i].u] * num2[<span class="number">1</span>][e[i].v]) % mod2 == num2[<span class="number">0</span>][t])</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(dis[<span class="number">0</span>][t] - dis[<span class="number">0</span>][e[i].u] - dis[<span class="number">1</span>][e[i].v] - <span class="number">1</span> &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"CAN "</span> &lt;&lt; e[i].w - (dis[<span class="number">0</span>][t] - dis[<span class="number">0</span>][e[i].u] - dis[<span class="number">1</span>][e[i].v] - <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求桥"><a href="#求桥" class="headerlink" title="求桥"></a>求桥</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e7</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt; ll w;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].w = w;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">e</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v; ll w;</span><br><span class="line">&#125;e[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    ll w;</span><br><span class="line">    node()&#123;&#125;;</span><br><span class="line">    node(<span class="keyword">int</span> _v, ll _w):v(_v), w(_w)&#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;r)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> w &gt; r.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tmp;</span><br><span class="line">ll dis[<span class="number">2</span>][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">2</span>][maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">bool</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> u, v; ll w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        u = e[i].u; v = e[i].v; w = e[i].w;</span><br><span class="line">        <span class="keyword">if</span>(flag)swap(u, v);</span><br><span class="line">        addedge(u, v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)dis[flag][i] = linf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)vis[flag][i] = <span class="literal">false</span>;</span><br><span class="line">    priority_queue&lt;node&gt; p;</span><br><span class="line">    <span class="keyword">while</span>(!p.empty())p.pop();</span><br><span class="line">    dis[flag][s] = <span class="number">0</span>;</span><br><span class="line">    p.push(node(s, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(!p.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = p.top(); p.pop();</span><br><span class="line">        <span class="keyword">if</span>(vis[flag][tmp.v])<span class="keyword">continue</span>;</span><br><span class="line">        vis[flag][tmp.v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[tmp.v]; ~i; i = edge[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[flag][edge[i].to])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(dis[flag][edge[i].to] &gt; dis[flag][tmp.v] + edge[i].w)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[flag][edge[i].to] = dis[flag][tmp.v] + edge[i].w;</span><br><span class="line">                p.push(node(edge[i].to, dis[flag][edge[i].to]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get bridges</span></span><br><span class="line"><span class="built_in">map</span>&lt;ll, <span class="keyword">bool</span>&gt; bridges;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无向图求桥</span></span><br><span class="line"><span class="keyword">bool</span> vist[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> low[maxn], dfn[maxn], idx;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    low[u] = dfn[u] = ++idx;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(vist[i])<span class="keyword">continue</span>;        <span class="comment">// 走过的边不再走</span></span><br><span class="line">        vist[i] = vist[i ^ <span class="number">1</span>] = <span class="literal">true</span>;   <span class="comment">// 标记边已走过</span></span><br><span class="line">        <span class="keyword">if</span>(!dfn[v])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(v);</span><br><span class="line">            low[u] = min(low[u], low[v]);</span><br><span class="line">            <span class="keyword">if</span>(dfn[u] &lt; low[v])bridges[u * maxn + v] = <span class="literal">true</span>;    <span class="comment">// 桥</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(low[u] &gt; dfn[v])</span><br><span class="line">            low[u] = dfn[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, m, s, t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)<span class="built_in">cin</span> &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].w;</span><br><span class="line">    dijkstra(t, n, m, <span class="literal">true</span>);</span><br><span class="line">    dijkstra(s, n, m, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// for(int i = 1; i &lt;= m; ++i)addedge(e[i].v, e[i].u, e[i].w);</span></span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="keyword">if</span>(dis[<span class="number">0</span>][e[i].u] + e[i].w + dis[<span class="number">1</span>][e[i].v] == dis[<span class="number">0</span>][t])</span><br><span class="line">            addedge(e[i].u, e[i].v, i), addedge(e[i].v, e[i].u, i);</span><br><span class="line">    <span class="built_in">memset</span>(low, <span class="number">0</span>, <span class="keyword">sizeof</span> low);</span><br><span class="line">    <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span> dfn);</span><br><span class="line">    <span class="built_in">memset</span>(vist, <span class="literal">false</span>, <span class="keyword">sizeof</span> vist);</span><br><span class="line">    idx = <span class="number">0</span>; bridges.clear();</span><br><span class="line">    tarjan(s);</span><br><span class="line">    ll mi = dis[<span class="number">0</span>][t];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dis[<span class="number">0</span>][e[i].u] + e[i].w + dis[<span class="number">1</span>][e[i].v] == dis[<span class="number">0</span>][t] &amp;&amp; bridges[e[i].u * maxn + e[i].v])</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(dis[<span class="number">0</span>][t] - dis[<span class="number">0</span>][e[i].u] - dis[<span class="number">1</span>][e[i].v] - <span class="number">1</span> &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"CAN "</span> &lt;&lt; e[i].w - (dis[<span class="number">0</span>][t] - dis[<span class="number">0</span>][e[i].u] - dis[<span class="number">1</span>][e[i].v] - <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://codeforces.com/gym/101986/attachments" target="_blank" rel="noopener">这道题也是这个类型的</a></p><p><a href="https://blog.csdn.net/u010372095/article/details/47346035" target="_blank" rel="noopener">tarjan求桥的写法部分参考这个</a> kuangbin的求得东西多，，对于这道题有点繁琐，，</p><p><a href="https://blog.csdn.net/qq_41848675/article/details/100583051" target="_blank" rel="noopener">在理解最短路径数时参考了这个</a></p><h1 id="527E-Data-Center-Drama-欧拉回路-弧优化"><a href="#527E-Data-Center-Drama-欧拉回路-弧优化" class="headerlink" title="527E Data Center Drama 欧拉回路+弧优化"></a>527E Data Center Drama 欧拉回路+弧优化</h1><p><del>（哇，，被这题搞得失去理智好久，，（主要是那个弧优化</del></p><p>题意就是预先给你一个无向图，，增加最少的边，，然后对每一条边指定一个方向 <del>（就是变成有向边）</del> 使得每一个点的出度和入度都是偶数，，</p><p>如果一个图是欧拉回路的话，，我们只要一奇一偶的确定方向就行了，，而如何加边就是两两的将奇度的点连起来，，对于最后如果剩下一个奇度点的话就加一个自环，，（也就是边数为奇数的情况，，</p><p>最后跑一边dfs，，找出所有的回路即可，，</p><p>但是这题边数很多，，直接dfs的话会有多次回溯访问重复边，，所以要删边，，也就是没走过一条边就使后面不会再访问： <code>for(int &amp;i = head[u]; ~i; i = edge[i].nxt)</code> ，，但是这样会有一问题，，如果某个点 <code>u</code> 经过好多次后不能再走，，这个点的所有边的 <code>edge[i].nxt</code> 都为-1了也就是说 <code>head[u] == -1</code> 了，，也就是说此时的 <code>i</code> 的值在dfs完后被修改成了 <code>-1</code> ，，这个时候进行 <code>i</code> 值的更新就成了 <code>i=edge[i == -1].nxt</code> ，，如果edge数组和编译器友好的话这时也不会报错，，也能正常的取上界溢出的值，，可能是0，，然后 <code>i==0</code> 就从这点访问第一条边去了，，，但实际上这个点是不能再走的（因为前面的dfs已经保证都走完了不能再走了，，），，应该是回退到上一层dfs的，，这样子就成了 跳到第一条边dfs，，，这样子如果在dfs中记录访问的边的话就会出错，，，<code>u-&gt;v</code> 中的 <code>v</code> 被改变了，，</p><p>我的解决的方法是每一次从上一层的dfs跳出的时候判断一下i是否为-1，，，是的话表示这个点是无边可走的跳出即可，，，</p><p>看到很多人没有管这个问题，，都是记录的回路的编号，，这样虽然可以保证不管dfs中的变化而结果是对的，，但是总感觉发现问题不解决以后会出大事，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e7</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].flag = <span class="literal">false</span>;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> &amp;i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(edge[i].flag)<span class="keyword">continue</span>;</span><br><span class="line">        edge[i].flag = edge[i ^ <span class="number">1</span>].flag = <span class="literal">true</span>;</span><br><span class="line">        dfs(v);</span><br><span class="line">        ans.push_back(make_pair(u, v));</span><br><span class="line">        <span class="keyword">if</span>(!~i)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> du[maxn];</span><br><span class="line"></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>&gt; p;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, m; <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">memset</span>(du, <span class="number">0</span>, <span class="keyword">sizeof</span> du);</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        ++du[u]; ++du[v];</span><br><span class="line">        addedge(u, v);</span><br><span class="line">        addedge(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!p.empty())p.pop();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)<span class="keyword">if</span>(du[i] &amp; <span class="number">1</span>)p.push(i);</span><br><span class="line">    <span class="keyword">while</span>(!p.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = p.top(); p.pop();</span><br><span class="line">        <span class="keyword">if</span>(p.empty())<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> v = p.top(); p.pop();</span><br><span class="line">        addedge(u, v); addedge(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tot &gt;&gt; <span class="number">1</span> &amp; <span class="number">1</span>)addedge(<span class="number">1</span>, <span class="number">1</span>), addedge(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    ans.clear();</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &amp; <span class="number">1</span>)<span class="built_in">cout</span> &lt;&lt; ans[i].second &lt;&lt; <span class="string">" "</span> &lt;&lt; ans[i].first &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; ans[i].first &lt;&lt; <span class="string">" "</span> &lt;&lt; ans[i].second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1147D-Palindrome-XOR-限制关系建图找方案数"><a href="#1147D-Palindrome-XOR-限制关系建图找方案数" class="headerlink" title="1147D Palindrome XOR 限制关系建图找方案数"></a>1147D Palindrome XOR 限制关系建图找方案数</h1><p>这题有点差分约束和2sat的感觉，，但是又不像那两个模型的解决方法，，</p><p>首先b二进制表示一定是和s一样长的，长度为n，，然后我们对a的长度m进行枚举，，建图进行判断是否有解，并累加解的数量，，</p><p>建 <code>n + m + 2</code> 个点，，前面两个表示对应每一位的情况，，后面俩个一个是 <code>0点</code> , 另一个是 <code>1点</code> ，，，并且规定又两种边，，<code>0边</code> 表示 <code>u-&gt;v</code> 的两点是相同的，，反之，， <code>1边</code> 表示是不同的，，这样子建图就能保证 <code>0边</code> 的两点异或一定是0，，后者是1，，，显然对于a的m位用对应的s来判断以下连边就行了，，，这是一种限制关系，，</p><p>另一种是一些确定的限制关系，，比如说对于a、b来说首位一定是1，，和a对应时有一些空出位的情况也一定是确定的，，这种情况我们对应连 <code>0点</code> 和 <code>1点</code> ，，，</p><p>这样建图可以看出一旦一个点的取值确定，，那么与之相连的一个联通块的取值情况也是确定的（根据当前点的情况和边的类型），，也就是一个联通块的取值情况只有两种，，，根据乘法原理就可以知道m的一种取值是的方案数是 $2^C$ ，，但是因为和 <code>0点</code> 和 <code>1点</code> 的取值是确定的，，所以这些连通块是不算的，，最后的答案就是 $2^{C-1}$ ，，，同时，，如果一个联通块根据边的限制关系约束下是不满足的，，说明这种取值下的m是无解的，为零，，，</p><p>整个过程就是一个根据边的限制关系来染色，，并判断是否有解，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e7</span> + <span class="number">233</span>;</span><br><span class="line"><span class="comment">// const int mod = 1e9 + 7;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt, w;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].w = w;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line"></span><br><span class="line">    edge[tot].to = u;</span><br><span class="line">    edge[tot].w = w;</span><br><span class="line">    edge[tot].nxt = head[v];</span><br><span class="line">    head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> col[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    col[u] = w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(col[v] != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(col[v] != (edge[i].w ^ w))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!dfs(v, edge[i].w ^ w))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">pow_</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)ret = ret * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; (s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);reverse(s + <span class="number">1</span>, s + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> m = <span class="number">1</span>; m &lt;= n - <span class="number">1</span>; ++m)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n / <span class="number">2</span>; ++i)addedge(i, n - i + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m / <span class="number">2</span>; ++i)addedge(n + i, n + m - i + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        addedge(n + <span class="number">1</span>, n + n + <span class="number">2</span>, <span class="number">0</span>); addedge(n + <span class="number">1</span>, n + m + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        addedge(n + m, n + n + <span class="number">2</span>, <span class="number">0</span>); addedge(n + m, n + m + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'1'</span>)addedge(i, n + i, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'0'</span>)addedge(i, n + i, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'1'</span>)addedge(i, n + m + <span class="number">2</span>, <span class="number">0</span>), addedge(i, n + m + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'0'</span>)addedge(i, n + m + <span class="number">1</span>, <span class="number">0</span>), addedge(i, n + m + <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">memset</span>(col, <span class="number">-1</span>, <span class="keyword">sizeof</span> col);</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + m + <span class="number">2</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(col[i] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(dfs(i, <span class="number">0</span>))++c;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                &#123;</span><br><span class="line">                    c = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c)ans = (ans + pow_(<span class="number">2</span>, c - <span class="number">1</span>)) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id><a href="#" class="headerlink" title=" "></a> </h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自称是一个图论选手，，&lt;del&gt;（但是到头来只是一个板子王&lt;/del&gt;，，，稍微变一变的图论题就不怎么会解决了，，，所以决定刷一段时间的图论题，，&lt;/p&gt;
    
    </summary>
    
      <category term="Codeforces" scheme="http://blog.31415x.cf/categories/Codeforces/"/>
    
    
      <category term="刷题" scheme="http://blog.31415x.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="ACM" scheme="http://blog.31415x.cf/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>cf-786B区间图最短路</title>
    <link href="http://blog.31415x.cf/2019/09/29/cf-786B%E5%8C%BA%E9%97%B4%E5%9B%BE%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    <id>http://blog.31415x.cf/2019/09/29/cf-786B区间图最短路/</id>
    <published>2019-09-29T07:54:30.000Z</published>
    <updated>2019-10-25T11:33:20.743Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>偶然看到的这个东西，可以说是第一次见到图论+数据结构的题了，，<a href="https://codeforces.com/problemset/problem/786/B" target="_blank" rel="noopener">这题</a>代码很简单，细节处理一下就没啥了，，，主要是一步一步的思路的推导很不错，，</p><a id="more"></a><h1 id="cf-786-Legacy"><a href="#cf-786-Legacy" class="headerlink" title="cf-786 Legacy"></a><a href="https://codeforces.com/problemset/problem/786/B" target="_blank" rel="noopener">cf-786 Legacy</a></h1><p><a href="https://codeforces.com/problemset/problem/786/B" target="_blank" rel="noopener">cf-786 Legacy</a></p><p>以前做过的图论题就只是图论题，从来没想过和数据结构-线段树扯上关系，，</p><p>这题也算是一个经典的例题了吧，，应该就是那种知道的做过的就会做出来的类型，，</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>题意很简单，就是一个简单的图，，给出一些建图的方式，，但是，和以往不同的是，以前的边的关系给的都是点与点间的关系，，这种题给的方式是区间，，比如说 <code>u-&gt;[l, r]</code> 表示的就是u和这个区间的所有点间都有一条边，，因为一个点也可以看成一个只有自己的区间，，所以我们可以将这类关系统一看成 $[l_1, r_1]-&gt;[l_2, r_2]$ ，，</p><p>容易想到的方法就是直接两个 for 上去，，建出每一条边，，数据很小的时候没问题，，，但是当n 很大时，，显然建图的复杂度可能就是 $O(n^2m)$ 这样不管求最短路就炸了，，，</p><p>一种优化的方法是我们在这两个区间之间加一个点，，这样前面的区间（成为出区间）和后面的一个区间（称为入区间）都和这个点 $p$ 连，，也就是 $\forall u \in [l_1, r_1]: addedge(u, p, w)$ 而 $\forall v \in [l_2, r_2]: addedge(p, v, 0)$ （ $[l_1, r_1]-_u&gt;p-_0&gt;[l_2, r_2]$ ） 这样子就可以降一维的建图，，复杂度就是 $O(2nm)$ ，，但是这样还是很高，，</p><p>这时的建图是线性的建图方式，，线性+区间==线段树？？！！，，这是我做这道题学习到的最有价值的一个处理方式，，在降了一维之后，虽然是线性的建图，，但是点还是很多，，而线段树恰好可以用很少的子区间来表示原来的区间，，，如果将线段树中的每一个表示的区间看成一个点，，那么我们就可以用很少的点来建图，，，这样就可以将上面的n次的建图降下去，，，</p><p>那么这时的问题就变成了该如何利用线段树来处理，，</p><p>我们需要两棵线段树，，一棵看成 <strong>入树</strong> 另一棵看成 <strong>出树</strong> ，，</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20170723135435553" alt title>                </div>                <div class="image-caption"></div>            </figure><p>首先我们的目的是用少量的区间来表示原来的很大的区间，以达到用很少的点来表示原来的所有点，，优化的问题用线段树解决了，，但是，如何正确的表示原来的所有点呢，，，</p><p>线段树的每一个节点表示一个区间，，这个节点可以表示他下面的所有点，，也就是说，，我们可以从上向下的看，，定义选择了一个节点，，就选择了下面的所有点，，，按照这个思想，入树中的一个节点要向其儿子连一条指向儿子的有向边，，也就是说，，入树中所有的边指向下，，用 <code>down</code> 表示</p><p>同理，，对于出树，，我们要保证在一个节点要能表示所有的点，，于是就是一个节点下的所有节点都要指向它，，，这样看这棵树就是一个向上的树，，用 <code>up</code> 表示，，</p><p>这个样子的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20170723140149120" alt title>                </div>                <div class="image-caption"></div>            </figure><p>这样最后在这样初始图加上题目给的一些条件的边跑一边最短路就可以了，，</p><p>加上题目的边后的图大致是这样的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20170723141642088" alt title>                </div>                <div class="image-caption"></div>            </figure><p>实际上，，这里的线段树的作用只是一个建树和查询其子区间的作用，，这个思想有点像是分块，，，只要能找到一个合理的区间分块，，用一些合理的、数量少的区间表示原来的区间，，就能达到减少点数的作用，，，，而线段树恰好是一个熟悉的、好操作的区间划分模型，，所以很多人都对于 区间图的最短路问题都是套一个线段树的板子，，</p><p>回到这道题，，题目的加边方式只有 点对区间 和 区间对点 两种，，所以我们可以先预留出那n个点，，可以想象成放在这两棵树之间的一排点（不用再将两棵树的叶子节点相连，，），，，</p><p>然后再处理出出树、入树的边后，，对于 <code>u-&gt;[l, r]</code> 和 <code>u-&gt;v</code> 的边，，从点 <code>u</code> 向入树的符合条件的节点连边即可，，因为之前说的入树保证了每一个节点是可以到其下面的叶子节点的，，所以我们这样连边就相当于是点 <code>u</code> 向区间的每一个点连边，，，</p><p>同理对于 <code>[l, r]-&gt;u</code> 这样的边，，我们将入树的对应的节点和点 <code>u</code> 相连，，这样就保证入树中这个区间下的叶子节点可以通过这些区间到点 <code>u</code> ，，这样也满足了题意的同时减少的连边的复杂度，，，</p><p>最后跑最短路，，前n个点的 <code>dis[i]</code> 即为源图的那些点的最短路，，，</p><p>于是我们通过加点减边的方式减小了建图的时间复杂度，，</p><p>关于处理出树、入树的操作，，也就是线段树的建树过程，，其实线段树并不维护任何信息，，我们只是用它自己每个节点表示一个区间这个自身的性质，，所以为了建图，，，我们需要对每一个节点连一些边，，，也就是用一个 <code>id[rt]</code> 标记一下每一个节点的标号即可，，，</p><h2 id="最后的代码："><a href="#最后的代码：" class="headerlink" title="最后的代码："></a>最后的代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e7</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dijkstra</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> to, nxt; ll w;</span><br><span class="line">    &#125;edge[maxm];</span><br><span class="line">    <span class="keyword">int</span> tot, head[maxm];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        edge[tot].to = v;</span><br><span class="line">        edge[tot].w = w;</span><br><span class="line">        edge[tot].nxt = head[u];</span><br><span class="line">        head[u] = tot++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> v; ll w;</span><br><span class="line">        node()&#123;&#125;</span><br><span class="line">        node(<span class="keyword">int</span> _v, ll _w):v(_v), w(_w)&#123;&#125;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;r)<span class="keyword">const</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> w &gt; r.w;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">bool</span> vis[maxn];</span><br><span class="line">    ll dis[maxn];</span><br><span class="line">    priority_queue&lt;node&gt; pq;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="built_in">memset</span>(dis, inf, <span class="keyword">sizeof</span> dis);</span><br><span class="line">        <span class="keyword">while</span>(!pq.empty())pq.pop();</span><br><span class="line">        pq.push(node(s, <span class="number">0</span>));</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line">        node t;</span><br><span class="line">        <span class="keyword">int</span> u;</span><br><span class="line">        <span class="keyword">while</span>(!pq.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            t = pq.top(); pq.pop();</span><br><span class="line">            u = t.v;</span><br><span class="line">            <span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;</span><br><span class="line">            vis[u] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">                ll w = edge[i].w;</span><br><span class="line">                <span class="keyword">if</span>(dis[v] &gt; t.w + w)</span><br><span class="line">                &#123;</span><br><span class="line">                    dis[v] = t.w + w;</span><br><span class="line">                    pq.push(node(v, dis[v]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)<span class="built_in">cout</span> &lt;&lt; (dis[i] == linf ? <span class="number">-1</span> : dis[i]) &lt;&lt; <span class="string">" "</span>;<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;dijkstra;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segmentTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id[maxn];           <span class="comment">// 节点标记数组，，记录线段树中每一个节点的标号，，从 n+1 开始，，前面的n个是原来的点</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">bool</span> flag)</span>     <span class="comment">// 建树（建图，，flag == false 表示是一棵入树，边向下，节点指向儿子</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        id[rt] = ++cnt;</span><br><span class="line">        <span class="keyword">if</span>(l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = id[rt];</span><br><span class="line">            <span class="keyword">int</span> v = l;</span><br><span class="line">            <span class="keyword">if</span>(flag)swap(u, v);</span><br><span class="line">            dijkstra.addedge(u, v, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(rt &lt;&lt; <span class="number">1</span>, l, mid, flag);</span><br><span class="line">        build(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, flag);</span><br><span class="line">        <span class="comment">// pushup</span></span><br><span class="line">        <span class="keyword">int</span> u = id[rt];</span><br><span class="line">        <span class="keyword">int</span> v = id[rt &lt;&lt; <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(flag)swap(u, v);</span><br><span class="line">        dijkstra.addedge(u, v, <span class="number">0</span>);</span><br><span class="line">        u = id[rt];</span><br><span class="line">        v = id[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(flag)swap(u, v);</span><br><span class="line">        dijkstra.addedge(u, v, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> U, <span class="keyword">int</span> L, <span class="keyword">int</span> R, ll w, <span class="keyword">bool</span> flag)</span>    <span class="comment">// flag == false 表示 u-&gt;[l, r] ，，</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt; R || L &gt; r)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = U;</span><br><span class="line">            <span class="keyword">int</span> v = id[rt];</span><br><span class="line">            <span class="keyword">if</span>(flag)swap(u, v);</span><br><span class="line">            dijkstra.addedge(u, v, w);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= mid)addedge(rt &lt;&lt; <span class="number">1</span>, l, mid, U, L, R, w, flag);</span><br><span class="line">        <span class="keyword">if</span>(R &gt;  mid)addedge(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, U, L, R, w, flag);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;down, up;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, q, s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q &gt;&gt; s;</span><br><span class="line">    cnt = n;                <span class="comment">// 出树、入树等的辅助点的标记从n+1开始</span></span><br><span class="line">    dijkstra.init();</span><br><span class="line">    down.build(<span class="number">1</span>, <span class="number">1</span>, n, <span class="literal">false</span>);</span><br><span class="line">    up.build(<span class="number">1</span>, <span class="number">1</span>, n, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">int</span> t, u, v, w, l, r;</span><br><span class="line">    <span class="keyword">while</span>(q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">            l = r = v;</span><br><span class="line">            t = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; l &gt;&gt; r &gt;&gt; w;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">2</span>)</span><br><span class="line">            down.addedge(<span class="number">1</span>, <span class="number">1</span>, n, u, l, r, w, <span class="literal">false</span>);   <span class="comment">// u -&gt; [l, r]</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            up.addedge(<span class="number">1</span>, <span class="number">1</span>, n, u, l, r, w, <span class="literal">true</span>);      <span class="comment">// [l, r] -&gt; u</span></span><br><span class="line">    &#125;</span><br><span class="line">    dijkstra.dijkstra(s, cnt);</span><br><span class="line">    dijkstra.print(n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/linkfqy/article/details/75907444" target="_blank" rel="noopener">以上的一些内容和图片参考这个dalao的博客</a></p><p><a href="https://github.com/4thcalabash/ACM-Code-Library/blob/master/Graph/Dijkstra_interval_graph.cpp" target="_blank" rel="noopener">最后的AC代码的大致思路是参考葫芦爷大佬的板子</a></p><h1 id="hdu-5361In-Touch"><a href="#hdu-5361In-Touch" class="headerlink" title="hdu-5361In Touch"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5361" target="_blank" rel="noopener">hdu-5361In Touch</a></h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5361" target="_blank" rel="noopener">hdu-5361In Touch</a></p><p>差不多的题，，貌似解法有很多，，如果用这种方法来解的话，，只用一棵入树就行了，，，还有可能得改一改写的姿势，，，<del>（重载w爆int一晚上没看出来的怕不是只有我一个了吧，，，emmmm</del></p><h2 id="AC-1"><a href="#AC-1" class="headerlink" title="AC_1"></a>AC_1</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;queue&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstring&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e7</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span>   <span class="comment">//快读</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">        ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">        ans=(ans&lt;&lt;<span class="number">3</span>)+(ans&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">    ll w;</span><br><span class="line">&#125;edge[maxm];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn &lt;&lt; <span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)head[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ADDEDGE</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].w = w;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v; </span><br><span class="line">    ll w;</span><br><span class="line">    node()&#123;&#125;;</span><br><span class="line">    node(<span class="keyword">int</span> _v, ll _w): v(_v), w(_w)&#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;r)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> w &gt; r.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tmp;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn &lt;&lt; <span class="number">3</span>];</span><br><span class="line">ll dis[maxn &lt;&lt; <span class="number">3</span>];</span><br><span class="line">priority_queue&lt;node&gt; pq;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)dis[i] = linf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)vis[i] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(!pq.empty())pq.pop();</span><br><span class="line">    pq.push(node(s, <span class="number">0</span>));</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!pq.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = pq.top(); pq.pop();</span><br><span class="line">        <span class="keyword">if</span>(vis[tmp.v])<span class="keyword">continue</span>;</span><br><span class="line">        vis[tmp.v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[tmp.v]; ~i; i = edge[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dis[v] &gt; dis[tmp.v] + edge[i].w)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = dis[tmp.v] + edge[i].w;</span><br><span class="line">                pq.push(node(v, dis[v]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt = max(cnt, rt + n);</span><br><span class="line">        ADDEDGE(rt + n, l, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(rt &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    build(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    ADDEDGE(rt + n, (rt &lt;&lt; <span class="number">1</span>) + n, <span class="number">0</span>);</span><br><span class="line">    ADDEDGE(rt + n, (rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>) + n, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> L, R, W, U;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &gt; r || l &gt; R)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line">    &#123;</span><br><span class="line">        ADDEDGE(U, rt + n, W);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)addedge(rt &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="keyword">if</span>(R &gt;  mid)addedge(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> l[maxn], r[maxn], c[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    <span class="comment">// ios_base::sync_with_stdio(0);</span></span><br><span class="line">    <span class="comment">// cin.tie(0);cout.tie(0);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// int t; cin &gt;&gt; t;</span></span><br><span class="line">    <span class="comment">// int t; scanf("%d", &amp;t);</span></span><br><span class="line">    <span class="keyword">int</span> t; t = read();</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// cin &gt;&gt; n;</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)l[i] = read();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)r[i] = read();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)c[i] = read();</span><br><span class="line">        init(n &lt;&lt; <span class="number">3</span>);</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            U = i;</span><br><span class="line">            L = i + l[i]; R = i + r[i]; W = c[i];</span><br><span class="line">            addedge(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">            L = i - r[i]; R = i - l[i];</span><br><span class="line">            addedge(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">        dijkstra(<span class="number">1</span>, cnt);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" %lld"</span>, (dis[i] == linf ? <span class="number">-1</span> : dis[i]));</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AC-2"><a href="#AC-2" class="headerlink" title="AC_2"></a>AC_2</h2><p><del>（不加快读也没事，，，就是不能memset，，，卡memset好恶心，，，，</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e7</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span>   <span class="comment">//快读</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">        ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">        ans=(ans&lt;&lt;<span class="number">3</span>)+(ans&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dijkstra</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> to, nxt;</span><br><span class="line">        ll w;</span><br><span class="line">    &#125;edge[maxm];</span><br><span class="line">    <span class="keyword">int</span> tot, head[maxn &lt;&lt; <span class="number">3</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// memset(head, -1, sizeof head);</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)head[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        edge[tot].to = v;</span><br><span class="line">        edge[tot].w = w;</span><br><span class="line">        edge[tot].nxt = head[u];</span><br><span class="line">        head[u] = tot++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> v; ll w;</span><br><span class="line">        node()&#123;&#125;</span><br><span class="line">        node(<span class="keyword">int</span> _v, ll _w):v(_v), w(_w)&#123;&#125;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;r)<span class="keyword">const</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> w &gt; r.w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">bool</span> vis[maxn &lt;&lt; <span class="number">3</span>];</span><br><span class="line">    ll dis[maxn &lt;&lt; <span class="number">3</span>];</span><br><span class="line">    priority_queue&lt;node&gt; pq;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// memset(vis, false, sizeof vis);</span></span><br><span class="line">        <span class="comment">// memset(dis, inf, sizeof dis);</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)vis[i] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)dis[i] = linf;</span><br><span class="line">        <span class="keyword">while</span>(!pq.empty())pq.pop();</span><br><span class="line">        pq.push(node(s, <span class="number">0</span>));</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line">        node t; <span class="keyword">int</span> u;</span><br><span class="line">        <span class="keyword">while</span>(!pq.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            t = pq.top(); pq.pop();</span><br><span class="line">            u = t.v;</span><br><span class="line">            <span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;</span><br><span class="line">            vis[u] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">                ll w = edge[i].w;</span><br><span class="line">                <span class="keyword">if</span>(dis[v] &gt; t.w + w)</span><br><span class="line">                &#123;</span><br><span class="line">                    dis[v] = t.w + w;</span><br><span class="line">                    pq.push(node(v, dis[v]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)<span class="built_in">printf</span>(<span class="string">" %lld"</span>, (dis[i] == linf ? <span class="number">-1</span> : dis[i]));</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;dijkstra;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segmentTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id[maxn &lt;&lt; <span class="number">3</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">bool</span> flag)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        id[rt] = ++cnt;</span><br><span class="line">        <span class="keyword">if</span>(l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = id[rt];</span><br><span class="line">            <span class="keyword">int</span> v = l; </span><br><span class="line">            <span class="keyword">if</span>(flag)swap(u, v);</span><br><span class="line">            dijkstra.addedge(u, v, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(rt &lt;&lt; <span class="number">1</span>, l, mid, flag);</span><br><span class="line">        build(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, flag);</span><br><span class="line">        <span class="keyword">int</span> u = id[rt];</span><br><span class="line">        <span class="keyword">int</span> v = id[rt &lt;&lt; <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(flag)swap(u, v);</span><br><span class="line">        dijkstra.addedge(u, v, <span class="number">0</span>);</span><br><span class="line">        u = id[rt];</span><br><span class="line">        v = id[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(flag)swap(u, v);</span><br><span class="line">        dijkstra.addedge(u, v, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> U, <span class="keyword">int</span> L, <span class="keyword">int</span> R, ll w, <span class="keyword">bool</span> flag)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L &gt; r || R &lt; l)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = U;</span><br><span class="line">            <span class="keyword">int</span> v = id[rt];</span><br><span class="line">            <span class="keyword">if</span>(flag)swap(u, v);</span><br><span class="line">            dijkstra.addedge(u, v, w);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= mid)addedge(rt &lt;&lt; <span class="number">1</span>, l, mid, U, L, R, w, flag);</span><br><span class="line">        <span class="keyword">if</span>(R &gt;  mid)addedge(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, U, L, R, w, flag);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;down; <span class="comment">//, up;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l[maxn], r[maxn], c[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    <span class="comment">// ios_base::sync_with_stdio(0);</span></span><br><span class="line">    <span class="comment">// cin.tie(0);cout.tie(0);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t; t = read();</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n; n = read();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)l[i] = read();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)r[i] = read();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)c[i] = read();</span><br><span class="line">        cnt = n;</span><br><span class="line">        dijkstra.init(n &lt;&lt; <span class="number">3</span>);</span><br><span class="line">        down.build(<span class="number">1</span>, <span class="number">1</span>, n, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// up.build(1, 1, n, true);</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            down.addedge(<span class="number">1</span>, <span class="number">1</span>, n, i, l[i] + i, r[i] + i, c[i], <span class="literal">false</span>);</span><br><span class="line">            down.addedge(<span class="number">1</span>, <span class="number">1</span>, n, i, max(<span class="number">1</span>, i - r[i]), max(<span class="number">1</span>, i - l[i]), c[i], <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        dijkstra.dijkstra(<span class="number">1</span>, cnt);</span><br><span class="line">        dijkstra.print(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(end)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;偶然看到的这个东西，可以说是第一次见到图论+数据结构的题了，，&lt;a href=&quot;https://codeforces.com/problemset/problem/786/B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这题&lt;/a&gt;代码很简单，细节处理一下就没啥了，，，主要是一步一步的思路的推导很不错，，&lt;/p&gt;
    
    </summary>
    
      <category term="ACM-最短路" scheme="http://blog.31415x.cf/categories/ACM-%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
    
      <category term="刷题" scheme="http://blog.31415x.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="ACM" scheme="http://blog.31415x.cf/tags/ACM/"/>
    
      <category term="最短路" scheme="http://blog.31415x.cf/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="线段树" scheme="http://blog.31415x.cf/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>2017icpc西安区域赛</title>
    <link href="http://blog.31415x.cf/2019/09/28/2017icpc%E8%A5%BF%E5%AE%89%E5%8C%BA%E5%9F%9F%E8%B5%9B/"/>
    <id>http://blog.31415x.cf/2019/09/28/2017icpc西安区域赛/</id>
    <published>2019-09-28T11:59:58.000Z</published>
    <updated>2019-09-28T12:08:04.567Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>线段树专场，，，emmmm</p><p>作完签到就自闭了，，数据出锅2333</p><a id="more"></a><h1 id="A-XOR"><a href="#A-XOR" class="headerlink" title="A. XOR"></a>A. XOR</h1><p>之前就知道看到这个线性基+线段树的板子题，，一直想补，，拖到现在</p><p>题意很简单，，就是问一个区间某些数的异或和与K的或的最大值，，，</p><p>如果没有K，，这道题显然是签到题，，，但是多了一个K，，</p><p>其实K也很好处理，，，</p><p>因为要求两个数的或的最大值，，K又是给定的，，所以我们可以贪心的选择一个二进制位是1的但是对应在K中是0的数，，，这样显然最后求得或值最大，，</p><p>所以这题就变成了不考虑K中是1的那几位的数，，也就是对于 $a_i$ 只考虑K对应位是0的那些数，，将1删去，，，删去的操作就是对于每一个数都和K的取反的结果相与，，这样留下的就是在K中是0的那些位，，，最后对于这个处理后的新的数组快乐的用线性基+线段树暴力合并询问就行了，，，</p><p>线性基的合并要使用不是高斯消元的那种，，<del>（忘记关同步T了一发</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">4e5</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">ll n, q, k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">linerbasis</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> maxbase = <span class="number">33</span>;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    ll a[maxbase + <span class="number">1</span>];</span><br><span class="line">    linerbasis()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">    &#125;</span><br><span class="line">    linerbasis(ll *x, <span class="keyword">int</span> n)</span><br><span class="line">    &#123;</span><br><span class="line">        linerbasis();</span><br><span class="line">        build(x, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(ll *x, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            insert(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(ll t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t &amp; (<span class="number">1l</span>l &lt;&lt; i))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!a[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    a[i] = t;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                t ^= a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">0</span>)flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">linerbasis <span class="title">merge</span><span class="params">(<span class="keyword">const</span> linerbasis &amp;l1, <span class="keyword">const</span> linerbasis &amp;l2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        linerbasis ret = l1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span>(l2.a[i])</span><br><span class="line">                ret.insert(l2.a[i]);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">const</span> linerbasis &amp;l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span>(l.a[i])</span><br><span class="line">                insert(l.a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">queryMax</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span>((ret ^ a[i]) &gt; ret)</span><br><span class="line">                ret ^= a[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;lb[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line">ll a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    lb[rt] = lb[rt].merge(lb[rt &lt;&lt; <span class="number">1</span>], lb[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    lb[rt].clear();</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        lb[rt].insert(a[l]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(rt &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    build(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">linerbasis <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> lb[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    linerbasis ret;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)ret.merge(query(rt &lt;&lt; <span class="number">1</span>, l, mid, L, R));</span><br><span class="line">    <span class="keyword">if</span>(R &gt;  mid)ret.merge(query(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R));</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        k = ~k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)a[i] &amp;= k;</span><br><span class="line">        k = ~k;</span><br><span class="line">        build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        <span class="keyword">while</span>(q--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; (k | query(<span class="number">1</span>, <span class="number">1</span>, n, l, r).queryMax()) &lt;&lt; <span class="built_in">endl</span>;        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;线段树专场，，，emmmm&lt;/p&gt;
&lt;p&gt;作完签到就自闭了，，数据出锅2333&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷题" scheme="http://blog.31415x.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="ACM" scheme="http://blog.31415x.cf/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 72 (Rated for Div. 2)</title>
    <link href="http://blog.31415x.cf/2019/09/28/Educational-Codeforces-Round-72-Rated-for-Div-2/"/>
    <id>http://blog.31415x.cf/2019/09/28/Educational-Codeforces-Round-72-Rated-for-Div-2/</id>
    <published>2019-09-28T02:12:37.000Z</published>
    <updated>2019-10-08T12:47:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p><a href="https://codeforces.com/contest/1217" target="_blank" rel="noopener">这场只做了前四道</a>，，感觉学到的东西也很多，，最后两道数据结构的题没有补。。。</p><a id="more"></a><h1 id="A-Creating-a-Character"><a href="#A-Creating-a-Character" class="headerlink" title="A. Creating a Character"></a>A. Creating a Character</h1><p>贪心加一堆判断就行了，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">4e5</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[maxn], n;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll s, i, e;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s &gt;&gt; i &gt;&gt; e;</span><br><span class="line">        <span class="keyword">if</span>(s + e &lt;= i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ll x = i - s + e;</span><br><span class="line">        x = x / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(s + x &lt;= i + e - x)++x;</span><br><span class="line">        <span class="keyword">if</span>(e == <span class="number">0</span> &amp;&amp; s &gt; i)x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(e == <span class="number">0</span> &amp;&amp; s &lt;= i)x = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x &lt;= <span class="number">0</span>)x = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; e - x + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Zmei-Gorynich"><a href="#B-Zmei-Gorynich" class="headerlink" title="B. Zmei Gorynich"></a>B. Zmei Gorynich</h1><p>贪心++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">4e5</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[maxn], n;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll n, x; <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x;</span><br><span class="line">        ll mx = -inf, mxd = <span class="number">0</span>;</span><br><span class="line">        ll d, h;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; d &gt;&gt; h;</span><br><span class="line">            mx = max(mx, d - h);</span><br><span class="line">            mxd = max(mxd, d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mx &lt;= <span class="number">0</span> &amp;&amp; mxd &lt; x)<span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            ll ans = (x - mxd + mx - <span class="number">1</span>) / mx;</span><br><span class="line">            ++ans;</span><br><span class="line">            <span class="keyword">if</span>(mxd &gt;= x)ans = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-The-Number-Of-Good-Substrings"><a href="#C-The-Number-Of-Good-Substrings" class="headerlink" title="C. The Number Of Good Substrings"></a>C. The Number Of Good Substrings</h1><p>貌似满足条件的串不多？？？</p><p>直接枚举每一个1的位置，，然后对于以他为最高位的串表示的十进制如果小于串的长度以及他前面的前导零长度的和就是一个满足条件的，，这样跑一遍就行了，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">4e5</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> lst = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len - <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'0'</span>)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ll base = <span class="number">1</span>;</span><br><span class="line">                ++ans;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= len - <span class="number">1</span>; ++j)</span><br><span class="line">                &#123;</span><br><span class="line">                    base &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(s[j] == <span class="string">'1'</span>)base |= <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(j - lst &gt;= base)++ans;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                lst = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 010010001000</span></span><br></pre></td></tr></table></figure><h1 id="D-Coloring-Edges"><a href="#D-Coloring-Edges" class="headerlink" title="D. Coloring Edges"></a>D. Coloring Edges</h1><p>感觉这题很不错，，有向图判环之前只知道用拓扑排序，，现在才知道有好几种方法，，，</p><p>题意是给一张图，然后对边染色，用最少的颜色染出的图中相同颜色的边没有成环就行</p><p>显然没有环的时候答案就是1，，，有环的时候答案就是2，，</p><p>所以可以先判环，，然后染色</p><p>这样做的话染色的一个技巧就是对于 <code>u-&gt;v</code> 边， $u \ge v$ 直接染2，，其他的染1</p><h2 id="dfs判环"><a href="#dfs判环" class="headerlink" title="dfs判环"></a>dfs判环</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">4e5</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt, col;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    edge[tot].col = <span class="number">0</span>;</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v == s)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(vis[v])<span class="keyword">continue</span>;</span><br><span class="line">        vis[v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(dfs(v, s))<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        addedge(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">        vis[i] = <span class="literal">true</span>;</span><br><span class="line">        flag = dfs(i, i);</span><br><span class="line">        <span class="keyword">if</span>(flag)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)<span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = head[i]; ~j; j = edge[j].nxt)</span><br><span class="line">                <span class="keyword">if</span>(i &gt; edge[j].to)edge[j].col = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">else</span> edge[j].col = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= tot - <span class="number">1</span>; ++i)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; edge[i].col &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="topo排序判环"><a href="#topo排序判环" class="headerlink" title="topo排序判环"></a>topo排序判环</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">4e5</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt, col;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    edge[tot].col = <span class="number">0</span>;</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> du[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">topo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span>(!du[i])</span><br><span class="line">            q.push(i);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front(); q.pop();</span><br><span class="line">        ++cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">            <span class="keyword">if</span>(--du[edge[i].to] == <span class="number">0</span>)</span><br><span class="line">                q.push(edge[i].to);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt == n;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">memset</span>(du, <span class="number">0</span>, <span class="keyword">sizeof</span> du);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        ++du[v];</span><br><span class="line">        addedge(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(topo())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)<span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = head[i]; ~j; j = edge[j].nxt)</span><br><span class="line">                <span class="keyword">if</span>(i &gt; edge[j].to)edge[j].col = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">else</span> edge[j].col = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= tot - <span class="number">1</span>; ++i)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; edge[i].col &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dfs染回边"><a href="#dfs染回边" class="headerlink" title="dfs染回边"></a>dfs染回边</h2><p>另一种做法需要知道dfs的一些性质：</p><p>dfs跑图会产生四种边，，（算法导论上有（看过都忘了，，，）<a href="https://blog.csdn.net/c_zhangsir/article/details/98238664" target="_blank" rel="noopener">这些是参考这个的</a></p><ul><li><strong>树边(Tree Edge)</strong> ： 就是 <code>u-&gt;v</code> v是第一次访问的边</li><li><strong>前向边(Forward Edge)</strong> ： 就是 <code>u-&gt;v</code> v是访问过的，并且不是v的直接的孩子</li><li><strong>回边(Back Edge)</strong> ： 就是 <code>u-&gt;v</code> v是指向他的一个祖先的边，，（显然这样的边可能是环的一部分</li><li><strong>跨越边(Cross Edge)</strong> ： 就是 <code>u-&gt;v</code> v是指向一个访问过的点，但 u , v 之间没关系，，（可能是两棵子树中的点等等</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20190802211019465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NfWmhhbmdTaXI=,size_16,color_FFFFFF,t_70" alt title>                </div>                <div class="image-caption"></div>            </figure><p>所以对于这题，，我们只要跑一边dfs，，然后将所有的回边染2，，其他的边染1即可，，，这样子就不用判环什么的，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">4e5</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt, col;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    edge[tot].col = <span class="number">0</span>;</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 先将子树标记为1</span></span><br><span class="line">    <span class="comment">// 如果子树中有到子树中的某个点时，表示有环</span></span><br><span class="line">    <span class="comment">// 最后将子树标记为2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于染色，树边染1（vis[v] == 0）、回边（vis[v] == 1）染2，前边（就是连到其他树的边）和跨越边（连着已经走过的点的边）染1</span></span><br><span class="line">    vis[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(vis[v] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(v);</span><br><span class="line">            edge[i].col = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(vis[v] == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            edge[i].col = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            edge[i].col = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[u] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        addedge(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span>(vis[i] == <span class="number">0</span>)</span><br><span class="line">            dfs(i);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (flag ? <span class="number">2</span> : <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= tot - <span class="number">1</span>; ++i)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; edge[i].col &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(end)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1217&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这场只做了前四道&lt;/a&gt;，，感觉学到的东西也很多，，最后两道数据结构的题没有补。。。&lt;/p&gt;
    
    </summary>
    
      <category term="Codeforces" scheme="http://blog.31415x.cf/categories/Codeforces/"/>
    
    
      <category term="刷题" scheme="http://blog.31415x.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="ACM" scheme="http://blog.31415x.cf/tags/ACM/"/>
    
      <category term="cf" scheme="http://blog.31415x.cf/tags/cf/"/>
    
  </entry>
  
  <entry>
    <title>随机生成中文姓名</title>
    <link href="http://blog.31415x.cf/2019/09/25/%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E4%B8%AD%E6%96%87%E5%A7%93%E5%90%8D/"/>
    <id>http://blog.31415x.cf/2019/09/25/随机生成中文姓名/</id>
    <published>2019-09-25T11:47:19.000Z</published>
    <updated>2019-09-25T11:51:27.484Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>做项目的时候有时会用到自己造一个数据库，数值信息都可以随便rand出来，，但是中文姓名不太好处理，，<a href="https://www.cnblogs.com/kindom/p/3963610.html" target="_blank" rel="noopener">最后借鉴了这篇博客</a> ，， 把他的一些东西改了改，够用了，，</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">mt19937 rnd(time(0));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NAME</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="comment">//百家姓-单姓</span></span><br><span class="line"><span class="built_in">string</span> NA1[<span class="number">444</span>] = &#123; <span class="string">"赵"</span>, <span class="string">"钱"</span>, <span class="string">"孙"</span>, <span class="string">"李"</span>, <span class="string">"周"</span>, <span class="string">"吴"</span>, <span class="string">"郑"</span>, <span class="string">"王"</span>, <span class="string">"冯"</span>, <span class="string">"陈"</span>, <span class="string">"褚"</span>, <span class="string">"卫"</span>, <span class="string">"蒋"</span>, <span class="string">"沈"</span>, <span class="string">"韩"</span>, <span class="string">"杨"</span>, <span class="string">"朱"</span>, <span class="string">"秦"</span>, <span class="string">"尤"</span>, <span class="string">"许"</span>, <span class="string">"何"</span>, <span class="string">"吕"</span>, <span class="string">"施"</span>, <span class="string">"张"</span>, <span class="string">"孔"</span>, <span class="string">"曹"</span>, <span class="string">"严"</span>, <span class="string">"华"</span>, <span class="string">"金"</span>, <span class="string">"魏"</span>, <span class="string">"陶"</span>, <span class="string">"姜"</span>, <span class="string">"戚"</span>, <span class="string">"谢"</span>, <span class="string">"邹"</span>, <span class="string">"喻"</span>, <span class="string">"柏"</span>, <span class="string">"水"</span>, <span class="string">"窦"</span>, <span class="string">"章"</span>, <span class="string">"云"</span>, <span class="string">"苏"</span>, <span class="string">"潘"</span>, <span class="string">"葛"</span>, <span class="string">"奚"</span>, <span class="string">"范"</span>, <span class="string">"彭"</span>, <span class="string">"郎"</span>, <span class="string">"鲁"</span>, <span class="string">"韦"</span>, <span class="string">"昌"</span>, <span class="string">"马"</span>, <span class="string">"苗"</span>, <span class="string">"凤"</span>, <span class="string">"花"</span>, <span class="string">"方"</span>, <span class="string">"俞"</span>, <span class="string">"任"</span>, <span class="string">"袁"</span>, <span class="string">"柳"</span>, <span class="string">"酆"</span>, <span class="string">"鲍"</span>, <span class="string">"史"</span>, <span class="string">"唐"</span>, <span class="string">"费"</span>, <span class="string">"廉"</span>, <span class="string">"岑"</span>, <span class="string">"薛"</span>, <span class="string">"雷"</span>, <span class="string">"贺"</span>, <span class="string">"倪"</span>, <span class="string">"汤"</span>, <span class="string">"滕"</span>, <span class="string">"殷"</span>, <span class="string">"罗"</span>, <span class="string">"毕"</span>, <span class="string">"郝"</span>, <span class="string">"邬"</span>, <span class="string">"安"</span>, <span class="string">"常"</span>, <span class="string">"乐"</span>, <span class="string">"于"</span>, <span class="string">"时"</span>, <span class="string">"傅"</span>, <span class="string">"皮"</span>, <span class="string">"卞"</span>, <span class="string">"齐"</span>, <span class="string">"康"</span>, <span class="string">"伍"</span>, <span class="string">"余"</span>, <span class="string">"元"</span>, <span class="string">"卜"</span>, <span class="string">"顾"</span>, <span class="string">"孟"</span>, <span class="string">"平"</span>, <span class="string">"黄"</span>, <span class="string">"和"</span>, <span class="string">"穆"</span>, <span class="string">"萧"</span>, <span class="string">"尹"</span>, <span class="string">"姚"</span>, <span class="string">"邵"</span>, <span class="string">"湛"</span>, <span class="string">"汪"</span>, <span class="string">"祁"</span>, <span class="string">"毛"</span>, <span class="string">"禹"</span>, <span class="string">"狄"</span>, <span class="string">"米"</span>, <span class="string">"贝"</span>, <span class="string">"明"</span>, <span class="string">"臧"</span>, <span class="string">"计"</span>, <span class="string">"伏"</span>, <span class="string">"成"</span>, <span class="string">"戴"</span>, <span class="string">"谈"</span>, <span class="string">"宋"</span>, <span class="string">"茅"</span>, <span class="string">"庞"</span>, <span class="string">"熊"</span>, <span class="string">"纪"</span>, <span class="string">"舒"</span>, <span class="string">"屈"</span>, <span class="string">"项"</span>, <span class="string">"祝"</span>, <span class="string">"董"</span>, <span class="string">"梁"</span>, <span class="string">"杜"</span>, <span class="string">"阮"</span>, <span class="string">"蓝"</span>, <span class="string">"闵"</span>, <span class="string">"席"</span>, <span class="string">"季"</span>, <span class="string">"麻"</span>, <span class="string">"强"</span>, <span class="string">"贾"</span>, <span class="string">"路"</span>, <span class="string">"娄"</span>, <span class="string">"危"</span>, <span class="string">"江"</span>, <span class="string">"童"</span>, <span class="string">"颜"</span>, <span class="string">"郭"</span>, <span class="string">"梅"</span>, <span class="string">"盛"</span>, <span class="string">"林"</span>, <span class="string">"刁"</span>, <span class="string">"钟"</span>, <span class="string">"徐"</span>, <span class="string">"邱"</span>, <span class="string">"骆"</span>, <span class="string">"高"</span>, <span class="string">"夏"</span>, <span class="string">"蔡"</span>, <span class="string">"田"</span>, <span class="string">"樊"</span>, <span class="string">"胡"</span>, <span class="string">"凌"</span>, <span class="string">"霍"</span>, <span class="string">"虞"</span>, <span class="string">"万"</span>, <span class="string">"支"</span>, <span class="string">"柯"</span>, <span class="string">"昝"</span>, <span class="string">"管"</span>, <span class="string">"卢"</span>, <span class="string">"莫"</span>, <span class="string">"经"</span>, <span class="string">"房"</span>, <span class="string">"裘"</span>, <span class="string">"缪"</span>, <span class="string">"干"</span>, <span class="string">"解"</span>, <span class="string">"应"</span>, <span class="string">"宗"</span>, <span class="string">"丁"</span>, <span class="string">"宣"</span>, <span class="string">"贲"</span>, <span class="string">"邓"</span>, <span class="string">"郁"</span>, <span class="string">"单"</span>, <span class="string">"杭"</span>, <span class="string">"洪"</span>, <span class="string">"包"</span>, <span class="string">"诸"</span>, <span class="string">"左"</span>, <span class="string">"石"</span>, <span class="string">"崔"</span>, <span class="string">"吉"</span>, <span class="string">"钮"</span>, <span class="string">"龚"</span>, <span class="string">"程"</span>, <span class="string">"嵇"</span>, <span class="string">"邢"</span>, <span class="string">"滑"</span>, <span class="string">"裴"</span>, <span class="string">"陆"</span>, <span class="string">"荣"</span>, <span class="string">"翁"</span>, <span class="string">"荀"</span>, <span class="string">"羊"</span>, <span class="string">"於"</span>, <span class="string">"惠"</span>, <span class="string">"甄"</span>, <span class="string">"麴"</span>, <span class="string">"家"</span>, <span class="string">"封"</span>, <span class="string">"芮"</span>, <span class="string">"羿"</span>, <span class="string">"储"</span>, <span class="string">"靳"</span>, <span class="string">"汲"</span>, <span class="string">"邴"</span>, <span class="string">"糜"</span>, <span class="string">"松"</span>, <span class="string">"井"</span>, <span class="string">"段"</span>, <span class="string">"富"</span>, <span class="string">"巫"</span>, <span class="string">"乌"</span>, <span class="string">"焦"</span>, <span class="string">"巴"</span>, <span class="string">"弓"</span>, <span class="string">"牧"</span>, <span class="string">"隗"</span>, <span class="string">"山"</span>, <span class="string">"谷"</span>, <span class="string">"车"</span>, <span class="string">"侯"</span>, <span class="string">"宓"</span>, <span class="string">"蓬"</span>, <span class="string">"全"</span>, <span class="string">"郗"</span>, <span class="string">"班"</span>, <span class="string">"仰"</span>, <span class="string">"秋"</span>, <span class="string">"仲"</span>, <span class="string">"伊"</span>, <span class="string">"宫"</span>, <span class="string">"宁"</span>, <span class="string">"仇"</span>, <span class="string">"栾"</span>, <span class="string">"暴"</span>, <span class="string">"甘"</span>, <span class="string">"钭"</span>, <span class="string">"厉"</span>, <span class="string">"戎"</span>, <span class="string">"祖"</span>, <span class="string">"武"</span>, <span class="string">"符"</span>, <span class="string">"刘"</span>, <span class="string">"景"</span>, <span class="string">"詹"</span>, <span class="string">"束"</span>, <span class="string">"龙"</span>, <span class="string">"叶"</span>, <span class="string">"幸"</span>, <span class="string">"司"</span>, <span class="string">"韶"</span>, <span class="string">"郜"</span>, <span class="string">"黎"</span>, <span class="string">"蓟"</span>, <span class="string">"薄"</span>, <span class="string">"印"</span>, <span class="string">"宿"</span>, <span class="string">"白"</span>, <span class="string">"怀"</span>, <span class="string">"蒲"</span>, <span class="string">"邰"</span>, <span class="string">"从"</span>, <span class="string">"鄂"</span>, <span class="string">"索"</span>, <span class="string">"咸"</span>, <span class="string">"籍"</span>, <span class="string">"赖"</span>, <span class="string">"卓"</span>, <span class="string">"蔺"</span>, <span class="string">"屠"</span>, <span class="string">"蒙"</span>, <span class="string">"池"</span>, <span class="string">"乔"</span>, <span class="string">"阴"</span>, <span class="string">"郁"</span>, <span class="string">"胥"</span>, <span class="string">"能"</span>, <span class="string">"苍"</span>, <span class="string">"双"</span>, <span class="string">"闻"</span>, <span class="string">"莘"</span>, <span class="string">"党"</span>, <span class="string">"翟"</span>, <span class="string">"谭"</span>, <span class="string">"贡"</span>, <span class="string">"劳"</span>, <span class="string">"逄"</span>, <span class="string">"姬"</span>, <span class="string">"申"</span>, <span class="string">"扶"</span>, <span class="string">"堵"</span>, <span class="string">"冉"</span>, <span class="string">"宰"</span>, <span class="string">"郦"</span>, <span class="string">"雍"</span>, <span class="string">"舄"</span>, <span class="string">"璩"</span>, <span class="string">"桑"</span>, <span class="string">"桂"</span>, <span class="string">"濮"</span>, <span class="string">"牛"</span>, <span class="string">"寿"</span>, <span class="string">"通"</span>, <span class="string">"边"</span>, <span class="string">"扈"</span>, <span class="string">"燕"</span>, <span class="string">"冀"</span>, <span class="string">"郏"</span>, <span class="string">"浦"</span>, <span class="string">"尚"</span>, <span class="string">"农"</span>, <span class="string">"温"</span>, <span class="string">"别"</span>, <span class="string">"庄"</span>, <span class="string">"晏"</span>, <span class="string">"柴"</span>, <span class="string">"瞿"</span>, <span class="string">"阎"</span>, <span class="string">"充"</span>, <span class="string">"慕"</span>, <span class="string">"连"</span>, <span class="string">"茹"</span>, <span class="string">"习"</span>, <span class="string">"宦"</span>, <span class="string">"艾"</span>, <span class="string">"鱼"</span>, <span class="string">"容"</span>, <span class="string">"向"</span>, <span class="string">"古"</span>, <span class="string">"易"</span>, <span class="string">"慎"</span>, <span class="string">"戈"</span>, <span class="string">"廖"</span>, <span class="string">"庾"</span>, <span class="string">"终"</span>, <span class="string">"暨"</span>, <span class="string">"居"</span>, <span class="string">"衡"</span>, <span class="string">"步"</span>, <span class="string">"都"</span>, <span class="string">"耿"</span>, <span class="string">"满"</span>, <span class="string">"弘"</span>, <span class="string">"匡"</span>, <span class="string">"国"</span>, <span class="string">"文"</span>, <span class="string">"寇"</span>, <span class="string">"广"</span>, <span class="string">"禄"</span>, <span class="string">"阙"</span>, <span class="string">"东"</span>, <span class="string">"殴"</span>, <span class="string">"殳"</span>, <span class="string">"沃"</span>, <span class="string">"利"</span>, <span class="string">"蔚"</span>, <span class="string">"越"</span>, <span class="string">"夔"</span>, <span class="string">"隆"</span>, <span class="string">"师"</span>, <span class="string">"巩"</span>, <span class="string">"厍"</span>, <span class="string">"聂"</span>, <span class="string">"晁"</span>, <span class="string">"勾"</span>, <span class="string">"敖"</span>, <span class="string">"融"</span>, <span class="string">"冷"</span>, <span class="string">"訾"</span>, <span class="string">"辛"</span>, <span class="string">"阚"</span>, <span class="string">"那"</span>, <span class="string">"简"</span>, <span class="string">"饶"</span>, <span class="string">"空"</span>, <span class="string">"曾"</span>, <span class="string">"毋"</span>, <span class="string">"沙"</span>, <span class="string">"乜"</span>, <span class="string">"养"</span>, <span class="string">"鞠"</span>, <span class="string">"须"</span>, <span class="string">"丰"</span>, <span class="string">"巢"</span>, <span class="string">"关"</span>, <span class="string">"蒯"</span>, <span class="string">"相"</span>, <span class="string">"查"</span>, <span class="string">"後"</span>, <span class="string">"荆"</span>, <span class="string">"红"</span>, <span class="string">"游"</span>, <span class="string">"竺"</span>, <span class="string">"权"</span>, <span class="string">"逯"</span>, <span class="string">"盖"</span>, <span class="string">"益"</span>, <span class="string">"桓"</span>, <span class="string">"公"</span>, <span class="string">"仉"</span>, <span class="string">"督"</span>, <span class="string">"晋"</span>, <span class="string">"楚"</span>, <span class="string">"闫"</span>, <span class="string">"法"</span>, <span class="string">"汝"</span>, <span class="string">"鄢"</span>, <span class="string">"涂"</span>, <span class="string">"钦"</span>, <span class="string">"归"</span>, <span class="string">"海"</span>, <span class="string">"岳"</span>, <span class="string">"帅"</span>, <span class="string">"缑"</span>, <span class="string">"亢"</span>, <span class="string">"况"</span>, <span class="string">"后"</span>, <span class="string">"有"</span>, <span class="string">"琴"</span>, <span class="string">"商"</span>, <span class="string">"牟"</span>, <span class="string">"佘"</span>, <span class="string">"佴"</span>, <span class="string">"伯"</span>, <span class="string">"赏"</span>, <span class="string">"墨"</span>, <span class="string">"哈"</span>, <span class="string">"谯"</span>, <span class="string">"笪"</span>, <span class="string">"年"</span>, <span class="string">"爱"</span>, <span class="string">"阳"</span>, <span class="string">"佟"</span>, <span class="string">"言"</span>, <span class="string">"福"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//百家姓-复姓</span></span><br><span class="line"><span class="built_in">string</span> NA2[<span class="number">59</span>] = &#123; <span class="string">"万俟"</span>, <span class="string">"司马"</span>, <span class="string">"上官"</span>, <span class="string">"欧阳"</span>, <span class="string">"夏侯"</span>, <span class="string">"诸葛"</span>, <span class="string">"闻人"</span>, <span class="string">"东方"</span>, <span class="string">"赫连"</span>, <span class="string">"皇甫"</span>, <span class="string">"尉迟"</span>, <span class="string">"公羊"</span>, <span class="string">"澹台"</span>, <span class="string">"公冶"</span>, <span class="string">"宗政"</span>, <span class="string">"濮阳"</span>, <span class="string">"淳于"</span>, <span class="string">"单于"</span>, <span class="string">"太叔"</span>, <span class="string">"申屠"</span>, <span class="string">"公孙"</span>, <span class="string">"仲孙"</span>, <span class="string">"轩辕"</span>, <span class="string">"令狐"</span>, <span class="string">"钟离"</span>, <span class="string">"宇文"</span>, <span class="string">"长孙"</span>, <span class="string">"慕容"</span>, <span class="string">"鲜于"</span>, <span class="string">"闾丘"</span>, <span class="string">"司徒"</span>, <span class="string">"司空"</span>, <span class="string">"亓官"</span>, <span class="string">"司寇"</span>, <span class="string">"子车"</span>, <span class="string">"颛孙"</span>, <span class="string">"端木"</span>, <span class="string">"巫马"</span>, <span class="string">"公西"</span>, <span class="string">"漆雕"</span>, <span class="string">"乐正"</span>, <span class="string">"壤驷"</span>, <span class="string">"公良"</span>, <span class="string">"拓跋"</span>, <span class="string">"夹谷"</span>, <span class="string">"宰父"</span>, <span class="string">"谷梁"</span>, <span class="string">"百里"</span>, <span class="string">"东郭"</span>, <span class="string">"南门"</span>, <span class="string">"呼延"</span>, <span class="string">"羊舌"</span>, <span class="string">"微生"</span>, <span class="string">"梁丘"</span>, <span class="string">"左丘"</span>, <span class="string">"东门"</span>, <span class="string">"西门"</span>, <span class="string">"南宫"</span>, <span class="string">"第五"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//男性常用名</span></span><br><span class="line"><span class="built_in">string</span> ME1m[<span class="number">140</span>] = &#123; <span class="string">"伟"</span>, <span class="string">"刚"</span>, <span class="string">"勇"</span>, <span class="string">"毅"</span>, <span class="string">"俊"</span>, <span class="string">"峰"</span>, <span class="string">"强"</span>, <span class="string">"军"</span>, <span class="string">"平"</span>, <span class="string">"保"</span>, <span class="string">"东"</span>, <span class="string">"文"</span>, <span class="string">"辉"</span>, <span class="string">"力"</span>, <span class="string">"明"</span>, <span class="string">"永"</span>, <span class="string">"健"</span>, <span class="string">"世"</span>, <span class="string">"广"</span>, <span class="string">"志"</span>, <span class="string">"义"</span>, <span class="string">"兴"</span>, <span class="string">"良"</span>, <span class="string">"海"</span>, <span class="string">"山"</span>, <span class="string">"仁"</span>, <span class="string">"波"</span>, <span class="string">"宁"</span>, <span class="string">"贵"</span>, <span class="string">"福"</span>, <span class="string">"生"</span>, <span class="string">"龙"</span>, <span class="string">"元"</span>, <span class="string">"全"</span>, <span class="string">"国"</span>, <span class="string">"胜"</span>, <span class="string">"学"</span>, <span class="string">"祥"</span>, <span class="string">"才"</span>, <span class="string">"发"</span>, <span class="string">"武"</span>, <span class="string">"新"</span>, <span class="string">"利"</span>, <span class="string">"清"</span>, <span class="string">"飞"</span>, <span class="string">"彬"</span>, <span class="string">"富"</span>, <span class="string">"顺"</span>, <span class="string">"信"</span>, <span class="string">"子"</span>, <span class="string">"杰"</span>, <span class="string">"涛"</span>, <span class="string">"昌"</span>, <span class="string">"成"</span>, <span class="string">"康"</span>, <span class="string">"星"</span>, <span class="string">"光"</span>, <span class="string">"天"</span>, <span class="string">"达"</span>, <span class="string">"安"</span>, <span class="string">"岩"</span>, <span class="string">"中"</span>, <span class="string">"茂"</span>, <span class="string">"进"</span>, <span class="string">"林"</span>, <span class="string">"有"</span>, <span class="string">"坚"</span>, <span class="string">"和"</span>, <span class="string">"彪"</span>, <span class="string">"博"</span>, <span class="string">"诚"</span>, <span class="string">"先"</span>, <span class="string">"敬"</span>, <span class="string">"震"</span>, <span class="string">"振"</span>, <span class="string">"壮"</span>, <span class="string">"会"</span>, <span class="string">"思"</span>, <span class="string">"群"</span>, <span class="string">"豪"</span>, <span class="string">"心"</span>, <span class="string">"邦"</span>, <span class="string">"承"</span>, <span class="string">"乐"</span>, <span class="string">"绍"</span>, <span class="string">"功"</span>, <span class="string">"松"</span>, <span class="string">"善"</span>, <span class="string">"厚"</span>, <span class="string">"庆"</span>, <span class="string">"磊"</span>, <span class="string">"民"</span>, <span class="string">"友"</span>, <span class="string">"裕"</span>, <span class="string">"河"</span>, <span class="string">"哲"</span>, <span class="string">"江"</span>, <span class="string">"超"</span>, <span class="string">"浩"</span>, <span class="string">"亮"</span>, <span class="string">"政"</span>, <span class="string">"谦"</span>, <span class="string">"亨"</span>, <span class="string">"奇"</span>, <span class="string">"固"</span>, <span class="string">"之"</span>, <span class="string">"轮"</span>, <span class="string">"翰"</span>, <span class="string">"朗"</span>, <span class="string">"伯"</span>, <span class="string">"宏"</span>, <span class="string">"言"</span>, <span class="string">"若"</span>, <span class="string">"鸣"</span>, <span class="string">"朋"</span>, <span class="string">"斌"</span>, <span class="string">"梁"</span>, <span class="string">"栋"</span>, <span class="string">"维"</span>, <span class="string">"启"</span>, <span class="string">"克"</span>, <span class="string">"伦"</span>, <span class="string">"翔"</span>, <span class="string">"旭"</span>, <span class="string">"鹏"</span>, <span class="string">"泽"</span>, <span class="string">"晨"</span>, <span class="string">"辰"</span>, <span class="string">"士"</span>, <span class="string">"以"</span>, <span class="string">"建"</span>, <span class="string">"家"</span>, <span class="string">"致"</span>, <span class="string">"树"</span>, <span class="string">"炎"</span>, <span class="string">"德"</span>, <span class="string">"行"</span>, <span class="string">"时"</span>, <span class="string">"泰"</span>, <span class="string">"盛"</span> &#125;;</span><br><span class="line"><span class="built_in">string</span> ME2m[<span class="number">140</span>] = &#123; <span class="string">"伟"</span>, <span class="string">"刚"</span>, <span class="string">"勇"</span>, <span class="string">"毅"</span>, <span class="string">"俊"</span>, <span class="string">"峰"</span>, <span class="string">"强"</span>, <span class="string">"军"</span>, <span class="string">"平"</span>, <span class="string">"保"</span>, <span class="string">"东"</span>, <span class="string">"文"</span>, <span class="string">"辉"</span>, <span class="string">"力"</span>, <span class="string">"明"</span>, <span class="string">"永"</span>, <span class="string">"健"</span>, <span class="string">"世"</span>, <span class="string">"广"</span>, <span class="string">"志"</span>, <span class="string">"义"</span>, <span class="string">"兴"</span>, <span class="string">"良"</span>, <span class="string">"海"</span>, <span class="string">"山"</span>, <span class="string">"仁"</span>, <span class="string">"波"</span>, <span class="string">"宁"</span>, <span class="string">"贵"</span>, <span class="string">"福"</span>, <span class="string">"生"</span>, <span class="string">"龙"</span>, <span class="string">"元"</span>, <span class="string">"全"</span>, <span class="string">"国"</span>, <span class="string">"胜"</span>, <span class="string">"学"</span>, <span class="string">"祥"</span>, <span class="string">"才"</span>, <span class="string">"发"</span>, <span class="string">"武"</span>, <span class="string">"新"</span>, <span class="string">"利"</span>, <span class="string">"清"</span>, <span class="string">"飞"</span>, <span class="string">"彬"</span>, <span class="string">"富"</span>, <span class="string">"顺"</span>, <span class="string">"信"</span>, <span class="string">"子"</span>, <span class="string">"杰"</span>, <span class="string">"涛"</span>, <span class="string">"昌"</span>, <span class="string">"成"</span>, <span class="string">"康"</span>, <span class="string">"星"</span>, <span class="string">"光"</span>, <span class="string">"天"</span>, <span class="string">"达"</span>, <span class="string">"安"</span>, <span class="string">"岩"</span>, <span class="string">"中"</span>, <span class="string">"茂"</span>, <span class="string">"进"</span>, <span class="string">"林"</span>, <span class="string">"有"</span>, <span class="string">"坚"</span>, <span class="string">"和"</span>, <span class="string">"彪"</span>, <span class="string">"博"</span>, <span class="string">"诚"</span>, <span class="string">"先"</span>, <span class="string">"敬"</span>, <span class="string">"震"</span>, <span class="string">"振"</span>, <span class="string">"壮"</span>, <span class="string">"会"</span>, <span class="string">"思"</span>, <span class="string">"群"</span>, <span class="string">"豪"</span>, <span class="string">"心"</span>, <span class="string">"邦"</span>, <span class="string">"承"</span>, <span class="string">"乐"</span>, <span class="string">"绍"</span>, <span class="string">"功"</span>, <span class="string">"松"</span>, <span class="string">"善"</span>, <span class="string">"厚"</span>, <span class="string">"庆"</span>, <span class="string">"磊"</span>, <span class="string">"民"</span>, <span class="string">"友"</span>, <span class="string">"裕"</span>, <span class="string">"河"</span>, <span class="string">"哲"</span>, <span class="string">"江"</span>, <span class="string">"超"</span>, <span class="string">"浩"</span>, <span class="string">"亮"</span>, <span class="string">"政"</span>, <span class="string">"谦"</span>, <span class="string">"亨"</span>, <span class="string">"奇"</span>, <span class="string">"固"</span>, <span class="string">"之"</span>, <span class="string">"轮"</span>, <span class="string">"翰"</span>, <span class="string">"朗"</span>, <span class="string">"伯"</span>, <span class="string">"宏"</span>, <span class="string">"言"</span>, <span class="string">"若"</span>, <span class="string">"鸣"</span>, <span class="string">"朋"</span>, <span class="string">"斌"</span>, <span class="string">"梁"</span>, <span class="string">"栋"</span>, <span class="string">"维"</span>, <span class="string">"启"</span>, <span class="string">"克"</span>, <span class="string">"伦"</span>, <span class="string">"翔"</span>, <span class="string">"旭"</span>, <span class="string">"鹏"</span>, <span class="string">"泽"</span>, <span class="string">"晨"</span>, <span class="string">"辰"</span>, <span class="string">"士"</span>, <span class="string">"以"</span>, <span class="string">"建"</span>, <span class="string">"家"</span>, <span class="string">"致"</span>, <span class="string">"树"</span>, <span class="string">"炎"</span>, <span class="string">"德"</span>, <span class="string">"行"</span>, <span class="string">"时"</span>, <span class="string">"泰"</span>, <span class="string">"盛"</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//女性常用名</span></span><br><span class="line"><span class="built_in">string</span> ME1f[<span class="number">165</span>] = &#123; <span class="string">"秀"</span>, <span class="string">"娟"</span>, <span class="string">"英"</span>, <span class="string">"华"</span>, <span class="string">"慧"</span>, <span class="string">"巧"</span>, <span class="string">"美"</span>, <span class="string">"娜"</span>, <span class="string">"静"</span>, <span class="string">"淑"</span>, <span class="string">"惠"</span>, <span class="string">"珠"</span>, <span class="string">"翠"</span>, <span class="string">"雅"</span>, <span class="string">"芝"</span>, <span class="string">"玉"</span>, <span class="string">"萍"</span>, <span class="string">"红"</span>, <span class="string">"娥"</span>, <span class="string">"玲"</span>, <span class="string">"芬"</span>, <span class="string">"芳"</span>, <span class="string">"燕"</span>, <span class="string">"彩"</span>, <span class="string">"春"</span>, <span class="string">"菊"</span>, <span class="string">"兰"</span>, <span class="string">"凤"</span>, <span class="string">"洁"</span>, <span class="string">"梅"</span>, <span class="string">"琳"</span>, <span class="string">"素"</span>, <span class="string">"云"</span>, <span class="string">"莲"</span>, <span class="string">"真"</span>, <span class="string">"环"</span>, <span class="string">"雪"</span>, <span class="string">"荣"</span>, <span class="string">"爱"</span>, <span class="string">"妹"</span>, <span class="string">"霞"</span>, <span class="string">"香"</span>, <span class="string">"月"</span>, <span class="string">"莺"</span>, <span class="string">"媛"</span>, <span class="string">"艳"</span>, <span class="string">"瑞"</span>, <span class="string">"凡"</span>, <span class="string">"佳"</span>, <span class="string">"嘉"</span>, <span class="string">"琼"</span>, <span class="string">"勤"</span>, <span class="string">"珍"</span>, <span class="string">"贞"</span>, <span class="string">"莉"</span>, <span class="string">"桂"</span>, <span class="string">"娣"</span>, <span class="string">"叶"</span>, <span class="string">"璧"</span>, <span class="string">"璐"</span>, <span class="string">"娅"</span>, <span class="string">"琦"</span>, <span class="string">"晶"</span>, <span class="string">"妍"</span>, <span class="string">"茜"</span>, <span class="string">"秋"</span>, <span class="string">"珊"</span>, <span class="string">"莎"</span>, <span class="string">"锦"</span>, <span class="string">"黛"</span>, <span class="string">"青"</span>, <span class="string">"倩"</span>, <span class="string">"婷"</span>, <span class="string">"姣"</span>, <span class="string">"婉"</span>, <span class="string">"娴"</span>, <span class="string">"瑾"</span>, <span class="string">"颖"</span>, <span class="string">"露"</span>, <span class="string">"瑶"</span>, <span class="string">"怡"</span>, <span class="string">"婵"</span>, <span class="string">"雁"</span>, <span class="string">"蓓"</span>, <span class="string">"纨"</span>, <span class="string">"仪"</span>, <span class="string">"荷"</span>, <span class="string">"丹"</span>, <span class="string">"蓉"</span>, <span class="string">"眉"</span>, <span class="string">"君"</span>, <span class="string">"琴"</span>, <span class="string">"蕊"</span>, <span class="string">"薇"</span>, <span class="string">"菁"</span>, <span class="string">"梦"</span>, <span class="string">"岚"</span>, <span class="string">"苑"</span>, <span class="string">"筠"</span>, <span class="string">"柔"</span>, <span class="string">"竹"</span>, <span class="string">"霭"</span>, <span class="string">"凝"</span>, <span class="string">"晓"</span>, <span class="string">"欢"</span>, <span class="string">"霄"</span>, <span class="string">"枫"</span>, <span class="string">"芸"</span>, <span class="string">"菲"</span>, <span class="string">"寒"</span>, <span class="string">"欣"</span>, <span class="string">"滢"</span>, <span class="string">"伊"</span>, <span class="string">"亚"</span>, <span class="string">"宜"</span>, <span class="string">"可"</span>, <span class="string">"姬"</span>, <span class="string">"舒"</span>, <span class="string">"影"</span>, <span class="string">"荔"</span>, <span class="string">"枝"</span>, <span class="string">"思"</span>, <span class="string">"丽"</span>, <span class="string">"秀"</span>, <span class="string">"飘"</span>, <span class="string">"育"</span>, <span class="string">"馥"</span>, <span class="string">"琦"</span>, <span class="string">"晶"</span>, <span class="string">"妍"</span>, <span class="string">"茜"</span>, <span class="string">"秋"</span>, <span class="string">"珊"</span>, <span class="string">"莎"</span>, <span class="string">"锦"</span>, <span class="string">"黛"</span>, <span class="string">"青"</span>, <span class="string">"倩"</span>, <span class="string">"婷"</span>, <span class="string">"宁"</span>, <span class="string">"蓓"</span>, <span class="string">"纨"</span>, <span class="string">"苑"</span>, <span class="string">"婕"</span>, <span class="string">"馨"</span>, <span class="string">"瑗"</span>, <span class="string">"琰"</span>, <span class="string">"韵"</span>, <span class="string">"融"</span>, <span class="string">"园"</span>, <span class="string">"艺"</span>, <span class="string">"咏"</span>, <span class="string">"卿"</span>, <span class="string">"聪"</span>, <span class="string">"澜"</span>, <span class="string">"纯"</span>, <span class="string">"毓"</span>, <span class="string">"悦"</span>, <span class="string">"昭"</span>, <span class="string">"冰"</span>, <span class="string">"爽"</span>, <span class="string">"琬"</span>, <span class="string">"茗"</span>, <span class="string">"羽"</span>, <span class="string">"希"</span> &#125;;</span><br><span class="line"><span class="built_in">string</span> ME2f[<span class="number">165</span>] = &#123; <span class="string">"秀"</span>, <span class="string">"娟"</span>, <span class="string">"英"</span>, <span class="string">"华"</span>, <span class="string">"慧"</span>, <span class="string">"巧"</span>, <span class="string">"美"</span>, <span class="string">"娜"</span>, <span class="string">"静"</span>, <span class="string">"淑"</span>, <span class="string">"惠"</span>, <span class="string">"珠"</span>, <span class="string">"翠"</span>, <span class="string">"雅"</span>, <span class="string">"芝"</span>, <span class="string">"玉"</span>, <span class="string">"萍"</span>, <span class="string">"红"</span>, <span class="string">"娥"</span>, <span class="string">"玲"</span>, <span class="string">"芬"</span>, <span class="string">"芳"</span>, <span class="string">"燕"</span>, <span class="string">"彩"</span>, <span class="string">"春"</span>, <span class="string">"菊"</span>, <span class="string">"兰"</span>, <span class="string">"凤"</span>, <span class="string">"洁"</span>, <span class="string">"梅"</span>, <span class="string">"琳"</span>, <span class="string">"素"</span>, <span class="string">"云"</span>, <span class="string">"莲"</span>, <span class="string">"真"</span>, <span class="string">"环"</span>, <span class="string">"雪"</span>, <span class="string">"荣"</span>, <span class="string">"爱"</span>, <span class="string">"妹"</span>, <span class="string">"霞"</span>, <span class="string">"香"</span>, <span class="string">"月"</span>, <span class="string">"莺"</span>, <span class="string">"媛"</span>, <span class="string">"艳"</span>, <span class="string">"瑞"</span>, <span class="string">"凡"</span>, <span class="string">"佳"</span>, <span class="string">"嘉"</span>, <span class="string">"琼"</span>, <span class="string">"勤"</span>, <span class="string">"珍"</span>, <span class="string">"贞"</span>, <span class="string">"莉"</span>, <span class="string">"桂"</span>, <span class="string">"娣"</span>, <span class="string">"叶"</span>, <span class="string">"璧"</span>, <span class="string">"璐"</span>, <span class="string">"娅"</span>, <span class="string">"琦"</span>, <span class="string">"晶"</span>, <span class="string">"妍"</span>, <span class="string">"茜"</span>, <span class="string">"秋"</span>, <span class="string">"珊"</span>, <span class="string">"莎"</span>, <span class="string">"锦"</span>, <span class="string">"黛"</span>, <span class="string">"青"</span>, <span class="string">"倩"</span>, <span class="string">"婷"</span>, <span class="string">"姣"</span>, <span class="string">"婉"</span>, <span class="string">"娴"</span>, <span class="string">"瑾"</span>, <span class="string">"颖"</span>, <span class="string">"露"</span>, <span class="string">"瑶"</span>, <span class="string">"怡"</span>, <span class="string">"婵"</span>, <span class="string">"雁"</span>, <span class="string">"蓓"</span>, <span class="string">"纨"</span>, <span class="string">"仪"</span>, <span class="string">"荷"</span>, <span class="string">"丹"</span>, <span class="string">"蓉"</span>, <span class="string">"眉"</span>, <span class="string">"君"</span>, <span class="string">"琴"</span>, <span class="string">"蕊"</span>, <span class="string">"薇"</span>, <span class="string">"菁"</span>, <span class="string">"梦"</span>, <span class="string">"岚"</span>, <span class="string">"苑"</span>, <span class="string">"筠"</span>, <span class="string">"柔"</span>, <span class="string">"竹"</span>, <span class="string">"霭"</span>, <span class="string">"凝"</span>, <span class="string">"晓"</span>, <span class="string">"欢"</span>, <span class="string">"霄"</span>, <span class="string">"枫"</span>, <span class="string">"芸"</span>, <span class="string">"菲"</span>, <span class="string">"寒"</span>, <span class="string">"欣"</span>, <span class="string">"滢"</span>, <span class="string">"伊"</span>, <span class="string">"亚"</span>, <span class="string">"宜"</span>, <span class="string">"可"</span>, <span class="string">"姬"</span>, <span class="string">"舒"</span>, <span class="string">"影"</span>, <span class="string">"荔"</span>, <span class="string">"枝"</span>, <span class="string">"思"</span>, <span class="string">"丽"</span>, <span class="string">"秀"</span>, <span class="string">"飘"</span>, <span class="string">"育"</span>, <span class="string">"馥"</span>, <span class="string">"琦"</span>, <span class="string">"晶"</span>, <span class="string">"妍"</span>, <span class="string">"茜"</span>, <span class="string">"秋"</span>, <span class="string">"珊"</span>, <span class="string">"莎"</span>, <span class="string">"锦"</span>, <span class="string">"黛"</span>, <span class="string">"青"</span>, <span class="string">"倩"</span>, <span class="string">"婷"</span>, <span class="string">"宁"</span>, <span class="string">"蓓"</span>, <span class="string">"纨"</span>, <span class="string">"苑"</span>, <span class="string">"婕"</span>, <span class="string">"馨"</span>, <span class="string">"瑗"</span>, <span class="string">"琰"</span>, <span class="string">"韵"</span>, <span class="string">"融"</span>, <span class="string">"园"</span>, <span class="string">"艺"</span>, <span class="string">"咏"</span>, <span class="string">"卿"</span>, <span class="string">"聪"</span>, <span class="string">"澜"</span>, <span class="string">"纯"</span>, <span class="string">"毓"</span>, <span class="string">"悦"</span>, <span class="string">"昭"</span>, <span class="string">"冰"</span>, <span class="string">"爽"</span>, <span class="string">"琬"</span>, <span class="string">"茗"</span>, <span class="string">"羽"</span>, <span class="string">"希"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> NA1Roll = rnd() % <span class="number">444</span>;<span class="comment">//单姓</span></span><br><span class="line"><span class="keyword">int</span> NA2Roll = rnd() % <span class="number">59</span>;<span class="comment">//复姓</span></span><br><span class="line"><span class="keyword">int</span> ME1mRoll = rnd() % <span class="number">140</span>;<span class="comment">//男名</span></span><br><span class="line"><span class="keyword">int</span> ME2mRoll = rnd() % <span class="number">140</span>;<span class="comment">//男名</span></span><br><span class="line"><span class="keyword">int</span> ME1fRoll = rnd() % <span class="number">165</span>;<span class="comment">//女名</span></span><br><span class="line"><span class="keyword">int</span> ME2fRoll = rnd() % <span class="number">165</span>;<span class="comment">//女名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//单姓单名男</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; NA1[NA1Roll] &lt;&lt; <span class="string">" "</span> &lt;&lt; ME1m[ME1mRoll] &lt;&lt; <span class="string">" 男"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">NA1Roll = rnd() % <span class="number">444</span>;<span class="comment">//单姓</span></span><br><span class="line">ME1mRoll = rnd() % <span class="number">140</span>;<span class="comment">//男名</span></span><br><span class="line"><span class="comment">//单姓单名女</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; NA1[NA1Roll] &lt;&lt; <span class="string">" "</span> &lt;&lt; ME1f[ME1fRoll] &lt;&lt; <span class="string">" 女"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">NA1Roll = rnd() % <span class="number">444</span>;<span class="comment">//单姓</span></span><br><span class="line">ME1mRoll = rnd() % <span class="number">140</span>;<span class="comment">//男名</span></span><br><span class="line">ME2mRoll = rnd() % <span class="number">140</span>;<span class="comment">//男名</span></span><br><span class="line"><span class="comment">//单姓双名男</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; NA1[NA1Roll] &lt;&lt; <span class="string">" "</span> &lt;&lt; ME1m[ME1mRoll] &lt;&lt; ME1m[ME2mRoll] &lt;&lt; <span class="string">" 男"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">NA1Roll = rnd() % <span class="number">444</span>;<span class="comment">//单姓</span></span><br><span class="line">ME1fRoll = rnd() % <span class="number">165</span>;<span class="comment">//女名</span></span><br><span class="line">ME2fRoll = rnd() % <span class="number">165</span>;<span class="comment">//女名</span></span><br><span class="line"><span class="comment">//单姓双名女</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; NA1[NA1Roll] &lt;&lt; <span class="string">" "</span> &lt;&lt; ME1f[ME1fRoll] &lt;&lt; ME1f[ME2fRoll] &lt;&lt; <span class="string">" 女"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(rnd() % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">NA2Roll = rnd() % <span class="number">59</span>;<span class="comment">//复姓</span></span><br><span class="line">ME1mRoll = rnd() % <span class="number">140</span>;<span class="comment">//男名</span></span><br><span class="line"><span class="comment">//复姓单名男</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; NA2[NA2Roll] &lt;&lt; <span class="string">" "</span> &lt;&lt; ME1m[ME1mRoll] &lt;&lt; <span class="string">" 男"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">NA2Roll = rnd() % <span class="number">59</span>;<span class="comment">//复姓</span></span><br><span class="line">ME1fRoll = rnd() % <span class="number">165</span>;<span class="comment">//女名</span></span><br><span class="line"><span class="comment">//复姓单名女</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; NA2[NA2Roll] &lt;&lt; <span class="string">" "</span> &lt;&lt; ME1f[ME1fRoll] &lt;&lt; <span class="string">" 女"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(rnd() % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">NA2Roll = rnd() % <span class="number">59</span>;<span class="comment">//复姓</span></span><br><span class="line">ME1mRoll = rnd() % <span class="number">140</span>;<span class="comment">//男名</span></span><br><span class="line">ME2mRoll = rnd() % <span class="number">140</span>;<span class="comment">//男名</span></span><br><span class="line"><span class="comment">//复姓双名男</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; NA2[NA2Roll] &lt;&lt; <span class="string">" "</span> &lt;&lt; ME1m[ME1mRoll] &lt;&lt; ME2m[ME2mRoll] &lt;&lt; <span class="string">" 男"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">NA2Roll = rnd() % <span class="number">59</span>;<span class="comment">//复姓</span></span><br><span class="line">ME1fRoll = rnd() % <span class="number">165</span>;<span class="comment">//女名</span></span><br><span class="line">ME2fRoll = rnd() % <span class="number">165</span>;<span class="comment">//女名</span></span><br><span class="line"><span class="comment">//复姓双名女</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; NA2[NA2Roll] &lt;&lt; <span class="string">" "</span> &lt;&lt; ME1f[ME1fRoll] &lt;&lt; ME2f[ME2fRoll] &lt;&lt; <span class="string">" 女"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cout &lt;&lt; "\n" &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"name.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; ++i)NAME();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后生成的姓名，姓、名是分开的以及对应的性别，，</p><p>类似这样，，，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">包 梁 男</span><br><span class="line">伊 苑 女</span><br><span class="line">芮 光功 男</span><br><span class="line">从 菊茜 女</span><br><span class="line">澹台 纯 女</span><br><span class="line">宗政 超德 男</span><br><span class="line">钮 生 男</span><br><span class="line">湛 竹 女</span><br><span class="line">叶 泰固 男</span><br><span class="line">仰 彩秋 女</span><br><span class="line">太叔 芝 女</span><br><span class="line">呼延 俊进 男</span><br><span class="line">经 谦 男</span><br><span class="line">宓 娥 女</span><br><span class="line">韩 贵有 男</span><br></pre></td></tr></table></figure><p>(end)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做项目的时候有时会用到自己造一个数据库，数值信息都可以随便rand出来，，但是中文姓名不太好处理，，&lt;a href=&quot;https://www.cnblogs.com/kindom/p/3963610.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;最后借鉴了这篇博客&lt;/a&gt; ，， 把他的一些东西改了改，够用了，，&lt;/p&gt;
    
    </summary>
    
      <category term="小工具" scheme="http://blog.31415x.cf/categories/%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="笔记" scheme="http://blog.31415x.cf/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="工程" scheme="http://blog.31415x.cf/tags/%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #585 (Div. 2)</title>
    <link href="http://blog.31415x.cf/2019/09/19/Codeforces-Round-585-Div-2/"/>
    <id>http://blog.31415x.cf/2019/09/19/Codeforces-Round-585-Div-2/</id>
    <published>2019-09-19T14:08:30.000Z</published>
    <updated>2019-09-19T14:56:13.682Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>感觉很硬核啊这场，，越往后越做不动，，，emmmm，，，（这场是奔着最后一题 2sat 来的，，，上次学这玩意是在今年的3、4月份把，，，早忘得差不多了，，，</p><a id="more"></a><h1 id="A-Yellow-Cards"><a href="#A-Yellow-Cards" class="headerlink" title="A. Yellow Cards"></a>A. Yellow Cards</h1><p>A题较简单，，贪心就行了，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">2e5</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[maxn], n;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> n, a1, a2, k1, k2;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a1 &gt;&gt; a2 &gt;&gt; k1 &gt;&gt; k2 &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> mi = <span class="number">0</span>, mx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a1 * (k1 - <span class="number">1</span>) + a2 * (k2 - <span class="number">1</span>) &gt;= n)mi = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> mi = n - a1 * (k1 - <span class="number">1</span>) - a2 * (k2 - <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(k1 &lt;= k2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(n &gt;= k1 &amp;&amp; a1)</span><br><span class="line">        &#123;</span><br><span class="line">            --a1;</span><br><span class="line">            n -= k1;</span><br><span class="line">            ++mx;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(n &gt;= k2 &amp;&amp; a2)</span><br><span class="line">        &#123;</span><br><span class="line">            --a2;</span><br><span class="line">            n -= k2;</span><br><span class="line">            ++mx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(n &gt;= k2 &amp;&amp; a2)</span><br><span class="line">        &#123;</span><br><span class="line">            --a2;</span><br><span class="line">            n -= k2;</span><br><span class="line">            ++mx;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(n &gt;= k1 &amp;&amp; a1)</span><br><span class="line">        &#123;</span><br><span class="line">            --a1;</span><br><span class="line">            n -= k1;</span><br><span class="line">            ++mx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; mi &lt;&lt; <span class="string">" "</span> &lt;&lt; mx &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-The-Number-of-Products"><a href="#B-The-Number-of-Products" class="headerlink" title="B. The Number of Products"></a>B. The Number of Products</h1><p>A掉A题，，感觉还行，，以为后面的都很简单，，然后就在B、C题卡了半天，，</p><p>题意就是一个序列中，正区间和负区间的个数有多少，，这里的区间指的是区间积，，，</p><p>刚开始以为暴力可过，，<del>（口胡</del> ，，然后交了一发果断T了，，，</p><p>又推了一会发现可以枚举左端点所在的区间，，然后他的贡献就是后面的+2,,+4,,+6等等区间的和的积，，所以只要预处理一下每一个用负点分割的左闭右开的区间的长度，，然后处理成隔一个的后缀和就行了，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">2e5</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[maxn], n;</span><br><span class="line"><span class="keyword">int</span> p[maxn], tot;</span><br><span class="line">ll pp[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span>(a[i] &lt; <span class="number">0</span>)</span><br><span class="line">            p[++tot] = i;</span><br><span class="line">    p[tot + <span class="number">1</span>] = n + <span class="number">1</span>; p[tot + <span class="number">2</span>] = n + <span class="number">1</span>;</span><br><span class="line">    ll ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</span><br><span class="line">    ++tot;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = tot; i &gt;= <span class="number">1</span>; --i)pp[i] = p[i] - p[i - <span class="number">1</span>];<span class="comment">//--pp[1];</span></span><br><span class="line">    <span class="comment">// for(int i = 1; i &lt;= tot; ++i)cout &lt;&lt; pp[i] &lt;&lt; " ";cout &lt;&lt; endl;</span></span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = tot - <span class="number">2</span>; i &gt;= <span class="number">1</span>; --i)pp[i] += pp[i + <span class="number">2</span>];</span><br><span class="line">    <span class="comment">// for(int i = 1; i &lt;= tot; ++i)cout &lt;&lt; pp[i] &lt;&lt; " ";cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// int x = p[i] - p[i - 1] - 1;</span></span><br><span class="line">        ll x = pp[i] - pp[i + <span class="number">2</span>];</span><br><span class="line">        ll y = pp[i + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// cout &lt;&lt; x &lt;&lt; "-" &lt;&lt; y &lt;&lt; endl;</span></span><br><span class="line">        ans1 += x * y; </span><br><span class="line">        y = pp[i + <span class="number">2</span>];</span><br><span class="line">        ans2 += x * y;</span><br><span class="line">        --x;</span><br><span class="line">        <span class="keyword">while</span>(x)ans2 += x--;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans1 &lt;&lt; <span class="string">" "</span> &lt;&lt; ans2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Swap-Letters"><a href="#C-Swap-Letters" class="headerlink" title="C. Swap Letters"></a>C. Swap Letters</h1><p>题意就是两个串，，只含有ab，，然后每一次的操作是挑第一个串中的一个和第二个串中的一个交换，，然后问题最少的操作次数下使得两串一样，，</p><p>我当时的思路是用一个 r 表示右端已经修改的位置，，然后遍历一遍，，当第i个位置的不同时，，利用r向后找一个可以交换的，，口胡了一下就直接敲了，，，然后不断的发现逻辑上的bug，，，emmmm，，一直改到成了N方的解法，，，，</p><p>看了一下别人的思路，，显然优先考虑相同的两个进行操作，，剩下的也只能操作偶数个，，使用的操作次数就是两次，，一次是反转其中一个，，然后像前面的就行了，，，，奇数个就是无解，，，（会爆ll</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">2e5</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> s[maxn], t[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s &gt;&gt; t;</span><br><span class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; ans;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] != t[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// r = min(r, i + 1);</span></span><br><span class="line">            r = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(!(t[r] == t[i] &amp;&amp; t[r] != s[r]) &amp;&amp; r &lt; n)++r;</span><br><span class="line">            <span class="keyword">if</span>(r &gt;= n)</span><br><span class="line">            &#123;</span><br><span class="line">                r = i + <span class="number">1</span>;</span><br><span class="line">                swap(s[i], t[i]);</span><br><span class="line">                ans.push_back(make_pair(i + <span class="number">1</span>, i + <span class="number">1</span>));</span><br><span class="line">                <span class="comment">// cout &lt;&lt; "----" &lt;&lt; endl &lt;&lt; s &lt;&lt; endl &lt;&lt; t &lt;&lt; endl;</span></span><br><span class="line">                <span class="keyword">while</span>(!(t[r] == t[i] &amp;&amp; t[r] != s[r]) &amp;&amp; r &lt; n)++r;</span><br><span class="line">                <span class="keyword">if</span>(r &gt;= n)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; i + 1 &lt;&lt; r + 1 &lt;&lt; endl;</span></span><br><span class="line">            ans.push_back(make_pair(i + <span class="number">1</span>, r + <span class="number">1</span>));</span><br><span class="line">            swap(s[i], t[r]);</span><br><span class="line">        <span class="comment">// cout &lt;&lt; s &lt;&lt; endl &lt;&lt; t &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i: ans)<span class="built_in">cout</span> &lt;&lt; i.first &lt;&lt; <span class="string">" "</span> &lt;&lt; i.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Ticket-Game"><a href="#D-Ticket-Game" class="headerlink" title="D. Ticket Game"></a>D. Ticket Game</h1><p>博弈？？ 先弃了</p><p>感觉是一个好多情况的分类讨论题，，，</p><h1 id="E-Marbles"><a href="#E-Marbles" class="headerlink" title="E. Marbles"></a>E. Marbles</h1><p>状压dp，，，emmmm，，扔了，，</p><h1 id="F-Radio-Stations"><a href="#F-Radio-Stations" class="headerlink" title="F. Radio Stations"></a>F. Radio Stations</h1><p>重点来了，，，</p><p>这题的题干是真的长，，长篇阅读理解，，，emmmmmm</p><p>题目的大意是这样的：一个城市要弄一个发射塔，，它的功率是 $f (1\le f \le M)$ ，</p><p>有 $p$ 个节目，，对于每一个都有一个需要发射的功率范围： $(L_i, R_i)$ ，，也就是说当 $f$ 在这个范围时用户才能收到这个节目，，，</p><p>然后有一些需求，，数量是n，，，这些需求这样描述： $(a_i, b_i)$ ，，表示对于第 $i$ 个需求 <strong>至少</strong> 需要满足一个，，简单说就是至少要挑一个，，，</p><p>还有一些节目间的限制条件： $(u, v)$ ，，表示选了 $u$ 就不能选 $v$ ，，，反之亦然，，</p><p>然后问你这个发射塔的频率 $f$ 选择多少时使得 $n$ 个需求都可以满足</p><p>如果这题没有 $f$ 这个限制条件，这题2sat可直接过，，但是不行，，</p><p>当然可以枚举 $f$ ，，从1到M，，但是这样时间复杂度就是n方，，，T穿，，，</p><p>只能将 $f$ 放在我们建立的限制图中，，但是怎么建呢，，，</p><p>以前做的2sat题目都是固定的n对物品中每对中选择一个，，其中一些物品有限制条件，，这样做了很多题之后潜移默化的形成了一个固定的模型，，只有这n个物品可以进行操作，，这样的思想也使得我在刚读懂题时即使出现过将 p 个节目分成选或不选这样建图，，但是因为这样不会处理f，，于是放弃这种思路，，，向着将n个需求作为图中的点，，然后有限制的条件间连边，，这样的思考就不得不去枚举f，，，于是只能过小数据，，</p><p>这题的解决方法是 <strong>在n个节目的后面再加M个可以选择的f的情况</strong> ，，，这样一层点表示选这个情况，，第二层的点表示不选这个点，，建立相应的限制关系，，这样就可以跑一遍2sat得到两个想得到的东西，，，</p><p>前面的点的限制条件很好处理，，，按题意搞就行了</p><p>接下来处理后面的这M个点的情况，，，如果我们直接枚举每一个f可行解，，，那么和前面的暴力没啥区别，，，一样会T，，，</p><p><a href="https://blog.csdn.net/weixin_44231553/article/details/100927625" target="_blank" rel="noopener">参考了一个博主的思路</a></p><p>这里我的理解是对于这些可行解都向前连边，，也就是 <code>选f&gt;=l+1必须选f&gt;=l</code> 这样就可以将区间的一个表示的限制条件转化成一个端点的表示，，（感觉有点类似差分的思想，，区间的操作改成端点的操作，，，</p><p>这样建图，，跑一边就行了，，，，最后输出答案，，</p><p>用tarjan的话判断的条件是两个点间是否不在一个scc中，，然后取最小就行了，，，</p><p>用染色法的话需要跑的点只是前半段p个，，，</p><h2 id="染色法"><a href="#染色法" class="headerlink" title="染色法"></a>染色法</h2><p>栈写反了，，，wa了好几发，，，，（丢人，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">4e5</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n, p, M, m, all;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> sta[maxn], top;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[u &gt; all ? u - all : u + all])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(vis[u])<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    sta[++top] = u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>(!dfs(edge[i].to))    </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">twosat</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i] || vis[i + all])<span class="keyword">continue</span>;</span><br><span class="line">        top = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!dfs(i))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(~top)vis[sta[top--]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(!dfs(i + all))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; p &gt;&gt; M &gt;&gt; m;</span><br><span class="line">    all = p + M;</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        addedge(u + all, v);</span><br><span class="line">        addedge(v + all, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        addedge(i, u + p); addedge(u + p + all, i + all);</span><br><span class="line">        <span class="keyword">if</span>(v &lt; M)addedge(v + p + <span class="number">1</span>, i + all), addedge(i, v + p + all + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        addedge(u, v + all);</span><br><span class="line">        addedge(v, u + all);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; M; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        addedge(i + p + <span class="number">1</span>, i + p);</span><br><span class="line">        addedge(i + p + all, i + p + <span class="number">1</span> + all);</span><br><span class="line">        <span class="comment">// addedge(i + p, i + p + 1);</span></span><br><span class="line">        <span class="comment">// addedge(i + p + 1 + all, i + p + all);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(twosat(p))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; ++i)</span><br><span class="line">            <span class="keyword">if</span>(vis[i])</span><br><span class="line">                ans.push_back(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = p + <span class="number">1</span>; i &lt;= p + M; ++i)</span><br><span class="line">            <span class="keyword">if</span>(vis[i])</span><br><span class="line">            &#123;</span><br><span class="line">                f = i - p;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(!f)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="string">" "</span> &lt;&lt; f &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i: ans)<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tarjan"><a href="#tarjan" class="headerlink" title="tarjan"></a>tarjan</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">4e5</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n, p, M, m, all;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> low[maxn], dfn[maxn], sta[maxn], belong[maxn];</span><br><span class="line"><span class="keyword">int</span> idx, top;</span><br><span class="line"><span class="keyword">int</span> scc;</span><br><span class="line"><span class="keyword">bool</span> insta[maxn];</span><br><span class="line"><span class="keyword">int</span> num[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    low[u] = dfn[u] = ++idx;</span><br><span class="line">    sta[top++] = u;</span><br><span class="line">    insta[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[v])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(v);</span><br><span class="line">            <span class="keyword">if</span>(low[u] &gt; low[v])low[u] = low[v];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(insta[v] &amp;&amp; low[u] &gt; dfn[v])</span><br><span class="line">            low[u] = dfn[v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(low[u] == dfn[u])</span><br><span class="line">    &#123;</span><br><span class="line">        ++scc;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            v = sta[--top];</span><br><span class="line">            insta[v] = <span class="literal">false</span>;</span><br><span class="line">            belong[v] = scc;</span><br><span class="line">            ++num[scc];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(v != u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">twosat</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span> dfn);</span><br><span class="line">    <span class="built_in">memset</span>(insta, <span class="literal">false</span>, <span class="keyword">sizeof</span> insta);</span><br><span class="line">    <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span> num);</span><br><span class="line">    idx = scc = top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i])</span><br><span class="line">            tarjan(i);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// for(int i = 1; i &lt;= p; ++i)cout &lt;&lt; belong[i] &lt;&lt; " ";cout &lt;&lt; " ";</span></span><br><span class="line">    <span class="comment">// for(int i = 1; i &lt;= M; ++i)cout &lt;&lt; belong[i + p] &lt;&lt; " ";cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// for(int i = 1; i &lt;= p; ++i)cout &lt;&lt; belong[i + all] &lt;&lt; " ";cout &lt;&lt; " ";</span></span><br><span class="line">    <span class="comment">// for(int i = 1; i &lt;= M; ++i)cout &lt;&lt; belong[i + p + all] &lt;&lt; " ";cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; ++i)</span><br><span class="line">        <span class="keyword">if</span>(belong[i] &lt; belong[i + all])</span><br><span class="line">            ans.push_back(i);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(belong[i] == belong[i + all])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; ++i)</span><br><span class="line">        <span class="keyword">if</span>(belong[i + p] &lt; belong[i + p + all])</span><br><span class="line">            f = i;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(belong[i + p] == belong[i + p + all])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="string">" "</span> &lt;&lt; f &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i: ans)<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; p &gt;&gt; M &gt;&gt; m;</span><br><span class="line">    all = p + M;</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        addedge(u + all, v);</span><br><span class="line">        addedge(v + all, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        addedge(i, u + p); addedge(u + p + all, i + all);</span><br><span class="line">        <span class="keyword">if</span>(v &lt; M)addedge(v + p + <span class="number">1</span>, i + all), addedge(i, v + p + all + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        addedge(u, v + all);</span><br><span class="line">        addedge(v, u + all);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; M; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        addedge(i + p + <span class="number">1</span>, i + p);</span><br><span class="line">        addedge(i + p + all, i + p + <span class="number">1</span> + all);</span><br><span class="line">        <span class="comment">// addedge(i + p, i + p + 1);</span></span><br><span class="line">        <span class="comment">// addedge(i + p + 1 + all, i + p + all);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!twosat(all &lt;&lt; <span class="number">1</span>))<span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题的启发很大，，，2sat不一定就是解决一种选择下的解，，，只要这些不同种类的物品间有限制条件就可以放在一起，，，</p><p>（end)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感觉很硬核啊这场，，越往后越做不动，，，emmmm，，，（这场是奔着最后一题 2sat 来的，，，上次学这玩意是在今年的3、4月份把，，，早忘得差不多了，，，&lt;/p&gt;
    
    </summary>
    
      <category term="Codeforces" scheme="http://blog.31415x.cf/categories/Codeforces/"/>
    
    
      <category term="刷题" scheme="http://blog.31415x.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="ACM" scheme="http://blog.31415x.cf/tags/ACM/"/>
    
  </entry>
  
</feed>
