<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>31415926535x</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.31415x.cf/"/>
  <updated>2019-07-28T12:55:14.997Z</updated>
  <id>http://www.31415x.cf/</id>
  
  <author>
    <name>31415926535x</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019 Multi-University Training Contest 2</title>
    <link href="http://www.31415x.cf/2019/07/24/2019-Multi-University-Training-Contest-2/"/>
    <id>http://www.31415x.cf/2019/07/24/2019-Multi-University-Training-Contest-2/</id>
    <published>2019-07-24T13:47:42.000Z</published>
    <updated>2019-07-28T12:55:14.997Z</updated>
    
    <content type="html"><![CDATA[<p>补题ing</p><a id="more"></a><h1 id="Harmonious-Army"><a href="#Harmonious-Army" class="headerlink" title="Harmonious Army"></a>Harmonious Army</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdlib&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;set&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cmath&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;queue&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;stack&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;ctime&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">    ll cap, flow;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> gap[maxn], dep[maxn], cur[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll w, ll rw = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].to = v; edge[tot].cap = w; edge[tot].flow = <span class="number">0</span>;</span><br><span class="line">    edge[tot].nxt = head[u]; head[u] = tot++;</span><br><span class="line">    edge[tot].to = u; edge[tot].cap = rw; edge[tot].flow = <span class="number">0</span>;</span><br><span class="line">    edge[tot].nxt = head[v]; head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> q[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dep, <span class="number">-1</span>, <span class="keyword">sizeof</span> dep);</span><br><span class="line">    <span class="built_in">memset</span>(gap, <span class="number">0</span>, <span class="keyword">sizeof</span> gap);</span><br><span class="line">    gap[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> front = <span class="number">0</span>, rear = <span class="number">0</span>;</span><br><span class="line">    dep[t] = <span class="number">0</span>;</span><br><span class="line">    q[rear++] = t;</span><br><span class="line">    <span class="keyword">while</span>(front != rear)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q[front++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dep[v] != <span class="number">-1</span>)<span class="keyword">continue</span>;</span><br><span class="line">            q[rear++] = v;</span><br><span class="line">            dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">            ++gap[dep[v]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sta[maxn];</span><br><span class="line"><span class="function">ll <span class="title">isap</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bfs(s, t);</span><br><span class="line">    <span class="built_in">memcpy</span>(cur, head, <span class="keyword">sizeof</span> head);</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> u = s;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(dep[s] &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(u == t)</span><br><span class="line">        &#123;</span><br><span class="line">            ll min = linf;</span><br><span class="line">            <span class="keyword">int</span> inser;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; top; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(min &gt; edge[sta[i]].cap - edge[sta[i]].flow)</span><br><span class="line">                &#123;</span><br><span class="line">                    min = edge[sta[i]].cap - edge[sta[i]].flow;</span><br><span class="line">                    inser = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; top; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                edge[sta[i]].flow += min;</span><br><span class="line">                edge[sta[i] ^ <span class="number">1</span>].flow -= min;</span><br><span class="line">            &#125;</span><br><span class="line">            ans += min;</span><br><span class="line">            top = inser;</span><br><span class="line">            u = edge[sta[top] ^ <span class="number">1</span>].to;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = cur[u]; ~i; i = edge[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dep[v] + <span class="number">1</span> == dep[u])</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                cur[u] = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">        &#123;</span><br><span class="line">            sta[top++] = cur[u];</span><br><span class="line">            u = v;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> min = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dep[edge[i].to] &lt; min)</span><br><span class="line">            &#123;</span><br><span class="line">                min = dep[edge[i].to];</span><br><span class="line">                cur[u] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        --gap[dep[u]];</span><br><span class="line">        <span class="keyword">if</span>(!gap[dep[u]])<span class="keyword">return</span> ans;</span><br><span class="line">        dep[u] = min + <span class="number">1</span>;</span><br><span class="line">        ++gap[dep[u]];</span><br><span class="line">        <span class="keyword">if</span>(u != s)u = edge[sta[--top] ^ <span class="number">1</span>].to;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        ll a, b, c;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>, t = n + <span class="number">1</span>;</span><br><span class="line">        ll sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">            addedge(s, u, a + b);</span><br><span class="line">            addedge(s, v, a + b);</span><br><span class="line">            addedge(u, v, a + c - <span class="number">2</span> * b);</span><br><span class="line">            addedge(v, u, a + c - <span class="number">2</span> * b);</span><br><span class="line">            addedge(u, t, b + c);</span><br><span class="line">            addedge(v, t, b + c);</span><br><span class="line">            sum += a + b + c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sum - isap(s, t, n + <span class="number">2</span>) / <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;补题ing&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2019 Multi-University Training Contest 1</title>
    <link href="http://www.31415x.cf/2019/07/24/%C2%962019-Multi-University-Training-Contest-1/"/>
    <id>http://www.31415x.cf/2019/07/24/2019-Multi-University-Training-Contest-1/</id>
    <published>2019-07-24T13:47:37.000Z</published>
    <updated>2019-07-28T12:55:38.730Z</updated>
    
    <content type="html"><![CDATA[<p>补题ing</p><a id="more"></a><h1 id="Operation"><a href="#Operation" class="headerlink" title="Operation"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6579" target="_blank" rel="noopener">Operation</a></h1><p>这题的大意是对于给定的数组，有两个操作，一个是询问一个区间的异或和的最大值，，另一个是在这个数组后面增加一个值，，，</p><p>这题也是诱使我学线性基的原因，，</p><p>题解说直接数据结构维护会T，，我也没试，，正解是贪心的维护一个 <strong>前缀线性基</strong> ，在每插入一个数时，，如果能插入，，尽可能的插到高位，，（这样可以保证靠近r的可以插入的数尽可能的在高位，，</p><p>也就是说，，对于任意的任意的一个区间，，不管它的长度多大，，，他的线性基最多是30个（针对这题），，，所以我们只需要维护r前面出现的较晚的新基，，这样每次询问，，都看得在r处的线性基中出现比l晚的基即可，，为了实现这个过程，，，给每一个线性基中的每一位都加一个标志位 $p_i$ ，， 在插入一个新的数时，，，尽可能的把他放在高位，，，（碰到一个可以插入的位置时，把他插在这里，，然后下推其它的基，，，</p><p>这题不能莽，直接开ll，，，会mle，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdlib&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;set&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cmath&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;queue&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;stack&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;ctime&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;random&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinearBasis</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">int</span> type;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> maxbase = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    type a[maxbase + <span class="number">1</span>];</span><br><span class="line">    type p[maxbase + <span class="number">1</span>];</span><br><span class="line">    LinearBasis()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">        <span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span> p);</span><br><span class="line">    &#125;</span><br><span class="line">    LinearBasis(type *x, <span class="keyword">int</span> n)</span><br><span class="line">    &#123;</span><br><span class="line">        LinearBasis();</span><br><span class="line">        build(x, n); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(type *x, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            insert(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">        <span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span> p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(type t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//暴力插入一个数，维护的是一个上三角型的线性基矩阵，时间复杂度低，当待插入元素能插入时，返回true</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t &amp; (<span class="number">1l</span>l &lt;&lt; i))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!a[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    a[i] = t;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                t ^= a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">0</span>)flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">insert2</span><span class="params">(type t, type pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t &amp; (<span class="number">1l</span>l &lt;&lt; i))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!a[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    a[i] = t;</span><br><span class="line">                    p[i] = pos;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(pos &gt; p[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    swap(pos, p[i]);</span><br><span class="line">                    swap(t, a[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                t ^= a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">0</span>)flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(type t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 询问t是否可以被当前线性基表示，不插入</span></span><br><span class="line">        <span class="keyword">if</span>(t &gt; queryMax())<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">0</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t &amp; (<span class="number">1l</span>l &lt;&lt; i))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!a[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                t ^= a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(type t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//插入一个线性基，利用高斯消元法维护一个对角矩阵</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t &gt;&gt; i &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i])t ^= a[i];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    a[i] = t;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)<span class="keyword">if</span>(a[j] &amp;&amp; (a[i] &gt;&gt; j &amp; <span class="number">1</span>))a[i] ^= a[j];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= maxbase; ++j)<span class="keyword">if</span>(a[j] &gt;&gt; j &amp; <span class="number">1</span>)a[j] ^= a[i];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LinearBasis <span class="title">merge</span><span class="params">(<span class="keyword">const</span> LinearBasis &amp;l1, <span class="keyword">const</span> LinearBasis &amp;l2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 得到两个线性基的并</span></span><br><span class="line">        LinearBasis ret = l1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span>(l2.a[i])</span><br><span class="line">                ret.insert(l2.a[i]);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LinearBasis <span class="title">intersection</span><span class="params">(<span class="keyword">const</span> LinearBasis &amp;l1, <span class="keyword">const</span> LinearBasis &amp;l2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//得到两个线性基的交</span></span><br><span class="line">        LinearBasis all, ret, full;</span><br><span class="line">        ret.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            all.a[i] = l1.a[i];</span><br><span class="line">            full.a[i] = <span class="number">1l</span>l &lt;&lt; i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(l2.a[i])</span><br><span class="line">            &#123;</span><br><span class="line">                type v = l2.a[i], k = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = maxbase; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(v &amp; (<span class="number">1l</span>l &lt;&lt; j))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(all.a[j])</span><br><span class="line">                        &#123;</span><br><span class="line">                            v ^= all.a[j];</span><br><span class="line">                            k ^= full.a[j];</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">// l2's basis is not in l1's;</span></span><br><span class="line">                            flag = <span class="literal">false</span>;</span><br><span class="line">                            all.a[j] = v;</span><br><span class="line">                            full.a[j] = k;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(flag)</span><br><span class="line">                &#123;</span><br><span class="line">                    type v = <span class="number">0</span>; <span class="comment">// get intersection by k;</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = maxbase; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(k &amp; (<span class="number">1l</span>l &lt;&lt; j))</span><br><span class="line">                        &#123;</span><br><span class="line">                            v ^= l1.a[j];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ret.insert(v);  <span class="comment">//save ans</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//询问最值</span></span><br><span class="line">    <span class="function">type <span class="title">queryMax</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        type ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span>((ret ^ a[i]) &gt; ret)</span><br><span class="line">                ret ^= a[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">type <span class="title">queryMax</span><span class="params">(type l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        type ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span>((ret ^ a[i]) &gt; ret &amp;&amp; l &lt;= p[i])</span><br><span class="line">                ret ^= a[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">type <span class="title">queryMin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= maxbase; ++i)</span><br><span class="line">            <span class="keyword">if</span>(a[i])</span><br><span class="line">                <span class="keyword">return</span> a[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;lb[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        ll x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">            lb[i] = lb[i - <span class="number">1</span>]; </span><br><span class="line">            lb[i].insert2(x, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> op;</span><br><span class="line">        ll lstans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line">            <span class="keyword">if</span>(!op)</span><br><span class="line">            &#123;</span><br><span class="line">                ll l, r;<span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line">                l = (l ^ lstans) % n + <span class="number">1</span>;</span><br><span class="line">                r = (r ^ lstans) % n + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(l &gt; r)swap(l, r);</span><br><span class="line">                lstans = lb[r].queryMax(l);</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; lstans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ll x;<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">                x ^= lstans;</span><br><span class="line">                lb[++n] = lb[n - <span class="number">1</span>];</span><br><span class="line">                lb[n].insert2(x, n);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Path"><a href="#Path" class="headerlink" title="Path"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6582" target="_blank" rel="noopener">Path</a></h1><p>给你张图，，然后找到所有的最短路，建一个新图，，，删去最少权值和的边使得新图不连通，，求这个权值，，</p><p>跑两边最短路，，删点建新图，，然后跑网络流，求最小割就行了，，，</p><p>不会删点自闭到结束，，，嫌两边dijkstra麻烦一直没写，，知道知道正解就是这个，，QAQ。。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;set&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cmath&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;stack&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">    ll w;</span><br><span class="line">&#125;edge1[<span class="number">2</span>][maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis1[<span class="number">2</span>][maxn];</span><br><span class="line">ll dis1[<span class="number">2</span>][maxn];</span><br><span class="line"><span class="keyword">int</span> tot1, tot2, head1[<span class="number">2</span>][maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init1</span><span class="params">(<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot1 = tot2 = <span class="number">0</span>;</span><br><span class="line">    m &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// for(int i = 0; i &lt;= m; ++i)</span></span><br><span class="line">        <span class="comment">// head1[0][i] = head1[1][i] = -1;</span></span><br><span class="line">    <span class="built_in">memset</span>(head1, <span class="number">-1</span>, <span class="keyword">sizeof</span> head1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge1[<span class="number">0</span>][tot1].to = v;</span><br><span class="line">    edge1[<span class="number">0</span>][tot1].w = w;</span><br><span class="line">    edge1[<span class="number">0</span>][tot1].nxt = head1[<span class="number">0</span>][u];</span><br><span class="line">    head1[<span class="number">0</span>][u] = tot1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge1[<span class="number">1</span>][tot2].to = v;</span><br><span class="line">    edge1[<span class="number">1</span>][tot2].w = w;</span><br><span class="line">    edge1[<span class="number">1</span>][tot2].nxt = head1[<span class="number">1</span>][u];</span><br><span class="line">    head1[<span class="number">1</span>][u] = tot2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    ll w;</span><br><span class="line">    node()&#123;&#125;</span><br><span class="line">    node(<span class="keyword">int</span> _v, ll _w)&#123;v = _v; w = _w;&#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;r)<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> w &gt; r.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node&gt; Q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijktra</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> s, <span class="keyword">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// memset(vis1, false, sizeof vis1);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)vis1[now][i] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)dis1[now][i] = linf;</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty())Q.pop();</span><br><span class="line">    dis1[now][s] = <span class="number">0</span>;</span><br><span class="line">    Q.push(node(s, <span class="number">0</span>));</span><br><span class="line">    node t;</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        t = Q.top(); Q.pop();</span><br><span class="line">        <span class="keyword">int</span> u = t.v;</span><br><span class="line">        <span class="keyword">if</span>(vis1[now][u])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// if(visdfs[u])continue;</span></span><br><span class="line">        vis1[now][u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head1[now][u]; ~i; i = edge1[now][i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge1[now][i].to;</span><br><span class="line">            ll w = edge1[now][i].w;</span><br><span class="line">            <span class="keyword">if</span>(!vis1[now][v] &amp;&amp; dis1[now][v] &gt; dis1[now][u] + w)</span><br><span class="line">            &#123;</span><br><span class="line">                dis1[now][v] = dis1[now][u] + w;</span><br><span class="line">                Q.push(node(v, dis1[now][v]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**************isap ***************/</span></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> u, v, z;</span><br><span class="line"><span class="keyword">int</span> gap[maxn &lt;&lt; <span class="number">1</span>];          </span><br><span class="line"><span class="keyword">int</span> cur[maxn &lt;&lt; <span class="number">1</span>];          </span><br><span class="line"><span class="keyword">int</span> q[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line">ll dis[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">    ll cap;</span><br><span class="line">    ll flow;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tol, head[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tol = <span class="number">0</span>;            <span class="comment">//？？？</span></span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    <span class="comment">// m &lt;&lt;= 1;</span></span><br><span class="line">    <span class="comment">// for(int i = 0; i &lt;= m; ++i)head[i] = -1;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u , <span class="keyword">int</span> v , ll w , ll rw = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tol].to = v;edge[tol].cap = w;edge[tol].flow = <span class="number">0</span>;</span><br><span class="line">    edge[tol].next = head[u];head[u] = tol++;</span><br><span class="line">    edge[tol].to = u; edge[tol].cap = rw;edge[tol].flow = <span class="number">0</span>;</span><br><span class="line">    edge[tol].next = head[v];head[v] = tol++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s , <span class="keyword">int</span> t, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//bfs一次得到从汇点开始的层次图</span></span><br><span class="line">    <span class="built_in">memset</span>(dis , <span class="number">-1</span> , <span class="keyword">sizeof</span> dis);</span><br><span class="line">    <span class="built_in">memset</span>(gap , <span class="number">0</span> , <span class="keyword">sizeof</span> gap);</span><br><span class="line">    <span class="comment">// for(int i = 0; i &lt;= n; ++i)dis[i] = -1;</span></span><br><span class="line">    <span class="comment">// for(int i = 0; i &lt;= n; ++i)gap[i] = 0;</span></span><br><span class="line">    gap[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> front = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> rear = <span class="number">0</span>;</span><br><span class="line">    dis[t] = <span class="number">0</span>;         <span class="comment">//汇点的编号是0</span></span><br><span class="line">    q[rear++] = t;</span><br><span class="line">    <span class="keyword">while</span>(front != rear)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//这里bfs应该用的逆图</span></span><br><span class="line">        <span class="keyword">int</span> u = q[front++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; u &lt;&lt; "-" &lt;&lt; v &lt;&lt; endl;</span></span><br><span class="line">            <span class="keyword">if</span>(~dis[v]) <span class="keyword">continue</span>;</span><br><span class="line">            q[rear++] = v;</span><br><span class="line">            dis[v] = dis[u] + <span class="number">1</span>;    <span class="comment">//相邻编号递增</span></span><br><span class="line">            ++gap[dis[v]];          <span class="comment">//对应编号的点的数量增一</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sta[maxn];</span><br><span class="line"><span class="function">ll <span class="title">isap</span><span class="params">(<span class="keyword">int</span> s , <span class="keyword">int</span> t , <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bfs(s , t, n);                     <span class="comment">//建一次层次图</span></span><br><span class="line">    <span class="built_in">memcpy</span>(cur , head , <span class="keyword">sizeof</span> head);</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> u = s;</span><br><span class="line">    ll maxflow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(dis[s] &lt; n)               <span class="comment">//最大的编号只可能是n-1，大于说明出现断层</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(u == t)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//当找到一条增广路时，更新这条路上的流量</span></span><br><span class="line">            ll min = inf;</span><br><span class="line">            <span class="keyword">int</span> inser;              <span class="comment">//记录回退点</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; top; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//找到增广路上的最小残余流量</span></span><br><span class="line">                <span class="keyword">if</span>(min &gt; edge[sta[i]].cap - edge[sta[i]].flow)</span><br><span class="line">                &#123;</span><br><span class="line">                    min = edge[sta[i]].cap - edge[sta[i]].flow;</span><br><span class="line">                    inser = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; top; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                edge[sta[i]].flow += min;</span><br><span class="line">                edge[sta[i] ^ <span class="number">1</span>].flow -= min;</span><br><span class="line">            &#125;</span><br><span class="line">            maxflow += min;</span><br><span class="line">            <span class="comment">//回退</span></span><br><span class="line">            top = inser;</span><br><span class="line">            u = edge[sta[top] ^ <span class="number">1</span>].to;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = cur[u]; ~i; i = edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//找到一条从u出发的可行路径</span></span><br><span class="line">            <span class="comment">//满足残余流量大于零并且v是u的下一层</span></span><br><span class="line">            v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dis[v] + <span class="number">1</span> == dis[u])</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                cur[u] = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//存在这样的可行路径时压栈保存</span></span><br><span class="line">            <span class="comment">//continue继续找</span></span><br><span class="line">            sta[top++] = cur[u];</span><br><span class="line">            u = v;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ll min = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dis[edge[i].to] &lt; min)</span><br><span class="line">            &#123;</span><br><span class="line">                min = dis[edge[i].to];</span><br><span class="line">                cur[u] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        --gap[dis[u]];                          <span class="comment">//该编号的数量减一</span></span><br><span class="line">        <span class="keyword">if</span>(!gap[dis[u]])    <span class="keyword">return</span> maxflow;     <span class="comment">//出现断层时退出</span></span><br><span class="line">        dis[u] = min + <span class="number">1</span>;</span><br><span class="line">        ++gap[dis[u]];</span><br><span class="line">        <span class="keyword">if</span>(u != s)</span><br><span class="line">            u = edge[sta[--top] ^ <span class="number">1</span>].to;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxflow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    <span class="comment">// ios_base::sync_with_stdio(0);</span></span><br><span class="line">    <span class="comment">// cin.tie(0);cout.tie(0);</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        init1(m);</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        ll w;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">            addedge1(u, v, w);</span><br><span class="line">            addedge2(v, u, w);</span><br><span class="line">        &#125;</span><br><span class="line">        dijktra(n, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        dijktra(n, n, <span class="number">1</span>);</span><br><span class="line">        ll min = dis1[<span class="number">0</span>][n];</span><br><span class="line">        <span class="comment">// cout &lt;&lt; min &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">// for(int i = 1; i &lt;= n; ++i)cout &lt;&lt; dis1[0][i] &lt;&lt; " ";cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">// for(int i = 1; i &lt;= n; ++i)cout &lt;&lt; dis1[1][i] &lt;&lt; " ";cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">// for(int i = 1; i &lt;= n; ++i)cout &lt;&lt; visdfs[i] &lt;&lt; " ";cout &lt;&lt; endl;</span></span><br><span class="line">        init(m);</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = head1[<span class="number">0</span>][u]; ~i; i = edge1[<span class="number">0</span>][i].nxt)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = edge1[<span class="number">0</span>][i].to;</span><br><span class="line">                ll w = edge1[<span class="number">0</span>][i].w;</span><br><span class="line">                <span class="comment">// cout &lt;&lt; u &lt;&lt; "------" &lt;&lt; v &lt;&lt; visdfs[v] &lt;&lt; endl;</span></span><br><span class="line">                <span class="comment">// cout &lt;&lt; dis1[u] &lt;&lt; "---" &lt;&lt; w &lt;&lt; "----" &lt;&lt; dis1[v] &lt;&lt; endl;</span></span><br><span class="line">                <span class="comment">// if(visdfs[v] &amp;&amp; dis1[u] + w == dis1[v])</span></span><br><span class="line">                <span class="comment">// cout &lt;&lt; dis1[0][u] &lt;&lt; " " &lt;&lt; w &lt;&lt; " " &lt;&lt; dis1[0][v] &lt;&lt; " " &lt;&lt; dis1[1][u] &lt;&lt; " " &lt;&lt; dis1[1][v] &lt;&lt; endl;</span></span><br><span class="line">                <span class="comment">// if(dis1[0][u] + w == dis1[0][v] &amp;&amp; dis1[1][u] + w == dis1[1][v])</span></span><br><span class="line">                <span class="keyword">if</span>(dis1[<span class="number">0</span>][u] + w + dis1[<span class="number">1</span>][v] == min)</span><br><span class="line">                &#123;</span><br><span class="line">                    addedge(u, v, w);</span><br><span class="line">                    <span class="comment">// cout &lt;&lt; u &lt;&lt; "-" &lt;&lt; v &lt;&lt; "-" &lt;&lt; w &lt;&lt; endl;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, isap(<span class="number">1</span>, n, n));</span><br><span class="line">        <span class="comment">// cout &lt;&lt; "----------------------------" &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;补题ing&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ACM-线性基</title>
    <link href="http://www.31415x.cf/2019/07/24/ACM-%E7%BA%BF%E6%80%A7%E5%9F%BA/"/>
    <id>http://www.31415x.cf/2019/07/24/ACM-线性基/</id>
    <published>2019-07-24T01:21:09.000Z</published>
    <updated>2019-07-28T12:46:51.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>最近的几场多校出现了好几次线性基的题目，，会想起之前在尝试西安区域赛的一道区间异或和最大的问题时，当时因为异或的性质知道这道题肯定用线段树来维护区间的最值，但是不知道用什么来处理异或和最大，，即使后来知道了可以用线性基来处理，看了一些博客也因为感觉太难收藏到书签就再也没看过，，，于是这几天，花了差不多4、5天的时间，大概看懂了这部分的内容，感觉这只是一种专门处理异或问题的一个工具，光这个工具没什么意思，，现在的很多题目都是用线性基套各种东西，，比如说很常见的线段树（大多都是询问）、树链剖分（也就是树上路径的异或问题，主要是求LCA来维护）、简单图以及像杭电第一场的那题一样贪心魔改线性基板子等等，，不可能单纯的只是用线性基板子来求一个什么最值，K值，并交等等性质，下面是我这几天学习线性基的简单的一个学习过程的记录。</p><a id="more"></a><h1 id="数学知识"><a href="#数学知识" class="headerlink" title="数学知识"></a>数学知识</h1><p>关于线性基，虽然看起来这三个字很高深，，但是等大致了解之后，就会发现，这只是一个简单的数学工具，基础知识就是学过的线性代数  <del>（虽然早就忘记了）</del> 。</p><p>抛开线性代数，我个人的理解就是 线性基就是一个用来表示给定集合的一个最少的数的集合， 用线性基这个集合，可以表示它所 <em>张成</em> 的一个集合，对于我们遇到的大多数题目来说，就是用一个最少的数的集合 $lb$ 通过 <strong>异或</strong> 的形式可以表示数组（集） $a$ 。</p><p>我们可以用 $n$ 个 $2^i$ 这样不同的二进制数组 $a_i$ 的异或来表示所有 $[0 …2^n-1]$ 的任意一个数，例如： $[01], [10]$ 可一个表示 $0, 1, 2, 3$ 。 但如果去掉 $a_i$ 中的一些数，显然能表示的数集就减少了些，，反过来想，对于任意一个数集，我们都可以找到这样一个数集的子集 $a_i$ ，$a_i$ 中的任意数的异或和可以表示这个数集中的每一个数，这样我们相当于对原数集进行了压缩，用一个小的集合表示出来了，，而且显然他的最大大小就是数在二进制表示的位数，</p><p>可以这样表示的原因是因为对于一个线性基，他可以看作是一个 向量组 ，这些向量间是线性无关的，也就是说任意一个向量都不可以通过其他的向量表示，也就是线性基中的每一个数都不可以通过其他数的异或得到，，这样的一个向量组的线性组合可以 <strong>张成</strong> 一个线性空间，，，<a href="https://blog.sengxian.com/algorithms/linear-basis" target="_blank" rel="noopener">（具体的更加详细的数学知识可以看这里）</a> 或者 <a href="https://zh.wikipedia.org/wiki/%E5%9F%BA_(%E7%B7%9A%E6%80%A7%E4%BB%A3%E6%95%B8" target="_blank" rel="noopener">维基</a>)</p><h1 id="线性基的作用"><a href="#线性基的作用" class="headerlink" title="线性基的作用"></a>线性基的作用</h1><p>在ACM中大多数的线性基的作用就是维护一段数的异或的各种性质，例如最值、K值、一个数 $x$ 能否可以被这些数的异或和表示、线性基的交并等等。这只是一个工具，主要是和其他知识点的结合。</p><h1 id="线性基的基本的板子"><a href="#线性基的基本的板子" class="headerlink" title="线性基的基本的板子"></a>线性基的基本的板子</h1><p>不知道是这个知识点不那么重要还是怎么的，，不像其他的算法，网络上找到的关于线性基好的资料很少很少，，尤其是板子，，没有注释，，新手 <del>（我）</del> 一开始根本看不懂，，只能硬啃前面的数学推导，，然后转化成代码，，，最后自己在借鉴别人的基础上弄出了一份自己的板子，，，<del>（怕不是过几天就忘了写的什么）</del></p><h2 id="线性基的表示"><a href="#线性基的表示" class="headerlink" title="线性基的表示"></a>线性基的表示</h2><p>根据定义，线性集就是一个数的集合，而且长度一般题中会给，，ll就是64，int就是32等等，，所以他就是一个数组就行了，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> maxbase = <span class="number">35</span>;</span><br><span class="line">ll a[maxbase + <span class="number">1</span>];</span><br></pre></td></tr></table></figure><h2 id="线性基的插入"><a href="#线性基的插入" class="headerlink" title="线性基的插入"></a>线性基的插入</h2><p>线性基的最基本的操作就是遍历一个数集，，然后挑出其中的线性基，这个过程就是将一个数 $t$ 插入到线性基中，，对于当前线性基 $a$ ，如果它中的元素和 $t$ 线性无关，那么 $t$ 就是一个基底，，把他插入到线性基中，，根据定义，，如果发现是线性相关的，，那么就说明现在的线性基 $a$ 可以表示这个数，，一顿操作之后，，$t$ 一定变成了0，，（用这个可以判断是否一个数能被线性基表示，，，</p><p>插入的本质就是一个维护线性基矩阵的过程，，有两种维护的形式，，一种就是不管插入的元素对其他元素的影响，，维护一个上三角的线性基矩阵，，这样的时间复杂读低一些； 另一种就是利用高斯消元，，对于一个可以插入的元素，<strong>先用下面的行来消自己，然后用自己消上面几行</strong> ，，这样可以保证插入一个元素后，线性基的矩阵只有插入的那一行对应的那一位是1，，其他的都是零，，也就是一个对角矩阵。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(ll t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//暴力插入一个数，维护的是一个上三角型的线性基矩阵，时间复杂度低，当待插入元素能插入时，返回true</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(t &amp; (<span class="number">1l</span>l &lt;&lt; i))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!a[i])</span><br><span class="line">            &#123;</span><br><span class="line">                a[i] = t;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            t ^= a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t == <span class="number">0</span>)flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(ll t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 询问t是否可以被当前线性基表示，不插入</span></span><br><span class="line">    <span class="keyword">if</span>(t &gt; queryMax())<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(t == <span class="number">0</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(t &amp; (<span class="number">1l</span>l &lt;&lt; i))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!a[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            t ^= a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(ll t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//插入一个线性基，利用高斯消元法维护一个对角矩阵</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(t &gt;&gt; i &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i])t ^= a[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                a[i] = t;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)<span class="keyword">if</span>(a[j] &amp;&amp; (a[i] &gt;&gt; j &amp; <span class="number">1</span>))a[i] ^= a[j];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= maxbase; ++j)<span class="keyword">if</span>(a[j] &gt;&gt; j &amp; <span class="number">1</span>)a[j] ^= a[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线性基最值"><a href="#线性基最值" class="headerlink" title="线性基最值"></a>线性基最值</h2><ul><li>观察线性基，显然对于这个线性集表示的集合，他的最低那一行表示的元素一定是表示的数集异或的最小值，，所以只要从低到高返回第一非零的基底就可以了，，（注意判断0的情况）；</li><li>对于最大值，我们只要遍历整个线性基，如果当前元素 $a_i$ 异或上后答案变大，就异或这一位，</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//询问最值</span></span><br><span class="line"><span class="function">ll <span class="title">queryMax</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span>((ret ^ a[i]) &gt; ret)</span><br><span class="line">            ret ^= a[i];</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">queryMin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= maxbase; ++i)</span><br><span class="line">        <span class="keyword">if</span>(a[i])</span><br><span class="line">            <span class="keyword">return</span> a[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多个线性基的并、交"><a href="#多个线性基的并、交" class="headerlink" title="多个线性基的并、交"></a>多个线性基的并、交</h2><h3 id="并："><a href="#并：" class="headerlink" title="并："></a>并：</h3><p>并好说，直接暴力加到一个线性基中就行了，，反正不能插入的会在插入过程中变成0，不用管</p><h3 id="交："><a href="#交：" class="headerlink" title="交："></a>交：</h3><p>交是牛客第四场多校才遇到的，，<del>（整个线性基也是多校才遇到）</del> ，（交的板子只找到一个看得懂的），，，交的大致思路是这样的 <del>（瞎猜ing）</del>： </p><ul><li>记第一个线性基为 $l_1$ ，另一个是 $l_2$ ，一个初始是 $l_1$ 的线性基 $all$ ，一个标记线性基 $full$ （应该。。）</li><li>然后每次从 $l_2$ 中拿一个基 $v$ ，如果它能在 $all$ 中表示出来，也就是多次异或后的值为0，，那么就根据标记来插入这个 $v$ ，表示他是交集的一个。。</li></ul><h3 id="板子："><a href="#板子：" class="headerlink" title="板子："></a>板子：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinearBasis <span class="title">merge</span><span class="params">(<span class="keyword">const</span> LinearBasis &amp;l1, <span class="keyword">const</span> LinearBasis &amp;l2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 得到两个线性基的并</span></span><br><span class="line">    LinearBasis ret = l1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span>(l2.a[i])</span><br><span class="line">            ret.insert(l2.a[i]);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LinearBasis <span class="title">intersection</span><span class="params">(<span class="keyword">const</span> LinearBasis &amp;l1, <span class="keyword">const</span> LinearBasis &amp;l2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//得到两个线性基的交</span></span><br><span class="line">    LinearBasis all, ret, full;</span><br><span class="line">    ret.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        all.a[i] = l1.a[i];</span><br><span class="line">        full.a[i] = <span class="number">1l</span>l &lt;&lt; i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(l2.a[i])</span><br><span class="line">        &#123;</span><br><span class="line">            ll v = l2.a[i], k = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = maxbase; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(v &amp; (<span class="number">1l</span>l &lt;&lt; j))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(all.a[j])</span><br><span class="line">                    &#123;</span><br><span class="line">                        v ^= all.a[j];</span><br><span class="line">                        k ^= full.a[j];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// l2's basis is not in l1's;</span></span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                        all.a[j] = v;</span><br><span class="line">                        full.a[j] = k;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)</span><br><span class="line">            &#123;</span><br><span class="line">                ll v = <span class="number">0</span>; <span class="comment">// get intersection by k;</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = maxbase; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(k &amp; (<span class="number">1l</span>l &lt;&lt; j))</span><br><span class="line">                    &#123;</span><br><span class="line">                        v ^= l1.a[j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ret.insert(v);  <span class="comment">//save ans</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线性基求第-K-大"><a href="#线性基求第-K-大" class="headerlink" title="线性基求第 K 大"></a>线性基求第 K 大</h2><p>（留坑，，，还没有做题。。。</p><h1 id="线性基完整板子"><a href="#线性基完整板子" class="headerlink" title="线性基完整板子"></a>线性基完整板子</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinearBasis</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> maxbase = <span class="number">35</span>;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    ll a[maxbase + <span class="number">1</span>];</span><br><span class="line">    LinearBasis()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// memset(a, 0, sizeof a);</span></span><br><span class="line">    &#125;</span><br><span class="line">    LinearBasis(ll *x, <span class="keyword">int</span> n)</span><br><span class="line">    &#123;</span><br><span class="line">        LinearBasis();</span><br><span class="line">        build(x, n); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(ll *x, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            insert(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(ll t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//暴力插入一个数，维护的是一个上三角型的线性基矩阵，时间复杂度低，当待插入元素能插入时，返回true</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t &amp; (<span class="number">1l</span>l &lt;&lt; i))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!a[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    a[i] = t;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                t ^= a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">0</span>)flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(ll t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 询问t是否可以被当前线性基表示，不插入</span></span><br><span class="line">        <span class="keyword">if</span>(t &gt; queryMax())<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">0</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t &amp; (<span class="number">1l</span>l &lt;&lt; i))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!a[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                t ^= a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(ll t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//插入一个线性基，利用高斯消元法维护一个对角矩阵</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t &gt;&gt; i &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i])t ^= a[i];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    a[i] = t;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)<span class="keyword">if</span>(a[j] &amp;&amp; (a[i] &gt;&gt; j &amp; <span class="number">1</span>))a[i] ^= a[j];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= maxbase; ++j)<span class="keyword">if</span>(a[j] &gt;&gt; j &amp; <span class="number">1</span>)a[j] ^= a[i];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LinearBasis <span class="title">merge</span><span class="params">(<span class="keyword">const</span> LinearBasis &amp;l1, <span class="keyword">const</span> LinearBasis &amp;l2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 得到两个线性基的并</span></span><br><span class="line">        LinearBasis ret = l1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span>(l2.a[i])</span><br><span class="line">                ret.insert(l2.a[i]);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LinearBasis <span class="title">intersection</span><span class="params">(<span class="keyword">const</span> LinearBasis &amp;l1, <span class="keyword">const</span> LinearBasis &amp;l2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//得到两个线性基的交</span></span><br><span class="line">        LinearBasis all, ret, full;</span><br><span class="line">        ret.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            all.a[i] = l1.a[i];</span><br><span class="line">            full.a[i] = <span class="number">1l</span>l &lt;&lt; i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(l2.a[i])</span><br><span class="line">            &#123;</span><br><span class="line">                ll v = l2.a[i], k = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = maxbase; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(v &amp; (<span class="number">1l</span>l &lt;&lt; j))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(all.a[j])</span><br><span class="line">                        &#123;</span><br><span class="line">                            v ^= all.a[j];</span><br><span class="line">                            k ^= full.a[j];</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">// l2's basis is not in l1's;</span></span><br><span class="line">                            flag = <span class="literal">false</span>;</span><br><span class="line">                            all.a[j] = v;</span><br><span class="line">                            full.a[j] = k;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(flag)</span><br><span class="line">                &#123;</span><br><span class="line">                    ll v = <span class="number">0</span>; <span class="comment">// get intersection by k;</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = maxbase; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(k &amp; (<span class="number">1l</span>l &lt;&lt; j))</span><br><span class="line">                        &#123;</span><br><span class="line">                            v ^= l1.a[j];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ret.insert(v);  <span class="comment">//save ans</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//询问最值</span></span><br><span class="line">    <span class="function">ll <span class="title">queryMax</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span>((ret ^ a[i]) &gt; ret)</span><br><span class="line">                ret ^= a[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">queryMin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= maxbase; ++i)</span><br><span class="line">            <span class="keyword">if</span>(a[i])</span><br><span class="line">                <span class="keyword">return</span> a[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="线性基练习"><a href="#线性基练习" class="headerlink" title="线性基练习"></a>线性基练习</h1><h2 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a><a href="https://www.luogu.org/problem/P3812" target="_blank" rel="noopener">模板题</a></h2><p>熟悉下板子，，敲一下就可以了，，</p><h2 id="贪心-线性基插入元素的性质"><a href="#贪心-线性基插入元素的性质" class="headerlink" title="贪心+线性基插入元素的性质"></a><a href="https://www.luogu.org/problem/P4570" target="_blank" rel="noopener">贪心+线性基插入元素的性质</a></h2><p>对于每个数集中的数，有一个第二权值，要保证选的数集中的数异或和不为零的情况下权值最大，，只要选权值从大到小且下标异或和不为零的元素的贡献就可以了，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// luogu-judger-enable-o2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdlib&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;set&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cmath&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;queue&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;stack&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;ctime&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;random&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinearBasis</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> maxbase = <span class="number">62</span>;</span><br><span class="line">    ll a[maxbase + <span class="number">1</span>];</span><br><span class="line">    LinearBasis()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">    &#125;</span><br><span class="line">    LinearBasis(ll *x, <span class="keyword">int</span> n)</span><br><span class="line">    &#123;</span><br><span class="line">        LinearBasis();</span><br><span class="line">        build(x, n);   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(ll *x, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            insert(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(ll t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t &amp; (<span class="number">1l</span>l &lt;&lt; i))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!a[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    a[i] = t;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                t ^= a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(ll t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t &gt;&gt; i &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i])t ^= a[i];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    a[i] = t;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)<span class="keyword">if</span>(a[j] &amp;&amp; (a[i] &gt;&gt; j &amp; <span class="number">1</span>))a[i] ^= a[j];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= maxbase; ++j)<span class="keyword">if</span>(a[j] &gt;&gt; j &amp; <span class="number">1</span>)a[j] ^= a[i];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LinearBasis <span class="title">merge</span><span class="params">(<span class="keyword">const</span> LinearBasis &amp;l1, <span class="keyword">const</span> LinearBasis &amp;l2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        LinearBasis ret = l1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span>(l2.a[i])</span><br><span class="line">                ret.insert(l2.a[i]);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">queryMax</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span>((ret ^ a[i]) &gt; ret)</span><br><span class="line">                ret ^= a[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">queryMin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= maxbase; ++i)</span><br><span class="line">            <span class="keyword">if</span>(a[i])</span><br><span class="line">                <span class="keyword">return</span> a[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, ll&gt; p[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)<span class="built_in">cin</span> &gt;&gt; p[i].second &gt;&gt; p[i].first;</span><br><span class="line">    sort(p + <span class="number">1</span>, p + <span class="number">1</span> + n, greater&lt;pair&lt;<span class="keyword">int</span>, ll&gt;&gt;());</span><br><span class="line">    LinearBasis l;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)<span class="keyword">if</span>(l.insert(p[i].second))ans += p[i].first;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线性基数量组合"><a href="#线性基数量组合" class="headerlink" title="线性基数量组合"></a><a href="https://www.luogu.org/problem/P3857" target="_blank" rel="noopener">线性基数量组合</a></h2><p>题目问一些 $01$ 序列可以表示的数（状态）有几种，，就是线性基的大小的2次方，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// luogu-judger-enable-o2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdlib&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;set&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cmath&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;queue&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;stack&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;ctime&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;random&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinearBasis</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> maxbase = <span class="number">62</span>;</span><br><span class="line">    ll a[maxbase + <span class="number">1</span>];</span><br><span class="line">    LinearBasis()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">    &#125;</span><br><span class="line">    LinearBasis(ll *x, <span class="keyword">int</span> n)</span><br><span class="line">    &#123;</span><br><span class="line">        LinearBasis();</span><br><span class="line">        build(x, n);   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(ll *x, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            insert(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(ll t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t &amp; (<span class="number">1l</span>l &lt;&lt; i))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!a[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    a[i] = t;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                t ^= a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(ll t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t &gt;&gt; i &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i])t ^= a[i];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    a[i] = t;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)<span class="keyword">if</span>(a[j] &amp;&amp; (a[i] &gt;&gt; j &amp; <span class="number">1</span>))a[i] ^= a[j];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= maxbase; ++j)<span class="keyword">if</span>(a[j] &gt;&gt; j &amp; <span class="number">1</span>)a[j] ^= a[i];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LinearBasis <span class="title">merge</span><span class="params">(<span class="keyword">const</span> LinearBasis &amp;l1, <span class="keyword">const</span> LinearBasis &amp;l2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        LinearBasis ret = l1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span>(l2.a[i])</span><br><span class="line">                ret.insert(l2.a[i]);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">queryMax</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span>((ret ^ a[i]) &gt; ret)</span><br><span class="line">                ret ^= a[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">queryMin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= maxbase; ++i)</span><br><span class="line">            <span class="keyword">if</span>(a[i])</span><br><span class="line">                <span class="keyword">return</span> a[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">55</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, m; <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    LinearBasis l;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">        ll t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m - <span class="number">1</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ch[j] == <span class="string">'O'</span>)t |= <span class="number">1</span>;</span><br><span class="line">            t &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        t &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l.insert(t))++ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (<span class="number">1l</span>l &lt;&lt; ans) % <span class="number">2008</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LCA树链剖分暴力合并线性基求路径间点权异或和最大"><a href="#LCA树链剖分暴力合并线性基求路径间点权异或和最大" class="headerlink" title="LCA树链剖分暴力合并线性基求路径间点权异或和最大"></a><a href="https://www.luogu.org/problem/P3292" target="_blank" rel="noopener">LCA树链剖分暴力合并线性基求路径间点权异或和最大</a></h2><p>这题的大意是一个树，有点权，问你对于树上任意两点的路径 $u-&gt;v$ 的点权的异或和的最大值是多少，，</p><p>树上任意两点间的路径就是问 LCA ，，所以用那几种求LCA的方法就可以了，，之前看过树链剖分，，但是忘得差不多了，，捡起来重学了下，，</p><p>就和LCA的题一样，不过是线段树等数据结构维护的之不同了，，以前是和、最值什么的，，这题改成线性基就可以了，，维护一条路径的线性基，，然后进行线性基的合并就可以了，，，<del>（数据数组开成int炸了好几发re</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// luogu-judger-enable-o2</span></span><br><span class="line"><span class="comment">// luogu-judger-enable-o2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdlib&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;set&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cmath&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;queue&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;stack&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;ctime&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;random&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinearBasis</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> maxbase = <span class="number">63</span>;</span><br><span class="line">    ll a[maxbase + <span class="number">1</span>];</span><br><span class="line">    LinearBasis()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">    &#125;</span><br><span class="line">    LinearBasis(ll *x, <span class="keyword">int</span> n)</span><br><span class="line">    &#123;</span><br><span class="line">        LinearBasis();</span><br><span class="line">        build(x, n);   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(ll *x, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            insert(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(ll t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t &amp; (<span class="number">1l</span>l &lt;&lt; i))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!a[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    a[i] = t;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                t ^= a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(ll t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t &gt;&gt; i &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i])t ^= a[i];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    a[i] = t;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)<span class="keyword">if</span>(a[j] &amp;&amp; (a[i] &gt;&gt; j &amp; <span class="number">1</span>))a[i] ^= a[j];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= maxbase; ++j)<span class="keyword">if</span>(a[j] &gt;&gt; j &amp; <span class="number">1</span>)a[j] ^= a[i];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LinearBasis <span class="title">merge</span><span class="params">(<span class="keyword">const</span> LinearBasis &amp;l1, <span class="keyword">const</span> LinearBasis &amp;l2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        LinearBasis ret = l1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span>(l2.a[i])</span><br><span class="line">                ret.insert(l2.a[i]);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">const</span> LinearBasis &amp;r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span>(r.a[i])</span><br><span class="line">                insert(r.a[i]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">queryMax</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span>((ret ^ a[i]) &gt; ret)</span><br><span class="line">                ret ^= a[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">queryMin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= maxbase; ++i)</span><br><span class="line">            <span class="keyword">if</span>(a[i])</span><br><span class="line">                <span class="keyword">return</span> a[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;edge[maxn * <span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn * <span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> top[maxn * <span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> fa[maxn * <span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> dep[maxn * <span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> num[maxn * <span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> p[maxn * <span class="number">3</span>], fp[maxn * <span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> son[maxn * <span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> pos;</span><br><span class="line">ll a[maxn], w[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    pos = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(son, <span class="number">-1</span>, <span class="keyword">sizeof</span> son);</span><br><span class="line">    <span class="built_in">memset</span>(w, <span class="number">0</span>, <span class="keyword">sizeof</span> w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot++; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pre, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[u] = d;</span><br><span class="line">    fa[u] = pre;</span><br><span class="line">    num[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v != pre)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs1(v, u, d + <span class="number">1</span>);</span><br><span class="line">            num[u] += num[v];</span><br><span class="line">            <span class="keyword">if</span>(son[u] == <span class="number">-1</span> || num[v] &gt; num[son[u]])</span><br><span class="line">                son[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> sp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    top[u] = sp;</span><br><span class="line">    p[u] = ++pos;</span><br><span class="line">    fp[p[u]] = u;</span><br><span class="line">    w[pos] = a[u];</span><br><span class="line">    <span class="keyword">if</span>(son[u] == <span class="number">-1</span>)<span class="keyword">return</span>;</span><br><span class="line">    dfs2(son[u], sp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v != son[u] &amp;&amp; v != fa[u])</span><br><span class="line">            dfs2(v, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    LinearBasis lb;</span><br><span class="line">&#125;node[maxn * <span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[rt].lb.merge(node[rt &lt;&lt; <span class="number">1</span>].lb);</span><br><span class="line">    node[rt].lb.merge(node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lb);</span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl;for(int i = 0; i &lt;= 5; i ++)cout &lt;&lt; node[rt &lt;&lt; 1].lb.a[i] &lt;&lt; "-";cout &lt;&lt; endl &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl;for(int i = 0; i &lt;= 5; i ++)cout &lt;&lt; node[rt &lt;&lt; 1 | 1].lb.a[i] &lt;&lt; "+";cout &lt;&lt; endl &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl;for(int i = 0; i &lt;= 5; i ++)cout &lt;&lt; node[rt].lb.a[i] &lt;&lt; " ";cout &lt;&lt; endl &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[rt].l = l; node[rt].r = r;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;node[rt].lb.insert(w[l]);<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(rt &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    build(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    pushup(rt);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">LinearBasis ret;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node[rt].l == l &amp;&amp; node[rt].r == r)</span><br><span class="line">    &#123;</span><br><span class="line">        ret.merge(node[rt].lb);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = node[rt].l + node[rt].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(r &lt;= mid)query(rt &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l &gt; mid)query(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">else</span> query(rt &lt;&lt; <span class="number">1</span>, l, mid), query(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">getAns</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f1 = top[u], f2 = top[v];</span><br><span class="line">    LinearBasis ans;</span><br><span class="line">    <span class="keyword">while</span>(f1 != f2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[f1] &lt; dep[f2])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(f1, f2);</span><br><span class="line">            swap(u, v);</span><br><span class="line">        &#125;</span><br><span class="line">        ret.clear();</span><br><span class="line">        query(<span class="number">1</span>, p[f1], p[u]);</span><br><span class="line">        <span class="comment">// cout &lt;&lt; endl; cout &lt;&lt; p[f1] &lt;&lt; " " &lt;&lt; p[u] &lt;&lt; " " &lt;&lt; f1 &lt;&lt; " " &lt;&lt; u &lt;&lt; endl;for(int i = 0; i &lt;= 5; ++i)cout &lt;&lt; ret.a[i] &lt;&lt; " ";cout&lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">// cout &lt;&lt;ret.queryMax() &lt;&lt; "----------------------" &lt;&lt; endl;</span></span><br><span class="line">        ans.merge(ret);</span><br><span class="line">        u = fa[f1]; f1 = top[u];</span><br><span class="line">    &#125;</span><br><span class="line">    ret.clear();</span><br><span class="line">    <span class="keyword">if</span>(dep[u] &gt; dep[v])swap(u, v);</span><br><span class="line">    query(<span class="number">1</span>, p[u], p[v]);</span><br><span class="line">    ans.merge(ret);</span><br><span class="line">    <span class="keyword">return</span> ans.queryMax();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> n, q; <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        addedge(u, v);</span><br><span class="line">        addedge(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs1(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    dfs2(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    build(<span class="number">1</span>, <span class="number">1</span>, pos);</span><br><span class="line">    <span class="keyword">while</span>(q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; getAns(u, v) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for(int i = 5; i &gt;= 0; --i)</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; node[1].lb.a[i] &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// ret.clear();</span></span><br><span class="line">    <span class="comment">// query(1, p[4], p[4]);</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; ret.queryMax() &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="牛客第四场多校xor"><a href="#牛客第四场多校xor" class="headerlink" title="牛客第四场多校xor"></a><a href="https://ac.nowcoder.com/acm/contest/884/B" target="_blank" rel="noopener">牛客第四场多校xor</a></h2><p>这题求得是一个区间线性基的并，，题目大意是给你一堆数集 $a_i$ ，， 然后一些询问 $l, r, x$ 问你 $a_l….a_r$ 的每一个集合能否异或出 $x$ ，，，</p><p>暴力线性基查询肯定会T <del>（说的就是我，，，</del>，，</p><p>询问的是一个区间的每一个集合能否可以异或出数 $x$ ，，反过来想，，就是存在不存在一组线性基可以表示 $x$ 的情况下同时是每一组的一个子集，，，也就是说这些集合线性基的交能否表示出 $x$ ，， 一个线性基能否表示数很简单，，关键就是线性基的求交，，，弄好这个就可以用线段树维护区间的线性基的交，，，对于询问，最直接的想法就是求出询问区间的交，然后查看是否可以表示出数 $x$ ，，但是这样没必要，可能会T ，，，<del>（别问我为什么，，，</del> ，，只要判断每一个询问的子区间的交是否可以表示即可，，把这些区间结果合并与就是答案，，，</p><p><del>（有一次把ll写成int，疯狂WA，， 还有线性基的交魔改代码爆炸</del> ，，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdlib&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;set&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cmath&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;queue&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;stack&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;ctime&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;random&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinearBasis</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> maxbase = <span class="number">35</span>;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    ll a[maxbase + <span class="number">1</span>];</span><br><span class="line">    LinearBasis()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// memset(a, 0, sizeof a);</span></span><br><span class="line">    &#125;</span><br><span class="line">    LinearBasis(ll *x, <span class="keyword">int</span> n)</span><br><span class="line">    &#123;</span><br><span class="line">        LinearBasis();</span><br><span class="line">        build(x, n); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(ll *x, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            insert(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(ll t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t &amp; (<span class="number">1l</span>l &lt;&lt; i))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!a[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    a[i] = t;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                t ^= a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">0</span>)flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(ll t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t &gt; queryMax())<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">0</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t &amp; (<span class="number">1l</span>l &lt;&lt; i))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!a[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                t ^= a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(ll t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t &gt;&gt; i &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i])t ^= a[i];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    a[i] = t;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)<span class="keyword">if</span>(a[j] &amp;&amp; (a[i] &gt;&gt; j &amp; <span class="number">1</span>))a[i] ^= a[j];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= maxbase; ++j)<span class="keyword">if</span>(a[j] &gt;&gt; j &amp; <span class="number">1</span>)a[j] ^= a[i];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LinearBasis <span class="title">merge</span><span class="params">(<span class="keyword">const</span> LinearBasis &amp;l1, <span class="keyword">const</span> LinearBasis &amp;l2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        LinearBasis ret = l1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span>(l2.a[i])</span><br><span class="line">                ret.insert(l2.a[i]);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LinearBasis <span class="title">intersection</span><span class="params">(<span class="keyword">const</span> LinearBasis &amp;l1, <span class="keyword">const</span> LinearBasis &amp;l2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        LinearBasis all, ret, full;</span><br><span class="line">        ret.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            all.a[i] = l1.a[i];</span><br><span class="line">            full.a[i] = <span class="number">1l</span>l &lt;&lt; i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(l2.a[i])</span><br><span class="line">            &#123;</span><br><span class="line">                ll v = l2.a[i], k = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = maxbase; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(v &amp; (<span class="number">1l</span>l &lt;&lt; j))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(all.a[j])</span><br><span class="line">                        &#123;</span><br><span class="line">                            v ^= all.a[j];</span><br><span class="line">                            k ^= full.a[j];</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">// l2's basis is not in l1's;</span></span><br><span class="line">                            flag = <span class="literal">false</span>;</span><br><span class="line">                            all.a[j] = v;</span><br><span class="line">                            full.a[j] = k;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(flag)</span><br><span class="line">                &#123;</span><br><span class="line">                    ll v = <span class="number">0</span>; <span class="comment">// get intersection by k;</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = maxbase; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(k &amp; (<span class="number">1l</span>l &lt;&lt; j))</span><br><span class="line">                        &#123;</span><br><span class="line">                            v ^= l1.a[j];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ret.insert(v);  <span class="comment">//save ans</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">queryMax</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span>((ret ^ a[i]) &gt; ret)</span><br><span class="line">                ret ^= a[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">queryMin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= maxbase; ++i)</span><br><span class="line">            <span class="keyword">if</span>(a[i])</span><br><span class="line">                <span class="keyword">return</span> a[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;lb[maxn];</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">LinearBasis node[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[rt] = node[rt].intersection(node[rt &lt;&lt; <span class="number">1</span>], node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        node[rt] = lb[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(rt &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    build(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    pushup(rt);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">LinearBasis ans;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> node[rt].query(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">bool</span> flag1, flag2;</span><br><span class="line">    flag1 = flag2 = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)flag1 = query(rt &lt;&lt; <span class="number">1</span>, l, mid, L, R, x);</span><br><span class="line">    <span class="keyword">if</span>(R &gt;  mid)flag2 = query(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R, x);</span><br><span class="line">    <span class="keyword">return</span> flag1 &amp; flag2;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> num; <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">        ll x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= num; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">            lb[i].insert(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">int</span> l, r;ll x;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span>(query(<span class="number">1</span>, <span class="number">1</span>, n, l, r, x))<span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="杭电多校第一场Operation"><a href="#杭电多校第一场Operation" class="headerlink" title="杭电多校第一场Operation"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6579" target="_blank" rel="noopener">杭电多校第一场Operation</a></h2><p>这题的大意是对于给定的数组，有两个操作，一个是询问一个区间的异或和的最大值，，另一个是在这个数组后面增加一个值，，，</p><p>这题也是诱使我学线性基的原因，，</p><p>题解说直接数据结构维护会T，，我也没试，，正解是贪心的维护一个 <strong>前缀线性基</strong> ，在每插入一个数时，，如果能插入，，尽可能的插到高位，，（这样可以保证靠近r的可以插入的数尽可能的在高位，，</p><p>也就是说，，对于任意的任意的一个区间，，不管它的长度多大，，，他的线性基最多是30个（针对这题），，，所以我们只需要维护r前面出现的较晚的新基，，这样每次询问，，都看得在r处的线性基中出现比l晚的基即可，，为了实现这个过程，，，给每一个线性基中的每一位都加一个标志位 $p_i$ ，， 在插入一个新的数时，，，尽可能的把他放在高位，，，（碰到一个可以插入的位置时，把他插在这里，，然后下推其它的基，，，</p><p>这题不能莽，直接开ll，，，会mle，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdlib&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;set&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cmath&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;queue&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;stack&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;ctime&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;random&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="comment">// mt19937 rnd(time(0));</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinearBasis</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">int</span> type;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> maxbase = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    type a[maxbase + <span class="number">1</span>];</span><br><span class="line">    type p[maxbase + <span class="number">1</span>];</span><br><span class="line">    LinearBasis()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">        <span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span> p);</span><br><span class="line">    &#125;</span><br><span class="line">    LinearBasis(type *x, <span class="keyword">int</span> n)</span><br><span class="line">    &#123;</span><br><span class="line">        LinearBasis();</span><br><span class="line">        build(x, n); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(type *x, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            insert(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">        <span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span> p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(type t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//暴力插入一个数，维护的是一个上三角型的线性基矩阵，时间复杂度低，当待插入元素能插入时，返回true</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t &amp; (<span class="number">1l</span>l &lt;&lt; i))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!a[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    a[i] = t;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                t ^= a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">0</span>)flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">insert2</span><span class="params">(type t, type pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t &amp; (<span class="number">1l</span>l &lt;&lt; i))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!a[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    a[i] = t;</span><br><span class="line">                    p[i] = pos;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(pos &gt; p[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    swap(pos, p[i]);</span><br><span class="line">                    swap(t, a[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                t ^= a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">0</span>)flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(type t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 询问t是否可以被当前线性基表示，不插入</span></span><br><span class="line">        <span class="keyword">if</span>(t &gt; queryMax())<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">0</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t &amp; (<span class="number">1l</span>l &lt;&lt; i))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!a[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                t ^= a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(type t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//插入一个线性基，利用高斯消元法维护一个对角矩阵</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(t &gt;&gt; i &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i])t ^= a[i];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    a[i] = t;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)<span class="keyword">if</span>(a[j] &amp;&amp; (a[i] &gt;&gt; j &amp; <span class="number">1</span>))a[i] ^= a[j];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= maxbase; ++j)<span class="keyword">if</span>(a[j] &gt;&gt; j &amp; <span class="number">1</span>)a[j] ^= a[i];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LinearBasis <span class="title">merge</span><span class="params">(<span class="keyword">const</span> LinearBasis &amp;l1, <span class="keyword">const</span> LinearBasis &amp;l2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 得到两个线性基的并</span></span><br><span class="line">        LinearBasis ret = l1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span>(l2.a[i])</span><br><span class="line">                ret.insert(l2.a[i]);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LinearBasis <span class="title">intersection</span><span class="params">(<span class="keyword">const</span> LinearBasis &amp;l1, <span class="keyword">const</span> LinearBasis &amp;l2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//得到两个线性基的交</span></span><br><span class="line">        LinearBasis all, ret, full;</span><br><span class="line">        ret.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            all.a[i] = l1.a[i];</span><br><span class="line">            full.a[i] = <span class="number">1l</span>l &lt;&lt; i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(l2.a[i])</span><br><span class="line">            &#123;</span><br><span class="line">                type v = l2.a[i], k = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = maxbase; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(v &amp; (<span class="number">1l</span>l &lt;&lt; j))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(all.a[j])</span><br><span class="line">                        &#123;</span><br><span class="line">                            v ^= all.a[j];</span><br><span class="line">                            k ^= full.a[j];</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">// l2's basis is not in l1's;</span></span><br><span class="line">                            flag = <span class="literal">false</span>;</span><br><span class="line">                            all.a[j] = v;</span><br><span class="line">                            full.a[j] = k;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(flag)</span><br><span class="line">                &#123;</span><br><span class="line">                    type v = <span class="number">0</span>; <span class="comment">// get intersection by k;</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = maxbase; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(k &amp; (<span class="number">1l</span>l &lt;&lt; j))</span><br><span class="line">                        &#123;</span><br><span class="line">                            v ^= l1.a[j];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ret.insert(v);  <span class="comment">//save ans</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//询问最值</span></span><br><span class="line">    <span class="function">type <span class="title">queryMax</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        type ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span>((ret ^ a[i]) &gt; ret)</span><br><span class="line">                ret ^= a[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">type <span class="title">queryMax</span><span class="params">(type l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        type ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxbase; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span>((ret ^ a[i]) &gt; ret &amp;&amp; l &lt;= p[i])</span><br><span class="line">                ret ^= a[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">type <span class="title">queryMin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= maxbase; ++i)</span><br><span class="line">            <span class="keyword">if</span>(a[i])</span><br><span class="line">                <span class="keyword">return</span> a[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;lb[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in", "r", stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out", "w", stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        ll x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">            lb[i] = lb[i - <span class="number">1</span>]; </span><br><span class="line">            lb[i].insert2(x, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> op;</span><br><span class="line">        ll lstans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line">            <span class="keyword">if</span>(!op)</span><br><span class="line">            &#123;</span><br><span class="line">                ll l, r;<span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line">                l = (l ^ lstans) % n + <span class="number">1</span>;</span><br><span class="line">                r = (r ^ lstans) % n + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(l &gt; r)swap(l, r);</span><br><span class="line">                lstans = lb[r].queryMax(l);</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; lstans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ll x;<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">                x ^= lstans;</span><br><span class="line">                lb[++n] = lb[n - <span class="number">1</span>];</span><br><span class="line">                lb[n].insert2(x, n);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="loading"><a href="#loading" class="headerlink" title="loading"></a>loading</h2><p>还有几道题有时间再补把，，，，比如西安区域赛那道 ，，<a href="https://codeforces.com/problemset/problem/1100/F" target="_blank" rel="noopener">cf</a>这道，，貌似是杭电的原型题，，，</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;最近的几场多校出现了好几次线性基的题目，，会想起之前在尝试西安区域赛的一道区间异或和最大的问题时，当时因为异或的性质知道这道题肯定用线段树来维护区间的最值，但是不知道用什么来处理异或和最大，，即使后来知道了可以用线性基来处理，看了一些博客也因为感觉太难收藏到书签就再也没看过，，，于是这几天，花了差不多4、5天的时间，大概看懂了这部分的内容，感觉这只是一种专门处理异或问题的一个工具，光这个工具没什么意思，，现在的很多题目都是用线性基套各种东西，，比如说很常见的线段树（大多都是询问）、树链剖分（也就是树上路径的异或问题，主要是求LCA来维护）、简单图以及像杭电第一场的那题一样贪心魔改线性基板子等等，，不可能单纯的只是用线性基板子来求一个什么最值，K值，并交等等性质，下面是我这几天学习线性基的简单的一个学习过程的记录。&lt;/p&gt;
    
    </summary>
    
      <category term="ACM-线性基" scheme="http://www.31415x.cf/categories/ACM-%E7%BA%BF%E6%80%A7%E5%9F%BA/"/>
    
    
      <category term="刷题" scheme="http://www.31415x.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="数学" scheme="http://www.31415x.cf/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>2019牛客暑期多校训练营（第二场）</title>
    <link href="http://www.31415x.cf/2019/07/21/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/"/>
    <id>http://www.31415x.cf/2019/07/21/2019牛客暑期多校训练营（第二场）/</id>
    <published>2019-07-21T08:25:08.000Z</published>
    <updated>2019-07-21T08:27:37.750Z</updated>
    
    <content type="html"><![CDATA[<p>菜的真实，，，</p><p><a href="https://ac.nowcoder.com/acm/contest/882#question" target="_blank" rel="noopener">题目</a></p><!-- mere --><h1 id="F-Partition-problem"><a href="#F-Partition-problem" class="headerlink" title="F - Partition problem"></a>F - Partition problem</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdlib&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;set&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cmath&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;queue&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;stack&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;ctime&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line">ll a[<span class="number">20</span>], b[<span class="number">20</span>], v[<span class="number">30</span>][<span class="number">30</span>], n, n2, ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> ai, <span class="keyword">int</span> bi, ll cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt &lt; ans)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(ai &gt; n || bi &gt; n)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> now = ai + bi + <span class="number">1</span>;  <span class="comment">//every people</span></span><br><span class="line">    <span class="keyword">if</span>(now &gt; n2)&#123;ans = max(ans, cnt); <span class="keyword">return</span>;&#125;</span><br><span class="line">    ll va = cnt, vb = cnt;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//pull this man to B</span></span><br><span class="line">    b[bi] = now;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bi; ++i)vb -= v[b[i]][now];</span><br><span class="line">    dfs(ai, bi + <span class="number">1</span>, vb);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//another</span></span><br><span class="line">    a[ai] = now;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ai; ++i)va -= v[now][a[i]];</span><br><span class="line">    dfs(ai + <span class="number">1</span>, bi, va);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in" , "r"   , stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out" , "w" , stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//有一个外面的集合，总的价值是所有值的和，</span></span><br><span class="line">    <span class="comment">//每次把一个人放到一个队伍里，</span></span><br><span class="line">    <span class="comment">//这个人和这个队伍所有人的价值就没了，所以就减去就行了</span></span><br><span class="line">    <span class="comment">//每个人有两种选择，所以遍历都枚举就行了</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n; n2 = n &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    ll sum = <span class="number">0</span>;ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n2; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n2; ++j)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; v[i][j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n2; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j)</span><br><span class="line">            sum += v[i][j];</span><br><span class="line">    dfs(<span class="number">0</span>, <span class="number">0</span>, sum);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;菜的真实，，，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/882#question&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目&lt;/a&gt;&lt;/p&gt;
&lt;!-- mere --&gt;
&lt;h1 id=
      
    
    </summary>
    
      <category term="ACM-题解" scheme="http://www.31415x.cf/categories/ACM-%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="刷题" scheme="http://www.31415x.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="多校" scheme="http://www.31415x.cf/tags/%E5%A4%9A%E6%A0%A1/"/>
    
      <category term="acm" scheme="http://www.31415x.cf/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>ACM-树形dp</title>
    <link href="http://www.31415x.cf/2019/07/19/ACM-%E6%A0%91%E5%BD%A2dp/"/>
    <id>http://www.31415x.cf/2019/07/19/ACM-树形dp/</id>
    <published>2019-07-19T11:51:14.000Z</published>
    <updated>2019-07-19T12:57:00.968Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Anniversary-party"><a href="#Anniversary-party" class="headerlink" title="Anniversary party"></a><a href="http://poj.org/problem?id=2342" target="_blank" rel="noopener">Anniversary party</a></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;set&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cmath&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;queue&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;stack&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;ctime&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[maxn], dp[maxn][<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> sta, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(~dp[u][sta])<span class="keyword">return</span> dp[u][sta];</span><br><span class="line">    dp[u][sta] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v == fa)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(sta)dp[u][sta] += dfs(v, <span class="number">0</span>, u);</span><br><span class="line">        <span class="keyword">else</span> dp[u][sta] += max(dfs(v, <span class="number">0</span>, u), dfs(v, <span class="number">1</span>, u));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sta)dp[u][sta] += a[u];</span><br><span class="line">    <span class="keyword">return</span> dp[u][sta];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in" , "r"   , stdin); </span></span><br><span class="line">    <span class="comment">// freopen("233.out" , "w" , stdout);</span></span><br><span class="line">    <span class="comment">// ios_base::sync_with_stdio(0);</span></span><br><span class="line">    <span class="comment">// cin.tie(0);cout.tie(0);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">int</span> u, v;init();</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v) &amp;&amp; u + v)</span><br><span class="line">            addedge(u, v), addedge(v, u);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max(dfs(<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>), dfs(<span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Strategic-game"><a href="#Strategic-game" class="headerlink" title="Strategic game"></a><a href="http://poj.org/problem?id=1463" target="_blank" rel="noopener">Strategic game</a></h1><h2 id="树形dp"><a href="#树形dp" class="headerlink" title="树形dp"></a>树形dp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;set&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cmath&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;queue&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;stack&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;ctime&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, dp[maxn][<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> sta, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(~dp[u][sta])<span class="keyword">return</span> dp[u][sta];</span><br><span class="line">    dp[u][sta] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v == fa)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(sta) dp[u][sta] += min(dfs(v, <span class="number">1</span>, u), dfs(v, <span class="number">0</span>, u));</span><br><span class="line">        <span class="keyword">else</span> dp[u][sta] += dfs(v, <span class="number">1</span>, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sta)++dp[u][sta];</span><br><span class="line">    <span class="keyword">return</span> dp[u][sta];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in" , "r"   , stdin); </span></span><br><span class="line">    <span class="comment">// freopen("233.out" , "w" , stdout);</span></span><br><span class="line">    <span class="comment">// ios_base::sync_with_stdio(0);</span></span><br><span class="line">    <span class="comment">// cin.tie(0);cout.tie(0);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span> u, v, num;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d:(%d) "</span>, &amp;u, &amp;num);</span><br><span class="line">            <span class="keyword">while</span>(num--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v);</span><br><span class="line">                addedge(u + <span class="number">1</span>, v + <span class="number">1</span>);</span><br><span class="line">                addedge(v + <span class="number">1</span>, u + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, min(dfs(<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>), dfs(<span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分图最小点覆盖"><a href="#二分图最小点覆盖" class="headerlink" title="二分图最小点覆盖"></a>二分图最小点覆盖</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;set&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cmath&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;queue&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;stack&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;ctime&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> linker[maxn];</span><br><span class="line"><span class="keyword">bool</span> used[maxn];</span><br><span class="line"><span class="keyword">int</span> uN;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!used[v])</span><br><span class="line">        &#123;</span><br><span class="line">            used[v] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(linker[v] == <span class="number">-1</span> || dfs(linker[v]))</span><br><span class="line">            &#123;</span><br><span class="line">                linker[v] = u;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hungary</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(linker, <span class="number">-1</span>, <span class="keyword">sizeof</span> linker);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; uN; ++u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(used, <span class="literal">false</span>, <span class="keyword">sizeof</span> used);</span><br><span class="line">        <span class="keyword">if</span>(dfs(u))++res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in" , "r"   , stdin); </span></span><br><span class="line">    <span class="comment">// freopen("233.out" , "w" , stdout);</span></span><br><span class="line">    <span class="comment">// ios_base::sync_with_stdio(0);</span></span><br><span class="line">    <span class="comment">// cin.tie(0);cout.tie(0);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        uN = n;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span> u, v, num;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d:(%d) "</span>, &amp;u, &amp;num);</span><br><span class="line">            <span class="keyword">while</span>(num--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v);</span><br><span class="line">                addedge(u, v);</span><br><span class="line">                addedge(v, u);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, hungary() / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Anniversary-party&quot;&gt;&lt;a href=&quot;#Anniversary-party&quot; class=&quot;headerlink&quot; title=&quot;Anniversary party&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://poj.org/problem?id=
      
    
    </summary>
    
      <category term="ACM-树形dp" scheme="http://www.31415x.cf/categories/ACM-%E6%A0%91%E5%BD%A2dp/"/>
    
    
      <category term="刷题" scheme="http://www.31415x.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="dp" scheme="http://www.31415x.cf/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>博弈</title>
    <link href="http://www.31415x.cf/2019/07/19/%E5%8D%9A%E5%BC%88/"/>
    <id>http://www.31415x.cf/2019/07/19/博弈/</id>
    <published>2019-07-19T08:40:06.000Z</published>
    <updated>2019-07-19T11:48:28.496Z</updated>
    
    <content type="html"><![CDATA[<p>博弈论，一个曾经看了感觉看不懂的东西，，现在不得不再看一下，，不过也只是大概了解了一下这部分内容，主要是sg函数的使用吧，，</p><a id="more"></a><h1 id="经典博弈"><a href="#经典博弈" class="headerlink" title="经典博弈"></a>经典博弈</h1><p>经典博弈就那几个，，记住每种不同的局面和取法以及处理方式就行了，，</p><p><a href="https://blog.csdn.net/lgdblue/article/details/15809893" target="_blank" rel="noopener">这里这个博客讲的很清楚</a></p><p><a href="https://www.cnblogs.com/frog112111/p/3199780.html" target="_blank" rel="noopener">还有这个</a></p><p><a href="https://blog.csdn.net/strangedbly/article/details/51137432" target="_blank" rel="noopener">这里</a></p><h1 id="公平组合博弈（Impartial-Combinatori-Games）"><a href="#公平组合博弈（Impartial-Combinatori-Games）" class="headerlink" title="公平组合博弈（Impartial Combinatori Games）"></a>公平组合博弈（Impartial Combinatori Games）</h1><p>这里就是sg函数的使用了，，主要是PN点表示必败和必胜态在sg函数里怎么体现、<code>mex()</code> 的求法，</p><p>多个游戏的问题可以利用经典博弈的异或来求每一个游戏的sg值的异或和来判断，，</p><p>用到sg函数的博弈可能的两种板子：</p><h2 id="打表"><a href="#打表" class="headerlink" title="打表"></a>打表</h2><p>最常用，但是如果多组输入，并且每组的取法不同就可能会爆，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//f[] 为一个游戏的取法，使用前初始化，排序，sg[]即为石子数为某个值下的先手的结果，0为必败</span></span><br><span class="line"><span class="keyword">int</span> f[maxn], fn, sg[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getsg</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(sg, <span class="number">0</span>, <span class="keyword">sizeof</span> sg);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; f[j] &lt;= i &amp;&amp; j &lt;= fn; ++j)vis[sg[i - f[j]]] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;; ++j)<span class="keyword">if</span>(!vis[j])&#123;sg[i] = j; <span class="keyword">break</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dfs记忆化搜索"><a href="#dfs记忆化搜索" class="headerlink" title="dfs记忆化搜索"></a>dfs记忆化搜索</h2><p>当打表可能爆时就用搜索来求sg</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> f[<span class="number">105</span>], sg[maxn], n, m, fn;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfsg</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(~sg[num])<span class="keyword">return</span> sg[num];</span><br><span class="line">    <span class="keyword">bool</span> vis[<span class="number">105</span>];</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= fn &amp;&amp; f[i] &lt;= num; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        dfsg(num - f[i]);</span><br><span class="line">        vis[sg[num - f[i]]] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;; ++i)&#123;<span class="keyword">if</span>(!vis[i])<span class="keyword">return</span> sg[num] = i;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><p><a href="https://vjudge.net/contest/311362#overview" target="_blank" rel="noopener">[kuangbin]专题36 博弈论（Ⅱ）</a></p><p><a href="https://vjudge.net/contest/311361" target="_blank" rel="noopener">[kuangbin]专题35 博弈论（Ⅰ）</a></p><p>有时间再多补些题吧，，，</p><p>(end)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博弈论，一个曾经看了感觉看不懂的东西，，现在不得不再看一下，，不过也只是大概了解了一下这部分内容，主要是sg函数的使用吧，，&lt;/p&gt;
    
    </summary>
    
      <category term="ACM-博弈论" scheme="http://www.31415x.cf/categories/ACM-%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
    
      <category term="刷题" scheme="http://www.31415x.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="博弈" scheme="http://www.31415x.cf/tags/%E5%8D%9A%E5%BC%88/"/>
    
  </entry>
  
  <entry>
    <title>搜索专题</title>
    <link href="http://www.31415x.cf/2019/07/13/%E6%90%9C%E7%B4%A2%E4%B8%93%E9%A2%98/"/>
    <id>http://www.31415x.cf/2019/07/13/搜索专题/</id>
    <published>2019-07-13T06:29:07.000Z</published>
    <updated>2019-07-21T08:12:38.274Z</updated>
    
    <content type="html"><![CDATA[<p>搜索还是熟练啊，不知道是好久不练的原因还是，没有好好的刷题，，再次做这种题还是磕磕碰碰就像第一次学一样的感觉。。</p><h1 id="哈密顿绕行世界问题"><a href="#哈密顿绕行世界问题" class="headerlink" title="哈密顿绕行世界问题"></a><a href="https://vjudge.net/problem/HDU-2181" target="_blank" rel="noopener">哈密顿绕行世界问题</a></h1><p>哈密顿图的遍历，，知道这个概念但是从未写过这样的题，即使是水题，，，（熟悉一下之前的代码风格，，一个多月没动了，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdlib&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;set&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cmath&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;queue&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;stack&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;ctime&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next;</span><br><span class="line">&#125;edge[maxn];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].next = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">21</span>];</span><br><span class="line"><span class="keyword">int</span> anscnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">21</span>];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// for(int i = 1; i &lt;= 20; ++i)cout &lt;&lt; ans[i] &lt;&lt; " ";cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">if</span>(cnt == <span class="number">20</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(u != m)<span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; anscnt++ &lt;&lt; <span class="string">":  "</span> &lt;&lt; m &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="comment">// for(int i = 1; i &lt;= 20; ++i)</span></span><br><span class="line">        <span class="comment">//     cout &lt;&lt; ans[i] &lt;&lt; " ";</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">20</span>; ++i)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; ans[i];</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt &amp;&amp; u == m)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> tmp[<span class="number">45</span>], tmpn;</span><br><span class="line">    tmpn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].next)</span><br><span class="line">        <span class="keyword">if</span>(!vis[edge[i].to])</span><br><span class="line">            tmp[++tmpn] = edge[i].to;</span><br><span class="line">    sort(tmp + <span class="number">1</span>, tmp + <span class="number">1</span> + tmpn);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tmpn; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; u &lt;&lt; "-" &lt;&lt; tmp[i] &lt;&lt; endl;</span></span><br><span class="line">        vis[tmp[i]] = <span class="literal">true</span>;</span><br><span class="line">        ans[++cnt] = tmp[i];</span><br><span class="line">        dfs(tmp[i]);</span><br><span class="line">        vis[tmp[i]] = <span class="literal">false</span>;</span><br><span class="line">        --cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in" , "r" , stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out" , "w" , stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">            addedge(i, m);</span><br><span class="line">            addedge(m, i);</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; m &amp;&amp; m)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        anscnt = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="keyword">sizeof</span> ans);</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">        dfs(m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Maze-Escape"><a href="#Maze-Escape" class="headerlink" title="Maze Escape"></a><a href="https://vjudge.net/problem/HihoCoder-1328" target="_blank" rel="noopener">Maze Escape</a></h1><p>印象中没有做过用第三维保存一个限制条件的搜索题，，（也有可能做了忘记了）</p><p>这题直接用一个第三维的二进制来表示拿着不同钥匙时的情况，，这样就可以解决可以倒回去的问题，，（我的理解是对于拿着每个不同的钥匙时换一张标记这个图的二维数组）</p><p>还有一个总是记不住的问题：求最短路一般都是 <strong>bfs</strong> ，，深搜没见过几次不T的，，，包括下面这题，，，QAQ</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdlib&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;set&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cmath&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;queue&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;stack&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;ctime&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e2</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, key;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> mp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> vis[maxn][maxn][<span class="number">1</span> &lt;&lt; <span class="number">6</span>];</span><br><span class="line">node s, t;</span><br><span class="line">node key[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">int</span> dx[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> ux, <span class="keyword">int</span> uy, <span class="keyword">int</span> cnt, <span class="keyword">int</span> Key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; ux &lt;&lt; " " &lt;&lt; uy &lt;&lt; " " &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">if</span>(ux == t.x &amp;&amp; uy == t.y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; cnt &lt;&lt; "------------------------" &lt;&lt; Key &lt;&lt; endl;</span></span><br><span class="line">        ans = min(ans, cnt);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> nx = ux + dx[i];</span><br><span class="line">        <span class="keyword">int</span> ny = uy + dy[i];</span><br><span class="line">        <span class="keyword">if</span>(nx &lt; <span class="number">0</span> || nx &gt;= n || ny &lt; <span class="number">0</span> || ny &gt;= m)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(!vis[nx][ny][Key])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(mp[nx][ny] == <span class="string">'.'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                vis[nx][ny][Key] = <span class="literal">true</span>;</span><br><span class="line">                dfs(nx, ny, cnt + <span class="number">1</span>, Key);</span><br><span class="line">                vis[nx][ny][Key] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(mp[nx][ny] != <span class="string">'.'</span> &amp;&amp; mp[nx][ny] != <span class="string">'#'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(mp[nx][ny] &gt;= <span class="string">'a'</span> &amp;&amp; mp[nx][ny] &lt;= <span class="string">'z'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// cout &lt;&lt; nx &lt;&lt; "---" &lt;&lt; ny &lt;&lt; " --" &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class="line">                    <span class="keyword">int</span> key = Key | (<span class="number">1</span> &lt;&lt; (mp[nx][ny] - <span class="string">'a'</span>));</span><br><span class="line">                    <span class="keyword">if</span>(vis[nx][ny][key])<span class="keyword">continue</span>;</span><br><span class="line">                    vis[nx][ny][key] = <span class="literal">true</span>;</span><br><span class="line">                    dfs(nx, ny, cnt + <span class="number">1</span>, key);</span><br><span class="line">                    vis[nx][ny][key] = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// cout &lt;&lt; "---" &lt;&lt; Key &lt;&lt; endl;</span></span><br><span class="line">                    <span class="keyword">if</span>(Key &amp; (<span class="number">1</span> &lt;&lt; (mp[nx][ny] - <span class="string">'A'</span>)))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// cout &lt;&lt; nx &lt;&lt; "++++" &lt;&lt; ny &lt;&lt; "++" &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class="line">                        <span class="keyword">int</span> key = Key ^ (<span class="number">1</span> &lt;&lt; (mp[nx][ny] - <span class="string">'A'</span>));</span><br><span class="line">                        <span class="keyword">if</span>(vis[nx][ny][key])<span class="keyword">continue</span>;</span><br><span class="line">                        vis[nx][ny][key] = <span class="literal">true</span>;</span><br><span class="line">                        dfs(nx, ny, cnt + <span class="number">1</span>, key);</span><br><span class="line">                        vis[nx][ny][key] = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dis[maxn][maxn][<span class="number">1</span> &lt;&lt; <span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line">    q.push(s);  </span><br><span class="line">    vis[s.x][s.y][s.key] = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        node u = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">if</span>(u.x == t.x &amp;&amp; u.y == t.y)<span class="keyword">return</span> dis[u.x][u.y][u.key];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            node v;</span><br><span class="line">            v.x = u.x + dx[i];</span><br><span class="line">            v.y = u.y + dy[i];</span><br><span class="line">            v.key = u.key;</span><br><span class="line">            <span class="keyword">if</span>(v.x &lt; <span class="number">0</span> || v.x &gt;= n || v.y &lt; <span class="number">0</span> || v.y &gt;= m)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(!vis[v.x][v.y][v.key])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(mp[v.x][v.y] == <span class="string">'.'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// cout &lt;&lt; v.x &lt;&lt; " " &lt;&lt; v.y &lt;&lt; endl;</span></span><br><span class="line">                    vis[v.x][v.y][v.key] = <span class="literal">true</span>;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                    dis[v.x][v.y][v.key] = dis[u.x][u.y][u.key] + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(mp[v.x][v.y] != <span class="string">'#'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// cout &lt;&lt; v.x &lt;&lt; " " &lt;&lt; v.y &lt;&lt; endl;</span></span><br><span class="line">                    <span class="keyword">if</span>(mp[v.x][v.y] &gt;= <span class="string">'a'</span> &amp;&amp; mp[v.x][v.y] &lt;= <span class="string">'z'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        v.key |= (<span class="number">1</span> &lt;&lt; (mp[v.x][v.y] - <span class="string">'a'</span> + <span class="number">1</span>));</span><br><span class="line">                        vis[v.x][v.y][v.key] = <span class="literal">true</span>;</span><br><span class="line">                        q.push(v);</span><br><span class="line">                        dis[v.x][v.y][v.key] = dis[u.x][u.y][u.key] + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(v.key &amp; (<span class="number">1</span> &lt;&lt; (mp[v.x][v.y] - <span class="string">'A'</span> + <span class="number">1</span>)))</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">// cout &lt;&lt; v.key &lt;&lt; endl;</span></span><br><span class="line">                            <span class="comment">// cout &lt;&lt; v.x &lt;&lt; "---" &lt;&lt; v.y &lt;&lt; endl;</span></span><br><span class="line">                            v.key ^= (<span class="number">1</span> &lt;&lt; (mp[v.x][v.y] - <span class="string">'A'</span> + <span class="number">1</span>));</span><br><span class="line">                            vis[v.x][v.y][v.key] = <span class="literal">true</span>;</span><br><span class="line">                            q.push(v);</span><br><span class="line">                            dis[v.x][v.y][v.key] = dis[u.x][u.y][u.key] + <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in" , "r" , stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out" , "w" , stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s.x &gt;&gt; s.y &gt;&gt; t.x &gt;&gt; t.y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; mp[i][j];</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        mp[x][y] = <span class="string">'a'</span> + i - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for(int i = 0; i &lt; n; ++i)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     for(int j = 0; j &lt; m; ++j)</span></span><br><span class="line">    <span class="comment">//         cout &lt;&lt; mp[i][j];</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    ans = inf;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="comment">// dfs(s.x, s.y, 0, 0);</span></span><br><span class="line">    ans = bfs();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Saving-Tang-Monk-II"><a href="#Saving-Tang-Monk-II" class="headerlink" title="Saving Tang Monk II"></a><a href="https://vjudge.net/problem/HihoCoder-1828" target="_blank" rel="noopener">Saving Tang Monk II</a></h1><p>这题和前面两题差不多把，，也是要用第三维来标记不同的氧气数时的图怎么走，，再加一个优先队列，，不然队列里的前面的可能解不一定是最优的，，这样的话就只能遍历完整个队列，，但是这样又浪费时间会T，，所以换一个以距离为权的优先队列就可以保证第一个到达终点的可行解就是最优的，，</p><p>bfs+三维vis+优先队列</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdlib&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;set&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cmath&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;queue&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;stack&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;ctime&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e2</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, oxy;</span><br><span class="line">    <span class="keyword">bool</span> b;</span><br><span class="line">    <span class="keyword">int</span> dis;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;r)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dis &gt;= r.dis;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;s, t;</span><br><span class="line"><span class="keyword">char</span> mp[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn][maxn][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">int</span> dx[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    s.oxy = t.oxy = <span class="number">0</span>;</span><br><span class="line">    s.b = t.b = <span class="literal">false</span>;</span><br><span class="line">    s.dis = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// queue&lt;node&gt; q;</span></span><br><span class="line">    priority_queue&lt;node&gt; q;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="keyword">int</span> ans = inf;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        node u = q.top(); q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            node v;</span><br><span class="line">            v.x = u.x + dx[i];</span><br><span class="line">            v.y = u.y + dy[i];</span><br><span class="line">            v.oxy = u.oxy;</span><br><span class="line">            v.dis = u.dis + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(v.x &lt; <span class="number">1</span> || v.x &gt; n || v.y &lt; <span class="number">1</span> || v.y &gt; m)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(mp[v.x][v.y] == <span class="string">'T'</span>)<span class="keyword">return</span> v.dis;</span><br><span class="line">            <span class="keyword">if</span>(mp[v.x][v.y] == <span class="string">'#'</span> &amp;&amp; v.oxy == <span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(mp[v.x][v.y] == <span class="string">'P'</span>)--v.dis;</span><br><span class="line">            <span class="keyword">if</span>(mp[v.x][v.y] == <span class="string">'B'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                v.b = <span class="literal">true</span>;</span><br><span class="line">                ++v.oxy;v.oxy %= <span class="number">6</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(vis[v.x][v.y][v.oxy])<span class="keyword">continue</span>;</span><br><span class="line">            vis[v.x][v.y][v.oxy] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(mp[v.x][v.y] == <span class="string">'#'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ++v.dis;</span><br><span class="line">                <span class="keyword">if</span>(v.oxy)</span><br><span class="line">                    --v.oxy;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(v.b)</span><br><span class="line">                    v.dis += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans == inf)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in" , "r" , stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out" , "w" , stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &amp;&amp; n &amp;&amp; m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; mp[i][j];</span><br><span class="line">                <span class="keyword">if</span>(mp[i][j] == <span class="string">'S'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    s.x = i;</span><br><span class="line">                    s.y = j;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(mp[i][j] == <span class="string">'T'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    t.x = i;</span><br><span class="line">                    t.y = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; bfs() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="A-Walk-Through-the-Forest"><a href="#A-Walk-Through-the-Forest" class="headerlink" title="A Walk Through the Forest"></a><a href="https://vjudge.net/problem/HDU-1142#author=0" target="_blank" rel="noopener">A Walk Through the Forest</a></h1><p>dijkstra + 记忆化搜索</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;set&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cmath&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;stack&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;ctime&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> dis[maxn], dp[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt, w;</span><br><span class="line">&#125;edge[maxm &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].w = w;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w;</span><br><span class="line">    node (<span class="keyword">int</span> _v, <span class="keyword">int</span> _w)&#123;v = _v; w = _w;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">const</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;r)<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> w &gt; r.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="built_in">memset</span>(dis, inf, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;node&gt; q;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line">    q.push(node(s, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        node u = q.top(); q.pop();</span><br><span class="line">        <span class="keyword">if</span>(vis[u.v])<span class="keyword">continue</span>;</span><br><span class="line">        vis[u.v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u.v]; ~i; i = edge[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dis[v] &gt;= dis[u.v] + edge[i].w)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = dis[u.v] + edge[i].w;</span><br><span class="line">                q.push(node(v, dis[v]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(~dp[u])<span class="keyword">return</span> dp[u];</span><br><span class="line">    <span class="keyword">if</span>(u == <span class="number">2</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    dp[u] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>(dis[u] &gt; dis[edge[i].to])dp[u] += dfs(edge[i].to);</span><br><span class="line">    <span class="keyword">return</span> dp[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in" , "r"   , stdin); </span></span><br><span class="line">    <span class="comment">// freopen("233.out" , "w" , stdout);</span></span><br><span class="line">    <span class="comment">// ios_base::sync_with_stdio(0);</span></span><br><span class="line">    <span class="comment">// cin.tie(0);cout.tie(0);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">            addedge(u, v, w);</span><br><span class="line">            addedge(v, u, w);</span><br><span class="line">        &#125;</span><br><span class="line">        dijkstra(<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dfs(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;搜索还是熟练啊，不知道是好久不练的原因还是，没有好好的刷题，，再次做这种题还是磕磕碰碰就像第一次学一样的感觉。。&lt;/p&gt;
&lt;h1 id=&quot;哈密顿绕行世界问题&quot;&gt;&lt;a href=&quot;#哈密顿绕行世界问题&quot; class=&quot;headerlink&quot; title=&quot;哈密顿绕行世界问题&quot;
      
    
    </summary>
    
      <category term="ACM-搜索" scheme="http://www.31415x.cf/categories/ACM-%E6%90%9C%E7%B4%A2/"/>
    
    
      <category term="刷题" scheme="http://www.31415x.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="搜索" scheme="http://www.31415x.cf/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>基于卷积神经网络的人脸识别项目</title>
    <link href="http://www.31415x.cf/2019/06/08/%E5%9F%BA%E4%BA%8E%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E9%A1%B9%E7%9B%AE/"/>
    <id>http://www.31415x.cf/2019/06/08/基于卷积神经网络的人脸识别项目/</id>
    <published>2019-06-08T05:07:17.000Z</published>
    <updated>2019-06-08T05:51:31.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>学期末了啊，，，最后这个人脸识别的项目弄完了，，有很多的不足，，很多东西都是只知道怎么用，但是不知道其背后的逻辑，，感觉自己学习东西对于那些潜意识优先级不高的就放弃了，，，emmm</p><p>这篇文章主要是大致介绍一下我们最后弄出来的人脸识别项目的成果吧，，整个项目放到了<a href="https://github.com/31415926535x/CollegeProjectBackup/tree/master/FaceRecognition" target="_blank" rel="noopener">我的github</a>，，可以直接下载运行的，，不过这也只是一个我们的思路，，这块东西还是多阅读别人的项目代码，，然后自己写一下好些，，根据自己的需求尝试自己写代码，实在不行再看别人的思路，，才能提升自己的思维吧，，，</p><h1 id="项目思路"><a href="#项目思路" class="headerlink" title="项目思路"></a>项目思路</h1><p>抛开那些花里胡哨的东西，人脸识别的大致流程只有三个： <strong>人脸数据的录入、构建卷积神经网络并训练模型、识别</strong></p><p>不过这前要配置好环境，，我用的Anaconda来配置的整体环境，，，<a href="https://www.cnblogs.com/31415926535x/p/10620732.html" target="_blank" rel="noopener">可以看我的这篇博客</a> ，，（到能成功验证环境即可</p><p>具体的运行流程：</p><ul><li>激活创建的anaconda环境</li><li>运行初始化模块（可有可无） <code>python init.py</code></li><li>运行录入人脸模块，此时会提示输入姓名，然后录制视频，按q结束（20几喵即可） <code>python getFaceByCamera.py</code></li><li>运行训练模块，<code>python tensorflow_face.py</code></li><li>等待，，结束后会打印准确度，，</li><li>运行识别模块，<code>python tensorflow_face.py</code> ，，，没错还是这个，，第二次运行会调用识别模块的，，，</li></ul><h2 id="人脸数据的录入"><a href="#人脸数据的录入" class="headerlink" title="人脸数据的录入"></a>人脸数据的录入</h2><p><a href="https://github.com/31415926535x/CollegeProjectBackup/blob/master/FaceRecognition/getFaceByCamera.py" target="_blank" rel="noopener">这部分的代码在这里</a></p><p>这部分我们的大致思路是：</p><ul><li>录入待录入者的姓名</li><li>录制一段视频</li><li>利用dlib人脸检测器以及opencv对图片的操作来裁剪200张相片，，当然也可以使用opencv的人脸检测器，，，不足应该就是准确率不怎么高吧，，但是快些，，，</li><li>循环录入所有人的信息</li></ul><p>这一部分的代码：</p><p>getFaceByCamera.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> dlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_video</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="comment"># 录制视频</span></span><br><span class="line">    <span class="comment">#shutil.rmtree(name)</span></span><br><span class="line">    <span class="string">"""使用opencv录像"""</span></span><br><span class="line">    cap = cv2.VideoCapture(<span class="number">0</span>)  <span class="comment"># 默认的摄像头</span></span><br><span class="line">    <span class="comment"># 指定视频代码</span></span><br><span class="line">    fourcc = cv2.VideoWriter_fourcc(*<span class="string">"DIVX"</span>)</span><br><span class="line">    out = cv2.VideoWriter(<span class="string">'233.avi'</span>, fourcc, <span class="number">20.0</span>, (<span class="number">640</span>,<span class="number">480</span>))   <span class="comment"># 设置录制的视频的格式</span></span><br><span class="line">    <span class="keyword">while</span>(cap.isOpened()):</span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            out.write(frame)</span><br><span class="line">            <span class="comment">#</span></span><br><span class="line">            cv2.imshow(<span class="string">'frame'</span>,frame)</span><br><span class="line">            <span class="comment"># 等待按键q操作关闭摄像头</span></span><br><span class="line">            <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == ord(<span class="string">'q'</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    cap.release()                   <span class="comment"># 释放摄像头资源</span></span><br><span class="line">    out.release()                   <span class="comment"># 释放文件资源</span></span><br><span class="line">    cv2.destroyAllWindows()         <span class="comment"># 关闭拍摄窗口</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变图片的亮度与对比度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">relight</span><span class="params">(img, light=<span class="number">1</span>, bias=<span class="number">0</span>)</span>:</span></span><br><span class="line">    w = img.shape[<span class="number">1</span>]</span><br><span class="line">    h = img.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#image = []</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,w):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,h):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">                tmp = int(img[j,i,c]*light + bias)</span><br><span class="line">                <span class="keyword">if</span> tmp &gt; <span class="number">255</span>:</span><br><span class="line">                    tmp = <span class="number">255</span></span><br><span class="line">                <span class="keyword">elif</span> tmp &lt; <span class="number">0</span>:</span><br><span class="line">                    tmp = <span class="number">0</span></span><br><span class="line">                img[j,i,c] = tmp</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDataByDlib</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="comment"># 利用dlib来实现</span></span><br><span class="line">    output_dir = name       <span class="comment"># 使用录入的名字作为文件夹的名字</span></span><br><span class="line">    size = <span class="number">64</span>               <span class="comment"># 相片的大小为64*64</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_dir):      <span class="comment"># 没有文件夹是主动创建一个</span></span><br><span class="line">        os.makedirs(output_dir)</span><br><span class="line">    <span class="comment">#使用dlib自带的frontal_face_detector作为我们的特征提取器</span></span><br><span class="line">    detector = dlib.get_frontal_face_detector()</span><br><span class="line">    <span class="comment"># 打开摄像头 参数为输入流，可以为摄像头或视频文件</span></span><br><span class="line">    <span class="comment">#camera = cv2.VideoCapture(0)</span></span><br><span class="line">    camera = cv2.VideoCapture(<span class="string">"233.avi"</span>)    <span class="comment"># 相片来自上一步拍摄的视频</span></span><br><span class="line"></span><br><span class="line">    index = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> (index &lt;= <span class="number">200</span>):                  <span class="comment"># 每一段视频只取200张</span></span><br><span class="line">            print(<span class="string">'Being processed picture %s'</span> % index) <span class="comment"># 显示处理的过程</span></span><br><span class="line">            <span class="comment"># 从摄像头读取照片</span></span><br><span class="line">            success, img = camera.read()    <span class="comment"># 从视频流中读取照片</span></span><br><span class="line">            <span class="comment"># 转为灰度图片</span></span><br><span class="line">            gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">            <span class="comment"># 使用detector进行人脸检测</span></span><br><span class="line">            dets = detector(gray_img, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> success == <span class="keyword">False</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i, d <span class="keyword">in</span> enumerate(dets):</span><br><span class="line">                x1 = d.top() <span class="keyword">if</span> d.top() &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                y1 = d.bottom() <span class="keyword">if</span> d.bottom() &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                x2 = d.left() <span class="keyword">if</span> d.left() &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                y2 = d.right() <span class="keyword">if</span> d.right() &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">                face = img[x1:y1,x2:y2]</span><br><span class="line">                <span class="comment"># 调整图片的对比度与亮度， 对比度与亮度值都取随机数，这样能增加样本的多样性</span></span><br><span class="line">                face = relight(face, random.uniform(<span class="number">0.5</span>, <span class="number">1.5</span>), random.randint(<span class="number">-50</span>, <span class="number">50</span>))</span><br><span class="line">                <span class="comment"># 裁剪出人脸相片，大小为64*64</span></span><br><span class="line">                face = cv2.resize(face, (size,size))    </span><br><span class="line">                <span class="comment"># 显示最后裁剪出的人脸相片</span></span><br><span class="line">                cv2.imshow(<span class="string">'image'</span>, face)</span><br><span class="line">                <span class="comment"># 保存到文件下，文件名为1 - 200.jpg</span></span><br><span class="line">                cv2.imwrite(output_dir+<span class="string">'/'</span>+str(index)+<span class="string">'.jpg'</span>, face)</span><br><span class="line"></span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line">            key = cv2.waitKey(<span class="number">30</span>) &amp; <span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> key == <span class="number">27</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'Finished!'</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 删除视频</span></span><br><span class="line">    shutil.rmtree(<span class="string">'./233.avi'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDataByOpencv2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 利用opencv来实现</span></span><br><span class="line">    output_dir = <span class="string">'./my_faces'</span></span><br><span class="line">    size = <span class="number">64</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_dir):</span><br><span class="line">        os.makedirs(output_dir)                                 </span><br><span class="line">    <span class="comment"># 获取分类器</span></span><br><span class="line">    haar = cv2.CascadeClassifier(<span class="string">r'G:\DIP\Anaconda3\envs\test1\Library\etc\haarcascades\haarcascade_frontalface_default.xml'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开摄像头 参数为输入流，可以为摄像头或视频文件</span></span><br><span class="line">    camera = cv2.VideoCapture(<span class="string">"233.avi"</span>)</span><br><span class="line"></span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">10000</span>):</span><br><span class="line">            print(<span class="string">'It`s processing %s image.'</span> % n)</span><br><span class="line">            <span class="comment"># 读帧</span></span><br><span class="line">            success, img = camera.read()</span><br><span class="line"></span><br><span class="line">            gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">            faces = haar.detectMultiScale(gray_img, <span class="number">1.3</span>, <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">for</span> f_x, f_y, f_w, f_h <span class="keyword">in</span> faces:</span><br><span class="line">                face = img[f_y:f_y+f_h, f_x:f_x+f_w]</span><br><span class="line">                face = cv2.resize(face, (<span class="number">64</span>,<span class="number">64</span>))</span><br><span class="line">                <span class="string">'''</span></span><br><span class="line"><span class="string">                if n % 3 == 1:</span></span><br><span class="line"><span class="string">                    face = relight(face, 1, 50)</span></span><br><span class="line"><span class="string">                elif n % 3 == 2:</span></span><br><span class="line"><span class="string">                    face = relight(face, 0.5, 0)</span></span><br><span class="line"><span class="string">                '''</span></span><br><span class="line">                face = relight(face, random.uniform(<span class="number">0.5</span>, <span class="number">1.5</span>), random.randint(<span class="number">-50</span>, <span class="number">50</span>))</span><br><span class="line">                cv2.imshow(<span class="string">'img'</span>, face)</span><br><span class="line">                cv2.imwrite(output_dir+<span class="string">'/'</span>+str(n)+<span class="string">'.jpg'</span>, face)</span><br><span class="line">                n+=<span class="number">1</span></span><br><span class="line">            key = cv2.waitKey(<span class="number">30</span>) &amp; <span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> key == <span class="number">27</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    name = input(<span class="string">'please input yourename: '</span>)        <span class="comment"># 获取录入者的名字</span></span><br><span class="line">    name = os.path.join(<span class="string">'./image/trainfaces'</span>, name) <span class="comment"># 生成保存的文件路径名</span></span><br><span class="line">    make_video(name)                                <span class="comment"># 拍摄视频</span></span><br><span class="line">    getDataByDlib(name)                             <span class="comment"># 利用dlib处理裁剪人脸原始相片</span></span><br></pre></td></tr></table></figure><h2 id="构建卷积神经网络，然后训练模型"><a href="#构建卷积神经网络，然后训练模型" class="headerlink" title="构建卷积神经网络，然后训练模型"></a>构建卷积神经网络，然后训练模型</h2><p>这一部分大概就是做人脸识别的主要目的了吧，，，</p><h3 id="构建卷积神经网络"><a href="#构建卷积神经网络" class="headerlink" title="构建卷积神经网络"></a>构建卷积神经网络</h3><p>这一部分几乎网上写的代码的框架都是差不多的，，，所以只要理解每一层是什么意思，，怎么用就行了，，当然可以继续深究下去，，理解每一层为什么这么做，，这么做的方法是什么等等，，</p><p>我们之前在这一部分投入的精力也最多，，出现的问题也是很多的，，其中我感觉最印象深刻的就是层数的叠加和那个神奇的 <code>loss=0.69.....</code></p><p>层数的叠加就是说大部分的代码都是做的3层的神经网络，，但是很少有做多层的，，当时找了很多的资料才一点一点的大致会算怎么计算下一层</p><p>关于那一个神奇的 <code>loss=0.69</code> ，，貌似不同的网络、需求下可能不会出现这种情况，，，但是如果出现不管比怎么调参出来的loss都保持在0.69附近的话，，可以试着查一下这一个问题，，我们最后的解决方法是再添加一层 <strong>batch nomalization层</strong> ，，具体干什么的网上有很多讲解的，，，加了它就可以使loss快速收敛，，，</p><h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><p>这一部分的框架都是差不多的，，变化可能有参数的变化，，优化器的不同等等</p><p>代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="string">''' face detect convolution'''</span></span><br><span class="line"><span class="comment"># pylint: disable=invalid-name</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> logging <span class="keyword">as</span> log</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> common</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">SIZE = <span class="number">64</span></span><br><span class="line"></span><br><span class="line">x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, SIZE, SIZE, <span class="number">3</span>])</span><br><span class="line">y_ = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="keyword">None</span>])</span><br><span class="line">keep_prob_5 = tf.placeholder(tf.float32)</span><br><span class="line">keep_prob_75 = tf.placeholder(tf.float32)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weightVariable</span><span class="params">(shape)</span>:</span></span><br><span class="line">    <span class="string">''' build weight variable'''</span></span><br><span class="line">    init = tf.random_normal(shape, stddev=<span class="number">0.01</span>)</span><br><span class="line">    <span class="comment">#init = tf.truncated_normal(shape, stddev=0.01)</span></span><br><span class="line">    <span class="keyword">return</span> tf.Variable(init)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">biasVariable</span><span class="params">(shape)</span>:</span></span><br><span class="line">    <span class="string">''' build bias variable'''</span></span><br><span class="line">    init = tf.random_normal(shape)</span><br><span class="line">    <span class="comment">#init = tf.truncated_normal(shape, stddev=0.01)</span></span><br><span class="line">    <span class="keyword">return</span> tf.Variable(init)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(x, W)</span>:</span></span><br><span class="line">    <span class="string">''' conv2d by 1, 1, 1, 1'''</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.conv2d(x, W, strides=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxPool</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">''' max pooling'''</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], strides=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dropout</span><span class="params">(x, keep)</span>:</span></span><br><span class="line">    <span class="string">''' drop out'''</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.dropout(x, keep)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">batch_norm_layer</span><span class="params">(value,is_training=False,name=<span class="string">'batch_norm'</span>)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    批量归一化  返回批量归一化的结果</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    args:</span></span><br><span class="line"><span class="string">        value:代表输入，第一个维度为batch_size</span></span><br><span class="line"><span class="string">        is_training:当它为True，代表是训练过程，这时会不断更新样本集的均值与方差。当测试时，要设置成False，这样就会使用训练样本集的均值和方差。</span></span><br><span class="line"><span class="string">              默认测试模式</span></span><br><span class="line"><span class="string">        name：名称。</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">if</span> is_training <span class="keyword">is</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment">#训练模式 使用指数加权函数不断更新均值和方差</span></span><br><span class="line">        <span class="keyword">return</span> tf.contrib.layers.batch_norm(inputs=value,decay=<span class="number">0.9</span>,updates_collections=<span class="keyword">None</span>,is_training = <span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#测试模式 不更新均值和方差，直接使用</span></span><br><span class="line">        <span class="keyword">return</span> tf.contrib.layers.batch_norm(inputs=value,decay=<span class="number">0.9</span>,updates_collections=<span class="keyword">None</span>,is_training = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cnnLayer</span><span class="params">(classnum, isTrue)</span>:</span></span><br><span class="line">    <span class="string">''' create cnn layer'''</span></span><br><span class="line">    <span class="comment"># 第一层</span></span><br><span class="line">    W1 = weightVariable([<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">32</span>]) <span class="comment"># 卷积核大小(3,3)， 输入通道(3)， 输出通道(32)</span></span><br><span class="line">    b1 = biasVariable([<span class="number">32</span>])</span><br><span class="line">    conv1 = tf.nn.relu(batch_norm_layer(conv2d(x, W1) + b1, isTrue))</span><br><span class="line">    pool1 = maxPool(conv1)</span><br><span class="line">    <span class="comment"># 减少过拟合，随机让某些权重不更新</span></span><br><span class="line">    drop1 = dropout(pool1, keep_prob_5) <span class="comment"># 32 * 32 * 32 多个输入channel 被filter内积掉了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二层</span></span><br><span class="line">    W2 = weightVariable([<span class="number">3</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">64</span>])</span><br><span class="line">    b2 = biasVariable([<span class="number">64</span>])</span><br><span class="line">    conv2 = tf.nn.relu(batch_norm_layer(conv2d(drop1, W2) + b2, isTrue))</span><br><span class="line">    pool2 = maxPool(conv2)</span><br><span class="line">    drop2 = dropout(pool2, keep_prob_5) <span class="comment"># 64 * 16 * 16</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第三层</span></span><br><span class="line">    W3 = weightVariable([<span class="number">3</span>, <span class="number">3</span>, <span class="number">64</span>, <span class="number">64</span>])</span><br><span class="line">    b3 = biasVariable([<span class="number">64</span>])</span><br><span class="line">    conv3 = tf.nn.relu(conv2d(drop2, W3) + b3)</span><br><span class="line">    pool3 = maxPool(conv3)</span><br><span class="line">    drop3 = dropout(pool3, keep_prob_5) <span class="comment"># 64 * 8 * 8</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 全连接层</span></span><br><span class="line">    Wf = weightVariable([<span class="number">8</span>*<span class="number">8</span>*<span class="number">64</span>,<span class="number">512</span>])</span><br><span class="line">    bf = biasVariable([<span class="number">512</span>])</span><br><span class="line">    drop3_flat = tf.reshape(drop3, [<span class="number">-1</span>, <span class="number">8</span>*<span class="number">8</span>*<span class="number">64</span>])</span><br><span class="line">    dense = tf.nn.relu(tf.matmul(drop3_flat, Wf) + bf)</span><br><span class="line">    dropf = dropout(dense, keep_prob_75)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出层</span></span><br><span class="line">    Wout = weightVariable([<span class="number">512</span>, classnum])</span><br><span class="line">    bout = weightVariable([classnum])</span><br><span class="line">    <span class="comment">#out = tf.matmul(dropf, Wout) + bout</span></span><br><span class="line">    out = tf.add(tf.matmul(dropf, Wout), bout)</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 第三层</span></span><br><span class="line">    <span class="comment"># W3 = weightVariable([3, 3, 64, 128])</span></span><br><span class="line">    <span class="comment"># b3 = biasVariable([128])</span></span><br><span class="line">    <span class="comment"># conv3 = tf.nn.relu(batch_norm_layer(conv2d(drop2, W3) + b3, True))</span></span><br><span class="line">    <span class="comment"># pool3 = maxPool(conv3)</span></span><br><span class="line">    <span class="comment"># drop3 = dropout(pool3, keep_prob_5) # 128 * 8 * 8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 第四层</span></span><br><span class="line">    <span class="comment"># W4 = weightVariable([3, 3, 128, 512])</span></span><br><span class="line">    <span class="comment"># b4 = biasVariable([512])</span></span><br><span class="line">    <span class="comment"># conv4 = tf.nn.relu(batch_norm_layer(conv2d(drop3, W4) + b4, True))</span></span><br><span class="line">    <span class="comment"># pool4 = maxPool(conv4)</span></span><br><span class="line">    <span class="comment"># drop4 = dropout(pool4, keep_prob_5) # 512 * 4 * 4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 第五层</span></span><br><span class="line">    <span class="comment"># W5 = weightVariable([3, 3, 512, 1024])</span></span><br><span class="line">    <span class="comment"># b5 = biasVariable([1024])</span></span><br><span class="line">    <span class="comment"># conv5 = tf.nn.relu(batch_norm_layer(conv2d(drop4, W5) + b5, True))</span></span><br><span class="line">    <span class="comment"># pool5 = maxPool(conv5)</span></span><br><span class="line">    <span class="comment"># drop5 = dropout(pool5, keep_prob_5) # 1024 * 2 * 2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 第六层</span></span><br><span class="line">    <span class="comment"># W6 = weightVariable([3, 3, 1024, 1024])</span></span><br><span class="line">    <span class="comment"># b6 = biasVariable([1024])</span></span><br><span class="line">    <span class="comment"># conv6 = tf.nn.relu(conv2d(drop5, W6) + b6)</span></span><br><span class="line">    <span class="comment"># pool6 = maxPool(conv6)</span></span><br><span class="line">    <span class="comment"># drop6 = dropout(pool6, keep_prob_5) # 2048 * 1 * 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 全连接层</span></span><br><span class="line">    <span class="comment"># Wf = weightVariable([1*1*1024, 2048])</span></span><br><span class="line">    <span class="comment"># bf = biasVariable([2048])</span></span><br><span class="line">    <span class="comment"># drop3_flat = tf.reshape(drop6, [-1, 1*1*1024])</span></span><br><span class="line">    <span class="comment"># dense = tf.nn.relu(tf.matmul(drop3_flat, Wf) + bf)</span></span><br><span class="line">    <span class="comment"># # dense = tf.nn.relu(tf.matmul(max_pool22_flat, Wf) + bf)</span></span><br><span class="line">    <span class="comment"># dropf = dropout(dense, keep_prob_75)</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 输出层</span></span><br><span class="line">    <span class="comment"># Wout = weightVariable([2048, classnum])</span></span><br><span class="line">    <span class="comment"># bout = weightVariable([classnum])</span></span><br><span class="line">    <span class="comment"># #out = tf.matmul(dropf, Wout) + bout</span></span><br><span class="line">    <span class="comment"># out = tf.add(tf.matmul(dropf, Wout), bout)</span></span><br><span class="line">    <span class="comment"># #return out</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(train_x, train_y, tfsavepath)</span>:</span></span><br><span class="line">    <span class="string">''' train'''</span></span><br><span class="line">    <span class="comment">##### log.debug('train')</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机划分测试集与训练集</span></span><br><span class="line">    train_x,test_x,train_y,test_y = train_test_split(train_x, train_y, test_size=<span class="number">0.05</span>, random_state=random.randint(<span class="number">0</span>,<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 得到卷积结果</span></span><br><span class="line">    out = cnnLayer(train_y.shape[<span class="number">1</span>],<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 参数：图片数据的总数，图片的高、宽、通道</span></span><br><span class="line">    train_x = train_x.reshape(train_x.shape[<span class="number">0</span>], SIZE, SIZE, <span class="number">3</span>)</span><br><span class="line">    test_x = test_x.reshape(test_x.shape[<span class="number">0</span>], SIZE, SIZE, <span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">'train size:%s, test size:%s'</span> % (len(train_x), len(test_x)))</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 图片块，每次取32张图片</span></span><br><span class="line">    batch_size = <span class="number">32</span></span><br><span class="line">    num_batch = len(train_x) // batch_size  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交叉熵</span></span><br><span class="line">    cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=out, labels=y_))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Adam优化器，学习速率：0.001</span></span><br><span class="line">    train_step = tf.train.AdamOptimizer(<span class="number">0.001</span>).minimize(cross_entropy)</span><br><span class="line">    <span class="comment"># train_step = tf.train.AdadeltaOptimizer(0.001).minimize(cross_entropy)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 比较标签是否相等，再求的所有数的平均值，tf.cast(强制转换类型)</span></span><br><span class="line">    <span class="comment"># 准确率计算公式</span></span><br><span class="line">    accuracy = tf.reduce_mean(tf.cast(tf.equal(tf.argmax(out, <span class="number">1</span>), tf.argmax(y_, <span class="number">1</span>)), tf.float32))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将loss与accuracy保存以供tensorboard使用</span></span><br><span class="line">    tf.summary.scalar(<span class="string">'loss'</span>, cross_entropy)</span><br><span class="line">    tf.summary.scalar(<span class="string">'accuracy'</span>, accuracy)</span><br><span class="line">    merged_summary_op = tf.summary.merge_all()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据保存器的初始化</span></span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># tensorflow初始化</span></span><br><span class="line">        sess.run(tf.global_variables_initializer())</span><br><span class="line">        <span class="comment"># tensorboard数据保存</span></span><br><span class="line">        summary_writer = tf.summary.FileWriter(<span class="string">'./tmp'</span>, graph=tf.get_default_graph())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 迭代80次</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">80</span>):</span><br><span class="line">            <span class="comment"># 每次取32(batch_size)张图片</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(num_batch):</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 训练集、测试集分块</span></span><br><span class="line">                batch_x = train_x[i*batch_size : (i+<span class="number">1</span>)*batch_size]</span><br><span class="line">                batch_y = train_y[i*batch_size : (i+<span class="number">1</span>)*batch_size]</span><br><span class="line">                <span class="comment"># 开始训练数据，同时训练三个变量，返回三个数据</span></span><br><span class="line">                _,loss,summary = sess.run([train_step, cross_entropy, merged_summary_op],</span><br><span class="line">                                                feed_dict=&#123;x:batch_x,y_:batch_y, keep_prob_5:<span class="number">0.5</span>,keep_prob_75:<span class="number">0.75</span>&#125;)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># tensorboard记录数据    </span></span><br><span class="line">                summary_writer.add_summary(summary, n*num_batch+i)</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 打印损失</span></span><br><span class="line">                print(n*num_batch+i, loss)</span><br><span class="line">                sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#         if (n*num_batch+i) % batch_size == 0:</span></span><br><span class="line">        <span class="comment">#             # 获取测试数据的准确率</span></span><br><span class="line">        <span class="comment">#             acc = accuracy.eval(&#123;x:test_x, y_:test_y, keep_prob_5:1.0, keep_prob_75:1.0&#125;)</span></span><br><span class="line">        <span class="comment">#             print(n*num_batch+i, acc, '--', n)</span></span><br><span class="line">                    </span><br><span class="line">        <span class="comment">#             accc = acc</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#             # 准确率大于0.98时保存并退出</span></span><br><span class="line">        <span class="comment">#             if acc &gt; 0.95 and n &gt; 2:</span></span><br><span class="line">        <span class="comment">#                 # saver.save(sess, './train_faces.model', global_step=n*num_batch+i)</span></span><br><span class="line">        <span class="comment">#                 saver.save(sess, tfsavepath)</span></span><br><span class="line">        <span class="comment">#                 # saver.save(sess, tfsavepath)</span></span><br><span class="line">        <span class="comment">#                 sys.exit(0)</span></span><br><span class="line">        <span class="comment"># # saver.save(sess, './train_faces.model', global_step=n*num_batch+i)</span></span><br><span class="line">        <span class="comment"># # saver.save(sess, tfsavepath)</span></span><br><span class="line">        <span class="comment"># print('accuracy less 0.98, exited!')   </span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 准确率计算表达式</span></span><br><span class="line">        acc = accuracy.eval(&#123;x:test_x, y_:test_y, keep_prob_5:<span class="number">1.0</span>, keep_prob_75:<span class="number">1.0</span>&#125;)</span><br><span class="line">        print(<span class="string">'after 80 times run: accuracy is '</span>, acc)</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 模型保存</span></span><br><span class="line">        saver.save(sess, tfsavepath) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="识别"><a href="#识别" class="headerlink" title="识别"></a>识别</h2><p>这部分就是将训练好的模型加载，，然后实时的获取每一张相片处理等等，，，</p><p>tensorflow_face.py 这部分代码第一次运行会给每一个人创建一个标签，，获得标签集，，然后和训练集一同训练，，，而第二次运行就是识别，，，</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> logging <span class="keyword">as</span> log</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> common</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment"># import convert as myconv</span></span><br><span class="line"><span class="keyword">import</span> tensorflow_face_conv <span class="keyword">as</span> myconv</span><br><span class="line"><span class="keyword">import</span> dlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># rm</span></span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createdir</span><span class="params">(*args)</span>:</span>       <span class="comment"># 创建一个文件夹</span></span><br><span class="line">    <span class="string">''' create dir'''</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> args:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(item):</span><br><span class="line">            os.makedirs(item)</span><br><span class="line"></span><br><span class="line">IMGSIZE = <span class="number">64</span></span><br><span class="line">SIZE = <span class="number">64</span></span><br><span class="line"></span><br><span class="line">rootpath = <span class="string">'G:\\DIP\\mine'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getpaddingSize</span><span class="params">(shape)</span>:</span>  <span class="comment"># 将相片两侧填充为正方形</span></span><br><span class="line">    <span class="string">''' get size to make image to be a square rect '''</span></span><br><span class="line">    h, w = shape</span><br><span class="line">    longest = max(h, w)</span><br><span class="line">    result = (np.array([longest]*<span class="number">4</span>, int) - np.array([h, h, w, w], int)) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> result.tolist()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dealwithimage</span><span class="params">(img, h=<span class="number">64</span>, w=<span class="number">64</span>)</span>:</span> <span class="comment"># 裁剪出人脸的图片</span></span><br><span class="line">    <span class="string">''' dealwithimage '''</span></span><br><span class="line">    <span class="comment">#img = cv2.imread(imgpath)</span></span><br><span class="line">    top, bottom, left, right = getpaddingSize(img.shape[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">    img = cv2.copyMakeBorder(img, top, bottom, left, right, cv2.BORDER_CONSTANT, value=[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">    img = cv2.resize(img, (h, w))</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">relight</span><span class="params">(imgsrc, alpha=<span class="number">1</span>, bias=<span class="number">0</span>)</span>:</span>   <span class="comment"># 更改图片为二值图</span></span><br><span class="line">    <span class="string">'''relight'''</span></span><br><span class="line">    imgsrc = imgsrc.astype(float)</span><br><span class="line">    imgsrc = imgsrc * alpha + bias</span><br><span class="line">    imgsrc[imgsrc &lt; <span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    imgsrc[imgsrc &gt; <span class="number">255</span>] = <span class="number">255</span></span><br><span class="line">    imgsrc = imgsrc.astype(np.uint8)</span><br><span class="line">    <span class="keyword">return</span> imgsrc</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getfilesinpath</span><span class="params">(filedir)</span>:</span>            <span class="comment"># 得到一个文件夹下的所有文件</span></span><br><span class="line">    <span class="string">''' get all file from file directory'''</span></span><br><span class="line">    <span class="keyword">for</span> (path, dirnames, filenames) <span class="keyword">in</span> os.walk(filedir):</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">            <span class="keyword">if</span> filename.endswith(<span class="string">'.jpg'</span>):</span><br><span class="line">                <span class="keyword">yield</span> os.path.join(path, filename)</span><br><span class="line">        <span class="keyword">for</span> diritem <span class="keyword">in</span> dirnames:</span><br><span class="line">            getfilesinpath(os.path.join(path, diritem)) <span class="comment"># 递归调用得到改文件夹下的文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readimage</span><span class="params">(pairpathlabel)</span>:</span>           <span class="comment"># 得到一个文件夹下的照片文件名和标记labels， 返回一个列表</span></span><br><span class="line">    <span class="string">'''read image to list'''</span></span><br><span class="line">    imgs = []</span><br><span class="line">    labels = []</span><br><span class="line">    <span class="keyword">for</span> filepath, label <span class="keyword">in</span> pairpathlabel:</span><br><span class="line">        <span class="keyword">for</span> fileitem <span class="keyword">in</span> getfilesinpath(filepath):</span><br><span class="line">            img = cv2.imread(fileitem)</span><br><span class="line">            imgs.append(img)</span><br><span class="line">            labels.append(label)</span><br><span class="line">    <span class="keyword">return</span> np.array(imgs), np.array(labels)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onehot</span><span class="params">(numlist)</span>:</span>                    <span class="comment"># 用于得到一个人的标签</span></span><br><span class="line">    <span class="string">''' get one hot return host matrix is len * max+1 demensions'''</span></span><br><span class="line">    b = np.zeros([len(numlist), max(numlist)+<span class="number">1</span>])</span><br><span class="line">    b[np.arange(len(numlist)), numlist] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> b.tolist()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getfileandlabel</span><span class="params">(filedir)</span>:</span>           <span class="comment"># 用字典保存一个人名的照片和对应的labels</span></span><br><span class="line">    <span class="string">''' get path and host paire and class index to name'''</span></span><br><span class="line">    dictdir = dict([[name, os.path.join(filedir, name)] \</span><br><span class="line">                    <span class="keyword">for</span> name <span class="keyword">in</span> os.listdir(filedir) <span class="keyword">if</span> os.path.isdir(os.path.join(filedir, name))])</span><br><span class="line">                    <span class="comment">#for (path, dirnames, _) in os.walk(filedir) for dirname in dirnames])</span></span><br><span class="line"></span><br><span class="line">    dirnamelist, dirpathlist = dictdir.keys(), dictdir.values()</span><br><span class="line"></span><br><span class="line">    indexlist = list(range(len(dirnamelist)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list(zip(dirpathlist, onehot(indexlist))), dict(zip(indexlist, dirnamelist))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(_)</span>:</span></span><br><span class="line">    <span class="string">''' main '''</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    人脸识别项目主main函数</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    + 在第一次运行该文件时，会将上一次拍照保存的多个人的照片数据进行处理，卷积、训练等得到一个适合的模型</span></span><br><span class="line"><span class="string">    + 在第二次运行该文件时，会打开摄像头获取一个照片，然后根据上一步得到的模型处理后分类（识别）出照片上出现的人脸是之前录入的所有人中哪一个</span></span><br><span class="line"><span class="string">    + 目前无法判断其他未录入人的人脸，即others</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment">#shutil.rmtree('./checkpoint')</span></span><br><span class="line">    savepath = <span class="string">'./checkpoint/face.ckpt'</span>     <span class="comment"># 记录下模型的索引路径</span></span><br><span class="line">    isneedtrain = <span class="keyword">False</span>                     <span class="comment"># 不存在时认为时第一次运行，即进行卷积训练</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(savepath+<span class="string">'.meta'</span>) <span class="keyword">is</span> <span class="keyword">False</span>:</span><br><span class="line">        isneedtrain = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据录入保存的照片得到一个label和字典的路径的列表</span></span><br><span class="line">    pathlabelpair, indextoname = getfileandlabel(rootpath + <span class="string">'\\image\\trainfaces'</span>)</span><br><span class="line">    </span><br><span class="line">    print(indextoname)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line">    print(pathlabelpair)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 得到训练集、测试集的照片和labels的列表</span></span><br><span class="line">    train_x, train_y = readimage(pathlabelpair)</span><br><span class="line">    <span class="comment"># 将数据集归一化 ？？？</span></span><br><span class="line">    train_x = train_x.astype(np.float32) / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#### log.debug('len of train_x : %s', train_x.shape) </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isneedtrain:</span><br><span class="line">        <span class="comment"># first generate all face</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 调用另一文件进行卷积训练模型</span></span><br><span class="line">        myconv.train(train_x, train_y, savepath)</span><br><span class="line"></span><br><span class="line">       <span class="comment">#### # log.debug('training is over, please run again')</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># second recognize faces </span></span><br><span class="line">        <span class="comment"># 调用下面的函数进行实时识别</span></span><br><span class="line"></span><br><span class="line">        testfromcamera(train_x, train_y, savepath)</span><br><span class="line">        <span class="comment">#print(np.column_stack((out, argmax)))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testfromcamera</span><span class="params">(train_x, train_y, chkpoint)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开默认摄像头</span></span><br><span class="line">    camera = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">#haar = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')</span></span><br><span class="line">    pathlabelpair, indextoname = getfileandlabel(rootpath + <span class="string">'\\image\\trainfaces'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 得到预测值</span></span><br><span class="line">    output = myconv.cnnLayer(len(pathlabelpair),<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">    predict = output</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 得到dlib的人脸检测器</span></span><br><span class="line">    detector = dlib.get_frontal_face_detector()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加载模型</span></span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        <span class="comment">#sess.run(tf.global_variables_initializer())</span></span><br><span class="line">        saver.restore(sess, chkpoint)</span><br><span class="line"></span><br><span class="line">        n = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> (n &lt;= <span class="number">20000</span>):</span><br><span class="line">                print(<span class="string">'It`s processing %s image.'</span> % n)</span><br><span class="line">                sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 间隔0.2s</span></span><br><span class="line">                time.sleep(<span class="number">0.2</span>) </span><br><span class="line"></span><br><span class="line">                <span class="comment"># 读帧</span></span><br><span class="line">                success, img = camera.read()</span><br><span class="line">                <span class="comment"># 得到灰度图</span></span><br><span class="line">                gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 使用detector进行人脸检测</span></span><br><span class="line">                faces = detector(gray_img, <span class="number">1</span>)</span><br><span class="line">                <span class="comment">#faces = haar.detectMultiScale(gray_img, 1.3, 5)</span></span><br><span class="line">                <span class="keyword">for</span> i, d <span class="keyword">in</span> enumerate(faces):</span><br><span class="line">                    x1 = d.top() <span class="keyword">if</span> d.top() &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                    y1 = d.bottom() <span class="keyword">if</span> d.bottom() &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                    x2 = d.left() <span class="keyword">if</span> d.left() &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                    y2 = d.right() <span class="keyword">if</span> d.right() &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                </span><br><span class="line">                    face = img[x1:y1,x2:y2]</span><br><span class="line"></span><br><span class="line">                    face = cv2.resize(face, (IMGSIZE, IMGSIZE))</span><br><span class="line">                    <span class="comment">#could deal with face to train</span></span><br><span class="line">                    test_x = np.array([face])</span><br><span class="line">                    test_x = test_x.astype(np.float32) / <span class="number">255.0</span></span><br><span class="line">                    </span><br><span class="line">                    res = sess.run([predict, tf.argmax(output, <span class="number">1</span>)],\</span><br><span class="line">                                   feed_dict=&#123;myconv.x: test_x,\</span><br><span class="line">                                   myconv.keep_prob_5:<span class="number">1.0</span>, myconv.keep_prob_75: <span class="number">1.0</span>&#125;)</span><br><span class="line">                    print(res, indextoname[res[<span class="number">1</span>][<span class="number">0</span>]], res[<span class="number">0</span>][<span class="number">0</span>][res[<span class="number">1</span>][<span class="number">0</span>]])</span><br><span class="line">                    sys.stdout.flush()</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># 得到一组随机的颜色值</span></span><br><span class="line">                    r = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">                    g = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">                    b = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 绘制检测到的人脸的方框</span></span><br><span class="line">                    cv2.rectangle(img, (x2,x1),(y2,y1), (r, g, b),<span class="number">3</span>)</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># if res[0][0][res[1][0]] &gt;= 500:</span></span><br><span class="line">                    <span class="comment">#     cv2.putText(img, 'others', (x1, y1 + 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (col, col, col), 2)  #显示名字</span></span><br><span class="line">                    <span class="comment"># else:        </span></span><br><span class="line">                    <span class="comment">#     cv2.putText(img, indextoname[res[1][0]], (x1, y1 - 40), cv2.FONT_HERSHEY_SIMPLEX, 1, (col, col, col), 2)  #显示名字</span></span><br><span class="line">                    cv2.putText(img, indextoname[res[<span class="number">1</span>][<span class="number">0</span>]], (x2 + <span class="number">25</span>, y1 + <span class="number">40</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">1</span>, (r, g, b), <span class="number">2</span>)  <span class="comment">#显示名字</span></span><br><span class="line">                    </span><br><span class="line">                    n+=<span class="number">1</span></span><br><span class="line">                    cv2.imshow(<span class="string">'img'</span>, img)</span><br><span class="line">                key = cv2.waitKey(<span class="number">30</span>) &amp; <span class="number">0xff</span></span><br><span class="line">                <span class="keyword">if</span> key == <span class="number">27</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span>           </span><br><span class="line">    camera.release()</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># first generate all face</span></span><br><span class="line">    main(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">#onehot([1, 3, 9])</span></span><br><span class="line">    <span class="comment">#print(getfileandlabel('./image/trainimages'))</span></span><br><span class="line">    <span class="comment">#generateface([['./image/trainimages', './image/trainfaces']])</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最后的模型的准确度还行，，但是不能识别未录入者，，它会认为是与已录入者最接近的人，，，</p><p>acc:</p><p><img src="https://github.com/31415926535x/CollegeProjectBackup/blob/master/FaceRecognition/acc.png" alt=""></p><p>loss:</p><p><img src="https://github.com/31415926535x/CollegeProjectBackup/blob/master/FaceRecognition/loss.png" alt=""></p><p>这个数据是通过tensorboard生成的，，</p><p>项目里还有一个简单的gui的实现，，因为没有时间了，，所有没有好好的优化一下，，，</p><p>(end 困。。。。)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;学期末了啊，，，最后这个人脸识别的项目弄完了，，有很多的不足，，很多东西都是只知道怎么用，但是不知道其背后的逻辑，，感觉自己学习东西对于那些
      
    
    </summary>
    
      <category term="人脸识别" scheme="http://www.31415x.cf/categories/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
    
      <category term="人脸识别" scheme="http://www.31415x.cf/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
      <category term="工具使用" scheme="http://www.31415x.cf/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
      <category term="实验报告" scheme="http://www.31415x.cf/tags/%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>2019西安邀请赛补题</title>
    <link href="http://www.31415x.cf/2019/05/31/2019%E8%A5%BF%E5%AE%89%E9%82%80%E8%AF%B7%E8%B5%9B%E8%A1%A5%E9%A2%98/"/>
    <id>http://www.31415x.cf/2019/05/31/2019西安邀请赛补题/</id>
    <published>2019-05-31T01:17:49.000Z</published>
    <updated>2019-05-31T04:09:31.526Z</updated>
    
    <content type="html"><![CDATA[<p>鸽了半个月，，终于有些时间可以来补题了，，，T^T</p><p><a href="https://www.jisuanke.com/contest/2625?view=challenges" target="_blank" rel="noopener">题目在计蒜客上</a></p><a id="more"></a><h1 id="A-Tasks"><a href="#A-Tasks" class="headerlink" title="A. Tasks"></a>A. Tasks</h1><p>签到题，，当时看完题就写，，然后以为比赛没开始，，，拖了1分钟在交的题emmm，，，（本来可以在0分钟交的，，，</p><p>贪心直接搞，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdlib&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;set&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cmath&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;queue&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;stack&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;ctime&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e10</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, t, a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in" , "r" , stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out" , "w" , stdout);</span></span><br><span class="line">    <span class="comment">// ios_base::sync_with_stdio(0);</span></span><br><span class="line">    <span class="comment">// cin.tie(0);cout.tie(0);</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += a[i];</span><br><span class="line">        <span class="keyword">if</span>(sum &lt;= t)</span><br><span class="line">            ++ans;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Angel’s-Journey"><a href="#C-Angel’s-Journey" class="headerlink" title="C. Angel’s Journey"></a>C. Angel’s Journey</h1><p>很是遗憾的一道题，，几乎从来没写过计算几何的题，，然后碰到了这道题，，思路很简单，，但是因为不熟悉板子和数据出错的锅，，最后写了一堆，但是离ac就差一点，，，T^T</p><p>题意是给你一个圆c，和一个点p，，然后问你p点到c上的正下方的那个点的最短距离，，其中最短的路径不能越过下半圆所在的直线的下方区域，，也就是说 y &lt;= c.y 的地方要沿着圆周走，，</p><p>思路就是分两种情况：</p><ul><li>当点p在圆c所在的竖直区域内的时候，，显然最短路就是 <strong>切线长+某个切点到最下面点的弧长</strong></li><li>否则的话，最短路就是 <strong>四分之一圆+点p到 直线 $y=cy$ 与圆的两个交点中最近的那个点的距离</strong></li></ul><p>板子熟悉了之后很容易就出来了，，qaq，，，（都是遗憾的泪水，，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdlib&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;set&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cmath&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;queue&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;stack&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;ctime&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e9</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断一个实数和0的关系</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    point()&#123;&#125;</span><br><span class="line">    point(<span class="keyword">double</span> _x, <span class="keyword">double</span> _y)&#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;x, &amp;y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> == (point b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sgn(x - b.x) == <span class="number">0</span> &amp;&amp; sgn(y - b.y) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (point b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sgn(x - b.x) == <span class="number">0</span> ? sgn(y - b.y) &lt; <span class="number">0</span> : x &lt; b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span> - (<span class="keyword">const</span> point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> point(x - b.x, y - b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span> ^ (<span class="keyword">const</span> point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x * b.y - y * b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span> * (<span class="keyword">const</span> point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x * b.x + y * b.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">len</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hypot(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">len2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x * x + y * y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两点距离</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">distance</span><span class="params">(point p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hypot(x - p.x, y - p.y);</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span> + (<span class="keyword">const</span> point &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> point(x + b.x, y + b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">double</span> &amp;k)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> point(x * k, y * k);</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span> /(<span class="keyword">const</span> <span class="keyword">double</span> &amp;k)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> point(x / k, y / k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算当前点p到点a, b所成角的大小</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">rad</span><span class="params">(point a, point b)</span></span>&#123;</span><br><span class="line">        point p = *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fabs</span>(<span class="built_in">atan2</span>( <span class="built_in">fabs</span>((a - p) ^ (b - p)), (a - p) * (b - p) ));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//化为长度为r的向量</span></span><br><span class="line">    <span class="function">point <span class="title">trunc</span><span class="params">(<span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> l = len();</span><br><span class="line">        <span class="keyword">if</span>(!sgn(l))<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        r /= l;</span><br><span class="line">        <span class="keyword">return</span> point(x * r, y * r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//逆时针旋转pi/2</span></span><br><span class="line">    <span class="function">point <span class="title">rotleft</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> point(-y, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//顺时针旋转pi/2</span></span><br><span class="line">    <span class="function">point <span class="title">rotright</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> point(y, -x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//绕p逆时针旋转angle</span></span><br><span class="line">    <span class="function">point <span class="title">rotate</span><span class="params">(point p, <span class="keyword">double</span> angle)</span></span>&#123;</span><br><span class="line">        point v = (*<span class="keyword">this</span>) - p;</span><br><span class="line">        <span class="keyword">double</span> c =- <span class="built_in">cos</span>(angle), s = <span class="built_in">sin</span>(angle);</span><br><span class="line">        <span class="keyword">return</span> point(p.x + v.x * c - v.y * s, p.y + v.x * s + v.y * c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">line</span>&#123;</span></span><br><span class="line">    point s, e;</span><br><span class="line">    line()&#123;&#125;</span><br><span class="line">    <span class="comment">//两点确定一条直线</span></span><br><span class="line">    line(point _s, point _e)&#123;</span><br><span class="line">        s = _s;</span><br><span class="line">        e = _e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> == (line v)&#123;</span><br><span class="line">        <span class="keyword">return</span> (s == v.s) &amp;&amp; (e == v.e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">circle</span>&#123;</span></span><br><span class="line">    point p;</span><br><span class="line">    <span class="keyword">double</span> r;</span><br><span class="line">    circle()&#123;&#125;</span><br><span class="line">    circle(point _p, <span class="keyword">double</span> _r)&#123;</span><br><span class="line">        p = _p;</span><br><span class="line">        r = _r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">        p.input();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点和圆的关系</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">relation</span><span class="params">(point b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> dst = b.distance(p);</span><br><span class="line">        <span class="keyword">if</span>(sgn(dst - r) &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sgn(dst - r) == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//过一点求圆的切线，返回的切线的第二个点便是切点</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">tangentline</span><span class="params">(point q, line &amp;u, line &amp;v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = relation(q);</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">2</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">1</span>)&#123;</span><br><span class="line">            u = line(q, q + (q - p).rotleft());</span><br><span class="line">            v = u;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> d = p.distance(q);</span><br><span class="line">        <span class="keyword">double</span> l = r * r / d;</span><br><span class="line">        <span class="keyword">double</span> h = <span class="built_in">sqrt</span>(r * r - l * l);</span><br><span class="line">        u = line(q, p + ((q - p).trunc(l) + (q - p).rotleft().trunc(h)));</span><br><span class="line">        v = line(q, p + ((q - p).trunc(l) + (q - p).rotright().trunc(h)));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    circle c;</span><br><span class="line">    c.input();</span><br><span class="line">    point p;</span><br><span class="line">    p.input();</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//点在圆所在的竖直区域内时，最短就离为切线长+最小的圆弧</span></span><br><span class="line">    <span class="keyword">if</span>(sgn(p.x - c.p.x + c.r) &gt;= <span class="number">0</span> &amp;&amp; sgn(p.x - c.p.x - c.r) &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        line u, v;</span><br><span class="line">        c.tangentline(p, u, v);     <span class="comment">//得到两条切线</span></span><br><span class="line">        <span class="keyword">double</span> ans = <span class="built_in">sqrt</span>(c.p.distance(p) * c.p.distance(p) - c.r * c.r);   <span class="comment">//根据rt三角形算出切线长</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// cout &lt;&lt; u.e.x &lt;&lt; " " &lt;&lt; u.e.y &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">// cout &lt;&lt; v.e.x &lt;&lt; " " &lt;&lt; v.e.y &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据切线的第二个点确定纵坐标最小的切点，这样的点所形成的圆弧是最短的</span></span><br><span class="line">        p = sgn(u.e.y - v.e.y) &lt;= <span class="number">0</span> ? u.e : v.e;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// cout &lt;&lt; p.x &lt;&lt; " " &lt;&lt; p.y &lt;&lt; endl;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//由圆心确定的扇形角度确定弧长</span></span><br><span class="line">        ans += c.r * c.p.rad(p, point(c.p.x, c.p.y - c.r));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.4lf\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;                           <span class="comment">//四分之一圆+两点的距离</span></span><br><span class="line">        <span class="keyword">double</span> ans = pi * c.r / <span class="number">2.0</span>;</span><br><span class="line">        <span class="keyword">if</span>(sgn(p.x - c.p.x - c.r) &gt;= <span class="number">0</span>) ans += p.distance(point(c.p.x + c.r, c.p.y));</span><br><span class="line">        <span class="keyword">else</span> ans += p.distance(point(c.p.x - c.r, c.p.y));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.4lf\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in" , "r" , stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out" , "w" , stdout);</span></span><br><span class="line">    <span class="comment">// ios_base::sync_with_stdio(0);</span></span><br><span class="line">    <span class="comment">// cin.tie(0);cout.tie(0);</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> t;<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="L-Swap"><a href="#L-Swap" class="headerlink" title="L. Swap"></a>L. Swap</h1><p>这题当时用了好久才搞出来，，感觉主要的问题是当时静不下心来认认真真的和队友推一下规律，，</p><p>题意是给你n个数，然后又两个操作，一种是前一半和后一半交换，，另一个是每两个数交换，，然后问你有多少种不同的序列种数，，，</p><p>当时我想着这该不会是暴力模拟吧，，然后想了一会写了暴力模拟的代码，，然后测试的时候懵逼了，，我是按照字符串存的每一种序列，，然后放到set中保证每一种只出现一次，，然后求一下最后map的大小即为答案，，，但是字符串就不能得到大于128的情况，，，（这时我应该去打表找规律的，，，然后就懵了半个多小时，，浪费时间啊，，，</p><p>后来队友打表得出了前20多的结果，，分奇偶找到规律就过了，，</p><p>这种暴力打表找规律的题练的太少了啊，，总是比别人慢许多T^T，，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdlib&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;set&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cmath&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;queue&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;stack&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;ctime&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e10</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, t, a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in" , "r" , stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out" , "w" , stdout);</span></span><br><span class="line">    <span class="comment">// ios_base::sync_with_stdio(0);</span></span><br><span class="line">    <span class="comment">// cin.tie(0);cout.tie(0);</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)<span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n &amp; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">3</span>)<span class="built_in">cout</span> &lt;&lt; <span class="number">6</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((n - <span class="number">1</span>) % <span class="number">4</span> == <span class="number">0</span>)<span class="built_in">cout</span> &lt;&lt; n * <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">12</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n % <span class="number">4</span> == <span class="number">0</span>)<span class="built_in">cout</span> &lt;&lt; <span class="number">4</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;鸽了半个月，，终于有些时间可以来补题了，，，T^T&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jisuanke.com/contest/2625?view=challenges&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目在计蒜客上&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2019西安邀请赛总结</title>
    <link href="http://www.31415x.cf/2019/05/31/2019%E8%A5%BF%E5%AE%89%E9%82%80%E8%AF%B7%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    <id>http://www.31415x.cf/2019/05/31/2019西安邀请赛总结/</id>
    <published>2019-05-31T01:17:20.000Z</published>
    <updated>2019-05-31T01:17:20.316Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>批量将doc文件转化成docx</title>
    <link href="http://www.31415x.cf/2019/05/29/%E6%89%B9%E9%87%8F%E5%B0%86doc%E6%96%87%E4%BB%B6%E8%BD%AC%E5%8C%96%E6%88%90docx/"/>
    <id>http://www.31415x.cf/2019/05/29/批量将doc文件转化成docx/</id>
    <published>2019-05-29T14:26:10.000Z</published>
    <updated>2019-05-30T09:39:55.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>最近要弄暑期实训了，知道老师给了一份国标的软件文档标准，，然后里面很多 <code>.doc</code> 的文件，，因为我已经完全习惯了用md来写各种文档，，而且电脑也配置好了 <code>pandoc</code> 的环境，，所以就想着将 <code>doc</code> 文件转化成 <code>.md</code> 文件，，然后直接用md的语法来写文档，，然后用 <code>pandoc</code> 来转换写好的md文档成 <code>docx</code>，自动排版，，不用考虑一些对齐什么的格式问题，，但是，，<code>doc</code> 文档很多，，而且 <code>pandoc</code> 不支持直接将 <code>doc</code> 转换成 <code>md</code> 格式的文件，，要先转化成 <code>docx</code> 文件才能转换成 <code>md</code> 文件，，，但是一个文件还好说，，一坨文件的话手动转化就太麻烦了，，于是找了一些可以转化一整个文件夹下的 <code>doc</code> 文件的方法，，</p><a id="more"></a><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p><a href="https://www.zhihu.com/question/56463918" target="_blank" rel="noopener">参考链接</a></p><p>网上有很多用插件就可以实现的方法，，但是我嫌安装软件麻烦，，而且内心想着肯定有一种用代码就可以解决的方法，，于是就找到了这个： <strong>利用word中的vb来实现批量转换文件格式</strong> ，，，</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>新建一个word文件</li><li>按住 <code>Alt+F11</code> 这时会打开一个名为 <code>Microsoft Visual Basic for Application</code> 的窗口，，</li><li>点击 <code>插入-&gt;模块</code></li><li>在新窗口中填写如下形式的代码：</li></ul><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Option</span> <span class="keyword">Explicit</span></span><br><span class="line"><span class="keyword">Sub</span> doc2docx()</span><br><span class="line"><span class="keyword">Dim</span> sEveryFile <span class="keyword">As</span> <span class="built_in">String</span></span><br><span class="line"><span class="keyword">Dim</span> sSourcePath <span class="keyword">As</span> <span class="built_in">String</span></span><br><span class="line"><span class="keyword">Dim</span> path <span class="keyword">As</span> <span class="built_in">String</span></span><br><span class="line"><span class="keyword">Dim</span> sNewSavePath <span class="keyword">As</span> <span class="built_in">String</span></span><br><span class="line"><span class="keyword">Dim</span> CurDoc <span class="keyword">As</span> <span class="built_in">Object</span></span><br><span class="line">sSourcePath = <span class="string">"G:\FTP项目\GB8567\GB8567\软件设计文档（国标）\软件设计文档国家标准_GB8567--88\"</span></span><br><span class="line"><span class="string">path = "</span>G:\FTP项目\GB8567\GB8567\软件设计文档（国标）\软件设计文档国家标准_GB8567-<span class="number">-88</span>_docx\<span class="string">"</span></span><br><span class="line"><span class="string">sEveryFile = Dir(sSourcePath &amp; "</span>*.doc<span class="string">")</span></span><br><span class="line"><span class="string">Do While sEveryFile &lt;&gt; "</span><span class="string">"</span></span><br><span class="line"><span class="string">    Set CurDoc = Documents.Open(sSourcePath &amp; sEveryFile, , , , , , , , , , , msoFalse)</span></span><br><span class="line"><span class="string">    CurDoc.Convert</span></span><br><span class="line"><span class="string">    sNewSavePath = VBA.Strings.Replace(path &amp; sEveryFile, "</span>.doc<span class="string">", "</span>.docx<span class="string">")</span></span><br><span class="line"><span class="string">    CurDoc.SaveAs2 sNewSavePath, wdFormatDocumentDefault</span></span><br><span class="line"><span class="string">    CurDoc.Close SaveChanges:=False</span></span><br><span class="line"><span class="string">    sEveryFile = Dir</span></span><br><span class="line"><span class="string">Loop</span></span><br><span class="line"><span class="string">Set CurDoc = Nothing</span></span><br><span class="line"><span class="string">End Sub</span></span><br></pre></td></tr></table></figure><p><strong>其中 <code>sSourcePath</code> 表示你要批量转换文档的文件夹， <code>path</code> 表示最后转换出的文件保存的路径（根据自己的需求更改）</strong></p><ul><li>然后点击窗口（否则运行没反应），运行（F5 或者点上面的绿色的小三角）</li><li>等待，目标文件夹就有了转换后的文档</li></ul><h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><ul><li>上面两个路径记得 <strong>末尾添加 \ </strong> ，否则会提示文件路径找不到等错误</li><li>对了，如果提示 <code>错误5121</code> 等等的报错信息，，试试之前提示的保存 <strong>宏编码doc</strong> 的过程 <strong>保存的word文件为旧版本的word文件形式（我选的是word2003  .doc）</strong></li><li></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;最近要弄暑期实训了，知道老师给了一份国标的软件文档标准，，然后里面很多 &lt;code&gt;.doc&lt;/code&gt; 的文件，，因为我已经完全习惯了用md来写各种文档，，而且电脑也配置好了 &lt;code&gt;pandoc&lt;/code&gt; 的环境，，所以就想着将 &lt;code&gt;doc&lt;/code&gt; 文件转化成 &lt;code&gt;.md&lt;/code&gt; 文件，，然后直接用md的语法来写文档，，然后用 &lt;code&gt;pandoc&lt;/code&gt; 来转换写好的md文档成 &lt;code&gt;docx&lt;/code&gt;，自动排版，，不用考虑一些对齐什么的格式问题，，但是，，&lt;code&gt;doc&lt;/code&gt; 文档很多，，而且 &lt;code&gt;pandoc&lt;/code&gt; 不支持直接将 &lt;code&gt;doc&lt;/code&gt; 转换成 &lt;code&gt;md&lt;/code&gt; 格式的文件，，要先转化成 &lt;code&gt;docx&lt;/code&gt; 文件才能转换成 &lt;code&gt;md&lt;/code&gt; 文件，，，但是一个文件还好说，，一坨文件的话手动转化就太麻烦了，，于是找了一些可以转化一整个文件夹下的 &lt;code&gt;doc&lt;/code&gt; 文件的方法，，&lt;/p&gt;
    
    </summary>
    
    
      <category term="技巧" scheme="http://www.31415x.cf/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>The Preliminary Contest for ICPC China Nanchang National Invitational</title>
    <link href="http://www.31415x.cf/2019/04/21/The-Preliminary-Contest-for-ICPC-China-Nanchang-National-Invitational/"/>
    <id>http://www.31415x.cf/2019/04/21/The-Preliminary-Contest-for-ICPC-China-Nanchang-National-Invitational/</id>
    <published>2019-04-21T01:58:03.000Z</published>
    <updated>2019-04-21T02:11:56.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这次南昌邀请赛的网络赛打的心累啊，，发现自己啥都不会，智商受限，，，</p><div class="table-container"><table><thead><tr><th>Solved</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th><th>G</th><th>H</th><th>I</th><th>J</th><th>K</th><th>L</th><th>M</th></tr></thead><tbody><tr><td>3/13</td><td>O</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>O</td><td>.</td><td>.</td><td>.</td><td>.</td><td>O</td></tr></tbody></table></div><p>O for passing during the contest\<br>Ø for passing after the contest\<br>! for attempted but failed\<br>· for having not attempted yet</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="A-PERFECT-NUMBER-PROBLEM"><a href="#A-PERFECT-NUMBER-PROBLEM" class="headerlink" title="A. PERFECT NUMBER PROBLEM"></a>A. PERFECT NUMBER PROBLEM</h2><p>输出完美数，，直接百度输出就行了，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in" , "r" , stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out" , "w" , stdout);</span></span><br><span class="line">    <span class="comment">// ios_base::sync_with_stdio(0);</span></span><br><span class="line">    <span class="comment">// cin.tie(0);cout.tie(0);</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">6</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">28</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">496</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">8128</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">33550336</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-Coloring-Game"><a href="#H-Coloring-Game" class="headerlink" title="H. Coloring Game"></a>H. Coloring Game</h2><p>$3^{n-2}*4\%mod$</p><p>当时怎么都推不出来那个公式，，然后没办法爆搜前几个n来找规律，，搞了一个消失貌似，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">pow_</span><span class="params">(ll a, ll b, ll p)</span>    <span class="comment">//快速幂</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) ret = (ret * a) % p;</span><br><span class="line">        a = (a * a) % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// double pp = clock();</span></span><br><span class="line">    <span class="comment">// freopen("233.in" , "r" , stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out" , "w" , stdout);</span></span><br><span class="line">    <span class="comment">// ios_base::sync_with_stdio(0);</span></span><br><span class="line">    <span class="comment">// cin.tie(0);cout.tie(0);</span></span><br><span class="line">    ll n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span>(!n)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">1</span>)<span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (pow_(<span class="number">3</span>, n - <span class="number">2</span>, mod) * <span class="number">4</span>) % mod &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="M-Subsequence"><a href="#M-Subsequence" class="headerlink" title="M. Subsequence"></a>M. Subsequence</h2><p>询问一堆串是不是原串的一个子序列，，，</p><p>序列自动机板子题，，，（貌似</p><p>读完题发现，哎？！这不就是以前在牛客做的一道题吗？？？直接找原来的代码，，然后因为中间一个输出忘记改，wa了一发，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nxt[maxn][<span class="number">200</span>];</span><br><span class="line"><span class="keyword">int</span> now[<span class="number">200</span>];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//序列自动机预处理</span></span><br><span class="line">    <span class="built_in">memset</span>(now, <span class="number">-1</span>, <span class="keyword">sizeof</span> now);            <span class="comment">//mow_i表示第i个字母在原串中从后向前最晚出现的位置</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    --len;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len; ~i; --i)               <span class="comment">//处理每一个字符</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">128</span>; ++j)        <span class="comment">//找出第i个字符后面的26个字母最早出现的字符的位置</span></span><br><span class="line">            nxt[i][j] = now[j];</span><br><span class="line">        now[s[i]] = i;                <span class="comment">//用当前字符更新当前字符在原串中从后向前最晚出现的位置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> ss[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("233.in" , "r" , stdin);</span></span><br><span class="line"><span class="comment">//    freopen("233.out" , "w" , stdout);</span></span><br><span class="line"><span class="comment">//    ios_base::sync_with_stdio(0);</span></span><br><span class="line"><span class="comment">//    cin.tie(0);cout.tie(0);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, ss);</span><br><span class="line">        <span class="keyword">int</span> loc = now[ss[<span class="number">0</span>]];             <span class="comment">//没有以子串第一个字符出现的子序列时</span></span><br><span class="line">        <span class="keyword">if</span>(!~loc)<span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">int</span> len = <span class="built_in">strlen</span>(ss);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                loc = nxt[loc][ss[i]];    <span class="comment">//寻找母串中子串第i个字符下一次出现的位置</span></span><br><span class="line">                <span class="keyword">if</span>(!~loc)                       <span class="comment">//没有就退出</span></span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)<span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">            <span class="keyword">else</span>    <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;这次南昌邀请赛的网络赛打的心累啊，，发现自己啥都不会，智商受限，，，&lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;
      
    
    </summary>
    
      <category term="ACM-比赛补题" scheme="http://www.31415x.cf/categories/ACM-%E6%AF%94%E8%B5%9B%E8%A1%A5%E9%A2%98/"/>
    
    
      <category term="刷题" scheme="http://www.31415x.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="acm" scheme="http://www.31415x.cf/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>课程设计报告一：个人银行账户管理系统 此文档及源码仅供参考 不得直接复制使用</title>
    <link href="http://www.31415x.cf/2019/04/12/Java%E5%AE%9E%E9%AA%8C-%E4%B8%AA%E4%BA%BA%E9%93%B6%E8%A1%8C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>http://www.31415x.cf/2019/04/12/Java实验-个人银行管理系统/</id>
    <published>2019-04-12T10:54:45.934Z</published>
    <updated>2019-04-12T10:56:22.252Z</updated>
    
    <content type="html"><![CDATA[<p><strong>作　　者：31415926535x</strong></p><p><strong>出　　处：<a href="https://www.cnblogs.com/31415926535x/p/10697659.html" target="_blank" rel="noopener">https://www.cnblogs.com/31415926535x/p/10697659.html</a></strong></p><p><strong>版权声明：署名 - 非商业性使用 - 禁止演绎，协议普通文本 | 协议法律文本。</strong></p><p><strong>不建议直接复制文档、源码，没意义，这东西还是自己手敲一下才能涨经验</strong></p><p><strong>项目所有的内容都已上传至本人<a href="https://github.com/31415926535x/CollegeProjectBackup/tree/master/java_shiyan" target="_blank" rel="noopener">github</a>，有需自取😀</strong></p><h1 id="一、-课程设计要求与目的"><a href="#一、-课程设计要求与目的" class="headerlink" title="一、    课程设计要求与目的"></a>一、    课程设计要求与目的</h1><ul><li>1、 模仿个人银行账户管理系统的C++版本（第4章-第8章），使用Java语言重新实现该系统，比较C++与Java在实现上的异同，熟练掌握Java基础及语法。</li><li>2、 根据系统需求的演化，逐步完善个人银行账户管理系统的功能，改进代码，体会面向对象思想的封装、继承、多态特性在实际系统中的应用，初步掌握使用Java编写可复用、可扩展、可维护代码的基本技能。</li></ul><h1 id="二、课程设计进展记录"><a href="#二、课程设计进展记录" class="headerlink" title="二、课程设计进展记录"></a>二、课程设计进展记录</h1><h2 id="1、-个人银行管理系统版本0-1（对应第4章记录）"><a href="#1、-个人银行管理系统版本0-1（对应第4章记录）" class="headerlink" title="1、 个人银行管理系统版本0.1（对应第4章记录）"></a>1、 个人银行管理系统版本0.1（对应第4章记录）</h2><h3 id="1-1-系统需求"><a href="#1-1-系统需求" class="headerlink" title="1.1    系统需求"></a>1.1    系统需求</h3><p>一个人可以有多个活期账户，一个活期储蓄账户包括 <strong>账号（id）</strong> 、 <strong>余额（balance）</strong> 、 <strong>年利率（rate）</strong> 等信息，还包括 <strong>显示账户信息（show）</strong> 、 <strong>存款（deposit）</strong> 、<strong>取款（withdraw）</strong> 、 <strong>结算利息（settle）</strong> 等操作。</p><h3 id="1-2-系统设计"><a href="#1-2-系统设计" class="headerlink" title="1.2    系统设计"></a>1.2    系统设计</h3><p>设计一个 <strong>类 SavingAccount</strong> , 其数据成员为 <strong>id, balance, rate</strong> ， 类的方法有 <strong>show(), deposit(), withdraw(), settle()</strong></p><p>UML:</p><p><img src="https://raw.githubusercontent.com/31415926535x/CollegeProjectBackup/master/java_shiyan/PersonBankAccountManageSystem/doc/uml/v4_9/uml/uml.png" alt=""></p><p>无论是存款、取款还是结算利息，都需要修改当前的余额并且将余额的变动输出，这些公共操作由 <strong>私有成员方法 record</strong> 来执行。</p><p>利息的计算： 由于账户的余额是不断变化的，因此不能通过余额与年利率相乘的方法来计算年利，而是需要将一年当中每天的余额累计起来再除以一年的总天数，得到一个日均余额，再乘以年利率。为了计算余额的按日累计值，SavingAccount 类引入了一个 <strong>私有数据成员lastDate</strong> ， accumulation 和私有成员函数 accumulate。 lastDate 用来存储上一次viyue变动的日期，accumulation 用来存储上次计算利息以后直到最近一次余额变动时余额按日累加的值，accumulate 成员函数用来计算截止指定日期的账户余额按日累加值。当余额变动时，需要做的事将变动前的余额与该余额所持续的天数相乘，累加到 accumulation 中，再修改 lastDate。</p><p>为了简便，该类中的所有日期均用一个整数来表示，该整数是一个以日为单位的相对日期，例如如果以开户日为1，那么开户日后的第3天就用4来表示， 这样哦他难过将两个日期相减就可以得到两个日期相差的天数。</p><h3 id="1-3-系统实现"><a href="#1-3-系统实现" class="headerlink" title="1.3    系统实现"></a>1.3    系统实现</h3><h4 id="SavingAccount-类的定义："><a href="#SavingAccount-类的定义：" class="headerlink" title="SavingAccount() 类的定义："></a><code>SavingAccount()</code> 类的定义：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SavingsAccount</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="数据成员"><a href="#数据成员" class="headerlink" title="数据成员"></a>数据成员</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;<span class="comment">//账号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> balance;<span class="comment">//余额</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> rate;<span class="comment">//存款的年利率</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> lastDate;<span class="comment">//上次变更余额的时期</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> accumulation;        <span class="comment">//余额按日累加之和</span></span><br></pre></td></tr></table></figure><h5 id="类中方法"><a href="#类中方法" class="headerlink" title="类中方法"></a>类中方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SavingsAccount</span><span class="params">(<span class="keyword">int</span> date, <span class="keyword">int</span> id, <span class="keyword">double</span> rate)</span> </span>&#123;&#125; <span class="comment">//构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">record</span><span class="params">(<span class="keyword">int</span> date, <span class="keyword">double</span> amount)</span> </span>&#123;&#125; <span class="comment">//记录一笔账</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">accumulate</span><span class="params">(<span class="keyword">int</span> date)</span> </span>&#123;&#125;  <span class="comment">//获得到指定日期为止的存款金额按日累积值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">//返回编号</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBalance</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">//返回余额</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getRate</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">//返回存款的年利率</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">int</span> date, <span class="keyword">double</span> amount)</span> </span>&#123;&#125; <span class="comment">//存入现金</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">int</span> date, <span class="keyword">double</span> amount)</span> </span>&#123;&#125; <span class="comment">//取出现金</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">settle</span><span class="params">(<span class="keyword">int</span> date)</span> </span>&#123;&#125; <span class="comment">//结算利息，每年1月1日调用一次该函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">//显示账户信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;&#125; <span class="comment">//主函数，呈现所实现的功能</span></span><br></pre></td></tr></table></figure><h3 id="1-4-系统测试"><a href="#1-4-系统测试" class="headerlink" title="1.4    系统测试"></a>1.4    系统测试</h3><p>目的：</p><ul><li>新建两个账户，此时会显示 <code>#xxxxxx is created</code>;</li><li>添加几笔帐目，此时会显示对应账户所添加的帐目信息;</li><li>开户后第90天到了银行的计息日，结算所有账户的年息,此时会显示所有帐目的年息;</li><li>显示所有账户的信息，此时会显示： <code>#xxxxx Balance: xxxx</code></li></ul><p>无实际输入内容，输出结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1#21325302 is created</span><br><span class="line">1#58320212 is created</span><br><span class="line">5#2132530250005000</span><br><span class="line">25#583202121000010000</span><br><span class="line">45#21325302550010500</span><br><span class="line">60#58320212-40006000</span><br><span class="line">90#2132530227.6410527.64</span><br><span class="line">90#5832021221.786021.78</span><br><span class="line">#21325302Balance: 10527.64#21325302   Balance: 10527.64</span><br><span class="line"></span><br><span class="line">--------<span class="number">10527.64</span></span><br><span class="line"></span><br><span class="line">#58320212Balance: 6021.78#58320212   Balance: 6021.78</span><br><span class="line"></span><br><span class="line">--------<span class="number">6021.78</span></span><br></pre></td></tr></table></figure><p>程序在计算年息时通过四舍五入的方法以及去除整数小数点后的零使得最后的输出结果符合实验预期，同 c++ 实现的输出结果相同。</p><h3 id="1-5-体会心得"><a href="#1-5-体会心得" class="headerlink" title="1.5    体会心得"></a>1.5    体会心得</h3><p>与 c++ 实现相比，java 的项目实现更加的严谨，同时也有一些不同的语言特性，例如 java 在输出浮点数时，整数不经过处理时会输出小数点后一位的零，而 c++ 的输出会舍弃。</p><p>java 在实例化对象时的语法与 c++ 相比有些不同，例如 <code>className c;</code> 在 c++ 中即表示实例化一个对象，而在 java 中虽然表达相同，但实际仅仅是对象的声明，此时并没有实例化真正的对象，同时 java 实例化对象时需要使用关键字 <code>new</code>。</p><h2 id="2、-个人银行管理系统版本0-2（对应第5章记录）"><a href="#2、-个人银行管理系统版本0-2（对应第5章记录）" class="headerlink" title="2、 个人银行管理系统版本0.2（对应第5章记录）"></a>2、 个人银行管理系统版本0.2（对应第5章记录）</h2><h3 id="2-1-系统需求"><a href="#2-1-系统需求" class="headerlink" title="2.1    系统需求"></a>2.1    系统需求</h3><p>此版本的项目在上一版做出如下改进：</p><ul><li>在活期账户中添加一个用来记录各个账户的总金额的功能，同时可以获取这个总金额；</li></ul><h3 id="2-2-系统设计"><a href="#2-2-系统设计" class="headerlink" title="2.2    系统设计"></a>2.2    系统设计</h3><ul><li>在 <code>SavingAccount</code> 类中添加一个静态数据成员 <code>total</code> , 用来记录各个账户的总金额，并为其增加相应的静态成员方法 <code>getTotal</code> 用来对其进行访问。</li><li>将 <code>SavingAccount</code> 类中的例如 <code>getBalance()</code> , <code>accumulate()</code> 这些不需要改变对象状态的成员方法声明为 <strong>常成员方法</strong>。</li></ul><p>SavingAccount 的UML图为：</p><p><img src="https://raw.githubusercontent.com/31415926535x/CollegeProjectBackup/master/java_shiyan/PersonBankAccountManageSystem/doc/uml/v5_11/uml/uml.png" alt=""></p><h3 id="2-3-系统实现"><a href="#2-3-系统实现" class="headerlink" title="2.3    系统实现"></a>2.3    系统实现</h3><p>除上版本的数据成员和成员方法外，增加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">double</span> total = <span class="number">0</span>;        <span class="comment">//所有账户的金额</span></span><br></pre></td></tr></table></figure><p>同时在 <code>record()</code> 方法中增加 <code>total += amount;</code> 来实现 各个账户的总金额的计算</p><p>增加获取总金额的静态方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getTotal</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">//显示总金额</span></span><br></pre></td></tr></table></figure><h3 id="2-4-系统测试"><a href="#2-4-系统测试" class="headerlink" title="2.4    系统测试"></a>2.4    系统测试</h3><p>除了和上一版本的测试用例以外，添加一个显示总金额的测试，预期输出为： <code>Total: xxxx</code>;</p><p>程序仍无输入操作，最后的输出结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1#21325302 is created</span><br><span class="line">1#58320212 is created</span><br><span class="line">5#2132530250005000</span><br><span class="line">25#583202121000010000</span><br><span class="line">45#21325302550010500</span><br><span class="line">60#58320212-40006000</span><br><span class="line">90#2132530227.6410527.64</span><br><span class="line">90#5832021221.786021.78</span><br><span class="line">#21325302Balance: 10527.64</span><br><span class="line">#58320212Balance: 6021.78</span><br><span class="line">Total: <span class="number">16549.42</span></span><br></pre></td></tr></table></figure><p>除 <code>Total: 16549.42</code> 外，其他的输出结果与 0.1版本 的输出一致。</p><h3 id="2-5-体会心得"><a href="#2-5-体会心得" class="headerlink" title="2.5    体会心得"></a>2.5    体会心得</h3><ul><li><p>同 c++ 一样，类中的静态变量只占用该类的一个空间，可以当作本类的一个计数器。</p></li><li><p>静态数据成员仅由静态成员方法来访问。</p></li></ul><h2 id="3、-个人银行管理系统版本0-3（对应第6章记录）"><a href="#3、-个人银行管理系统版本0-3（对应第6章记录）" class="headerlink" title="3、 个人银行管理系统版本0.3（对应第6章记录）"></a>3、 个人银行管理系统版本0.3（对应第6章记录）</h2><h3 id="3-1-系统需求"><a href="#3-1-系统需求" class="headerlink" title="3.1    系统需求"></a>3.1    系统需求</h3><ul><li>使用字符串银行账号。</li><li>为每笔账户增加说明性文字的功能。</li><li>增加 <strong>报告错位</strong> 的功能。</li><li>简化测试的实现。</li><li>增加一个日期功能，其中的子功能有：存储一个日期，返回年月日，判断是否为闰年，获取两日只差的天数，显示日期的功能。</li></ul><h3 id="3-2-系统设计"><a href="#3-2-系统设计" class="headerlink" title="3.2    系统设计"></a>3.2    系统设计</h3><ul><li>在上两个版本中，银行账号都是用一个整数表示，但这并不是完美的解决方案；例如，如果银行账号以0开头，或账号超出整数的表示范围，或者账号中包括了其他字符等等，所以要使用 <strong>字符串</strong> 来表示银行账号。</li><li>前两个版本中所输出的账目列表，每笔账目都没有说明，使用字符串可以为每笔账目增加说明文字。</li><li>为 <code>SavingAccount</code> 类专门增加了一个用来 <strong>报告错误</strong> 的方法，当其他函数需要输出错误信息时，直接把信息子字符串形式传递给该方法计科，简化了错误信息的输出。</li><li>前两个版本中，主程序创建的两个独立的变量，只能用名字去引用他们，在主程序木哦为分别对两个账户进行结算 <strong>settle</strong> 和显示 <strong>show</strong> 时，需要将几乎相同的代码书写两遍，如果账户数量增多将带来更多麻烦，所以可以将需要对各个账户做的事情放到循环里，避免了代码的冗余。</li><li>前几个版本中，日期都是用一个整数表示的，这样计算两个日期距离的天数非常方便，到那时这种表示很不直观，对用户很不友好，所以用一个类来表示日期。</li></ul><p>UML图为：</p><p><img src="https://raw.githubusercontent.com/31415926535x/CollegeProjectBackup/master/java_shiyan/PersonBankAccountManageSystem/doc/uml/v6_25/uml/uml.png" alt=""></p><h3 id="3-3-系统实现"><a href="#3-3-系统实现" class="headerlink" title="3.3    系统实现"></a>3.3    系统实现</h3><h4 id="Date类的实现"><a href="#Date类的实现" class="headerlink" title="Date类的实现"></a>Date类的实现</h4><p>为了计算两个日期相差天数，可以先选取一个比较规整的 <strong>基准日期</strong>，在构造日期对象时将该日期到基准日期的相对天数计算出来，（称这个相对天数为 “相对日期”），这样计算两个日期相差的天数时，只需将二者的相对日期相减即可。</p><p>假设将公元元年1月1日作为基准日期，将y年m月d日相距这一天的天数记为 $f(y/m/d,1/1/1)$，可以将其分解为3个部分：</p><script type="math/tex; mode=display">{    f(y/m/d, 1/1/1) =         f(y/1/1, 1/1/1) + f(y/m/1, y/1/1) + f(y/m/d, y/m/1)}</script><p>上面的等数右边的第一项表示当年的1月1日与公元元年1月1日相距的天数，即公元元年到公元y-1年的总天数。平年每年有365天，闰年多一天，因此该值为 $365(y-1)$ 加上公元元年到 y - 1 年之间的闰年数。由于4年一闰，100的倍数免闰，400的倍数再闰，故有：</p><script type="math/tex; mode=display">{    f(y/m/d, 1/1/1) =         365(y-1) +         \lfloor{\frac{y-1}{4}} \rfloor -         \lfloor{\frac{y-1}{100}} \rfloor +         \lfloor{\frac{y+1}{400}} \rfloor}</script><p>其中 $\lfloor x \rfloor$ 表示对 $x$ 的向下取整， $f(y/m/d, y/1/1)$ 表示y年m月1日与1月1日相距天数。</p><p>由于每月的天数不同，所以难以表示为一个同一的公式，但每月的1日与1月1日相差的天数可以有月份m唯一确定，因此可以把每月1日到1月1日由一个数组保存，计算时只需查询该数组即可，对于闰年，当 $m&gt;2$ 时将查得的值加一即可。该值只依赖于x和y，记为 $g(m,y)$。</p><p>同时： </p><script type="math/tex; mode=display">    f(y/m/d, y/m/1) = d - 1</script><p>将公元元年1月1日作为基准日期，则公元y年m月d日的相对日期就是；</p><script type="math/tex; mode=display">    f(y/m/d, 1/1/1) + 1 =           365(y - 1) +         \lfloor{\frac{y-1}{4}} \rfloor -         \lfloor{\frac{y-1}{100}} \rfloor +         \lfloor{\frac{y+1}{400}} \rfloor +         g(m, y) + d</script><p>两个日期的天数的差便可以简单的计算出来。</p><p>Date类的数据成员包括 <code>year</code> , <code>month</code> , <code>day</code> 和 <code>totalDays</code> （相对日期）； 成员函数有：<code>getMaxDay</code> 获取当月的天数， <code>isLeapYear</code> 判断当前年是否为闰年， <code>show</code> 输出当前日期， <code>distance</code> 判断当前日期与指定日期相差的天数；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据成员：</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> year;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> month;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> day;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> totalDays;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> DAYS_BEFORE_MONTH[] = &#123; <span class="number">0</span>, <span class="number">31</span>, <span class="number">59</span>, <span class="number">90</span>, <span class="number">120</span>, <span class="number">151</span>, <span class="number">181</span>, <span class="number">212</span>, <span class="number">243</span>, <span class="number">273</span>, <span class="number">304</span>, <span class="number">334</span>, <span class="number">365</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getYear</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getMonth</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getDay</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getMaxDay</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isLeapYear</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">distance</span><span class="params">(<span class="keyword">final</span> Date date)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="SavingsAccount类的改动"><a href="#SavingsAccount类的改动" class="headerlink" title="SavingsAccount类的改动"></a>SavingsAccount类的改动</h4><p>在上一版本的基础上，有如下改动：</p><ul><li>描述账号的数据类型由 <code>int</code> 改为 <code>string</code>;</li><li>描述日期的数据类型由 <code>int</code> 改为 <code>Date</code> 类，并为 <code>deposit</code>, <code>withdraw</code> 和 <code>settle</code> 增加了一个用来存储该笔账目信息的 <code>string</code> 型的 <code>desc</code> 参数;</li><li>增加一个专用于输出错误信息的 <code>error</code> 方法;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String id;<span class="comment">//账号</span></span><br><span class="line"><span class="keyword">private</span> Date lastDate;<span class="comment">//上次变更余额的时期</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">record</span><span class="params">(<span class="keyword">final</span> Date date, <span class="keyword">double</span> amount, <span class="keyword">final</span> String desc)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(<span class="keyword">final</span> String msg)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">final</span> Date date, <span class="keyword">double</span> amount, <span class="keyword">final</span> String desc)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">final</span> Date date, <span class="keyword">double</span> amount, <span class="keyword">final</span> String desc)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">settle</span><span class="params">(<span class="keyword">final</span> Date date)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-系统测试"><a href="#3-4-系统测试" class="headerlink" title="3.4    系统测试"></a>3.4    系统测试</h3><p>目的：</p><ul><li>实例化一个日期对象作为一个基准日期，此时无输出；</li><li>声明一个长度为2的活期账户对象数组，同时添加两个账户信息，此时应显示 <code>date #xxxxxx is created</code>；</li><li>添加几笔带有说明性信息的帐目，以测试说明性信息的存取功能是否实现，此时应显示： <code>date #xxxxxx xxxx xxxx msg</code></li><li>对所有账户设置一个新的日期，同时显示修改日期后信息，此时应显示： <code>date #xxxx xx xxxx interest xxxxxx balance: xxxx</code></li><li>显示所有账户的总金额： <code>Total: xxxx</code>;</li></ul><p>程序无输入操作，输出的结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2008-11-1#S3755217 is created</span><br><span class="line">2008-11-1#02342342 is created</span><br><span class="line">2008-11-5#S375521750005000salary</span><br><span class="line">2008-11-25#023423421000010000sell stock 0323</span><br><span class="line">2008-12-5#S3755217550010500salary</span><br><span class="line">2008-12-20#02342342-40006000buy a laptop</span><br><span class="line"></span><br><span class="line">2009-1-1#S375521717.7710517.77interest</span><br><span class="line">S3755217Balance: <span class="number">10517.77</span></span><br><span class="line">2009-1-1#0234234213.26013.2interest</span><br><span class="line"><span class="number">02342342</span>Balance: <span class="number">6013.2</span></span><br><span class="line">Total: <span class="number">16530.97</span></span><br></pre></td></tr></table></figure><p>最后的输出与实验预期相一致。</p><h3 id="3-5-体会心得"><a href="#3-5-体会心得" class="headerlink" title="3.5    体会心得"></a>3.5    体会心得</h3><ul><li>类的组合可以使一些功能实现更加的容易以及管理，本版本中利用Date类（类的组合）使得有关日期的操作可以和SavingsAccount类的实现相互独立，无需关心Date类的具体实现，同时一些操作的实现也可以直接调用方法来实现；</li><li>Main类中使用了对象数组来实现最后的一些操作可以通过循环来实现，减少代码量；</li><li>c++与java在功能实现上大同小异，但是一些细节的处理也体现出了两个语言之间的差别，对于这些细碎的东西要善于去用各种资源来寻找；</li></ul><h2 id="4、-个人银行管理系统版本0-4（对应第7章记录）"><a href="#4、-个人银行管理系统版本0-4（对应第7章记录）" class="headerlink" title="4、 个人银行管理系统版本0.4（对应第7章记录）"></a>4、 个人银行管理系统版本0.4（对应第7章记录）</h2><h3 id="4-1-系统需求"><a href="#4-1-系统需求" class="headerlink" title="4.1    系统需求"></a>4.1    系统需求</h3><p>同上一版本相比，这一版本增加了 <strong>信用账户</strong> 的需求：</p><ul><li>信用账户允许 <strong>透支</strong>，每一个信用账户都有一定的信用额度，总的透支金额应在这个额度之内。</li><li>如果项信用账户内存钱，不会有利息，但使用信用账户透支则需要支付利息，信用账户的利率一般以日为单位，为了简单从透支那一天其就开始计算利息。</li><li>信用账户每月进行以及结算，假定结算日为每月的1日。</li><li>信用账户每年需要交一次年费，假定每年1月1日结算的时候扣缴年费。</li></ul><h3 id="4-2-系统设计"><a href="#4-2-系统设计" class="headerlink" title="4.2    系统设计"></a>4.2    系统设计</h3><p>根据需求设计一个 <strong>基类Account</strong> 用来描述所有账户的共性，派生除 <em>SavingsAccount</em> 以及在派生出表示信用账户的类 <em>CreditAccount</em>。</p><p>在基类Account中，保留数据成员: <code>id账号</code> ， <code>balance余额</code> ， <code>total静态数据成员账户总金额</code> ， 成员方法: <code>show输出信息</code>。原来的 <code>record</code> , <code>error</code> 方法的访问控制权限修改为 <strong>protected</strong>，供派生类调用，同时还有一个保护的构造方法。</p><p>对于 <em>处理存款的成员方法 deposit</em> 、 <em>处理取款的成员方法 withdraw</em> 、 <em>处理结算的成员方法 settle</em> 都放在各个派生类中，原因是两种账户的具体处理方式不同。</p><p><em>储蓄账户用来表示年利率的rate</em> 、 <em>信用账户用来表示信用额度的credit 、表示日利率 rate、 表示年费fee</em> 以及其获取他们的成员方法都作为相应的派生类的成员。</p><p>创建一个新类用来实现各个账户的按日累加和的功能，有该类题用计算一项数据的按日累加之和所需的接口，在两个派生类中分别将其实例化，通过该类的实例计算利息。这个类命名为 <code>Accumulator</code>。</p><p>该类包括3个数据成员： <code>lastDate被累加数值上次变更日期</code> 、 <code>value被累加数值的当前值</code> 、 <code>sum到上次变更被累加数值位置的按日累加总和</code>；</p><p>该类包括4个成员方法： 构造方法、 <code>getSum计算到指定日期的累加结果</code> 、 <code>change指定日期更改数值</code> 、 <code>reset将累加器清零并重新设定初始日期和数值</code>;</p><p>UML图：</p><p><img src="https://raw.githubusercontent.com/31415926535x/CollegeProjectBackup/master/java_shiyan/PersonBankAccountManageSystem/doc/uml/v7_10/uml/uml.png" alt=""></p><h3 id="4-3-系统实现"><a href="#4-3-系统实现" class="headerlink" title="4.3    系统实现"></a>4.3    系统实现</h3><h4 id="Account类实现"><a href="#Account类实现" class="headerlink" title="Account类实现"></a>Account类实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> balance;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">Account</span><span class="params">(<span class="keyword">final</span> Date date, <span class="keyword">final</span> String id)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">record</span><span class="params">(<span class="keyword">final</span> Date date, <span class="keyword">double</span> amount, <span class="keyword">final</span> String desc)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(<span class="keyword">final</span> String msg)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getId</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> <span class="title">getBalance</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getTotal</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="Accumulator类"><a href="#Accumulator类" class="headerlink" title="Accumulator类"></a>Accumulator类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Date lastDate;</span><br><span class="line"><span class="keyword">double</span> value;</span><br><span class="line"><span class="keyword">double</span> sum;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Accumulator</span><span class="params">(<span class="keyword">final</span> Date date, <span class="keyword">double</span> value)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> <span class="title">getSum</span><span class="params">(<span class="keyword">final</span> Date date)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">final</span> Date date, <span class="keyword">double</span> value)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">(<span class="keyword">final</span> Date date, <span class="keyword">double</span> value)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="SavingsAccount类"><a href="#SavingsAccount类" class="headerlink" title="SavingsAccount类"></a>SavingsAccount类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SavingsAccount</span> <span class="keyword">extends</span> <span class="title">Account</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Accumulator acc;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> rate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SavingsAccount</span><span class="params">(<span class="keyword">final</span> Date date, <span class="keyword">final</span> String id, <span class="keyword">double</span> rate)</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> <span class="title">getRate</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">final</span> Date date, <span class="keyword">double</span> amount, <span class="keyword">final</span> String desc)</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">final</span> Date date, <span class="keyword">double</span> amount, <span class="keyword">final</span> String desc)</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">settle</span><span class="params">(<span class="keyword">final</span> Date date)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CreditAccount类"><a href="#CreditAccount类" class="headerlink" title="CreditAccount类"></a>CreditAccount类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreditAccount</span> <span class="keyword">extends</span> <span class="title">Account</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Accumulator acc;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> cred`it;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> rate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> fee;`</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> <span class="title">getDebt</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CreditAccount</span><span class="params">(<span class="keyword">final</span> Date date, <span class="keyword">final</span> String id, <span class="keyword">double</span> credit, <span class="keyword">double</span> rate, <span class="keyword">double</span> fee)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> <span class="title">getCredit</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> <span class="title">getRate</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> <span class="title">getFee</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> <span class="title">getAvailableCredit</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">final</span> Date date, <span class="keyword">double</span> amount, <span class="keyword">final</span> String desc)</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">final</span> Date date, <span class="keyword">double</span> amount, <span class="keyword">final</span> String desc)</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">settle</span><span class="params">(<span class="keyword">final</span> Date date)</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h4><p>Date类与上一版本保持不变</p><h3 id="4-4-系统测试"><a href="#4-4-系统测试" class="headerlink" title="4.4    系统测试"></a>4.4    系统测试</h3><p>目的：</p><ul><li>实例化一个日期，作为初始日期，此时无输出；</li><li>实例化两个活期账户以及一个信用账户，此时应该显示： <code>date #xxxxxxxx created</code>;</li><li>添加几笔账单，此时应该显示： <code>date #xxxxxxx xxxx xxxx msg</code>;</li><li>设置一个日期结算信用账户，此时应显示： <code>date #xxxxxxxx xxxx xxxx interest</code>；</li><li>添加几笔账单，此时应该和上面显示的信息类似；</li><li>结算所有账户，此时应该显示： <code>date #xxxxxxxx xxxx xxxx interest/annual fee</code>；</li><li>显示所有账户的信息，此时应该显示： <code>xxxxxxxxx Balance: xxxx / Available credit: xxxx</code></li><li>显示总金额，此时应该显示： <code>Total: xxxx</code>;</li></ul><p>这一版本仍无输入，所以输出为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">2008-11-1#S3755217 created</span><br><span class="line">2008-11-1#02342342 created</span><br><span class="line">2008-11-1#C5392394 created</span><br><span class="line">2008-11-5#S375521750005000salary</span><br><span class="line">2008-11-15#C5392394-2000-2000buy a cell</span><br><span class="line">2008-11-25#023423421000010000sell stock 0323</span><br><span class="line">2008-12-1#C5392394-16-2016interest</span><br><span class="line">2008-12-1#C539239420160repay the creadit</span><br><span class="line">2008-12-5#S3755217550010500salary</span><br><span class="line">2009-1-1#S375521717.7710517.77interest</span><br><span class="line">2009-1-1#0234234215.1610015.16interest</span><br><span class="line">2009-1-1#C5392394-50-50annual fee</span><br><span class="line"></span><br><span class="line">S3755217Balance: <span class="number">10517.77</span></span><br><span class="line"><span class="number">02342342</span>Balance: <span class="number">10015.16</span></span><br><span class="line">C5392394Balance: -<span class="number">50</span>Available credit:<span class="number">9950</span></span><br><span class="line">Total: <span class="number">20482.93</span></span><br></pre></td></tr></table></figure><p>输出与预期内容相同。</p><h3 id="4-5-体会心得"><a href="#4-5-体会心得" class="headerlink" title="4.5    体会心得"></a>4.5    体会心得</h3><ul><li>这一版本因为增加了一个与 储蓄账户 类似的 信用账户类的需求，所以为了简化实现，同时减少代码量，设计一个共同的父类 Account 类来派生出需要的两个子类；</li><li>为了更方便的计算累加的日期设计一个 Accumulator 类，而Date类因为没有需求与其有关，所以没有更改；</li><li>这一版本更加的体现了面向对象编程设计软件在需求变更时的好处，开发者只需解决增加的需求方面的任务，而不用管其余的东西，同时继承派生使得同类不同功能的实现更加的容易，大大的减小开发的难度。</li></ul><h2 id="5、-个人银行管理系统版本0-5（对应第8章记录）"><a href="#5、-个人银行管理系统版本0-5（对应第8章记录）" class="headerlink" title="5、 个人银行管理系统版本0.5（对应第8章记录）"></a>5、 个人银行管理系统版本0.5（对应第8章记录）</h2><h3 id="5-1-系统需求"><a href="#5-1-系统需求" class="headerlink" title="5.1    系统需求"></a>5.1    系统需求</h3><p>这一版本改进上一般版本中的两个不足：</p><ul><li>改进测试方法的实现，使其更加的便于操作，管理；</li><li>改进各账户之间的关系，使其更加容易操作；</li></ul><h3 id="5-2-系统设计"><a href="#5-2-系统设计" class="headerlink" title="5.2    系统设计"></a>5.2    系统设计</h3><ul><li>各个账户对象无法通过数组来访问，使得在分别对每个对象执行某个操作时，只能分别写出针对各对象的代码，无法使用循环。</li><li>不同派生类的 <code>deposit</code> , <code>withdraw</code> , <code>settle</code> 等函数彼此独立，只有知道一个实例的具体类型之后才能调用这些函数。</li></ul><h4 id="Account类的改进"><a href="#Account类的改进" class="headerlink" title="Account类的改进"></a>Account类的改进</h4><ul><li>在c++中可以使用虚函数，这样 <code>show</code> 函数就可以在具体的类中实现，在Java中的解决方法是子类调用父类实现一部分的功能。</li><li>将Account中的 <code>deposit</code> , <code>withdraw</code> , <code>settle</code> 声明为抽象方法，这样可以通过父类的引用来调用子类的方法。</li><li>将 <code>settle</code> 方法允许接受的参数统一为每月1日，同时对活期储蓄账户的 <code>settle</code> 进行修改，使它在结算利息之前先判断是否为1月，只有参数所给的日期是1月才进行结算。</li><li>通过以上修改之后便可以通过同一个父类的声明来引用不同的子类，这样可以通过一个父类的数组来实现不同的账户的存储操作。</li></ul><h4 id="Date类的改进"><a href="#Date类的改进" class="headerlink" title="Date类的改进"></a>Date类的改进</h4><p>原来的Date类中的 <code>distance1</code> 函数在c++中改为 <strong>“-“</strong> 运算符重载可以使程序更加的直观，在Java中的解决方法是增加一个 <code>sub</code> 方法来实现两日期相差天数的功能。</p><p><img src="https://raw.githubusercontent.com/31415926535x/CollegeProjectBackup/master/java_shiyan/PersonBankAccountManageSystem/doc/uml/v8_8/uml/uml.png" alt=""></p><h3 id="5-3-系统实现"><a href="#5-3-系统实现" class="headerlink" title="5.3    系统实现"></a>5.3    系统实现</h3><h4 id="Account类"><a href="#Account类" class="headerlink" title="Account类"></a>Account类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">final</span> Date date, <span class="keyword">double</span> amount, <span class="keyword">final</span> String desc)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">final</span> Date date, <span class="keyword">double</span> amount, <span class="keyword">final</span> String desc)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">settle</span><span class="params">(<span class="keyword">final</span> Date date)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;   </span><br><span class="line">        NumberFormat nf = <span class="keyword">new</span> DecimalFormat(<span class="string">"0.##"</span>);</span><br><span class="line">        System.out.print(id + <span class="string">"\tBalance: "</span> + nf.format(balance));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CreditAccount类-1"><a href="#CreditAccount类-1" class="headerlink" title="CreditAccount类"></a>CreditAccount类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.show();</span><br><span class="line">    NumberFormat nf = <span class="keyword">new</span> DecimalFormat(<span class="string">"0.##"</span>);</span><br><span class="line">    System.out.print(<span class="string">"\tAvailable credit:"</span> + nf.format(getAvailableCredit()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Date类-1"><a href="#Date类-1" class="headerlink" title="Date类"></a>Date类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">final</span> Date date)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.totalDays - date.totalDays;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-系统测试"><a href="#5-4-系统测试" class="headerlink" title="5.4    系统测试"></a>5.4    系统测试</h3><p>目的：</p><ul><li>实例化一个日期，作为初始日期，此时无输出；</li><li>建立两个活期账户，一个信用账户，此时的显示与上一版的输出一致；</li><li>实例化一个由以上账户构成的 <code>accounts</code> 对象数组，便于之后的操作，此时无输出；</li><li>显示一个可供选择的菜单，列出具体操作指令以及对应的功能，此时输出应该为： <code>(d)deposit (w)withdraw (s)show (c)change day (n)next month (e)exit</code>；</li><li>之后的每一个等待输入时都将先输出一行提示指令，同时显示所有账户的总金额，输出的形式为： <code>date Total: xxxx.x command&gt;</code>；</li><li>改变当前月份的日期，输入为： <code>c 5</code> ，此时在下一次等待输入的提示指令显示将是合法更改后的日期，对应这条输入输出结果应该为： <code>2008-11-5   Total: 0.0 command&gt;</code>；</li><li>向0号账户存入一笔金额为5000，说明信息为 <em>salary</em> 的现金，输入为： <code>d 0 5000 salary</code> ， 此时应该输出： <code>2008-11-5    #S3755217    5000    5000     salary</code>；</li><li>向2号账户取出一笔现金，金额为2000，信息为 <em>buy a cell</em> ， 输入为： <code>w 2 2000 buy a cell</code> ， 此时应该输出： <code>2008-11-25    #02342342    10000    10000     sell stock 0323</code>；</li><li>进入下一月，输入 <code>n</code> ， 此时输出： <code>2008-12-1    #C5392394    -16    -2016    interest</code> , <code>2008-12-1    Total: 12984.0    command&gt;</code>；</li><li>向2号账户存入一笔金额为2016的现金，说明文字为 <em>repay the credit</em>， 此时的输入： <code>d 2 2016 repay the credit</code> , 输出应该为： <code>2008-12-1    #C5392394    2016    0     repay the credit</code>；</li><li>改变当前月的日期为5号，输入 <code>c 5</code> , 此时的输出应该为： <code>2008-12-5    Total: 15000.0    command&gt;</code>；</li><li>向0号账户存入一笔5500的现金，说明信息为 <em>salary</em> ，输入为： <code>d 0 5500 salary</code> ， 此时的输出应该为： <code>2008-12-5    #S3755217    5500    10500     salary</code>；</li><li>进入下一月，输入 <code>n</code> ， 此时输出为:</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2009-1-1#S375521717.7710517.77interest</span><br><span class="line">2009-1-1#0234234215.1610015.16interest</span><br><span class="line">2009-1-1#C5392394-50-50annual fee</span><br></pre></td></tr></table></figure><ul><li><p>显示所有账户的信息， 输入 <code>s</code> ， 此时应该输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>] S3755217Balance: <span class="number">10517.77</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">02342342</span>Balance: <span class="number">10015.16</span></span><br><span class="line">[<span class="number">2</span>] C5392394Balance: -<span class="number">50</span>Available credit:<span class="number">9950</span></span><br></pre></td></tr></table></figure></li><li><p>终止测试，输入 <code>e</code> ， 此时将退出测试程序；</p></li></ul><p>这一版本的系统增加了具体的输入的操作，使得用户能够自行进行一些对各账户的操作，最终的输出与预期的输出相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">2008-11-1#S3755217 created</span><br><span class="line">2008-11-1#02342342 created</span><br><span class="line">2008-11-1#C5392394 created</span><br><span class="line">(d)deposit (w)withdraw (s)show (c)<span class="function">change <span class="title">day</span> <span class="params">(n)</span>next <span class="title">month</span> <span class="params">(e)</span>exit</span></span><br><span class="line"><span class="function">2008-11-1Total: 0.0command&gt; c 5</span></span><br><span class="line"><span class="function">2008-11-5Total: 0.0command&gt; d 0 5000 salary</span></span><br><span class="line"><span class="function">2008-11-5#S375521750005000 salary</span></span><br><span class="line"><span class="function">2008-11-5Total: 5000.0command&gt; c 15</span></span><br><span class="line"><span class="function">2008-11-15Total: 5000.0command&gt; w 2 2000 buy a cell</span></span><br><span class="line"><span class="function">2008-11-15#C5392394-2000-2000 buy a cell</span></span><br><span class="line"><span class="function">2008-11-15Total: 3000.0command&gt; c 25</span></span><br><span class="line"><span class="function">2008-11-25Total: 3000.0command&gt; d 1 10000 sell stock 0323</span></span><br><span class="line"><span class="function">2008-11-25#023423421000010000 sell stock 0323</span></span><br><span class="line"><span class="function">2008-11-25Total: 13000.0command&gt; n</span></span><br><span class="line"><span class="function">2008-12-1#C5392394-16-2016interest</span></span><br><span class="line"><span class="function">2008-12-1Total: 12984.0command&gt; d 2 2016 repay the credit</span></span><br><span class="line"><span class="function">2008-12-1#C539239420160 repay the credit</span></span><br><span class="line"><span class="function">2008-12-1Total: 15000.0command&gt; c 5</span></span><br><span class="line"><span class="function">2008-12-5Total: 15000.0command&gt; d 0 5500 salary</span></span><br><span class="line"><span class="function">2008-12-5#S3755217550010500 salary</span></span><br><span class="line"><span class="function">2008-12-5Total: 20500.0command&gt; n</span></span><br><span class="line"><span class="function">2009-1-1#S375521717.7710517.77interest</span></span><br><span class="line"><span class="function">2009-1-1#0234234215.1610015.16interest</span></span><br><span class="line"><span class="function">2009-1-1#C5392394-50-50annual fee</span></span><br><span class="line"><span class="function">2009-1-1Total: 20482.93command&gt; s</span></span><br><span class="line"><span class="function">[0] S3755217Balance: 10517.77</span></span><br><span class="line"><span class="function">[1] 02342342Balance: 10015.16</span></span><br><span class="line"><span class="function">[2] C5392394Balance: -50Available credit:9950</span></span><br><span class="line"><span class="function">2009-1-1Total: 20482.93command&gt; e</span></span><br></pre></td></tr></table></figure><h3 id="5-5-体会心得"><a href="#5-5-体会心得" class="headerlink" title="5.5    体会心得"></a>5.5    体会心得</h3><ul><li>为了能够通过数组的形式来操作同一父类下的子类，修改了父类的实现，使得一些方法的具体实现在其子类中实现，这样可以仅使用父类来引用具体要操作的子类，大大的使操作更加的便捷。</li><li>c++中的运算符重载功能在Java中不再存在，而是使用具体的方法来实现，同样也使得代码的书写更加的直观，增加程序的可读性。</li></ul><h2 id="6、-个人银行管理系统版本0-6（对应第9章记录）"><a href="#6、-个人银行管理系统版本0-6（对应第9章记录）" class="headerlink" title="6、 个人银行管理系统版本0.6（对应第9章记录）"></a>6、 个人银行管理系统版本0.6（对应第9章记录）</h2><h3 id="6-1-系统需求"><a href="#6-1-系统需求" class="headerlink" title="6.1    系统需求"></a>6.1    系统需求</h3><p>进一步改进测试程序中的实现，使得测试程序操作更加的便捷。</p><h3 id="6-2-系统设计"><a href="#6-2-系统设计" class="headerlink" title="6.2    系统设计"></a>6.2    系统设计</h3><p>在上一版本中，使用父类对象数组来处理不同派生类对象，从而实现多态性调用，本版本中使用Java中的 <code>ArrayList</code> 来代替原来的对象数组，以实现动态的改变大小，添加新账户的功能。</p><p>除 <code>Main</code> 类外，其余类文件都无需更改。在 <code>Main</code> 类中导入Java实用包中的 <code>ArrayList</code>。创建对象数组。</p><p>本版本的UML图与上一版本的相同。</p><h3 id="6-3-系统实现"><a href="#6-3-系统实现" class="headerlink" title="6.3    系统实现"></a>6.3    系统实现</h3><h4 id="Main类"><a href="#Main类" class="headerlink" title="Main类"></a>Main类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Account&gt; accounts = <span class="keyword">new</span> ArrayList&lt;Account&gt;();</span><br></pre></td></tr></table></figure><h3 id="6-4-系统测试"><a href="#6-4-系统测试" class="headerlink" title="6.4    系统测试"></a>6.4    系统测试</h3><p>目的： </p><ul><li>使用 <em>ArrayList</em> 实现对象数组，同时通过用户来录入账户信息，输入为：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a s S3755217 <span class="number">0.015</span></span><br><span class="line">a s <span class="number">02342342</span> <span class="number">0.015</span></span><br><span class="line">a c C5392394 <span class="number">10000</span> <span class="number">0.0005</span> <span class="number">50</span></span><br></pre></td></tr></table></figure><p>表示录入两个活期账户和一个信用账户，同时对应显示应该为： <code>date #xxxxxxxx created</code>；</p><p>其他的输入输出测试与上一版本的一致；</p><p>输入和最后的输出符合预期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">(a)<span class="function">add <span class="title">account</span> <span class="params">(d)</span><span class="title">deposit</span> <span class="params">(w)</span><span class="title">withdraw</span> <span class="params">(s)</span><span class="title">show</span> <span class="params">(c)</span>change <span class="title">day</span> <span class="params">(n)</span>next <span class="title">month</span> <span class="params">(e)</span>exit</span></span><br><span class="line"><span class="function">2008-11-1Total: 0.0command&gt; a s S3755217 0.015</span></span><br><span class="line"><span class="function">2008-11-1#S3755217 created</span></span><br><span class="line"><span class="function">2008-11-1Total: 0.0command&gt; a s 02342342 0.015</span></span><br><span class="line"><span class="function">2008-11-1#02342342 created</span></span><br><span class="line"><span class="function">2008-11-1Total: 0.0command&gt; a c C5392394 10000 0.0005 50</span></span><br><span class="line"><span class="function">2008-11-1#C5392394 created</span></span><br><span class="line"><span class="function">2008-11-1Total: 0.0command&gt; c 5</span></span><br><span class="line"><span class="function">2008-11-5Total: 0.0command&gt; d 0 5000 salary</span></span><br><span class="line"><span class="function">2008-11-5#S375521750005000 salary</span></span><br><span class="line"><span class="function">2008-11-5Total: 5000.0command&gt; c 15</span></span><br><span class="line"><span class="function">2008-11-15Total: 5000.0command&gt; w 2 2000 buy a cell</span></span><br><span class="line"><span class="function">2008-11-15#C5392394-2000-2000 buy a cell</span></span><br><span class="line"><span class="function">2008-11-15Total: 3000.0command&gt; c 25</span></span><br><span class="line"><span class="function">2008-11-25Total: 3000.0command&gt; d 1 10000 sell stock 0323</span></span><br><span class="line"><span class="function">2008-11-25#023423421000010000 sell stock 0323</span></span><br><span class="line"><span class="function">2008-11-25Total: 13000.0command&gt; n</span></span><br><span class="line"><span class="function">2008-12-1#C5392394-16-2016interest</span></span><br><span class="line"><span class="function">2008-12-1Total: 12984.0command&gt; d 2 2016 repay the credit</span></span><br><span class="line"><span class="function">2008-12-1#C539239420160 repay the credit</span></span><br><span class="line"><span class="function">2008-12-1Total: 15000.0command&gt; c 5</span></span><br><span class="line"><span class="function">2008-12-5Total: 15000.0command&gt; d 0 5500 salary</span></span><br><span class="line"><span class="function">2008-12-5#S3755217550010500 salary</span></span><br><span class="line"><span class="function">2008-12-5Total: 20500.0command&gt; n</span></span><br><span class="line"><span class="function">2009-1-1#S375521717.7710517.77interest</span></span><br><span class="line"><span class="function">2009-1-1#0234234215.1610015.16interest</span></span><br><span class="line"><span class="function">2009-1-1#C5392394-50-50annual fee</span></span><br><span class="line"><span class="function">2009-1-1Total: 20482.93command&gt; s</span></span><br><span class="line"><span class="function">[0] S3755217Balance: 10517.77</span></span><br><span class="line"><span class="function">[1] 02342342Balance: 10015.16</span></span><br><span class="line"><span class="function">[2] C5392394Balance: -50Available credit:9950</span></span><br><span class="line"><span class="function">2009-1-1Total: 20482.93command&gt; e</span></span><br></pre></td></tr></table></figure><h3 id="6-5-体会心得"><a href="#6-5-体会心得" class="headerlink" title="6.5    体会心得"></a>6.5    体会心得</h3><ul><li>使用Java类库中的 <em>ArrayList</em> 实现了类的对象数组功能</li><li>使用一个共同的父类的对象数组便可一个统一管理他的子类的对象，使得最后的代码更加的简便，操作更符合逻辑性。</li></ul><h1 id="三、-课程设计总结"><a href="#三、-课程设计总结" class="headerlink" title="三、    课程设计总结"></a>三、    课程设计总结</h1><h2 id="最终实现的系统功能"><a href="#最终实现的系统功能" class="headerlink" title="最终实现的系统功能"></a>最终实现的系统功能</h2><p>系统逐步完善，最后实现的功能有：</p><ul><li>两个账户系统： <em>SavingsAccount</em> 以及 <em>CreditAccount</em> 他们统一由 <em>Account</em> 派生出来；前者实现的功能有：基本的账户信息的存储以及按日期产生的利息等功能，后者实现的功能有：基本的信用账户信息的存储以及按日期产生的欠款金额，信用额度和年费等功能；</li><li>一个适合银行管理系统的日期计算功能，计算出简单的两日之差，存储当前的日期等必要功能；</li><li>一个日期累加器功能，用于记录日期的累加值；</li><li>一个简单的系统测试模块，供用户测试最终系统的各个功能；</li></ul><h2 id="面向对象的基本设计思想"><a href="#面向对象的基本设计思想" class="headerlink" title="面向对象的基本设计思想"></a>面向对象的基本设计思想</h2><h3 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h3><p>对于系统的每一个功能，如 <em>SavingAccount</em> , <em>CreditAccount</em> , <em>Account</em> , <em>Date</em> , <em>Main</em> 等功能都是用类实现的，其中每一个类中需要和外界通讯的数据成员、成员方法先定义了具体的权限，如 <strong>public</strong> , <strong>protected</strong> 等，而无需通讯的私有成员则为 <strong>private</strong> ，使得最后的各功能只提供一些接口参数，而不是具体的实现细节，使用（调用）者无需关心其内部的实现便可实现自己的功能；</p><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>该系统设计了一个各账户共同的父类： <strong>Account</strong> ， 其他两个账户类都是由此继承出，他们有一些共同的方法、数据成员由父类实现（或声明），而其不同则由自己声明实现。</p><h3 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h3><p>对于一些子类继承自父类的数据成员，成员方法，他们中的一些的实现与父类略有不同，覆盖了原父类的内容，使得最后同一个方法有多种实现以供用户不同的需求；</p><h3 id="类的组合"><a href="#类的组合" class="headerlink" title="类的组合"></a>类的组合</h3><p>系统中一些支持类（Date, Accumulation等等）与其他类组合实现了一些基本的功能。</p><h2 id="遇到的问题及解决"><a href="#遇到的问题及解决" class="headerlink" title="遇到的问题及解决"></a>遇到的问题及解决</h2><ul><li>不同数据的读入： 课程内容未讲解Java中对不同的数据的读入方法，通过查阅互联网以及课本了解到具体的读入方法，最后选择 <code>Scanner</code> 来实现不同情况下的数据读入；</li><li>字符的读入： 在后续的功能测试中，使用到了用一个字符来表示选择的操作指令功能，通过查阅他人的经验选择按字符串读入后调用 <code>charAt()</code> 来取得操作指令的字符；</li><li>实数小数点的控制： 在前期的测试发现在输出整数时，c++会的标准输出流会舍弃小数点后的0，但是Java会保留一位0，为了功能的统一最后在查找资料后选择使用 <code>NumberFormat</code> 来格式化数字；</li><li>数字的四舍五入问题： c++中对于四舍五入的实现使用的是库函数 <code>floor</code> ，尝试调用Java中 <code>math</code> 包中的 <code>floor()</code> 来实现时发现最后的效果不好，换用 <code>bDecimal.setScale(2, RoundingMode.HALF_UP).doubleValue();</code> 语句来实现这个功能；</li><li>运算符重载的实现： c++中有运算符重载的功能，可以简单的实现两个类之间逻辑上的四则运算，通过查阅资料后得知Java中取消了运算符重载的功能，统一使用方法调用来代替原有功能；</li><li>文档及注释的写法： 通过搜索别人博客了解到Java可以通过一些具体的语法格式进行注释，之后便可自动生成文档；</li><li>项目中包的建立： 通过查阅别人博客等资料了解到如何在一个工作环境中新建不同的包；</li></ul><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>这个银行管理系统的完成让我熟悉了Java的基本语法，同时体会到了Java与c++的不同的程序设计思想；在完成项目的同时遇到了很多的问题，但是都通过自己独立查阅资料逐一解决，了解了Java中基本的输入输出等一些已有的包的功能；最后文档的书写也使我清晰的认识到了一个简单项目从用户需求到系统设计、系统实现以及最后的代码的编写测试这一个流程，同时uml图的书写也让我理清了各功能直接的具体关系，使得最后的代码间的联系更加的清晰明了。</p><p>此外通过每一版本的需求的更新以及系统的实现，我体会到了面向对象程序设计在实现功能的过程与面向过程以及c++面向对象程序设计的不同，Java万物皆为类的思想，包括测试用的Main方法都为类，从最开始的一个储蓄活期账户的功能的实现，date类的实现以及累加日期类的实现实现了系统的基本功能，此后新增活期账户功能类似的信用账户的需求，通过比较两个类的共同特点，抽象出其共同的父类 <code>Account</code> ，这样使得一些共同点得以复用，减少代码量的同时也使得各类之间的关系增强，同时在最后几个版本中，因为Java中父类的引用同时可以引用其子类的特点，使得通过一个父类的对象数组便可以轻易的操纵其子类，使得最后的循环处理测试时的代码可以有不同类对应不同操作代码合二为一，大大的使程序的可读性增强，代码量减少，开发的负担也减轻许多，最后的 <em>ArrayList</em> 声明的对象数组也使得开发者不必关心数组空间的分配问题，也使得程序的安全性增强。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;作　　者：31415926535x&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;出　　处：&lt;a href=&quot;https://www.cnblogs.com/31415926535x/p/10697659.html&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
      <category term="Java" scheme="http://www.31415x.cf/categories/Java/"/>
    
    
      <category term="笔记" scheme="http://www.31415x.cf/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="http://www.31415x.cf/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 60</title>
    <link href="http://www.31415x.cf/2019/04/08/Educational-Codeforces-Round-60/"/>
    <id>http://www.31415x.cf/2019/04/08/Educational-Codeforces-Round-60/</id>
    <published>2019-04-08T03:53:46.000Z</published>
    <updated>2019-04-11T13:31:22.800Z</updated>
    
    <content type="html"><![CDATA[<p>发现现在的我不仅仅是专门的算法知识学的不够，，平常的签到题那样的考验代码能力的题也不是很稳定的能够写出来，比如说cfdiv2的ABC题，，所以决定练一段时间的cf的题，，</p><p>这套题感觉重在考察思想和代码能力，</p><a id="more"></a><h1 id="A-Best-Subsegment"><a href="#A-Best-Subsegment" class="headerlink" title="A. Best Subsegment"></a>A. Best Subsegment</h1><p>题意就是求一个数组中平均值最大的子区间的长度，，有多个相同的最大平均值区间取长度最大的，，</p><p>一开始我想着直接枚举长度，用前缀和来求子区间的平均值，，但是这样时间复杂度是n方，t了，，</p><p>首先题意要要保证平均值最大，然后才是保证长度最长，所以先找到值最大的元素，，如果有连续的最大值出现，求出最长长度，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">2e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn], n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen("233.in" , "r" , stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out" , "w" , stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">int</span> mx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)mx = max(a[i], mx);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] == mx)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> r = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[j] == mx)</span><br><span class="line">                    r = j;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = max(ans, r - i + <span class="number">1</span>);</span><br><span class="line">            i = r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Magic-Gems"><a href="#D-Magic-Gems" class="headerlink" title="D. Magic Gems"></a>D. Magic Gems</h1><p>题意：给你一串数，然后可以重复的选取m个，但是同一个不能连续选超过k个，问你最大的选的和，，</p><p>既然要选和最大，那么每次选最大的，超出k个选一次第二大的，然后继续这样选，，</p><p>ll也不会爆，，</p><p>一开始推出公式换成代码还忘记乘了一数，wa了一发</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ll n, m, k, a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen("233.in" , "r" , stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out" , "w" , stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    ll ans = m / (k + <span class="number">1</span>) * (k * a[n] + a[n - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(m / (k + <span class="number">1</span>) * (k + <span class="number">1</span>) != m)</span><br><span class="line">        ans += (m - m / (k + <span class="number">1</span>) * (k + <span class="number">1</span>)) * a[n];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Magic-Ship"><a href="#C-Magic-Ship" class="headerlink" title="C. Magic Ship"></a>C. Magic Ship</h1><p>这道题很不错啊，，</p><p>题意：船的起点是s要到的终点是t，然后每走一步会有四个方向的风的加成，问你能到达终点时的最小时间，，风在变化完一轮之后会从一开始继续，，</p><p>读完题之后一点思路都没有，首先这个风向的变化就不知道怎么处理，即使看到了下面的tag是二分也不知道怎么弄，，</p><p>后来看了题解，大致的思路是这样的：</p><p>首先考虑这个风，如果要是每一步都考虑这个风的影响肯定是不行的，太麻烦了，，注意到风对船每一步的影响都相当于是一开始全都对船影响，就是把每一天的风的加成后的位置在一开始就计算出来（前缀和的思想+推公式），然后再在这个新的位置出发去终点，，</p><p>这样想之后，我们就可以计算出在day天后，船的位置首先因为风的影响由 $s$ 变到了 $s’$，，然后判断这day天船是否可以在 $s’$ 到达终点t，，，而且即使从这个点 $s’$ 出发到终点的最短时间比day少也没关系，因为题中说船可以选择不动，这样单独受风的影响就行了，，</p><p>而这个最小的day就可以二分找出来，，因为一定是day之前的都不可行，而后面的day一个比一个大，，这样满足使用二分的条件，，，（二分又写崩++，，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">2e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">pair&lt;ll, ll&gt; s, t;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line">ll n;</span><br><span class="line">pair&lt;ll, ll&gt; d[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll day)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pair&lt;ll, ll&gt; tmp;</span><br><span class="line">    tmp.first = s.first + (day / n) * d[n].first + d[(day % n)].first;</span><br><span class="line">    tmp.second = s.second + (day / n) * d[n].second + d[(day % n)].second;</span><br><span class="line">    ll ans = <span class="built_in">abs</span>(tmp.first - t.first) + <span class="built_in">abs</span>(tmp.second - t.second);</span><br><span class="line">    <span class="keyword">return</span> ans &lt;= day;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen("233.in" , "r" , stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out" , "w" , stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s.first &gt;&gt; s.second &gt;&gt; t.first &gt;&gt; t.second &gt;&gt; n &gt;&gt; str;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        d[i + <span class="number">1</span>] = d[i];</span><br><span class="line">        <span class="keyword">if</span>(str[i] == <span class="string">'U'</span>)++d[i + <span class="number">1</span>].second;</span><br><span class="line">        <span class="keyword">if</span>(str[i] == <span class="string">'D'</span>)--d[i + <span class="number">1</span>].second;</span><br><span class="line">        <span class="keyword">if</span>(str[i] == <span class="string">'L'</span>)--d[i + <span class="number">1</span>].first;</span><br><span class="line">        <span class="keyword">if</span>(str[i] == <span class="string">'R'</span>)++d[i + <span class="number">1</span>].first;</span><br><span class="line">    &#125;</span><br><span class="line">    ll l = <span class="number">0</span>, r = <span class="number">1e18</span>;</span><br><span class="line">    ll ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        ll mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(check(mid))</span><br><span class="line">        &#123;</span><br><span class="line">            ans = mid;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Magic-Gems-1"><a href="#D-Magic-Gems-1" class="headerlink" title="D. Magic Gems"></a>D. Magic Gems</h1><p>这题的题意很简单，，就是处理的方法我没见过，，涨知识ing，，，</p><p>题意就是一块魔法宝石可以变成m块普通的宝石，然后魔法宝石和普通宝石都占一个空间，给你一堆魔法宝石问你有几种情况使得占的空间正好是n，，</p><p>这题有两种解法，，一种是 <strong>推dp方程矩阵加速幂加速</strong> ，另一种是 <strong>直接上杜教筛</strong> ..</p><p><a href="https://blog.csdn.net/qq_37632935/article/details/87889975" target="_blank" rel="noopener">参考1</a><br><a href="https://blog.csdn.net/moon_sky1999/article/details/87974954" target="_blank" rel="noopener">参考2</a></p><h2 id="dp-矩阵快速幂"><a href="#dp-矩阵快速幂" class="headerlink" title="dp+矩阵快速幂"></a>dp+矩阵快速幂</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先定义 $dp_i$ 表示 <em>恰好占用i个单元空间时的选择方法个数</em> ，，</p><p>然后去推状态转移方程： 可以看出（emm我就没看出，，）对于每一个给定的空间有两种可以不同的选择方法，一种是 <em>不拆分魔法宝石所得</em> ， 另一种是 <em>拆分一块魔法宝石所得</em> ，，，这样的话前者就可以表示为 $dp<em>{i-1}$ ， 后者可以表示为 $dp</em>{i-m}$ ，加起来就是这个空间下所有的可能选择的方法数了，，</p><script type="math/tex; mode=display">    dp_i=dp_{i-1}+dp_{i-m}</script><p>但是如果只是按照平常的dp问题去求 $dp_n$ 显然时空都会爆，，（n可能是1e18），，，所以这样做要优化，，转化成求矩阵快速幂的形式就行了，，</p><p>把那个状态转移方程 $dp<em>n=dp</em>{n-1}+dp_{n-m}$ 多推几项：</p><script type="math/tex; mode=display">    dp_{n}=dp_{n-1}+dp_{n-m}\\    dp_{n-1}=dp_{n-2}+dp_{n-m-1}\\    dp_{n-2}=dp_{n-3}+dp_{n-m-2}\\            \cdots</script><p>用矩阵快速幂进行递推式加速时的一般形式是把原递推式转化成：</p><script type="math/tex; mode=display">    \begin{bmatrix}        f[n]\\        f[n-1]\\        f[n-2]\\        \vdots    \end{bmatrix}    =     A^k    \begin{bmatrix}        f[n-1]\\        f[n-2]\\        \vdots    \end{bmatrix}</script><p>这样的形式，，对于这道题的递推方程就可以转化成：</p><script type="math/tex; mode=display">    \begin{bmatrix}        dp[n]\\        dp[n-1]\\        dp[n-2]\\        \vdots\\        dp[n-m+1]\\    \end{bmatrix}    =    A    \begin{bmatrix}        dp[n-1]\\        dp[n-2]\\        dp[n-3]\\        \vdots\\        dp[n-m]\\    \end{bmatrix}</script><p>根据等式间的关系，为了得到左边第一项 $dp[n]$ ，A的第一行要是 $[1,0,0,\cdots, 1]$ ，这样才能得到递推公式为我们所用，，</p><p>而后面那几项显然都等于对应层的上一层的值，，，也就是说A中对应的是1就可以了，，</p><p>实际上只用到了刚刚往后推的一两项，，</p><p>所以A就应该是这样的，，</p><script type="math/tex; mode=display">    A=    \begin{bmatrix}        1 & 0 & 0 & 0 & 0 & 0 & \cdots & 1 \\        1 & 0 & 0 & 0 & 0 & 0 & \cdots & 0 \\        0 & 1 & 0 & 0 & 0 & 0 & \cdots & 0 \\        \vdots & \vdots & \vdots & \vdots & \vdots & \vdots & \vdots & \vdots \\        0 & \cdots & 0 & 0 & 0 & 0 & 1 & 0 \\        0 & \cdots & 0 & 0 & 0 & 0 & 0 & 1 \\    \end{bmatrix}</script><p>最后把A后面的那个矩阵转化成一个常数矩阵，，观察之后可以看出后面那个矩阵最下面最小是 $dp[1]$ 这种情况下表示空间为1时的方案数，，肯定是选择一个魔法宝石不拆啦，，，同理一直到m-1的空间都是1，，而 $dp[m]$ 就可以有两种选择，，要么都是魔法宝石，要么一个魔法宝石拆分m块普通宝石，，也就是2，，，所以最后的矩阵递推式就是：</p><script type="math/tex; mode=display">    \begin{bmatrix}        dp[n]\\        dp[n-1]\\        dp[n-2]\\        \vdots\\        dp[n-m+1]\\    \end{bmatrix}    =     A^k    \begin{bmatrix}        2\\        1\\        1\\        \vdots\\        1\\    \end{bmatrix}</script><p>推一下的话就知道 $k=n-m$ 看右边矩阵的最上面那一项的变化值的差</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>上一次写矩阵快速幂还是暑假的集训队学的时候写的，，现在早就忘记了，，正好记录一下板子，，</p><p>最后的复杂度大概是 $O(n^3logn)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdlib&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;set&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cmath&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;queue&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;stack&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e10</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">2e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">ll n, m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> len = <span class="number">105</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// int m;</span></span><br><span class="line">    ll num[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line">    <span class="comment">// matrix()&#123;&#125;</span></span><br><span class="line">    matrix()&#123;<span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span> num);&#125;</span><br><span class="line">    matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> matrix &amp;x)</span><br><span class="line">    &#123;</span><br><span class="line">        matrix c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; ++k)</span><br><span class="line">                    c.num[i][j] = (c.num[i][j] + num[i][k] * x.num[k][j]) % mod;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    matrix &amp;<span class="keyword">operator</span> =(<span class="keyword">const</span> matrix &amp;x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">                num[i][j] = x.num[i][j];</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">matrix <span class="title">pow_</span><span class="params">(matrix x, ll k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        matrix ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)ans.num[i][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(k &amp; <span class="number">1</span>)ans = ans * x;</span><br><span class="line">            x = x * x;</span><br><span class="line">            k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ll f[len];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen("233.in" , "r" , stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out" , "w" , stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    matrix a = matrix();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; ++i)a.num[i][i - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    a.num[<span class="number">1</span>][<span class="number">1</span>] = a.num[<span class="number">1</span>][m] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)f[i] = <span class="number">1</span>;</span><br><span class="line">    f[m] = <span class="number">2</span>;</span><br><span class="line">    a = a.pow_(a, n - m);</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        ans = (ans + a.num[<span class="number">1</span>][i] * f[m - i + <span class="number">1</span>]) % mod;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="杜教线性筛"><a href="#杜教线性筛" class="headerlink" title="杜教线性筛"></a>杜教线性筛</h3><p>好久之前就听说过杜教筛，，但是一直没有用过，，正好遇到了，，记录一下这个强大的板子，，，这道题直接暴力算出前200项然后把结果丢到杜教筛中跑一下就行了，，，，时间复杂度好像是 $O(n^{2/3})$ ，，，上一个大概跑1s多，，这个直接30ms，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdlib&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;set&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cmath&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;queue&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;stack&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567 &gt; 1e10</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">2e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> linear_seq</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> rep(i,a,n) for (int i=a;i&lt;n;++i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> per(i,a,n) for (int i=n-1;i&gt;=a;--i)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(),(x).end();</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> SZ(x) ((int)(x).size())</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">    <span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line">    <span class="keyword">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10010</span>;</span><br><span class="line">    ll _, n;</span><br><span class="line">    ll res[N], base[N], _c[N], _md[N];</span><br><span class="line">    <span class="built_in">vector</span>&lt;ll&gt; Md;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(ll *a, ll *b, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        rep(i,<span class="number">0</span>,k+k) _c[i] = <span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">0</span>,k)<span class="keyword">if</span>(a[i])rep(j,<span class="number">0</span>,k)_c[i+j]=(_c[i+j]+a[i]*b[j])%mod;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=k+k<span class="number">-1</span>; i&gt;=k; --i)<span class="keyword">if</span>(_c[i])</span><br><span class="line">            rep(j,<span class="number">0</span>,SZ(Md))_c[i-k+Md[j]]=(_c[i-k+Md[j]]-_c[i]*_md[Md[j]])%mod;</span><br><span class="line">        rep(i,<span class="number">0</span>,k)a[i]=_c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">powmod</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll res = <span class="number">1</span>;</span><br><span class="line">        a %= mod;</span><br><span class="line">        assert(b&gt;=<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(; b; b&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(b&amp;<span class="number">1</span>)res=res*a%mod;</span><br><span class="line">            a=a*a%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(ll n, VI a, VI b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ans = <span class="number">0</span>, pnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> k = SZ(a);</span><br><span class="line">        assert(SZ(a) == SZ(b));</span><br><span class="line">        rep(i,<span class="number">0</span>,k) _md[k<span class="number">-1</span>-i]=-a[i];</span><br><span class="line">        _md[k]=<span class="number">1</span>;</span><br><span class="line">        Md.clear();</span><br><span class="line">        rep(i,<span class="number">0</span>,k)<span class="keyword">if</span>(_md[i]!=<span class="number">0</span>)Md.push_back(i);</span><br><span class="line">        rep(i,<span class="number">0</span>,k)res[i]=base[i]=<span class="number">0</span>;</span><br><span class="line">        res[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>((<span class="number">1l</span>l&lt;&lt;pnt)&lt;=n)++pnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> p = pnt; p&gt;=<span class="number">0</span>; --p)</span><br><span class="line">        &#123;</span><br><span class="line">            mul(res, res, k);</span><br><span class="line">            <span class="keyword">if</span>((n&gt;&gt;p)&amp;<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=k<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i)res[i+<span class="number">1</span>]=res[i];</span><br><span class="line">                res[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">                rep(j,<span class="number">0</span>,SZ(Md))res[Md[j]]=(res[Md[j]]-res[k]*_md[Md[j]])%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">0</span>,k)ans=(ans+res[i]*b[i])%mod;</span><br><span class="line">        <span class="keyword">if</span>(ans&lt;<span class="number">0</span>)ans+=mod;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">VI <span class="title">BM</span><span class="params">(VI s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        VI C(1,1), B(1,1);</span><br><span class="line">        <span class="keyword">int</span> L=<span class="number">0</span>, m=<span class="number">1</span>, b=<span class="number">1</span>;</span><br><span class="line">        rep(n, <span class="number">0</span>, SZ(s))</span><br><span class="line">        &#123;</span><br><span class="line">            ll d = <span class="number">0</span>;</span><br><span class="line">            rep(i,<span class="number">0</span>,L+<span class="number">1</span>)d=(d+(ll)C[i]*s[n-i])%mod;</span><br><span class="line">            <span class="keyword">if</span>(d==<span class="number">0</span>) ++m;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">2</span>*L&lt;=n)</span><br><span class="line">            &#123;</span><br><span class="line">                VI T=C;</span><br><span class="line">                ll c=mod-d*powmod(b,mod<span class="number">-2</span>)%mod;</span><br><span class="line">                <span class="keyword">while</span>(SZ(C)&lt;SZ(B)+m)C.pb(<span class="number">0</span>);</span><br><span class="line">                rep(i,<span class="number">0</span>,SZ(B))C[i+m]=(C[i+m]+c*B[i])%mod;</span><br><span class="line">                L=n+<span class="number">1</span>-L;</span><br><span class="line">                B=T;</span><br><span class="line">                b=d;</span><br><span class="line">                m=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ll c=mod-d*powmod(b,mod<span class="number">-2</span>)%mod;</span><br><span class="line">                <span class="keyword">while</span>(SZ(C)&lt;SZ(B)+m)C.pb(<span class="number">0</span>);</span><br><span class="line">                rep(i,<span class="number">0</span>,SZ(B))C[i+m]=(C[i+m]+c*B[i])%mod;</span><br><span class="line">                ++m;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">gao</span><span class="params">(VI a, ll n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        VI c=BM(a);</span><br><span class="line">        c.erase(c.begin());</span><br><span class="line">        rep(i,<span class="number">0</span>,SZ(c))c[i]=(mod-c[i])%mod;</span><br><span class="line">        <span class="keyword">return</span> solve(n,c,VI(a.begin(),a.begin()+SZ(c)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; <span class="comment">// linear_seq</span></span><br><span class="line"></span><br><span class="line">ll f[<span class="number">205</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen("233.in" , "r" , stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out" , "w" , stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    ll n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)f[i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = m; i &lt;= <span class="number">200</span>; ++i)f[i] = (f[i - <span class="number">1</span>] + f[i - m]) % mod;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    ++n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">200</span>; ++i)v.push_back(f[i]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; linear_seq::gao(v, n - <span class="number">1</span>) % (ll)mod &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Decypher-the-String"><a href="#E-Decypher-the-String" class="headerlink" title="E. Decypher the String"></a>E. Decypher the String</h1><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>一道进制思想的交互题，，从来没有写过交互题（因为都是靠后的题，，所以以前从来没有看过，，，</p><p>这道题的题意是：给你一个字符串t，，t是s经过一定交换规则得到的字符串，然后你可以给交互器最多三次的三个长度一样的字符串，然后他会返回一个同样规则变换后的字符串，，然后让你根据这些信息来推断出具体的交换的规则，，然后输出原来的s，，，</p><p>首先看一个例子：长度不过9的s: <code>xyz</code>，，如果我们的交换规则是 <code>(1, 2), (2, 3)</code> ，也就是说变换后得到的t就是 <code>yzx</code> ，，</p><p>如果我们向交互器询问一个有序的字符串 <code>abc</code> ，，那么交互器就可以通过那个规则返回一个字符串 <code>bca</code> ，，而我们就可以通过这个返回的字符串和之前的那个有序的字符串得出交换的规则： 对于s <code>123</code> 变换后的t就是 <code>231</code> （意思是把第一个换成第2个，第二个换成第3个，第三个换成第1个），，，</p><p>这样就知道了 <code>s-&gt;t</code> 的变换规则，，而现在我们知道变换后的t，，那么就在反一次就可以得到 <code>t-&gt;s</code> 的变换规则，（也就是将t的第2个变成第一个，第3个变成第二个，第1个变成第三个，，正好和上面的变化相反，，），，也就是： <code>rev=[312]</code> ，， 这样 $s<em>i=t</em>{rev_i}$ ，，，这样基本的处理就弄明白了，，，<strong>相当于通过变换一个有序的下标序列，然后得知变换的方法</strong></p><p>但是如果字符串的长度大于9我们还可以用字母表示，但是当是1e4的范围时，，就不能用一个字符来表示字符串的每一个下标了，，这时就用到了进制的表示，因为每一次询问只能是小写字母，所以就用26进制来表示每一个下标的十进制，，因为三位的26进制 <code>aaa~zzz</code> 就可以表示 $26^3 &gt; 1e4$ ，，这样就可以用一个三位的字符串来表示每一个下标，，但是因为每次询问只能是长度为n的串，，所以就把这三位拆开组成三个串来询问，，因为每一个改变的下标在每次询问中都会改变的，，所以询问三次累加一下每一个下标对应的值就行了，，，最后就可以得到上面类似的变换规则，，然后反一下，，求出s就行了，，，</p><p><a href="https://blog.csdn.net/Mitsuha_/article/details/87794531" target="_blank" rel="noopener">参考博客1</a></p><p><a href="https://blog.csdn.net/BUAA_Alchemist/article/details/87705287" target="_blank" rel="noopener">参考博客2</a>那个小白鼠的问题不错2333，，，</p><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>对了，<a href="https://codeforces.com/blog/entry/65365" target="_blank" rel="noopener">评论区</a>里看到有人说这题也可以用中国剩余定理来解决 <em>(saeed_odak)</em> ，，，题目的tag里也有CRT，，，所以又看了看这种解法，，</p><p>这种解法的大致思想和上面那种3位26进制的思想差不多，都是用一个东西表示字符串的下标，然后询问三次，保证每一位都被询问过，然后组合起来，在反一下求出答案，，，不同的地方在于用什么表示下标，，，</p><p>下面的东西我是看评论区 <em>Varun_Shah</em> 这位大佬的回复大致懂得：</p><p>（感觉先看他的原话比较容易懂这个解法的思想，，，）</p><h4 id="先说一下为什么要用余数："><a href="#先说一下为什么要用余数：" class="headerlink" title="先说一下为什么要用余数："></a>先说一下为什么要用余数：</h4><p>假如给你两个数2，3，那么 $0 \% 2 = 0, 0 \% 3 = 0$，就可以看成一个对(pair): $(0, 0)$ ，，同理一共有 6 个这样的对（0~5对应的余数组成的对），<strong>而且每一个对都是不同的</strong> ，，也就是说我们可以用两个数字2，3的余数的对来表示6个数字，0~5，，$(0, 0), (1, 1), (0, 2), (1, 0), (0, 1), (1, 2)$</p><p>这个思想就有点像26进制每一个字符串表示不同的唯一的数字一样，，</p><p><strong>但是一定要保证被模数两两互质</strong> ，，</p><h4 id="再回到这道题上，，"><a href="#再回到这道题上，，" class="headerlink" title="再回到这道题上，，"></a>再回到这道题上，，</h4><p>当n=5时，两个字符串：</p><p>ababab ,循环节为2<br>abcabc ,循环节为3</p><p>在这第一个字符串中，a如果表示为0，b为1，，那么所有的a所处的位置就是所有模2为零的位置，，也就是0，2，4…同理b都是模2为1的位置，，</p><p>同理对于第二个字符串，a=0,b=1,c=2，，，</p><p>然后把这两个字符串发送给交互器，会得到两个改变后的字符串，，假如说对于第0个位置处的字符得到的是一个b,一个c，，我们把这两个用上面的数字来表示，第一个维度表示是第一个串中的位置，第二个维度就是第二个串中出现的位置，，也就是(1,2),,如果和上面那个对比一下，发现 (1,2)表示的是5，也就是说0位处的字符和第5位处的字符交换所得，，，</p><p>然后对于刚开始没有询问时，第0位处的可能交换位置是所有的位置，，</p><p>然后第一次询问得到b，表示可能的交换位置是 {1,3,5}，，</p><p>然后第二次询问得到c，可能的交换位置就只有了{5}，，，</p><p>也就是说，3次询问的交集就是最后这个位置和另一个位置交换的解，，</p><p>我们0~n-1枚举每一个字符三次询问的交集就可以得到最后 s-&gt;t 的规则，，然后就可以像上面那种解法一样处理了，，，</p><h4 id="为什么要选26，25，23"><a href="#为什么要选26，25，23" class="headerlink" title="为什么要选26，25，23"></a>为什么要选26，25，23</h4><p>上面那种解法选 $26^3$ 的原因是因为字符串的长度是1e4，，所以为了能够用一个字符串表示的数唯一的表示每一个位置，，所以选了长度为3的字符串，然后拆开询问3次合并这个操作，，</p><p>对于这个解法，，因为我们是用循环的字符串类似 <code>abcd.....xyzabc</code> , <code>abcd...xyab</code> 等等来表示每一位处的情况，，所以每一个字符串的循环节的长度就表示了这一维度所能表示的情况数，，为了能大于等于1e4，，选择三个循环节分别为 {26,25,23} 的字符串来逐一询问，，可能表示的情况数就是： $26<em>25</em>23 &gt; 1e4$ ，，，为什么不选24呢，，因为它和26不互质，，，就会出现一些相同的三元对，，这样就不能唯一表示每一个位置了，，</p><h4 id="中国剩余定理的作用"><a href="#中国剩余定理的作用" class="headerlink" title="中国剩余定理的作用"></a>中国剩余定理的作用</h4><p>貌似说了这么一大堆，和中国剩余定理没有关系啊，，，上面只是讨论了该怎么表示每一个位置的数字，，但是怎么把得到的三元对转化成十进制的下标数字呢，因为我们要根据这个来反推字符串啊，，</p><p>中国剩余定理就是干这个的，他可以求出一些形如 $x\%m_i=a_i$ 的解，，而我们求出的每一个位置处的三元组就可以看成三个 $a_i$ ，，而26，25，23 就可以看成是三个模数 &amp;m_i$ ，，，这样就可以求出每个位置处唯一的改变的下标值，，</p><h4 id="最后的操作步骤"><a href="#最后的操作步骤" class="headerlink" title="最后的操作步骤"></a>最后的操作步骤</h4><ul><li>构造三个循环节分别为 26, 25, 23 的字符串，作为后面三次询问的字符串</li><li>保存每一次询问后的改变的字符串</li><li>取三个询问后得到的字符串的值，组成三元组，利用CRT求出要改变的下表的值</li><li>求反规则，得出字符串s</li></ul><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><h3 id="3位26进制表示"><a href="#3位26进制表示" class="headerlink" title="3位26进制表示"></a>3位26进制表示</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">2e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn], tmp[maxn];</span><br><span class="line"><span class="keyword">int</span> t[maxn], rev[maxn];     <span class="comment">//t[i] 表示s-&gt;t的变化规则，rev[i]表表示t-&gt;s的变化规则</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen("233.in" , "r" , stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out" , "w" , stdout);</span></span><br><span class="line">    <span class="comment">// ios_base::sync_with_stdio(0);</span></span><br><span class="line">    <span class="comment">// cin.tie(0);cout.tie(0);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">    tmp[n + <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span> * <span class="number">26</span>; i *= <span class="number">26</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)tmp[j] = j / i % <span class="number">26</span> + <span class="string">'a'</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"? %s\n"</span>, tmp + <span class="number">1</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, tmp + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)t[j] += (tmp[j] - <span class="string">'a'</span>) * i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)rev[t[i]] = i; <span class="comment">//求出t-&gt;s的变化规则</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)tmp[i] = s[rev[i]];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"! "</span>);</span><br><span class="line">    <span class="built_in">puts</span>(tmp + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中国剩余定理表示"><a href="#中国剩余定理表示" class="headerlink" title="中国剩余定理表示"></a>中国剩余定理表示</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">2e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, rev[maxn], t[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn], tmp[<span class="number">4</span>][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul_inv</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b0 = b, t, q;</span><br><span class="line">    <span class="keyword">int</span> x0 = <span class="number">0</span>, x1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(a &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        q = a / b;</span><br><span class="line">        t = b; b = a % b; a = t;</span><br><span class="line">        t = x0; x0 = x1 - q * x0; x1 = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x1 &lt; <span class="number">0</span>) x1 += b0;</span><br><span class="line">    <span class="keyword">return</span> x1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">chinese_remainder</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p, prod = <span class="number">1</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)prod *= b[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        p = prod / b[i];</span><br><span class="line">        sum += a[i] * mul_inv(p, b[i]) * p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum % prod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen("233.in" , "r" , stdin);</span></span><br><span class="line">    <span class="comment">// freopen("233.out" , "w" , stdout);</span></span><br><span class="line">    <span class="comment">// ios_base::sync_with_stdio(0);?</span></span><br><span class="line">    <span class="comment">// cin.tie(0);cout.tie(0);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> m = <span class="number">26</span>, j = <span class="number">0</span>; m &gt;= <span class="number">23</span>; --m, j = <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(m == <span class="number">24</span>)<span class="keyword">continue</span>; <span class="comment">//24 is not coprime with others (26, 25)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//abcd....xyzab</span></span><br><span class="line">            <span class="comment">//abcd....xyabc</span></span><br><span class="line">            <span class="comment">//abcd....wabcd</span></span><br><span class="line">            tmp[<span class="number">26</span> - m][i] = (<span class="keyword">char</span>)(<span class="string">'a'</span> + j);</span><br><span class="line">            ++j;</span><br><span class="line">            j %= m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">2</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"? %s\n"</span>, tmp[i]);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, tmp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        t[i] = chinese_remainder(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;tmp[<span class="number">0</span>][i] - <span class="string">'a'</span>, tmp[<span class="number">1</span>][i] - <span class="string">'a'</span>, tmp[<span class="number">3</span>][i] - <span class="string">'a'</span>&#125;, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">26</span>, <span class="number">25</span>, <span class="number">23</span>&#125;, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)rev[t[i]] = i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"! "</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)<span class="built_in">printf</span>(<span class="string">"%c"</span>, s[rev[i]]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;发现现在的我不仅仅是专门的算法知识学的不够，，平常的签到题那样的考验代码能力的题也不是很稳定的能够写出来，比如说cfdiv2的ABC题，，所以决定练一段时间的cf的题，，&lt;/p&gt;
&lt;p&gt;这套题感觉重在考察思想和代码能力，&lt;/p&gt;
    
    </summary>
    
      <category term="Codeforces" scheme="http://www.31415x.cf/categories/Codeforces/"/>
    
    
      <category term="刷题" scheme="http://www.31415x.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="acm" scheme="http://www.31415x.cf/tags/acm/"/>
    
      <category term="cf" scheme="http://www.31415x.cf/tags/cf/"/>
    
  </entry>
  
  <entry>
    <title>图论-二分图</title>
    <link href="http://www.31415x.cf/2019/04/03/%E5%9B%BE%E8%AE%BA-%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    <id>http://www.31415x.cf/2019/04/03/图论-二分图/</id>
    <published>2019-04-03T05:24:27.000Z</published>
    <updated>2019-04-04T02:24:38.969Z</updated>
    
    <content type="html"><![CDATA[<p>很久之前就了解到有二分图这么个东西，，但是一直没看，拖到现在来学一下，图论的东西向来是理论简单，建图难，，</p><a id="more"></a><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><a href="https://www.renfei.org/blog/bipartite-matching.html" target="_blank" rel="noopener">我是在这里看的二分图的东西</a>，，但是最后的代码因为一直是看kuangbin的板子理解，所以代码都是kuangbin板子上的（大同小异，代码风格不一样而已</p><p>//建图有毒，，，</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很久之前就了解到有二分图这么个东西，，但是一直没看，拖到现在来学一下，图论的东西向来是理论简单，建图难，，&lt;/p&gt;
    
    </summary>
    
      <category term="ACM-图论-二分图" scheme="http://www.31415x.cf/categories/ACM-%E5%9B%BE%E8%AE%BA-%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
    
      <category term="acm" scheme="http://www.31415x.cf/tags/acm/"/>
    
      <category term="图论" scheme="http://www.31415x.cf/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="二分图" scheme="http://www.31415x.cf/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>next-修改</title>
    <link href="http://www.31415x.cf/2019/03/31/next-%E4%BF%AE%E6%94%B9/"/>
    <id>http://www.31415x.cf/2019/03/31/next-修改/</id>
    <published>2019-03-31T09:33:56.000Z</published>
    <updated>2019-03-31T09:46:00.448Z</updated>
    
    <content type="html"><![CDATA[<p>搭建hexo+next这个博客也有一年多了，，期间碰到很多的事情，，比如说自己把博客搞崩，更新等等，，，之前做的一些改变，美化什么的因为太过久远，，重新设置一些东西还得一点一点的重新的去搜，，或者去翻书签记录，，想着记录一下折腾过的东西，，以后可能用得上，，</p><a id="more"></a><h1 id="底栏添加音乐"><a href="#底栏添加音乐" class="headerlink" title="底栏添加音乐"></a>底栏添加音乐</h1><p>很早之前就尝试添加过音乐，但是网易云的外链时间一长就掉了，，而且很不好看，，于是就放弃了，，</p><p>今天又尝试弄一下，，感觉还行，，添加音乐也方便，，嘿嘿，，</p><p>用的 Aplayer 这个插件，，，</p><p><a href="https://www.jianshu.com/p/23e33d1fdc4e" target="_blank" rel="noopener">参考</a></p><p>主要变化：</p><ul><li>在\next\source\ 下添加了dist 文件夹同时增加一个 <code>music.js</code> 歌单文件，，以后添加音乐就改这个就行了</li><li>\next\layout_layout.swig，，中添加插件的调用，，和红星什么的在一起，，</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭建hexo+next这个博客也有一年多了，，期间碰到很多的事情，，比如说自己把博客搞崩，更新等等，，，之前做的一些改变，美化什么的因为太过久远，，重新设置一些东西还得一点一点的重新的去搜，，或者去翻书签记录，，想着记录一下折腾过的东西，，以后可能用得上，，&lt;/p&gt;
    
    </summary>
    
      <category term="hexo博客相关" scheme="http://www.31415x.cf/categories/hexo%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="hexo_blog" scheme="http://www.31415x.cf/tags/hexo-blog/"/>
    
      <category term="next_theme" scheme="http://www.31415x.cf/tags/next-theme/"/>
    
      <category term="hexo" scheme="http://www.31415x.cf/tags/hexo/"/>
    
      <category term="博客" scheme="http://www.31415x.cf/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>anaconda3下配置python-3.5+tensorflow-gpu-1.9.0人脸识别项目环境</title>
    <link href="http://www.31415x.cf/2019/03/29/anaconda3%E4%B8%8B%E9%85%8D%E7%BD%AEpython-3-5-tensorflow-gpu-1-9-0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/"/>
    <id>http://www.31415x.cf/2019/03/29/anaconda3下配置python-3-5-tensorflow-gpu-1-9-0人脸识别项目环境/</id>
    <published>2019-03-29T01:28:20.000Z</published>
    <updated>2019-03-29T05:33:33.607Z</updated>
    
    <content type="html"><![CDATA[<p>之前为了配置tensorflow-gpu的环境又是装cuda,又是装cudnn，还有tensoflow-gpu等等，，因为当时也是第一次搭建这个环境，所以完全是按照别人的搭建方法来一步一步的弄得，，后来我在给室友安装环境的时候，发现cuda,cudnn什么的完全不用自己安装，，，全部交给 <strong>anaconda3</strong> （好东西）就行了</p><a id="more"></a><h1 id="Anaconda3安装"><a href="#Anaconda3安装" class="headerlink" title="Anaconda3安装"></a>Anaconda3安装</h1><p>几乎最后所有的东西都是用这个完成的，，所以先去安装这玩意，，</p><p>直接官网下载就行了，，安装的时候记得选择 <strong>PATH</strong> 配置，，不然之后还得自己去弄环境变量，，</p><p>然后在 powershell 里检查一下确实配置成功就行了 <code>conda -V</code></p><h1 id="配置一个环境"><a href="#配置一个环境" class="headerlink" title="配置一个环境"></a>配置一个环境</h1><p>因为我的电脑是 win10x64+gtx1050，，所以选择安装 tensorflow-gpu-1.9.0版的，，gpu版的到时候训练模型的时候跑的很快，，（大概1s2-3张照片吧），如果用cpu跑的话有些慢，，1张照片可能要2s左右，，，</p><p>打开powsershell，，（千万不要换源，，千万不要换源，，千万不要换源，，</p><h2 id="创建一个环境"><a href="#创建一个环境" class="headerlink" title="创建一个环境"></a>创建一个环境</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n [name] python=<span class="number">3.5</span> tensorflow-gpu=<span class="number">1.9</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>可能这一步会很慢，，但是建议不要去换源，，因为会出现下的东西不全，最后可能不能使用gpu版的tensorflow，，，</p><p>输完这段命令后，，等一会会出现一些要安装的东西列表，，这时主要看一下有没有python, <strong>tensorflow-gpu</strong>, <strong>cudnn</strong>, <strong>cudatoolkit</strong>,,,都有的话就y确定等就行了，，，</p><p>环境的名字随便起，，</p><h2 id="激活环境"><a href="#激活环境" class="headerlink" title="激活环境"></a>激活环境</h2><p>因为这时是powershell下，，，激活环境会不成功，，所以直接切换到cmd模式就行了，，输 <code>cmd</code>，，，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate [name]</span><br></pre></td></tr></table></figure><p>这时会发现前面多了一个 <code>([name])</code> 的东西，表示激活环境成功，，，</p><p>然后再测试一下python下能不能调用 tensorflow-gpu 版，，测试的方法可以参考我的上一篇博客里后面那一部分内容 ，，，</p><h2 id="运行简单的人脸识别的实例"><a href="#运行简单的人脸识别的实例" class="headerlink" title="运行简单的人脸识别的实例"></a>运行简单的人脸识别的实例</h2><p>前面的准备工作弄好之后就可以运行一个简单的实例看一下在这个环境下的运行情况，，，</p><p>下面的python程序是学长给我的，，然后我发现学长的程序是<a href="https://www.cnblogs.com/mu---mu/p/FaceRecognition-tensorflow.html" target="_blank" rel="noopener">这个博主写的项目</a>，，其中也有我的一些改动，，下面会提到，，</p><p>下面的操作都是在刚刚创建的环境下操作的，，，否则的话会是anaconda3默认的base环境下，，，</p><h3 id="安装必备的库"><a href="#安装必备的库" class="headerlink" title="安装必备的库"></a>安装必备的库</h3><p>因为这个人脸识别的实现用到了 opencv, dlib等等，，所以先安装这些，，</p><h4 id="安装opencv"><a href="#安装opencv" class="headerlink" title="安装opencv"></a>安装opencv</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install opencv</span><br></pre></td></tr></table></figure><h4 id="安装dlib"><a href="#安装dlib" class="headerlink" title="安装dlib"></a>安装dlib</h4><p>这个玩意的安装有点坑，，有时貌似直接安装会安装不上，，会提示没有 <code>cmake</code> 这个包管理软件，，所以要先安装cmake，，建议是在anaconda3主程序（开始菜单里找 Anaconda Navigator）中找到你的那个环境，，然后再 uninstall 中找到 cmake 然后安装，，，</p><p>但是这样可能还是安装不了dlib，，无论是用conda还是pip安装，，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda install dlib</span><br><span class="line">pip install dlib</span><br></pre></td></tr></table></figure><p>后来我找到一个解决方法，，去下载 <code>dlib****.whl</code> 然后本地安装，，</p><p><a href="https://pypi.org/project/dlib/19.1.0/#files" target="_blank" rel="noopener">下载地址</a></p><p>再 DownloadFiles 中找到一个这个东西，，<br><code>dlib-19.1.0-cp35-cp35m-win_amd64.whl</code></p><p>然后放到你现在的路径下，，<code>pip install dlib-19.1.0-cp35-cp35m-win_amd64.whl</code></p><p>应该这样就可以安装上了dlib，，，当然你可以用其他的方法安装，，网上也有很多解决方法，，，也有可能直接用 pip 就能安装上（比如我的电脑就能，，室友的就会出现上面的错误，，得绕一个弯子）</p><h4 id="安装sklearn"><a href="#安装sklearn" class="headerlink" title="安装sklearn"></a>安装sklearn</h4><p>这个简单，，会在训练那一步用到</p><p><code>pip install sklearn</code></p><h3 id="运行实例"><a href="#运行实例" class="headerlink" title="运行实例"></a>运行实例</h3><p><a href="https://www.cnblogs.com/mu---mu/p/FaceRecognition-tensorflow.html" target="_blank" rel="noopener">那个博主的项目分为4个部分，</a></p><ul><li>get_my_faces.py: 获取人脸并识别出来裁剪出来作为元数据</li><li>set_other_faces.py: 获取14000张人脸的照片作为训练所要用的数据</li><li>train_faces.py: 训练模型</li><li>is_my_face.py: 实时获取人脸，并判断是否和第一步所录入的人脸相匹配</li></ul><h4 id="get-my-faces"><a href="#get-my-faces" class="headerlink" title="get_my_faces"></a>get_my_faces</h4><p>这一步可以使用 dlib 的人脸识别裁剪，也可以使用opencv自带的来使用，，和室友试验了一下，发现opencv的虽然相对较快，但是识别不佳，而且同样大小的视频最后生成的照片个数也很少（也有可能是那里没写好），，</p><p>原博主的程序是拍一张照片然后识别一张裁剪一张，，这样很慢，，所以我把它改成了录一段视频，然后对于每一帧来识别裁剪，，这样贼快，，，（按q退出录制后自动进行后面的内容</p><p>注意复制代码后要适当的改一些参数，，比如说opencv中hear的参数等等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> dlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_video</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 录制视频</span></span><br><span class="line">    shutil.rmtree(<span class="string">'./my_faces'</span>)</span><br><span class="line">    <span class="string">"""使用opencv录像"""</span></span><br><span class="line">    cap = cv2.VideoCapture(<span class="number">0</span>)  <span class="comment"># 默认的摄像头</span></span><br><span class="line">    <span class="comment"># 指定视频代码</span></span><br><span class="line">    fourcc = cv2.VideoWriter_fourcc(*<span class="string">"DIVX"</span>)</span><br><span class="line">    out = cv2.VideoWriter(<span class="string">'233.avi'</span>, fourcc, <span class="number">20.0</span>, (<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line">    <span class="keyword">while</span>(cap.isOpened()):</span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            out.write(frame)</span><br><span class="line">            <span class="comment">#</span></span><br><span class="line">            cv2.imshow(<span class="string">'frame'</span>,frame)</span><br><span class="line">            <span class="comment"># 等待按键q操作关闭摄像头</span></span><br><span class="line">            <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == ord(<span class="string">'q'</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    cap.release()</span><br><span class="line">    out.release()</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变图片的亮度与对比度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">relight</span><span class="params">(img, light=<span class="number">1</span>, bias=<span class="number">0</span>)</span>:</span></span><br><span class="line">    w = img.shape[<span class="number">1</span>]</span><br><span class="line">    h = img.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#image = []</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,w):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,h):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">                tmp = int(img[j,i,c]*light + bias)</span><br><span class="line">                <span class="keyword">if</span> tmp &gt; <span class="number">255</span>:</span><br><span class="line">                    tmp = <span class="number">255</span></span><br><span class="line">                <span class="keyword">elif</span> tmp &lt; <span class="number">0</span>:</span><br><span class="line">                    tmp = <span class="number">0</span></span><br><span class="line">                img[j,i,c] = tmp</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hhh</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 利用dlib来实现</span></span><br><span class="line">    output_dir = <span class="string">'./my_faces'</span></span><br><span class="line">    size = <span class="number">64</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_dir):</span><br><span class="line">        os.makedirs(output_dir)</span><br><span class="line">    <span class="comment">#使用dlib自带的frontal_face_detector作为我们的特征提取器</span></span><br><span class="line">    detector = dlib.get_frontal_face_detector()</span><br><span class="line">    <span class="comment"># 打开摄像头 参数为输入流，可以为摄像头或视频文件</span></span><br><span class="line">    <span class="comment">#camera = cv2.VideoCapture(0)</span></span><br><span class="line">    camera = cv2.VideoCapture(<span class="string">"233.avi"</span>)</span><br><span class="line"></span><br><span class="line">    index = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> (index &lt;= <span class="number">10000</span>):</span><br><span class="line">            print(<span class="string">'Being processed picture %s'</span> % index)</span><br><span class="line">            <span class="comment"># 从摄像头读取照片</span></span><br><span class="line">            success, img = camera.read()</span><br><span class="line">            <span class="comment"># 转为灰度图片</span></span><br><span class="line">            gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">            <span class="comment"># 使用detector进行人脸检测</span></span><br><span class="line">            dets = detector(gray_img, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> success == <span class="keyword">False</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i, d <span class="keyword">in</span> enumerate(dets):</span><br><span class="line">                x1 = d.top() <span class="keyword">if</span> d.top() &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                y1 = d.bottom() <span class="keyword">if</span> d.bottom() &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                x2 = d.left() <span class="keyword">if</span> d.left() &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                y2 = d.right() <span class="keyword">if</span> d.right() &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">                face = img[x1:y1,x2:y2]</span><br><span class="line">                <span class="comment"># 调整图片的对比度与亮度， 对比度与亮度值都取随机数，这样能增加样本的多样性</span></span><br><span class="line">                face = relight(face, random.uniform(<span class="number">0.5</span>, <span class="number">1.5</span>), random.randint(<span class="number">-50</span>, <span class="number">50</span>))</span><br><span class="line"></span><br><span class="line">                face = cv2.resize(face, (size,size))</span><br><span class="line"></span><br><span class="line">                cv2.imshow(<span class="string">'image'</span>, face)</span><br><span class="line"></span><br><span class="line">                cv2.imwrite(output_dir+<span class="string">'/'</span>+str(index)+<span class="string">'.jpg'</span>, face)</span><br><span class="line"></span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line">            key = cv2.waitKey(<span class="number">30</span>) &amp; <span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> key == <span class="number">27</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'Finished!'</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hhhh</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 利用opencv来实现</span></span><br><span class="line">    output_dir = <span class="string">'./my_faces'</span></span><br><span class="line">    size = <span class="number">64</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_dir):</span><br><span class="line">        os.makedirs(output_dir)                                 </span><br><span class="line">    <span class="comment"># 获取分类器</span></span><br><span class="line">    haar = cv2.CascadeClassifier(<span class="string">r'G:\DIP\Anaconda3\envs\test1\Library\etc\haarcascades\haarcascade_frontalface_default.xml'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开摄像头 参数为输入流，可以为摄像头或视频文件</span></span><br><span class="line">    camera = cv2.VideoCapture(<span class="string">"233.avi"</span>)</span><br><span class="line"></span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">10000</span>):</span><br><span class="line">            print(<span class="string">'It`s processing %s image.'</span> % n)</span><br><span class="line">            <span class="comment"># 读帧</span></span><br><span class="line">            success, img = camera.read()</span><br><span class="line"></span><br><span class="line">            gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">            faces = haar.detectMultiScale(gray_img, <span class="number">1.3</span>, <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">for</span> f_x, f_y, f_w, f_h <span class="keyword">in</span> faces:</span><br><span class="line">                face = img[f_y:f_y+f_h, f_x:f_x+f_w]</span><br><span class="line">                face = cv2.resize(face, (<span class="number">64</span>,<span class="number">64</span>))</span><br><span class="line">                <span class="string">'''</span></span><br><span class="line"><span class="string">                if n % 3 == 1:</span></span><br><span class="line"><span class="string">                    face = relight(face, 1, 50)</span></span><br><span class="line"><span class="string">                elif n % 3 == 2:</span></span><br><span class="line"><span class="string">                    face = relight(face, 0.5, 0)</span></span><br><span class="line"><span class="string">                '''</span></span><br><span class="line">                face = relight(face, random.uniform(<span class="number">0.5</span>, <span class="number">1.5</span>), random.randint(<span class="number">-50</span>, <span class="number">50</span>))</span><br><span class="line">                cv2.imshow(<span class="string">'img'</span>, face)</span><br><span class="line">                cv2.imwrite(output_dir+<span class="string">'/'</span>+str(n)+<span class="string">'.jpg'</span>, face)</span><br><span class="line">                n+=<span class="number">1</span></span><br><span class="line">            key = cv2.waitKey(<span class="number">30</span>) &amp; <span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> key == <span class="number">27</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    make_video()</span><br><span class="line">    hhh()</span><br></pre></td></tr></table></figure><h4 id="set-other-faces"><a href="#set-other-faces" class="headerlink" title="set_other_faces"></a>set_other_faces</h4><p>这一步主要是识别裁剪那堆别人的照片</p><p><a href=":http://vis-www.cs.umass.edu/lfw/lfw.tgz">先去下那一堆照片</a>，，然后解压，重命名为 <code>input_img</code> （只是验证一下整个项目的效果的话可以删去一半的照片，，不然可能得跑个10分钟左右，，，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- codeing: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> dlib</span><br><span class="line"></span><br><span class="line">input_dir = <span class="string">'./input_img'</span></span><br><span class="line">output_dir = <span class="string">'./other_faces'</span></span><br><span class="line">size = <span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_dir):</span><br><span class="line">    os.makedirs(output_dir)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用dlib自带的frontal_face_detector作为我们的特征提取器</span></span><br><span class="line">detector = dlib.get_frontal_face_detector()</span><br><span class="line"></span><br><span class="line">index = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> (path, dirnames, filenames) <span class="keyword">in</span> os.walk(input_dir):</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">        <span class="keyword">if</span> filename.endswith(<span class="string">'.jpg'</span>):</span><br><span class="line">            print(<span class="string">'Being processed picture %s'</span> % index)</span><br><span class="line">            img_path = path+<span class="string">'/'</span>+filename</span><br><span class="line">            <span class="comment"># 从文件读取图片</span></span><br><span class="line">            img = cv2.imread(img_path)</span><br><span class="line">            <span class="comment"># 转为灰度图片</span></span><br><span class="line">            gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">            <span class="comment"># 使用detector进行人脸检测 dets为返回的结果</span></span><br><span class="line">            dets = detector(gray_img, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#使用enumerate 函数遍历序列中的元素以及它们的下标</span></span><br><span class="line">            <span class="comment">#下标i即为人脸序号</span></span><br><span class="line">            <span class="comment">#left：人脸左边距离图片左边界的距离 ；right：人脸右边距离图片左边界的距离 </span></span><br><span class="line">            <span class="comment">#top：人脸上边距离图片上边界的距离 ；bottom：人脸下边距离图片上边界的距离</span></span><br><span class="line">            <span class="keyword">for</span> i, d <span class="keyword">in</span> enumerate(dets):</span><br><span class="line">                x1 = d.top() <span class="keyword">if</span> d.top() &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                y1 = d.bottom() <span class="keyword">if</span> d.bottom() &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                x2 = d.left() <span class="keyword">if</span> d.left() &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                y2 = d.right() <span class="keyword">if</span> d.right() &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                <span class="comment"># img[y:y+h,x:x+w]</span></span><br><span class="line">                face = img[x1:y1,x2:y2]</span><br><span class="line">                <span class="comment"># 调整图片的尺寸</span></span><br><span class="line">                face = cv2.resize(face, (size,size))</span><br><span class="line">                cv2.imshow(<span class="string">'image'</span>,face)</span><br><span class="line">                <span class="comment"># 保存图片</span></span><br><span class="line">                cv2.imwrite(output_dir+<span class="string">'/'</span>+str(index)+<span class="string">'.jpg'</span>, face)</span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            key = cv2.waitKey(<span class="number">30</span>) &amp; <span class="number">0xff</span></span><br><span class="line">            <span class="keyword">if</span> key == <span class="number">27</span>:</span><br><span class="line">                sys.exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="train-faces"><a href="#train-faces" class="headerlink" title="train_faces"></a>train_faces</h4><p>这一步就是训练模型，，，刚开始会卡顿一会，，，之后就会跑起来，，，看一下是不是gpu跑，，cpu的话贼慢，，，gpu的话不到一分钟左右就可以了，，，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">my_faces_path = <span class="string">'./my_faces'</span></span><br><span class="line">other_faces_path = <span class="string">'./other_faces'</span></span><br><span class="line">size = <span class="number">64</span></span><br><span class="line"></span><br><span class="line">imgs = []</span><br><span class="line">labs = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPaddingSize</span><span class="params">(img)</span>:</span></span><br><span class="line">    h, w, _ = img.shape</span><br><span class="line">    top, bottom, left, right = (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    longest = max(h, w)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> w &lt; longest:</span><br><span class="line">        tmp = longest - w</span><br><span class="line">        <span class="comment"># //表示整除符号</span></span><br><span class="line">        left = tmp // <span class="number">2</span></span><br><span class="line">        right = tmp - left</span><br><span class="line">    <span class="keyword">elif</span> h &lt; longest:</span><br><span class="line">        tmp = longest - h</span><br><span class="line">        top = tmp // <span class="number">2</span></span><br><span class="line">        bottom = tmp - top</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> top, bottom, left, right</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readData</span><span class="params">(path , h=size, w=size)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">        <span class="keyword">if</span> filename.endswith(<span class="string">'.jpg'</span>):</span><br><span class="line">            filename = path + <span class="string">'/'</span> + filename</span><br><span class="line"></span><br><span class="line">            img = cv2.imread(filename)</span><br><span class="line"></span><br><span class="line">            top,bottom,left,right = getPaddingSize(img)</span><br><span class="line">            <span class="comment"># 将图片放大， 扩充图片边缘部分</span></span><br><span class="line">            img = cv2.copyMakeBorder(img, top, bottom, left, right, cv2.BORDER_CONSTANT, value=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line">            img = cv2.resize(img, (h, w))</span><br><span class="line"></span><br><span class="line">            imgs.append(img)</span><br><span class="line">            labs.append(path)</span><br><span class="line"></span><br><span class="line">readData(my_faces_path)</span><br><span class="line">readData(other_faces_path)</span><br><span class="line"><span class="comment"># 将图片数据与标签转换成数组</span></span><br><span class="line">imgs = np.array(imgs)</span><br><span class="line">labs = np.array([[<span class="number">0</span>,<span class="number">1</span>] <span class="keyword">if</span> lab == my_faces_path <span class="keyword">else</span> [<span class="number">1</span>,<span class="number">0</span>] <span class="keyword">for</span> lab <span class="keyword">in</span> labs])</span><br><span class="line"><span class="comment"># 随机划分测试集与训练集</span></span><br><span class="line">train_x,test_x,train_y,test_y = train_test_split(imgs, labs, test_size=<span class="number">0.05</span>, random_state=random.randint(<span class="number">0</span>,<span class="number">100</span>))</span><br><span class="line"><span class="comment"># 参数：图片数据的总数，图片的高、宽、通道</span></span><br><span class="line">train_x = train_x.reshape(train_x.shape[<span class="number">0</span>], size, size, <span class="number">3</span>)</span><br><span class="line">test_x = test_x.reshape(test_x.shape[<span class="number">0</span>], size, size, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 将数据转换成小于1的数</span></span><br><span class="line">train_x = train_x.astype(<span class="string">'float32'</span>)/<span class="number">255.0</span></span><br><span class="line">test_x = test_x.astype(<span class="string">'float32'</span>)/<span class="number">255.0</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'train size:%s, test size:%s'</span> % (len(train_x), len(test_x)))</span><br><span class="line"><span class="comment"># 图片块，每次取100张图片</span></span><br><span class="line">batch_size = <span class="number">100</span></span><br><span class="line">num_batch = len(train_x) // batch_size</span><br><span class="line"></span><br><span class="line">x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, size, size, <span class="number">3</span>])</span><br><span class="line">y_ = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">keep_prob_5 = tf.placeholder(tf.float32)</span><br><span class="line">keep_prob_75 = tf.placeholder(tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weightVariable</span><span class="params">(shape)</span>:</span></span><br><span class="line">    init = tf.random_normal(shape, stddev=<span class="number">0.01</span>)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(init)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">biasVariable</span><span class="params">(shape)</span>:</span></span><br><span class="line">    init = tf.random_normal(shape)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(init)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(x, W)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.conv2d(x, W, strides=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxPool</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>], strides=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dropout</span><span class="params">(x, keep)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.dropout(x, keep)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cnnLayer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 第一层</span></span><br><span class="line">    W1 = weightVariable([<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">32</span>]) <span class="comment"># 卷积核大小(3,3)， 输入通道(3)， 输出通道(32)</span></span><br><span class="line">    b1 = biasVariable([<span class="number">32</span>])</span><br><span class="line">    <span class="comment"># 卷积</span></span><br><span class="line">    conv1 = tf.nn.relu(conv2d(x, W1) + b1)</span><br><span class="line">    <span class="comment"># 池化</span></span><br><span class="line">    pool1 = maxPool(conv1)</span><br><span class="line">    <span class="comment"># 减少过拟合，随机让某些权重不更新</span></span><br><span class="line">    drop1 = dropout(pool1, keep_prob_5)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二层</span></span><br><span class="line">    W2 = weightVariable([<span class="number">3</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">64</span>])</span><br><span class="line">    b2 = biasVariable([<span class="number">64</span>])</span><br><span class="line">    conv2 = tf.nn.relu(conv2d(drop1, W2) + b2)</span><br><span class="line">    pool2 = maxPool(conv2)</span><br><span class="line">    drop2 = dropout(pool2, keep_prob_5)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第三层</span></span><br><span class="line">    W3 = weightVariable([<span class="number">3</span>,<span class="number">3</span>,<span class="number">64</span>,<span class="number">64</span>])</span><br><span class="line">    b3 = biasVariable([<span class="number">64</span>])</span><br><span class="line">    conv3 = tf.nn.relu(conv2d(drop2, W3) + b3)</span><br><span class="line">    pool3 = maxPool(conv3)</span><br><span class="line">    drop3 = dropout(pool3, keep_prob_5)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全连接层</span></span><br><span class="line">    Wf = weightVariable([<span class="number">8</span>*<span class="number">8</span>*<span class="number">64</span>, <span class="number">512</span>])</span><br><span class="line">    bf = biasVariable([<span class="number">512</span>])</span><br><span class="line">    drop3_flat = tf.reshape(drop3, [<span class="number">-1</span>, <span class="number">8</span>*<span class="number">8</span>*<span class="number">64</span>])</span><br><span class="line">    dense = tf.nn.relu(tf.matmul(drop3_flat, Wf) + bf)</span><br><span class="line">    dropf = dropout(dense, keep_prob_75)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出层</span></span><br><span class="line">    Wout = weightVariable([<span class="number">512</span>,<span class="number">2</span>])</span><br><span class="line">    bout = biasVariable([<span class="number">2</span>])</span><br><span class="line">    <span class="comment">#out = tf.matmul(dropf, Wout) + bout</span></span><br><span class="line">    out = tf.add(tf.matmul(dropf, Wout), bout)</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cnnTrain</span><span class="params">()</span>:</span></span><br><span class="line">    out = cnnLayer()</span><br><span class="line"></span><br><span class="line">    cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=out, labels=y_))</span><br><span class="line"></span><br><span class="line">    train_step = tf.train.AdamOptimizer(<span class="number">0.01</span>).minimize(cross_entropy)</span><br><span class="line">    <span class="comment"># 比较标签是否相等，再求的所有数的平均值，tf.cast(强制转换类型)</span></span><br><span class="line">    accuracy = tf.reduce_mean(tf.cast(tf.equal(tf.argmax(out, <span class="number">1</span>), tf.argmax(y_, <span class="number">1</span>)), tf.float32))</span><br><span class="line">    <span class="comment"># 将loss与accuracy保存以供tensorboard使用</span></span><br><span class="line">    tf.summary.scalar(<span class="string">'loss'</span>, cross_entropy)</span><br><span class="line">    tf.summary.scalar(<span class="string">'accuracy'</span>, accuracy)</span><br><span class="line">    merged_summary_op = tf.summary.merge_all()</span><br><span class="line">    <span class="comment"># 数据保存器的初始化</span></span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line"></span><br><span class="line">        sess.run(tf.global_variables_initializer())</span><br><span class="line"></span><br><span class="line">        summary_writer = tf.summary.FileWriter(<span class="string">'./tmp'</span>, graph=tf.get_default_graph())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">             <span class="comment"># 每次取128(batch_size)张图片</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(num_batch):</span><br><span class="line">                batch_x = train_x[i*batch_size : (i+<span class="number">1</span>)*batch_size]</span><br><span class="line">                batch_y = train_y[i*batch_size : (i+<span class="number">1</span>)*batch_size]</span><br><span class="line">                <span class="comment"># 开始训练数据，同时训练三个变量，返回三个数据</span></span><br><span class="line">                _,loss,summary = sess.run([train_step, cross_entropy, merged_summary_op],</span><br><span class="line">                                           feed_dict=&#123;x:batch_x,y_:batch_y, keep_prob_5:<span class="number">0.5</span>,keep_prob_75:<span class="number">0.75</span>&#125;)</span><br><span class="line">                summary_writer.add_summary(summary, n*num_batch+i)</span><br><span class="line">                <span class="comment"># 打印损失</span></span><br><span class="line">                print(n*num_batch+i, loss)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (n*num_batch+i) % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                    <span class="comment"># 获取测试数据的准确率</span></span><br><span class="line">                    acc = accuracy.eval(&#123;x:test_x, y_:test_y, keep_prob_5:<span class="number">1.0</span>, keep_prob_75:<span class="number">1.0</span>&#125;)</span><br><span class="line">                    print(n*num_batch+i, acc)</span><br><span class="line">                    <span class="comment"># 准确率大于0.98时保存并退出</span></span><br><span class="line">                    <span class="keyword">if</span> acc &gt; <span class="number">0.98</span> <span class="keyword">and</span> n &gt; <span class="number">2</span>:</span><br><span class="line">                        saver.save(sess, <span class="string">'./train_faces.model'</span>, global_step=n*num_batch+i)</span><br><span class="line">                        sys.exit(<span class="number">0</span>)</span><br><span class="line">        print(<span class="string">'accuracy less 0.98, exited!'</span>)</span><br><span class="line"></span><br><span class="line">cnnTrain()</span><br></pre></td></tr></table></figure><h4 id="is-my-face"><a href="#is-my-face" class="headerlink" title="is_my_face"></a>is_my_face</h4><p>最后就是识别了，，，运行这个会出现两个窗口，一个是实时的拍摄窗口，一个是识别的窗口（会出现蓝色的框，，，</p><p>然后如果识别出来是之前录入的那个人的话，，cmd里会出现True的字样，，否则是False，，，如果没有识别出来有人脸在画面里的话会卡住不动，，，</p><p>大概之前录的时间是2-3分钟左右的准确度就很高了，，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> dlib</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">my_faces_path = <span class="string">'./my_faces'</span></span><br><span class="line">other_faces_path = <span class="string">'./other_faces'</span></span><br><span class="line">size = <span class="number">64</span></span><br><span class="line"></span><br><span class="line">imgs = []</span><br><span class="line">labs = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPaddingSize</span><span class="params">(img)</span>:</span></span><br><span class="line">    h, w, _ = img.shape</span><br><span class="line">    top, bottom, left, right = (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    longest = max(h, w)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> w &lt; longest:</span><br><span class="line">        tmp = longest - w</span><br><span class="line">        <span class="comment"># //表示整除符号</span></span><br><span class="line">        left = tmp // <span class="number">2</span></span><br><span class="line">        right = tmp - left</span><br><span class="line">    <span class="keyword">elif</span> h &lt; longest:</span><br><span class="line">        tmp = longest - h</span><br><span class="line">        top = tmp // <span class="number">2</span></span><br><span class="line">        bottom = tmp - top</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> top, bottom, left, right</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readData</span><span class="params">(path , h=size, w=size)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">        <span class="keyword">if</span> filename.endswith(<span class="string">'.jpg'</span>):</span><br><span class="line">            filename = path + <span class="string">'/'</span> + filename</span><br><span class="line"></span><br><span class="line">            img = cv2.imread(filename)</span><br><span class="line"></span><br><span class="line">            top,bottom,left,right = getPaddingSize(img)</span><br><span class="line">            <span class="comment"># 将图片放大， 扩充图片边缘部分</span></span><br><span class="line">            img = cv2.copyMakeBorder(img, top, bottom, left, right, cv2.BORDER_CONSTANT, value=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line">            img = cv2.resize(img, (h, w))</span><br><span class="line"></span><br><span class="line">            imgs.append(img)</span><br><span class="line">            labs.append(path)</span><br><span class="line"></span><br><span class="line">readData(my_faces_path)</span><br><span class="line">readData(other_faces_path)</span><br><span class="line"><span class="comment"># 将图片数据与标签转换成数组</span></span><br><span class="line">imgs = np.array(imgs)</span><br><span class="line">labs = np.array([[<span class="number">0</span>,<span class="number">1</span>] <span class="keyword">if</span> lab == my_faces_path <span class="keyword">else</span> [<span class="number">1</span>,<span class="number">0</span>] <span class="keyword">for</span> lab <span class="keyword">in</span> labs])</span><br><span class="line"><span class="comment"># 随机划分测试集与训练集</span></span><br><span class="line">train_x,test_x,train_y,test_y = train_test_split(imgs, labs, test_size=<span class="number">0.05</span>, random_state=random.randint(<span class="number">0</span>,<span class="number">100</span>))</span><br><span class="line"><span class="comment"># 参数：图片数据的总数，图片的高、宽、通道</span></span><br><span class="line">train_x = train_x.reshape(train_x.shape[<span class="number">0</span>], size, size, <span class="number">3</span>)</span><br><span class="line">test_x = test_x.reshape(test_x.shape[<span class="number">0</span>], size, size, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 将数据转换成小于1的数</span></span><br><span class="line">train_x = train_x.astype(<span class="string">'float32'</span>)/<span class="number">255.0</span></span><br><span class="line">test_x = test_x.astype(<span class="string">'float32'</span>)/<span class="number">255.0</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'train size:%s, test size:%s'</span> % (len(train_x), len(test_x)))</span><br><span class="line"><span class="comment"># 图片块，每次取128张图片</span></span><br><span class="line">batch_size = <span class="number">128</span></span><br><span class="line">num_batch = len(train_x) // <span class="number">128</span></span><br><span class="line"></span><br><span class="line">x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, size, size, <span class="number">3</span>])</span><br><span class="line">y_ = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">keep_prob_5 = tf.placeholder(tf.float32)</span><br><span class="line">keep_prob_75 = tf.placeholder(tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weightVariable</span><span class="params">(shape)</span>:</span></span><br><span class="line">    init = tf.random_normal(shape, stddev=<span class="number">0.01</span>)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(init)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">biasVariable</span><span class="params">(shape)</span>:</span></span><br><span class="line">    init = tf.random_normal(shape)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(init)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(x, W)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.conv2d(x, W, strides=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxPool</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>], strides=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dropout</span><span class="params">(x, keep)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.dropout(x, keep)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cnnLayer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 第一层</span></span><br><span class="line">    W1 = weightVariable([<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">32</span>]) <span class="comment"># 卷积核大小(3,3)， 输入通道(3)， 输出通道(32)</span></span><br><span class="line">    b1 = biasVariable([<span class="number">32</span>])</span><br><span class="line">    <span class="comment"># 卷积</span></span><br><span class="line">    conv1 = tf.nn.relu(conv2d(x, W1) + b1)</span><br><span class="line">    <span class="comment"># 池化</span></span><br><span class="line">    pool1 = maxPool(conv1)</span><br><span class="line">    <span class="comment"># 减少过拟合，随机让某些权重不更新</span></span><br><span class="line">    drop1 = dropout(pool1, keep_prob_5)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二层</span></span><br><span class="line">    W2 = weightVariable([<span class="number">3</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">64</span>])</span><br><span class="line">    b2 = biasVariable([<span class="number">64</span>])</span><br><span class="line">    conv2 = tf.nn.relu(conv2d(drop1, W2) + b2)</span><br><span class="line">    pool2 = maxPool(conv2)</span><br><span class="line">    drop2 = dropout(pool2, keep_prob_5)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第三层</span></span><br><span class="line">    W3 = weightVariable([<span class="number">3</span>,<span class="number">3</span>,<span class="number">64</span>,<span class="number">64</span>])</span><br><span class="line">    b3 = biasVariable([<span class="number">64</span>])</span><br><span class="line">    conv3 = tf.nn.relu(conv2d(drop2, W3) + b3)</span><br><span class="line">    pool3 = maxPool(conv3)</span><br><span class="line">    drop3 = dropout(pool3, keep_prob_5)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全连接层</span></span><br><span class="line">    Wf = weightVariable([<span class="number">8</span>*<span class="number">16</span>*<span class="number">32</span>, <span class="number">512</span>])</span><br><span class="line">    bf = biasVariable([<span class="number">512</span>])</span><br><span class="line">    drop3_flat = tf.reshape(drop3, [<span class="number">-1</span>, <span class="number">8</span>*<span class="number">16</span>*<span class="number">32</span>])</span><br><span class="line">    dense = tf.nn.relu(tf.matmul(drop3_flat, Wf) + bf)</span><br><span class="line">    dropf = dropout(dense, keep_prob_75)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出层</span></span><br><span class="line">    Wout = weightVariable([<span class="number">512</span>,<span class="number">2</span>])</span><br><span class="line">    bout = biasVariable([<span class="number">2</span>])</span><br><span class="line">    out = tf.add(tf.matmul(dropf, Wout), bout)</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line">output = cnnLayer()  </span><br><span class="line">predict = tf.argmax(output, <span class="number">1</span>)  </span><br><span class="line">   </span><br><span class="line">saver = tf.train.Saver()  </span><br><span class="line">sess = tf.Session()  </span><br><span class="line">saver.restore(sess, tf.train.latest_checkpoint(<span class="string">'.'</span>))   </span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_my_face</span><span class="params">(image)</span>:</span>  </span><br><span class="line">    res = sess.run(predict, feed_dict=&#123;x: [image/<span class="number">255.0</span>], keep_prob_5:<span class="number">1.0</span>, keep_prob_75: <span class="number">1.0</span>&#125;)  </span><br><span class="line">    <span class="keyword">if</span> res[<span class="number">0</span>] == <span class="number">1</span>:  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span>  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">#使用dlib自带的frontal_face_detector作为我们的特征提取器</span></span><br><span class="line">detector = dlib.get_frontal_face_detector()</span><br><span class="line"></span><br><span class="line">cam = cv2.VideoCapture(<span class="number">0</span>)  </span><br><span class="line">   </span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:  </span><br><span class="line">    time.sleep(<span class="number">0.2</span>) </span><br><span class="line">    _, img = cam.read()  </span><br><span class="line">    gray_image = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    dets = detector(gray_image, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> len(dets):</span><br><span class="line">        <span class="comment">#print('Can`t get face.')</span></span><br><span class="line">        cv2.imshow(<span class="string">'img'</span>, img)</span><br><span class="line">        key = cv2.waitKey(<span class="number">30</span>) &amp; <span class="number">0xff</span>  </span><br><span class="line">        <span class="keyword">if</span> key == <span class="number">27</span>:</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">for</span> i, d <span class="keyword">in</span> enumerate(dets):</span><br><span class="line">        x1 = d.top() <span class="keyword">if</span> d.top() &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        y1 = d.bottom() <span class="keyword">if</span> d.bottom() &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        x2 = d.left() <span class="keyword">if</span> d.left() &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        y2 = d.right() <span class="keyword">if</span> d.right() &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        face = img[x1:y1,x2:y2]</span><br><span class="line">        <span class="comment"># 调整图片的尺寸</span></span><br><span class="line">        face = cv2.resize(face, (size,size))</span><br><span class="line">        print(<span class="string">'Is this my face? %s'</span> % is_my_face(face))</span><br><span class="line"></span><br><span class="line">        cv2.rectangle(img, (x2,x1),(y2,y1), (<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),<span class="number">3</span>)</span><br><span class="line">        cv2.imshow(<span class="string">'image'</span>,img)</span><br><span class="line">        key = cv2.waitKey(<span class="number">30</span>) &amp; <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">if</span> key == <span class="number">27</span>:</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">  </span><br><span class="line">sess.close()</span><br></pre></td></tr></table></figure><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>后面就没了，，建议弄过一个遍之后，代码还是自己再重写一别吧，，这样能理解里面的细节的内容，，，</p><p>装了4、5遍多的环境感觉每一次都有收获，，虽然每次都会遇到一些问题，，但是都也能靠自己来解决，，，hhh，，，</p><p>(end)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前为了配置tensorflow-gpu的环境又是装cuda,又是装cudnn，还有tensoflow-gpu等等，，因为当时也是第一次搭建这个环境，所以完全是按照别人的搭建方法来一步一步的弄得，，后来我在给室友安装环境的时候，发现cuda,cudnn什么的完全不用自己安装，，，全部交给 &lt;strong&gt;anaconda3&lt;/strong&gt; （好东西）就行了&lt;/p&gt;
    
    </summary>
    
      <category term="人脸识别" scheme="http://www.31415x.cf/categories/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
    
      <category term="Tensorflow" scheme="http://www.31415x.cf/tags/Tensorflow/"/>
    
      <category term="anaconda3" scheme="http://www.31415x.cf/tags/anaconda3/"/>
    
      <category term="环境配置" scheme="http://www.31415x.cf/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>ACM-题集</title>
    <link href="http://www.31415x.cf/2019/03/26/ACM-%E9%A2%98%E9%9B%86/"/>
    <id>http://www.31415x.cf/2019/03/26/ACM-题集/</id>
    <published>2019-03-26T05:31:02.000Z</published>
    <updated>2019-07-13T06:48:41.518Z</updated>
    
    <content type="html"><![CDATA[<p>按用到的算法分类保存一下自己做的题</p><a id="more"></a><h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><p><a href="https://vjudge.net/problem/HihoCoder-1828" target="_blank" rel="noopener">Saving Tang Monk II</a> bfs+三维vis+优先队列</p><h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><p><a href="https://hihocoder.com/problemset/problem/1870" target="_blank" rel="noopener">HihoCoder-1870</a> 二分建图判断是否有环</p><h2 id="2-sat"><a href="#2-sat" class="headerlink" title="2-sat"></a>2-sat</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1814" target="_blank" rel="noopener">hdu-1814</a>: 2sat板子题</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3062" target="_blank" rel="noopener">hdu-3062</a>: 也算是板子题吧</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1824" target="_blank" rel="noopener">Let’s go home</a>: 按题意建图就行了，啥限制条件建啥边，，不要多余就行了，，，</p><p><a href="https://cn.vjudge.net/problem/UVALive-3211" target="_blank" rel="noopener">UVALive-3211</a>: 二分枚举限制条件建图跑2sat求最值</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3622" target="_blank" rel="noopener">HDU-3622-Bomb Game</a>: 也是二分枚举+建图求最值的问题</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4115" target="_blank" rel="noopener">HDU-4115</a>: 不是单纯的全为矛盾项的2sat，其中还有一些必选项，例如选a就必须选b的情况（可以转化成矛盾项做，也可以直接利用这个条件建图（麻烦一点））</p><p><a href="http://poj.org/problem?id=3678" target="_blank" rel="noopener">poj-3678-Katu Puzzle</a>: 加必选边建图跑2sat判断是否有解（这题很好）</p><p><a href="https://ac.nowcoder.com/acm/contest/327/F" target="_blank" rel="noopener">处女座与宝藏</a>: 2sat判断是否有解，建图的思想很不错，没有像前面那几道题那么直白的告诉你限制条件</p><p><a href="https://codeforces.com/contest/776/problem/D" target="_blank" rel="noopener">D. The Door Problem</a>： 和宝藏那题一样，，</p><h2 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2063" target="_blank" rel="noopener">hdu-2063过山车</a>: 二分图简单的模板题</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按用到的算法分类保存一下自己做的题&lt;/p&gt;
    
    </summary>
    
      <category term="ACM-整理" scheme="http://www.31415x.cf/categories/ACM-%E6%95%B4%E7%90%86/"/>
    
    
      <category term="acm" scheme="http://www.31415x.cf/tags/acm/"/>
    
      <category term="笔记" scheme="http://www.31415x.cf/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>ACM-数据结构-树链剖分</title>
    <link href="http://www.31415x.cf/2019/03/24/ACM-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    <id>http://www.31415x.cf/2019/03/24/ACM-数据结构-树链剖分/</id>
    <published>2019-03-24T03:37:34.000Z</published>
    <updated>2019-03-24T04:19:15.292Z</updated>
    
    <content type="html"><![CDATA[<p>据学长说，树链剖分在acm比赛上不怎么看到过，我搜到的博客也都是几年前的东西，不过已经看过了，，还是记录一下把，，</p><a id="more"></a><p>我是从<a href="http://blog.sina.com.cn/s/blog_6974c8b20100zc61.html" target="_blank" rel="noopener">这里看的树链剖分</a>的内容，，<a href="https://blog.csdn.net/dyx404514/article/details/8718249" target="_blank" rel="noopener">还有这个</a></p><p>看了几遍，大致知道树链剖分大致是为了解决树上的修改和询问操作的一个工具，，当然一般来说还要一个数据结构例如线段树什么的维护一下，，</p><p>以后忘了的话就再看那篇博客吧，，，反正知道这是个啥，怎么用就行了，，</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3966" target="_blank" rel="noopener">杭电3966</a></p><p>这个是修改点权的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;cstdlib&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;queue&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1061109567</span></span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159265358979</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next;</span><br><span class="line">&#125;edge[maxn];</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].to = v;</span><br><span class="line">    edge[tot].next = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[maxn];   <span class="comment">//fa[v] 表示v的父亲节点</span></span><br><span class="line"><span class="keyword">int</span> dep[maxn];  <span class="comment">//dep[v] 表示v的深度</span></span><br><span class="line"><span class="keyword">int</span> son[maxn];  <span class="comment">//son[v] 表示与v同一条重链上的儿子节点</span></span><br><span class="line"><span class="keyword">int</span> num[maxn];  <span class="comment">//num[v] 表示以v为根的子树的节点数</span></span><br><span class="line"><span class="keyword">int</span> p[maxn];    <span class="comment">//p[v] 表示v在树状数组中的位置</span></span><br><span class="line"><span class="keyword">int</span> fp[maxn];   <span class="comment">//fp[v] 与p[v]相反，即v == fp[p[v]]</span></span><br><span class="line"><span class="keyword">int</span> top[maxn];  <span class="comment">//top[v] 表示v所在重链的顶端节点</span></span><br><span class="line"><span class="keyword">int</span> pos;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    pos = <span class="number">1</span>;    <span class="comment">//树状数组</span></span><br><span class="line">    <span class="built_in">memset</span>(son, <span class="number">-1</span>, <span class="keyword">sizeof</span> son);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[u] = dep[pre] + <span class="number">1</span>;</span><br><span class="line">    fa[u] = pre;</span><br><span class="line">    num[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].next)  <span class="comment">//遍历所有与u相连的节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v != pre)                            <span class="comment">//对于u的父亲节点不处理</span></span><br><span class="line">        &#123;</span><br><span class="line">            dfs1(v, u);</span><br><span class="line">            num[u] += num[v];</span><br><span class="line">            <span class="keyword">if</span>(son[u] == <span class="number">-1</span> || num[v] &gt; num[son[u]])</span><br><span class="line">                son[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> sp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    top[u] = sp;            <span class="comment">//设置u所在重链的顶端节点</span></span><br><span class="line">    p[u] = pos++;           <span class="comment">//确定u在线段树等数据结构中所维护的数组的位置</span></span><br><span class="line">    fp[p[u]] = u;           <span class="comment">//确定上面那个数组中每个位置所代表的节点</span></span><br><span class="line">    <span class="keyword">if</span>(!~son[u])<span class="keyword">return</span>;</span><br><span class="line">    dfs2(son[u], sp);       <span class="comment">//将在一条重链的节点放在那个数组相邻的位置，连续分布</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v != son[u] &amp;&amp; v != fa[u])   <span class="comment">//对于u除了父亲节点和它所在重链上的儿子的点，一定是旁边轻链上的起始点，所以那条以v开头的轻链的top[v]=v</span></span><br><span class="line">            dfs2(v, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, pp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s += c[i];</span><br><span class="line">        i -= lowbit(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i] += val;</span><br><span class="line">        i += lowbit(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//改变u-&gt;v路径上的点值</span></span><br><span class="line">    <span class="keyword">int</span> f1 = top[u];    </span><br><span class="line">    <span class="keyword">int</span> f2 = top[v];</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(f1 != f2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[f1] &lt; dep[f2])</span><br><span class="line">        &#123;</span><br><span class="line">            swap(f1, f2);</span><br><span class="line">            swap(u, v);</span><br><span class="line">        &#125;</span><br><span class="line">        add(p[f1], val);</span><br><span class="line">        add(p[u] + <span class="number">1</span>, -val);</span><br><span class="line">        u = fa[f1];</span><br><span class="line">        f1 = top[u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[u] &gt; dep[v])swap(u, v);</span><br><span class="line">    add(p[u], val);</span><br><span class="line">    add(p[v] + <span class="number">1</span>, -val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("233.in" , "r" , stdin);</span></span><br><span class="line"><span class="comment">//    freopen("233.out" , "w" , stdout);</span></span><br><span class="line">    <span class="comment">// ios_base::sync_with_stdio(0);</span></span><br><span class="line">    <span class="comment">// cin.tie(0);cout.tie(0);</span></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;pp))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">            addedge(u, v);</span><br><span class="line">            addedge(v, u);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs1(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        dfs2(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span> c);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            add(p[i], a[i]);</span><br><span class="line">            add(p[i] + <span class="number">1</span>, -a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span> op;</span><br><span class="line">        <span class="keyword">int</span> c1, c2, k;</span><br><span class="line">        <span class="keyword">while</span>(pp--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">" %c"</span>, &amp;op);</span><br><span class="line">            <span class="keyword">if</span>(op == <span class="string">'Q'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;u);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum(p[u]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;c1, &amp;c2, &amp;k);</span><br><span class="line">                <span class="keyword">if</span>(op == <span class="string">'D'</span>)k = -k;</span><br><span class="line">                change(c1, c2, k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;据学长说，树链剖分在acm比赛上不怎么看到过，我搜到的博客也都是几年前的东西，不过已经看过了，，还是记录一下把，，&lt;/p&gt;
    
    </summary>
    
      <category term="ACM-数据结构-树链剖分" scheme="http://www.31415x.cf/categories/ACM-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
    
      <category term="acm" scheme="http://www.31415x.cf/tags/acm/"/>
    
      <category term="笔记" scheme="http://www.31415x.cf/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Diary-第四周周记</title>
    <link href="http://www.31415x.cf/2019/03/21/Diary-%E7%AC%AC%E5%9B%9B%E5%91%A8%E5%91%A8%E8%AE%B0/"/>
    <id>http://www.31415x.cf/2019/03/21/Diary-第四周周记/</id>
    <published>2019-03-20T23:47:19.000Z</published>
    <updated>2019-03-21T00:29:27.954Z</updated>
    
    <content type="html"><![CDATA[<p>2019-3-11~2019-3-17</p><p>这一周发生了许许多多的事情，原本是打算在这周周末记录一下的，，然后就一直拖，，拖到了今天，，已经是下一周的周四了。。</p><a id="more"></a><p>首先是上周的体育课，因为之前没有自己联系过网球，基础班的网球又因为上学期一直在下雨只上了一半的课，，所以现在的我完全不怎么会网球的对打，，甚至连接别人的求都不怎么会，，对面和我打球的同学曾经又练习过，感觉因为我的菜已经连累到了别人了，，，所以不仅为了对面不嫌弃我，也为了自己最后的的体育课能够顺利的对打下来，还有我是真的想找到一个自己喜欢的同时又擅长的运动，所以上个星期的我在晚上自己练习了一会，可能换成以前的我根本就不可能做出这样的事吧，曾今的我是不可能去独自的去运动，就这样过了20多年，，在上了大学之后，这样的日子貌似越来越多了，当然，虽然练习了几次，，但是我也不可能一下子就达到非常熟练的地步，至少在这周一的体育课上我开始能够接到对面的球了，，这至少是一个好的开端。</p><p>第二天的周二是一次团生会，同时也是一次推优班会，这时我的第二次站在推优的演讲台上，自我感觉与去年的那一次演讲相比，我已经很镇定了，如果和曾经的我相比的话，可能我已经不再是我了，曾经的我从来不敢站在讲台上说一句话，更别说是演讲了，本来可以锻炼我的高中也因为在众多强有力的人的环境下，自信心早已变成了那深深的自卑，那时的我早已陷入了 无论自己怎么努力也终将是班中的后几名 的深涡中，人是很容易根据以往的映像形成一个固有的认识的，除非那个事物真的发生了超出自己曾经的认识时，否则事物即使在变化，也会默认为一成不变的。上了大学的我就想着这3年里至少要锻炼出能够在别人面前讲话的能力，能够和自己想分享想法的人说出自己的感受，现在看来虽然做的没有大多数人做的好，但是对于我自己来说，已经是迈出了很大的一步，甚至是好几步。</p><p>中间的那几天很平凡，每天都是晴天，我也像往常那样穿梭在教学楼、寝室和逸夫楼之间的小路上。享受着到来的春天的气息。每一天都很舒服，很轻松。</p><p>最后的星期日，我再一次去参加了csp的认证考试，这一次的试题内容与上一次相比甚是简单，所以我也很有思路，精神去做那些题，但是，虽然那时的我认为自己这一个学期已经有所长进，这一次已经很稳了，，但是昨天出来的成绩还是让我大跌眼镜，215，，，很有把握的题没有全过，太过高估自己的实力，导致难题没有看，简单的题没有认真的分析而丢分，，尤其是在知道有几个没有怎么练过学弟都和我一样的分时，真的有再一次回到那个高中时的感觉，一种自己无论怎么练都不能追到别人的脚步，甚至看不到对方的身影，自己就像是隐身一样站在远处，注视着那些强者们的一举一动，而自己越来越远，越来越远。</p><p>从今天开始的我要真正的认真了，，不能再浪费每一天了，任务很多，但是时间却越来越少，自己不能再去逃避每一个遇到的困难，也不能再出现 没有目标去过一天 的情况了，就这一年，或者说完全没有一年的时间里，我要学习很多很多的东西，提升自己所有对自己目前来说有用的重要的技能了，不能再出现努力了一把所得到的连那些没有努力的人都不如的结果了！</p><p><strong>有些路注定要孤身一人走的，想要到达繁华，必经一段荒凉</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019-3-11~2019-3-17&lt;/p&gt;
&lt;p&gt;这一周发生了许许多多的事情，原本是打算在这周周末记录一下的，，然后就一直拖，，拖到了今天，，已经是下一周的周四了。。&lt;/p&gt;
    
    </summary>
    
      <category term="diary" scheme="http://www.31415x.cf/categories/diary/"/>
    
    
  </entry>
  
</feed>
