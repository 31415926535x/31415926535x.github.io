<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>31415926535x</title>
  
  
  <link href="http://blog.31415x.cf/atom.xml" rel="self"/>
  
  <link href="http://blog.31415x.cf/"/>
  <updated>2021-05-19T12:50:30.469Z</updated>
  <id>http://blog.31415x.cf/</id>
  
  <author>
    <name>31415926535x</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>笔记-JVM学习</title>
    <link href="http://blog.31415x.cf/2021/05/19/%E7%AC%94%E8%AE%B0-JVM%E5%AD%A6%E4%B9%A0/"/>
    <id>http://blog.31415x.cf/2021/05/19/%E7%AC%94%E8%AE%B0-JVM%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-05-19T12:40:06.000Z</published>
    <updated>2021-05-19T12:50:30.469Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><hr><p>typora-root-url: ./</p><hr><p>[toc]</p><h1 id="JVM学习前言"><a href="#JVM学习前言" class="headerlink" title="JVM学习前言"></a>JVM学习前言</h1><p><a href="https://www.bilibili.com/video/BV1iJ411d7jS">学习视频地址</a></p><ul><li>谈谈你对JVM的理解；Java8虚拟机与之前等待变化</li><li>OOM，栈溢出StackOverFlowError，如何分析</li><li>JVM的常用调优参数</li><li>内存快照如何抓取，如何分析Dump文件</li><li>JVM中类加载器</li></ul><h1 id="JVM体系结构"><a href="#JVM体系结构" class="headerlink" title="JVM体系结构"></a>JVM体系结构</h1><p><img src="https://img-blog.csdnimg.cn/2021051920414595.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>更加详细的结构为：</p><p><img src="https://img-blog.csdnimg.cn/20210519204201327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><p>作用：加载.class文件</p><p>流程大致为：<img src="https://img-blog.csdnimg.cn/2021051920422179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p><p>分类：按照从低到高可分为：</p><ul><li>虚拟机加载器（引导类加载器）</li><li>扩展类加载器</li><li>系统类（启动类）加载器</li><li>应用类加载器</li></ul><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><p>某个特定的类加载器在接到加载类的请求时，首先将加载任务委托给父类加载器，依次递归，如果父类加载器可以完成类加载任务，就成功返回；只有父类加载器无法完成此加载任务时，才自己去加载。</p><p>全都找不到报： <code>Class Not Found</code> </p><h2 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a>沙箱安全机制</h2><p><img src="https://img-blog.csdnimg.cn/20210519204237272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p><p>在早期的jvm中，对于本地代码信任，可以直接运行，而远程代码是放置在沙箱中运行，限制对系统资源的访问。</p><p><img src="https://img-blog.csdnimg.cn/20210519204249762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p><p>此后增加了 <strong>安全策略</strong>，可以在给定一些权限后对本地资源访问。</p><p><img src="https://img-blog.csdnimg.cn/20210519204308442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p><p>然后又增加了 <strong>代码签名</strong>，按照用户的安全策略设定，又类加载器来加载道虚拟机中权限不同的运行空间运行</p><p><img src="https://img-blog.csdnimg.cn/20210519204321181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p><p>现在的安全机制引入 <strong>域</strong> 的概念，虚拟机将所有的代加载不同的系统域和应用域中，系统域负责关键资源，应用域通过系统域的部分代理来操作资源。不同的受保护域对应不同的权限。</p><p>组成沙箱的基本条件：</p><ul><li><p><strong>字节码校验器</strong>： 确保Java文件遵循Java语言规范，帮助Java程序实现内存保护，但不是所有的类文件都会经过节码校验（核心类）</p></li><li><p><strong>类装载器</strong>： 类装载器在3个地方对Java沙箱起作用：</p><ul><li><p>放置恶意代码干涉善意代码</p></li><li><p>守护被信任的类库边界</p></li><li><p>将代码归入保护域</p><p>虚拟机为不同的类加载器提供不同的命名空间，有唯一的标识，且由Java虚拟机的每一个类装载器维护，相互不可见</p></li></ul></li></ul><p>​    类加载器使用的是双亲委派机制：    </p><ul><li><p>从最内层jvm自带类加载器开始加载，外层恶意同名类得不到加载从而无法使用</p></li><li><p>由于严格通过包来区分访问域，外层恶意的类通过内置代码也无法获得权限访问道内层类，破坏代码自然无法生效</p></li></ul><ul><li><strong>存取控制器</strong>： 存取控制器可以控制核心API对操作系统的存取权限，控制的策略可以通过用户指定</li><li><strong>安全管理器</strong>：是核心API和操作系统之间的主要接口。实现权限控制，比存取控制器优先级高</li><li><strong>安全软件包</strong>： <code>java.security</code> 下的类和扩展包下的类，允许用户为自己的应用增加新的安全特性：<ul><li>安全提供者</li><li>消息摘要</li><li>数字签名</li><li>加密</li><li>鉴别</li></ul></li></ul><h1 id="Native"><a href="#Native" class="headerlink" title="Native"></a>Native</h1><p>native：凡是使用 <code>native</code> 关键字修饰的，说明Java的作用范围达不到，会调用底层C/C++的库文件等等</p><p>调用 <code>native</code> 修饰的方法会进入 <strong>本地方法栈</strong> ，然后通过 <strong>本地方法接口JNI</strong> 调用本地方法。</p><p>所以JNI的作用就是扩展Java的使用，融合不同的编程语言为Java使用。jvm会在内存区域中开辟一个标记区域，即<strong>本地方法栈</strong>，登记所有的native方法，在最终执行时通过JNI加载本地方法库中的方法。（不同虚拟机这里会有所不同）</p><h1 id="PC"><a href="#PC" class="headerlink" title="PC"></a>PC</h1><p>程序计数器</p><h1 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h1><p>方法区是被所有线程共享，所有字段和方法字节码，以及一些特殊方法（构造函数、接口代码）都在此定义。所有定义的方法的信息都保存在此区域，<strong>此区域属于共享区间</strong></p><p>==静态变量(static)、常量(final)、类信息(class)（构造方法、接口）、运行使得常量池 都存放在方法区中，但是，实例变量存在堆中，不是方法区==</p><p><img src="https://img-blog.csdnimg.cn/2021051920435444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p><p>（最下方就是方法区，存储上面提到的东西）</p><p><img src="https://img-blog.csdnimg.cn/20210519204951106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="栈（虚拟机栈）"><a href="#栈（虚拟机栈）" class="headerlink" title="栈（虚拟机栈）"></a>栈（虚拟机栈）</h1><p>栈内存，主管程序的运行，生命周期和线程同步</p><p>线程结束，栈内存也释放，对于栈来说，不存在垃圾回收问题</p><p>栈中的类型：8大基本类型+对象类型+实例方法</p><p>实际的栈中存储的是一个个的栈帧，结构大致如下：</p><p><img src="https://img-blog.csdnimg.cn/20210519204412241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="三种JVM"><a href="#三种JVM" class="headerlink" title="三种JVM"></a>三种JVM</h1><ul><li>sun： HotSpot （openjdk）</li><li>BEA JRockit</li><li>IBM J9 VM</li></ul><h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>Heap，一个JVM仅有一个堆内存，可调节大小</p><p>堆中保存的是 实例化的类及方法、常量、变量等</p><p>堆内存分为：</p><ul><li>新生区（伊甸园区）young</li><li>老年区 old </li><li>永久区 perm（1.8改为元空间）</li></ul><p>GC垃圾回收，主要是在伊甸园区和养老区，，如果内存满了就会出现OOM</p><p><a href="https://www.processon.com/view/60a25c38f346fb1df41ec011">具体的结构可以看这里：https://www.processon.com/view/60a25c38f346fb1df41ec011</a></p><h2 id="新生区和老年区"><a href="#新生区和老年区" class="headerlink" title="新生区和老年区"></a>新生区和老年区</h2><ul><li>所有实例化 诞生和成长的地方，甚至死亡</li><li>主要分为 <strong>伊甸园区</strong>，<strong>幸存者区(S0, S1)</strong> </li></ul><p>当伊甸园区满后，会进行一次轻量级垃圾回收，对于还存在的对象将转到幸存者区。如果新生区老年区满了会进行一次重量级垃圾回收，将存活的转到老年区，全部满了表示没有内存空间，即OOM</p><p>整个流程大致如下：<img src="https://img-blog.csdnimg.cn/20210519204431577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="永久区（元空间）"><a href="#永久区（元空间）" class="headerlink" title="永久区（元空间）"></a>永久区（元空间）</h2><p>常驻内存，用来存放JDK自身携带的Class对象。Interface元数据，存储的是Java运行时的一些环境或类信息，不存在垃圾回收，仅在关闭虚拟机时释放</p><p>一个启动类，如果加载大量的第三方jar包，如Tomcat部署太多应用，大量动态生成反射类等，会导致OOM</p><ul><li>1.6前： 永久代，常量池在方法区</li><li>1.7： 永久代，但是退化 <em>去永久代</em> ，常量池在堆中</li><li>1.8： 无永久代，常量池在元空间</li></ul><p><code>Runtime.getRuntime().maxMemroy()</code> 和 <code>Runtime.getRuntime().totalMemroy()</code> 可以获取jvm可以使用的最大内存以及当前初始化的内存大小。</p><p><code>Xms1024m -Xmx1024m -XX:+PrintGCDetails</code> 可以设置初始化内存大小(1/64)与最大内存大小(1/4)。</p><p>初始内存大小=新生区+老年区，元数据区在另一个地方</p><p>出现OOM的尝试解决方法：</p><ul><li>Debug分析</li><li>内存快照工具分析Dump文件：MAT、Jprofiler</li></ul><p><strong>MAT Jprofiler的作用</strong>：</p><ul><li>分析Dump内存文件，快速定位内存泄漏</li><li>获得堆中的数据</li><li>获得大的对象</li><li>。。。</li></ul><p>Java虚拟机dump： <code>-Xms1m -Xmx8m -XX:+HeapDumpOnOutOfMemoryError[path]</code>  </p><h1 id="GC：垃圾回收"><a href="#GC：垃圾回收" class="headerlink" title="GC：垃圾回收"></a>GC：垃圾回收</h1><p>gc作用于方法区和堆</p><p>gc分类：轻GC(YGC)、重GC(Full GC)</p><p><strong>gc的算法</strong>：标记清除法、标记整理、复制算法、分代收集，</p><p><strong>判断对象是否存活的方法</strong>：引用计数法和可达性分析</p><h2 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h2><p>顾名思义，记录每一个对象的引用数，对于没有引用的清理即可</p><h2 id="可达性分析"><a href="#可达性分析" class="headerlink" title="可达性分析"></a>可达性分析</h2><h2 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h2><p>新生区中，伊甸园区和两个幸存区间中非空的将存活的对象复制到空的幸存区。其中为空的是 to ，另一个是 from </p><p>当一个对象经历15次gc仍存活进入老年区，通过 <code>-XX:MaxTenuringThreshold=5</code> 可以设置进入老年区的时间</p><ul><li>好处： 没有内存碎片</li><li>坏处：浪费了一部分空间，to是空的</li></ul><p>最佳使用场景：对象存活度较低时。</p><h2 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h2><p>对存活对象标记，然后清除</p><ul><li>优点：不需要额外空间</li><li>缺点：两次扫描费时、内存碎片</li></ul><h2 id="标记整理"><a href="#标记整理" class="headerlink" title="标记整理"></a>标记整理</h2><p>对标记清除后的整理压缩，，减少碎片</p><h2 id="分代收集"><a href="#分代收集" class="headerlink" title="分代收集"></a>分代收集</h2><p>对于新生代：使用复制算法</p><p>对于老年代：使用标记清除（整理）算法</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>内存效率：复制算法&gt;标记清除&gt;标记整理</p><p>内存整齐度：复制算法=标记整理&gt;标记清除</p><p>内存利用率：标记整理=标记清除&gt;复制算法</p><p>所以使用分代收集算法，尽可能的提高性能</p><p>（JMM指的是Java的内存模型，主要与多线程有关系，就是那8种方式）</p><p><strong>一些比较好的总结</strong>：</p><p><a href="https://www.processon.com/view/5ec5d7c60791290fe0768668">https://www.processon.com/view/5ec5d7c60791290fe0768668</a></p><p><a href="https://www.processon.com/view/60a25c38f346fb1df41ec011">https://www.processon.com/view/60a25c38f346fb1df41ec011</a></p><p><img src="https://img-blog.csdnimg.cn/20210519200638618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p><p><a href="https://blog.csdn.net/qq_42261668/article/details/109149428">对于CMS的学习</a></p><p><a href="https://www.processon.com/view/603709716376896cd606078d#map">以上内容的总结</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;script src=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>笔记-JUC学习</title>
    <link href="http://blog.31415x.cf/2021/05/19/%E7%AC%94%E8%AE%B0-JUC%E5%AD%A6%E4%B9%A0/"/>
    <id>http://blog.31415x.cf/2021/05/19/%E7%AC%94%E8%AE%B0-JUC%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-05-19T01:51:53.000Z</published>
    <updated>2021-05-19T01:52:10.867Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p><a href="https://www.bilibili.com/video/BV1B7411L7tE">学习juc时的个人笔记</a></p><h1 id="1、线程"><a href="#1、线程" class="headerlink" title="1、线程"></a>1、线程</h1><h2 id="Enum-Thread-State"><a href="#Enum-Thread-State" class="headerlink" title="Enum Thread.State"></a>Enum Thread.State</h2><blockquote><p>A thread state. A thread can be in one of the following states:<br><strong>NEW</strong><br>A thread that has not yet started is in this state.<br><strong>RUNNABLE</strong><br>A thread executing in the Java virtual machine is in this state.<br><strong>BLOCKED</strong><br>A thread that is blocked waiting for a monitor lock is in this state.<br><strong>WAITING</strong><br>A thread that is waiting indefinitely for another thread to perform a particular action is in this state.<br><strong>TIMED_WAITING</strong><br>A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.<br><strong>TERMINATED</strong><br>A thread that has exited is in this state.<br>A thread can be in only one state at a given point in time. These states are virtual machine states which do not reflect any operating system thread states.</p></blockquote><h2 id="wait-sleep区别"><a href="#wait-sleep区别" class="headerlink" title="wait/sleep区别"></a>wait/sleep区别</h2><blockquote><p>实际开发中一般使用juc.TimeUnit来休眠</p></blockquote><h3 id="来自不同类"><a href="#来自不同类" class="headerlink" title="来自不同类"></a>来自不同类</h3><ul><li>wait：object</li><li>sleep：thread</li></ul><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><ul><li>wait： 释放锁</li><li>sleep：不释放锁</li></ul><h3 id="使用范围"><a href="#使用范围" class="headerlink" title="使用范围"></a>使用范围</h3><ul><li>wait：仅能在同步代码块中使用</li><li>sleep： 任何地方</li></ul><h3 id="是否捕获异常"><a href="#是否捕获异常" class="headerlink" title="是否捕获异常"></a>是否捕获异常</h3><ul><li>wait：<del>不需要</del> （这里我查到的资料有说也需要抛出异常，有IllegalMonitorStateException和InterruptedException）</li><li>sleep：需要捕获超时等待异常</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>一般情况下，使用wait的格式是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span> (obj)&#123;<br><span class="hljs-keyword">while</span>(condition does not hold)&#123;<br>obj.wait(timeout)<br>&#125;<br><span class="hljs-comment">// ohter perform</span><br>obj.notifyAll()<br>&#125;<br></code></pre></td></tr></table></figure><p>这里使用 <code>while</code> 判断的原因是，如果使用 <code>if</code> 可能存在多个线程并发出现<strong>虚假唤醒</strong>情况。（就是多个线程在判断时满足条件，但都执行了）</p><h2 id="Threadlocal"><a href="#Threadlocal" class="headerlink" title="Threadlocal"></a>Threadlocal</h2><p>这里只是我对 threadlocal的个人理解（不保证正确）：</p><p>首先，每一个 thread 中都维护一个 threadlocalmap （这里的map并不是和hashmap一样的map，仅是相似）</p><p>其中map的每一个 Key 是所用到的 threadlocal 对象的引用，value即为threadlocal 对象所设置的共享变量的副本值</p><p>当线程要使用变量副本值时，将直接查找到对应 threadlocal 的引用对应的 entry ，然后获取到值</p><p>OOM问题：map中的entry 是一个弱引用，当 key 没有引用后就会被gc，但是value是一个强引用，所以需要手动调用 remove() 来保证使用完后销毁，否着，如果线程一直存在并且总是使用threadlocal的值， map就会越来越大，出现OOM异常</p><h2 id="普通的多线程例子"><a href="#普通的多线程例子" class="headerlink" title="普通的多线程例子"></a>普通的多线程例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.sql.Time;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br><br>        Ticket ticket = <span class="hljs-keyword">new</span> Ticket();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; ++i) &#123;<br>                    ticket.sale();<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;A&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; ++i) &#123;<br>                    ticket.sale();<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;B&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; ++i) &#123;<br>                    ticket.sale();<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;C&quot;</span>).start();<br><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ticket</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number = <span class="hljs-number">20</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (number &gt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; get &quot;</span> + (number--) + <span class="hljs-string">&quot; th&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2、LOCK"><a href="#2、LOCK" class="headerlink" title="2、LOCK"></a>2、LOCK</h1><p>创建锁的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210418104827181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""><br>默认情况下，建立的锁是 <strong>非公平锁</strong> （<code>NonfairSync()</code>）</p><ul><li>公平锁：先来后到</li><li>非公平锁：可以插队</li></ul><p>使用lock 加解锁的方式要使用trycatchfinally语句块，其中要将 <code>unlock()</code> 放在finally中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.sql.Time;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br><br>        Ticket ticket = <span class="hljs-keyword">new</span> Ticket();<br>        <span class="hljs-comment">// new Thread(()-&gt;&#123;for(int i = 0; i &lt; 20; ++i)&#123;ticket.sale();&#125;&#125;, &quot;A&quot;).start();</span><br>        <span class="hljs-comment">// new Thread(()-&gt;&#123;for(int i = 0; i &lt; 20; ++i)&#123;ticket.sale();&#125;&#125;, &quot;B&quot;).start();</span><br>        <span class="hljs-comment">// new Thread(()-&gt;&#123;for(int i = 0; i &lt; 20; ++i)&#123;ticket.sale();&#125;&#125;, &quot;C&quot;).start();</span><br><br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; ++i) &#123;<br>                    ticket.sale();<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;A&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; ++i) &#123;<br>                    ticket.sale();<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;B&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; ++i) &#123;<br>                    ticket.sale();<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;C&quot;</span>).start();<br>    &#125;<br><br>        <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ticket</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number = <span class="hljs-number">20</span>;<br>    Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span> </span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (number &gt; <span class="hljs-number">0</span>) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; get &quot;</span> + (number--) + <span class="hljs-string">&quot; th&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> handle exception</span><br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="synchronized-与-Lock的区别"><a href="#synchronized-与-Lock的区别" class="headerlink" title="synchronized 与 Lock的区别"></a>synchronized 与 Lock的区别</h2><ul><li>synchronized 内置关键字；lock是一个类</li><li>synchronized 无法判断锁的状态；lock可以判断是否获取到锁（<code>tryLock()</code>）</li><li>synchronized 会自动释放锁；lock需要通过 <code>unlock</code> 来手动释放，（不释放可能死锁）</li><li>synchronized 如果一个线程在获取到锁阻塞，其他线程会等待；lock可以使用 <code>tryLock</code> 尝试获取锁</li><li>synchronized 可重入锁，不可中断，非公平；可重入锁，可以判断中断，可以手动设置是否公平（默认构造非公平，false设置为公平）</li><li>synchronized 适合锁少量的代码同步；lock适合锁大量同步的代码（灵活）</li></ul><h2 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a>生产者消费者模型</h2><h3 id="synchronized实现"><a href="#synchronized实现" class="headerlink" title="synchronized实现"></a>synchronized实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.sql.Time;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br><br>        Data data = <span class="hljs-keyword">new</span> Data();<br>        <br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    data.inc();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-comment">// TODO Auto-generated catch block</span><br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;A&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    data.dec();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-comment">// TODO Auto-generated catch block</span><br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;B&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    data.dec();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-comment">// TODO Auto-generated catch block</span><br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;C&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    data.inc();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-comment">// TODO Auto-generated catch block</span><br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;D&quot;</span>).start();<br>        <br>    &#125;<br><br>        <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Data</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException</span>&#123;<br>        <span class="hljs-keyword">while</span>(number != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">this</span>.wait();<br>        &#125;<br>        ++number;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; -&gt; &quot;</span> + number);<br>        <span class="hljs-keyword">this</span>.notifyAll();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dec</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException</span>&#123;<br>        <span class="hljs-keyword">while</span>(number == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">this</span>.wait();<br>        &#125;<br>        --number;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; -&gt; &quot;</span> + number);<br>        <span class="hljs-keyword">this</span>.notifyAll();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（注意同步方法的写法：循环判断等待、业务、通知唤醒；其中循环判断的原因是防止出现虚假唤醒）</p><h3 id="Lock实现"><a href="#Lock实现" class="headerlink" title="Lock实现"></a>Lock实现</h3><p><img src="https://img-blog.csdnimg.cn/2021041909195555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p><p>如图，Lock相当于是synchronized，而wait和notifyAll相当于condition中的await和signal</p><p>jdk中的示例如下：</p><p><img src="https://img-blog.csdnimg.cn/2021041909223997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""><br>还是循环判断条件await等待、业务、signal唤醒（signalAll可以唤醒全部）；最后再将lock、unlock加上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.sql.Time;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br><br>        Data data = <span class="hljs-keyword">new</span> Data();<br>        <br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    data.inc();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-comment">// TODO Auto-generated catch block</span><br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;A&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    data.dec();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-comment">// TODO Auto-generated catch block</span><br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;B&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    data.dec();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-comment">// TODO Auto-generated catch block</span><br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;C&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    data.inc();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-comment">// TODO Auto-generated catch block</span><br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;D&quot;</span>).start();<br>        <br>    &#125;<br><br>        <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Data</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>    <span class="hljs-keyword">private</span> Condition condition = lock.newCondition();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException</span>&#123;<br><br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span>(number != <span class="hljs-number">0</span>)&#123;<br>                condition.await();<br>            &#125;<br>            ++number;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; -&gt; &quot;</span> + number);<br>            condition.signalAll();<br>            <br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> handle exception</span><br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            lock.unlock();<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dec</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException</span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span>(number == <span class="hljs-number">0</span>)&#123;<br>                condition.await();<br>            &#125;<br>            --number;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; -&gt; &quot;</span> + number);<br>            condition.signalAll();<br>            <br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> handle exception</span><br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多通知循环线程："><a href="#多通知循环线程：" class="headerlink" title="多通知循环线程："></a>多通知循环线程：</h3><p>即使用多个信号量来处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.sql.Time;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br><br>        Data data = <span class="hljs-keyword">new</span> Data();<br>        <br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>                    data.printA();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;A&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>                    data.printB();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;B&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>                    data.printC();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;C&quot;</span>).start();    <br>    &#125;<br><br>        <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Data</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>    <span class="hljs-keyword">private</span> Condition condition1 = lock.newCondition();<br>    <span class="hljs-keyword">private</span> Condition condition2 = lock.newCondition();<br>    <span class="hljs-keyword">private</span> Condition condition3 = lock.newCondition();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printA</span><span class="hljs-params">()</span></span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span>(number != <span class="hljs-number">1</span>)&#123;<br>                condition1.await();<br>            &#125;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;AAAAAAAAA&quot;</span>);<br>            number = <span class="hljs-number">2</span>;<br>            condition2.signal();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> handle exception</span><br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printB</span><span class="hljs-params">()</span></span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span>(number != <span class="hljs-number">2</span>)&#123;<br>                condition2.await();<br>            &#125;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;BBBBBBBBB&quot;</span>);<br>            number = <span class="hljs-number">3</span>;<br>            condition3.signal();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> handle exception</span><br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printC</span><span class="hljs-params">()</span></span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span>(number != <span class="hljs-number">3</span>)&#123;<br>                condition3.await();<br>            &#125;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;CCCCCCCCC&quot;</span>);<br>            number = <span class="hljs-number">1</span>;<br>            condition1.signal();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> handle exception</span><br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3、八锁问题"><a href="#3、八锁问题" class="headerlink" title="3、八锁问题"></a>3、八锁问题</h1><p>其实就是对 <code>synchronized</code> 所锁的情况进行讨论即可：<a href="https://blog.csdn.net/qq_31748587/article/details/105498566">参考</a></p><h1 id="4、并发集合操作"><a href="#4、并发集合操作" class="headerlink" title="4、并发集合操作"></a>4、并发集合操作</h1><p><img src="https://img-blog.csdnimg.cn/20210419165535986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><p>对于普通的集合多线程操作可能会出现 `java.util.ConcurrentModificationException`` 即 <strong>并发修改异常</strong> 如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.sql.Time;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                list.add(UUID.randomUUID().toString().substring(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>));<br>                System.out.println(list);<br>            &#125;, String.valueOf(i)).start();;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210419154616354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""><br>(可能需要多次运行才能复现，jdk版本较高的话也不容易出现，我的是jdk11）</p><p>解决方案：</p><ul><li><code>List&lt;String&gt; list = new Vector&lt;&gt;();</code> 这个是之前常用的，但是很慢（它比arraylist出现的要早）</li><li><code>List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;&gt;());</code> </li><li>JUC</li></ul><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.sql.Time;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><span class="hljs-keyword">import</span> java.util.Vector;<br><span class="hljs-keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br><br>        <span class="hljs-comment">// List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br>        <span class="hljs-comment">// List&lt;String&gt; list = new Vector&lt;&gt;();</span><br>        <span class="hljs-comment">// List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;&gt;());</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> CopyOnWriteArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                list.add(UUID.randomUUID().toString().substring(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>));<br>                System.out.println(list);<br>            &#125;, String.valueOf(i)).start();;<br>        &#125;<br>    &#125;<br><br>        <br>&#125;<br></code></pre></td></tr></table></figure><p>(在jdk11后，CopyOnWriteArrayList中的是通过 synchronized 实现的，因为 synchronized 升级了）：</p><p><img src="https://img-blog.csdnimg.cn/20210419163528257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20210419163624943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="CopyOnWriteArraySet"><a href="#CopyOnWriteArraySet" class="headerlink" title="CopyOnWriteArraySet"></a>CopyOnWriteArraySet</h2><p>同理，set：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;String&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>Set&lt;String&gt; set = Collections.synchronizedSet(<span class="hljs-keyword">new</span> HashSet&lt;&gt;());<br>Set&lt;String&gt; set = <span class="hljs-keyword">new</span> CopyOnWriteArraySet&lt;&gt;();<br></code></pre></td></tr></table></figure><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><p>map:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>Map&lt;String, String&gt; map = Collections.synchronizedMap(<span class="hljs-keyword">new</span> HashMap&lt;&gt;());<br>Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;();<br></code></pre></td></tr></table></figure><p>(不支持key、value为null)</p><h2 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h2><p>与 runnable 区别：</p><ul><li>可以有返回值</li><li>可以抛出异常</li><li>方法不同： <code>call</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;<br><span class="hljs-keyword">import</span> java.util.concurrent.CopyOnWriteArraySet;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException, ExecutionException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br>        <br>        Mythread thread = <span class="hljs-keyword">new</span> Mythread();<br>        FutureTask futureTask = <span class="hljs-keyword">new</span> FutureTask&lt;&gt;(thread);<br>        <span class="hljs-keyword">new</span> Thread(futureTask, <span class="hljs-string">&quot;A&quot;</span>).start();<br>        System.out.println(futureTask.get());<br><br>    &#125;<br><br>        <br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mythread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">String</span>&gt;</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;call....&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;233333333&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>get方法可能会阻塞</li><li>多个调用时，后调用因为状态会不执行，直接使用保存的返回值（未认真确认）</li></ul><h1 id="5、常用辅助类"><a href="#5、常用辅助类" class="headerlink" title="5、常用辅助类"></a>5、常用辅助类</h1><h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p>减法计数器，当计数器被子线程（子任务）完成后减一归零后，包含计数器的线程才会执行。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException, ExecutionException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br>        <br>        CountDownLatch countDownLatch = <span class="hljs-keyword">new</span> CountDownLatch(<span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i)&#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                System.out.println(Thread.currentThread().getName());<br>                countDownLatch.countDown();<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br>        countDownLatch.await();<br><br>        System.out.println(<span class="hljs-string">&quot;main....&quot;</span>);<br>        <br>    &#125;<br>   <br></code></pre></td></tr></table></figure><h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><p>加法计数器（每指定个数个执行一次父线程）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">CyclicBarrier cyclicBarrier = <span class="hljs-keyword">new</span> CyclicBarrier(<span class="hljs-number">7</span>, ()-&gt;&#123;<br>  System.out.println(<span class="hljs-string">&quot;main...&quot;</span>);<br>&#125;);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; ++i)&#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> tmp = i;<br>    <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; &quot;</span> + tmp);<br>        <span class="hljs-keyword">try</span> &#123;<br>            cyclicBarrier.await();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; &quot;</span> + tmp + <span class="hljs-string">&quot;....&quot;</span>);<br>    &#125;).start();<br>&#125;<br></code></pre></td></tr></table></figure><p><code>cyclicBarrier.await();</code> : 加一操作，会阻塞<br><code>new CyclicBarrier(int, runnable)</code> 初始化计数器大小，以及所有子任务执行完后要调用的线程</p><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>信号量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ExecutionException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br>        <br>        Semaphore semaphore = <span class="hljs-keyword">new</span> Semaphore(<span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)&#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    semaphore.acquire();<br>                    <span class="hljs-keyword">int</span> time = <span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">5</span>) + <span class="hljs-number">1</span>;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; acquire... for &quot;</span> + time);<br>                    TimeUnit.SECONDS.sleep(time);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-comment">// TODO Auto-generated catch block</span><br>                    e.printStackTrace();<br>                &#125;<br>                <span class="hljs-keyword">finally</span>&#123;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; release...&quot;</span>);<br>                    semaphore.release();<br>                &#125;<br>                <br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br>        <br>    &#125;<br></code></pre></td></tr></table></figure><ul><li><code>Semaphore semaphore = new Semaphore(3);</code> 创建信号量个数</li><li><code>semaphore.acquire();</code> 获取到一个信号量，</li><li><code>semaphore.release();</code> 释放</li></ul><h1 id="6、ReadWriteLock"><a href="#6、ReadWriteLock" class="headerlink" title="6、ReadWriteLock"></a>6、ReadWriteLock</h1><p>没有锁的情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ExecutionException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br>        <br>        Cache cache = <span class="hljs-keyword">new</span> Cache();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; ++i)&#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> tmp = i;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                cache.put(tmp + <span class="hljs-string">&quot;&quot;</span>, tmp + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; ++i)&#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> tmp = i;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                cache.get(tmp + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br>        <br>        <br>    &#125;<br><br>        <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cache</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(String key, Object val)</span></span>&#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; write &quot;</span> + key);<br>        map.put(key, val);<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; write done!&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get</span><span class="hljs-params">(String key)</span></span>&#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; get &quot;</span> + key);<br>        map.get(key);<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; get done!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用读写锁后可以保证并发操作的原子性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CacheLock</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-keyword">private</span> ReadWriteLock readWriteLock = <span class="hljs-keyword">new</span> ReentrantReadWriteLock();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(String key, Object val)</span></span>&#123;<br>        readWriteLock.writeLock().lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; write &quot;</span> + key);<br>            map.put(key, val);<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; write done!&quot;</span>);<br>            <br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> handle exception</span><br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            readWriteLock.writeLock().unlock();<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get</span><span class="hljs-params">(String key)</span></span>&#123;<br>        readWriteLock.readLock().lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; get &quot;</span> + key);<br>            map.get(key);<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; get done!&quot;</span>);<br>            <br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> handle exception</span><br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            readWriteLock.readLock().unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实也就是之前 lock中的一种更加具体的所得使用。这里对于写操作，使用写锁，保证每一个线程的写操作是原子性的，不会被其他写操作插队。对于读操作，使用锁的目的是不会出现写操作时读数据出现幻读。即写锁未独占锁，读锁未共享锁。</p><h1 id="7、阻塞队列-BlockingQueue"><a href="#7、阻塞队列-BlockingQueue" class="headerlink" title="7、阻塞队列 BlockingQueue"></a>7、阻塞队列 BlockingQueue</h1><p>阻塞队列的四种方式：</p><div class="table-container"><table><thead><tr><th>方式</th><th>抛出异常</th><th>有返回值，但不抛出异常</th><th>阻塞并等待</th><th>超时等待</th></tr></thead><tbody><tr><td>添加</td><td>add()</td><td>offer()</td><td>put()</td><td>offer(时间)</td></tr><tr><td>移除</td><td>remove()</td><td>poll()</td><td>take()</td><td>poll(时间)</td></tr><tr><td>队首</td><td>element</td><td>peek()</td><td>-</td><td>-</td></tr></tbody></table></div><h1 id="8、SynchronousQueue"><a href="#8、SynchronousQueue" class="headerlink" title="8、SynchronousQueue"></a>8、SynchronousQueue</h1><p>同步队列，只能放入一个元素，再取走后才能继续放入。</p><h1 id="9、线程池"><a href="#9、线程池" class="headerlink" title="9、线程池"></a>9、线程池</h1><p>线程池的好处：</p><ul><li>降低资源消耗</li><li>提高响应速度</li><li>方便管理</li></ul><p>即，线程复用、控制最大并发数、管理线程</p><p>线程池的主要知识点: 三大方法、七大参数、四种拒绝策略</p><h2 id="三大方法"><a href="#三大方法" class="headerlink" title="三大方法"></a>三大方法</h2><p>（注意，线程池的创建在项目中一般是不允许使用 <code>Excutors</code> 来创建，因为 <code>FixedThreadPool</code> 和 <code>SingleThreadPool</code> 允许的请求队列长度最大为intmax；其次 <code>CacheThreadPool</code> 和 <code>ScheduledThreadPool</code> 允许创建的线程数为 intmax 可能创建大量线程；两者都会导致OOM，故建议使用 <code>ThreadPoolExecutor</code>）</p><p>三种基本的实现方式是:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ExecutorService threadPool = Executors.newSingleThreadExecutor();       <span class="hljs-comment">// 单个线程池</span><br>ExecutorService threadPool = Executors.newFixedThreadPool(<span class="hljs-number">5</span>);           <span class="hljs-comment">// 指定大小的线程池</span><br>ExecutorService threadPool = Executors.newCachedThreadPool();           <span class="hljs-comment">// 可自动扩充的线程池</span><br></code></pre></td></tr></table></figure><p>添加线程的方式是: <code>threadPool.execute(Runnable);</code></p><p>最后要在结束处使用 <code>threadPool.shutdown();</code> 关闭线程池</p><h2 id="七大参数"><a href="#七大参数" class="headerlink" title="七大参数"></a>七大参数</h2><p>首先对于以上三种创建线程池的方式，查看其具体实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title">newSingleThreadExecutor</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FinalizableDelegatedExecutorService<br>        (<span class="hljs-keyword">new</span> ThreadPoolExecutor(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<br>                                <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                <span class="hljs-keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title">newFixedThreadPool</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nThreads)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,<br>                                    <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                    <span class="hljs-keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title">newCachedThreadPool</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ThreadPoolExecutor(<span class="hljs-number">0</span>, Integer.MAX_VALUE,<br>                                    <span class="hljs-number">60L</span>, TimeUnit.SECONDS,<br>                                    <span class="hljs-keyword">new</span> SynchronousQueue&lt;Runnable&gt;());<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出，具体的实现方式都是通过 <code>ThreadPoolExecutor</code> 这个方法实现的，仅仅是调用时的参数不同，其参数共有<strong>七个</strong>，查看其实际的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> corePoolSize,             // 核心线程池大小</span></span><br><span class="hljs-function"><span class="hljs-params">                            <span class="hljs-keyword">int</span> maximumPoolSize,        // 最大核心线程池大小</span></span><br><span class="hljs-function"><span class="hljs-params">                            <span class="hljs-keyword">long</span> keepAliveTime,         // 超时时没有调用释放</span></span><br><span class="hljs-function"><span class="hljs-params">                            TimeUnit unit,              // 超时单位</span></span><br><span class="hljs-function"><span class="hljs-params">                            BlockingQueue&lt;Runnable&gt; workQueue,  // 阻塞队列</span></span><br><span class="hljs-function"><span class="hljs-params">                            ThreadFactory threadFactory,    // 线程工厂，一般使用默认的</span></span><br><span class="hljs-function"><span class="hljs-params">                            RejectedExecutionHandler handler // 拒绝策略)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (corePoolSize &lt; <span class="hljs-number">0</span> ||<br>        maximumPoolSize &lt;= <span class="hljs-number">0</span> ||<br>        maximumPoolSize &lt; corePoolSize ||<br>        keepAliveTime &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>    <span class="hljs-keyword">if</span> (workQueue == <span class="hljs-keyword">null</span> || threadFactory == <span class="hljs-keyword">null</span> || handler == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>    <span class="hljs-keyword">this</span>.corePoolSize = corePoolSize;<br>    <span class="hljs-keyword">this</span>.maximumPoolSize = maximumPoolSize;<br>    <span class="hljs-keyword">this</span>.workQueue = workQueue;<br>    <span class="hljs-keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);<br>    <span class="hljs-keyword">this</span>.threadFactory = threadFactory;<br>    <span class="hljs-keyword">this</span>.handler = handler;<br>&#125;<br></code></pre></td></tr></table></figure><p>整个线程池的结构大致如下：<br><img src="https://img-blog.csdnimg.cn/20210420224435631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p><p>其中核心线程数表示的就是当前可以使用的线程资源，最大线程数就是最多可以使用的线程资源<br>阻塞队列是一个暂存区域</p><p>当任务到来时，如果核心线程数的线程资源可以使用，就直接使用即可，<br>如果都在使用，这时会添加到阻塞队列中，<br>如果阻塞队列也满了，并且核心线程数未达到最大线程数，此时扩大核心线程数<br>如果此时全都满了，线程池都在使用、阻塞队列满了，此时会根据预先设定的拒绝策略来进行操作（即最大承载量为队列容量+最大核心线程数）</p><p>超时时间是指，当并发量减少后，一定时间里没有任务添加，，会收回大与核心线程数的资源</p><h2 id="四种拒绝策略"><a href="#四种拒绝策略" class="headerlink" title="四种拒绝策略"></a>四种拒绝策略</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> ThreadPoolExecutor.AbortPolicy(): 不处理，抛出异常<br><span class="hljs-keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy()：哪来去哪，让线程调用者处理<br><span class="hljs-keyword">new</span> ThreadPoolExecutor.DiscardPolicy()：不处理，不抛出异常<br><span class="hljs-keyword">new</span> ThreadPoolExecutor.DiscardOldestPolicy()：替换最早的，不抛出异常<br></code></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ExecutorService threadPool = <span class="hljs-keyword">new</span> ThreadPoolExecutor(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, TimeUnit.SECONDS, <span class="hljs-keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="hljs-number">3</span>), Executors.defaultThreadFactory(), <span class="hljs-keyword">new</span> ThreadPoolExecutor.DiscardOldestPolicy());<br></code></pre></td></tr></table></figure><h2 id="CPU密集型和IO密集型"><a href="#CPU密集型和IO密集型" class="headerlink" title="CPU密集型和IO密集型"></a>CPU密集型和IO密集型</h2><p>最大线程如何定义：</p><p>看情况，看当前使用到线程池的任务情况，</p><ul><li>如果是 CPU密集型的任务，可以动态获取当前代码运行环境的CPU核数来设置为最大线程数： <code>Runtime.getRuntime().availableProcessors()</code></li><li>如果是 IO密集型任务，即有很多需要IO操作的任务，可以设置为IO任务数两倍左右</li></ul><h1 id="10、四大函数式接口"><a href="#10、四大函数式接口" class="headerlink" title="10、四大函数式接口"></a>10、四大函数式接口</h1><p><del>lambda表达式、链式编程、函数式接口、stream流式计算</del> </p><p>四大原生函数式接口：</p><p>Function<br>Consumer<br>Predicate<br>Supplier</p><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p><img src="https://img-blog.csdnimg.cn/20210422100624276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""><br>传入参数T，返回R类型结果，及一个函数 R=T，使用时重写 apply即可（如同使用runnable接口重写run方法一样）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">Function&lt;String, Integer&gt; function = <span class="hljs-keyword">new</span> Function&lt;String,Integer&gt;()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">apply</span><span class="hljs-params">(String t)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> t.hashCode();<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// Function&lt;String, Integer&gt; function = (str)-&gt;&#123;</span><br><span class="hljs-comment">//     return str.hashCode();</span><br><span class="hljs-comment">// &#125;;</span><br><br>System.out.println(function.apply(<span class="hljs-string">&quot;2333&quot;</span>));<br></code></pre></td></tr></table></figure><p>（因为是函数式接口，所以可以使用lambda简化）</p><h2 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h2><p><img src="https://img-blog.csdnimg.cn/20210422101243962.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""><br>断定性接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Predicate&lt;String&gt; predicate = <span class="hljs-keyword">new</span> Predicate&lt;String&gt;()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">test</span><span class="hljs-params">(String t)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (t != <span class="hljs-keyword">null</span> &amp;&amp; !t.isEmpty());<br>    &#125;<br>&#125;;<br><span class="hljs-comment">// Predicate&lt;String&gt; predicate = (str)-&gt;&#123;</span><br><span class="hljs-comment">//     return (str != null &amp;&amp; !str.isEmpty());</span><br><span class="hljs-comment">// &#125;;</span><br>System.out.println(predicate.test(<span class="hljs-string">&quot;2333&quot;</span>));<br>System.out.println(predicate.test(<span class="hljs-string">&quot;&quot;</span>));<br></code></pre></td></tr></table></figure><h2 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h2><p><img src="https://img-blog.csdnimg.cn/2021042210212370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p><p>消费型接口，只有一个参数，没有返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Consumer&lt;String&gt; consumer = <span class="hljs-keyword">new</span> Consumer&lt;String&gt;()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(String t)</span> </span>&#123;<br>        System.out.println(t);<br>    &#125;<br>&#125;;<br><span class="hljs-comment">// Consumer&lt;String&gt; consumer = (str)-&gt;&#123;System.out.println(str);&#125;;</span><br>consumer.accept(<span class="hljs-string">&quot;2333333&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h2><p><img src="https://img-blog.csdnimg.cn/20210422102436556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>供给式接口，仅有返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">Supplier&lt;String&gt; supplier = <span class="hljs-keyword">new</span> Supplier&lt;String&gt;()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;get&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;233333333&quot;</span>;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">// Supplier&lt;String&gt; supplier = ()-&gt;&#123;return &quot;233333333&quot;;&#125;;</span><br>System.out.println(supplier.get());<br></code></pre></td></tr></table></figure><h2 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br>        <br>        User u1 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;AA&quot;</span>, <span class="hljs-number">20</span>);<br>        User u2 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;BB&quot;</span>, <span class="hljs-number">21</span>);<br>        User u3 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;CC&quot;</span>, <span class="hljs-number">22</span>);<br>        User u4 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;DD&quot;</span>, <span class="hljs-number">23</span>);<br>        User u5 = <span class="hljs-keyword">new</span> User(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;EE&quot;</span>, <span class="hljs-number">24</span>);<br>        List&lt;User&gt; list = Arrays.asList(u1, u2, u3, u4, u5);<br>        list.stream()<br>            .filter(u-&gt;&#123;<span class="hljs-keyword">return</span> u.getId() % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>;&#125;)<br>            .filter(u-&gt;&#123;<span class="hljs-keyword">return</span> u.getAge() &gt; <span class="hljs-number">21</span>;&#125;)<br>            .map(u-&gt;&#123;<span class="hljs-keyword">return</span> u.getName().toLowerCase();&#125;)<br>            .forEach(System.out::println);<br>        <br>    &#125;<br><br>        <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">int</span> id;<br>    String name;<br>    <span class="hljs-keyword">int</span> age;<br>    User(<span class="hljs-keyword">int</span> id, String name, <span class="hljs-keyword">int</span> age)&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[user: &quot;</span> + <span class="hljs-string">&quot;id: &quot;</span> + id + <span class="hljs-string">&quot;, name: &quot;</span> + name + <span class="hljs-string">&quot;, age: &quot;</span> + age + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="11、ForkJoin"><a href="#11、ForkJoin" class="headerlink" title="11、ForkJoin"></a>11、ForkJoin</h1><p>分治思想，将大任务拆分为小任务操作，适合大数据处理情景</p><p><img src="https://img-blog.csdnimg.cn/20210424100651478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""><br>forkjoin：工作窃取，当某个任务执行完毕后，他会窃取其他未完成的任务，提高效率：</p><p><img src="https://img-blog.csdnimg.cn/20210424100846913.png" alt=""></p><p>使用：</p><ul><li>forkjoinpool</li><li>forkjoinpool.executor(forkjointask)</li><li>继承forkjointask，重写compute方法，使用fork,join计算</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><span class="hljs-keyword">import</span> java.util.concurrent.ForkJoinPool;<br><span class="hljs-keyword">import</span> java.util.concurrent.RecursiveTask;<br><span class="hljs-keyword">import</span> java.util.stream.LongStream;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> END = <span class="hljs-number">10_0000_0000L</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException, ExecutionException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br>        <br>        test1();<br>        test2();<br>        test3();<br>        <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <span class="hljs-keyword">long</span> sum = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i = <span class="hljs-number">1</span>; i &lt;= END; ++i)&#123;<br>            sum += i;<br>        &#125;<br>        <br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;sum: &quot;</span> + sum + <span class="hljs-string">&quot; time: &quot;</span> + (end - start));<br>    &#125;<br>    <span class="hljs-comment">// forkjoin</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException, ExecutionException</span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <br>        <span class="hljs-keyword">long</span> sum = <span class="hljs-number">0</span>;<br>        ForkJoinPool forkJoinPool = <span class="hljs-keyword">new</span> ForkJoinPool();<br>        sum = forkJoinPool.submit(<span class="hljs-keyword">new</span> ForkJoinDemo(<span class="hljs-number">0</span>, END)).get();<br><br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;sum: &quot;</span> + sum + <span class="hljs-string">&quot; time: &quot;</span> + (end - start));<br>    &#125;<br>    <span class="hljs-comment">//并行流 </span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <span class="hljs-keyword">long</span> sum = LongStream.rangeClosed(<span class="hljs-number">0</span>, END).parallel().reduce(<span class="hljs-number">0</span>, Long::sum);<br><br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;sum: &quot;</span> + sum + <span class="hljs-string">&quot; time: &quot;</span> + (end - start));<br>    &#125;<br><br>        <br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ForkJoinDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RecursiveTask</span>&lt;<span class="hljs-title">Long</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> start;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> end;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> temp = <span class="hljs-number">10000</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ForkJoinDemo</span><span class="hljs-params">(<span class="hljs-keyword">long</span> start, <span class="hljs-keyword">long</span> end)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.start = start;<br>        <span class="hljs-keyword">this</span>.end = end;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Long <span class="hljs-title">compute</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>((end - start) &lt;= temp)&#123;<br>            <span class="hljs-keyword">long</span> sum = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i = start; i &lt;= end; ++i)&#123;<br>                sum += i;<br>            &#125;<br>            <span class="hljs-keyword">return</span> sum;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">long</span> mid = (start + end) / <span class="hljs-number">2</span>;<br>            ForkJoinDemo task1 = <span class="hljs-keyword">new</span> ForkJoinDemo(start, mid);<br>            ForkJoinDemo task2 = <span class="hljs-keyword">new</span> ForkJoinDemo(mid + <span class="hljs-number">1</span>, end);<br>            task1.fork();<br>            task2.fork();<br>            <span class="hljs-keyword">return</span> task1.join() + task2.join();<br><br>        &#125;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210424164415157.png" alt=""></p><p>并行流最快，其次是forkjoin，最后是普通方法。</p><h1 id="12、异步调用"><a href="#12、异步调用" class="headerlink" title="12、异步调用"></a>12、异步调用</h1><p>使用 <code>CompletableFuture</code> 可以实现异步调用（即实现类似ajax的带有返回值的异步调用）</p><h1 id="13、JMM"><a href="#13、JMM" class="headerlink" title="13、JMM"></a>13、JMM</h1><h2 id="关于JMM的一些同步约定"><a href="#关于JMM的一些同步约定" class="headerlink" title="关于JMM的一些同步约定"></a>关于JMM的一些同步约定</h2><ul><li>线程解锁前，必须把共享变量立刻刷回主存（线程工作时，回将共享变量从主存拷贝到自己的工作内存空间中，间接操作变量）</li><li>线程加锁前，必须读取主存中的最新值到工作内存中</li><li>加锁解锁是用一把锁</li></ul><h2 id="JMM中的八种操作"><a href="#JMM中的八种操作" class="headerlink" title="JMM中的八种操作"></a>JMM中的八种操作</h2><p><img src="https://img-blog.csdnimg.cn/20210424182409571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""><br><del>（write和store反了）</del></p><p>因为各操作不是原子性的，所以可能出现主存值与线程的工作内存中的值不同的情况：<br><img src="https://img-blog.csdnimg.cn/20210424182635814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p><ul><li><strong>lock（锁定）</strong>：作用于主内存的变量，把一个变量标识为一条线程独占状态。</li><li><strong>unlock（解锁）</strong>：作用于主内存变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</li><li><strong>read（读取）</strong>：作用于主内存变量，把一个变量值从主内存传输到线程的工作内存中，以便随后的load动作使用</li><li><strong>load（载入）</strong>：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。</li><li><strong>use（使用）</strong>：作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时将会执行这个操作。</li><li><strong>assign（赋值）</strong>：作用于工作内存的变量，它把一个从执行引擎接收到的值赋值给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</li><li><strong>store（存储）</strong>：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的write的操作。</li><li><strong>write（写入）</strong>：作用于主内存的变量，它把store操作从工作内存中一个变量的值传送到主内存的变量中。</li></ul><p>Java内存模型还规定了在执行上述八种基本操作时，必须满足如下规则：</p><ul><li>如果要把一个变量从主内存中复制到工作内存，就需要按顺寻地执行read和load操作， 如果把变量从工作内存中同步回主内存中，就要按顺序地执行store和write操作。但Java内存模型只要求上述操作必须按顺序执行，而没有保证必须是连续执行。</li><li>不允许read和load、store和write操作之一单独出现</li><li>不允许一个线程丢弃它的最近assign的操作，即变量在工作内存中改变了之后必须同步到主内存中。</li><li>不允许一个线程无原因地（没有发生过任何assign操作）把数据从工作内存同步回主内存中。</li><li>一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量。即就是对一个变量实施use和store操作之前，必须先执行过了assign和load操作。</li><li>一个变量在同一时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。lock和unlock必须成对出现</li><li>如果对一个变量执行lock操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前需要重新执行load或assign操作初始化变量的值</li><li>如果一个变量事先没有被lock操作锁定，则不允许对它执行unlock操作；也不允许去unlock一个被其他线程锁定的变量。</li><li>对一个变量执行unlock操作之前，必须先把此变量同步到主内存中（执行store和write操作）。</li></ul><h1 id="14、volatile"><a href="#14、volatile" class="headerlink" title="14、volatile"></a>14、volatile</h1><p><code>volatile</code> 是Java虚拟机的一个轻量级的 <strong>同步机制</strong>：</p><ul><li>保证可见性（即线程读取修饰的变量都会从主内存中读取，而不是直接使用工作内存中的副本）</li><li>不保证原子性（可以使用synchronized、lock、atomic解决）</li><li>禁止指令重排（通过内存屏障实现）</li></ul><p>使用atomic实现原子性的 <code>num++</code> 操作：</p><p>其内部实现是通过unsafe类中的一些 cas操作实现，对内存修改值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> AtomicInteger num = <span class="hljs-keyword">new</span> AtomicInteger();<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>&#123;<br>        num.getAndIncrement();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException, ExecutionException </span>&#123;<br>        <span class="hljs-comment">// BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br>        <span class="hljs-comment">// String par[] = bf.readLine().trim().split(&quot; &quot;);</span><br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; ++i)&#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">20000</span>; ++j)&#123;<br>                    add();<br>                &#125;<br>            &#125;).start();<br>        &#125;<br>        <span class="hljs-keyword">while</span>(Thread.activeCount() &gt;= <span class="hljs-number">2</span>);<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; num: &quot;</span> + num);<br>        <br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="15、单例模式"><a href="#15、单例模式" class="headerlink" title="15、单例模式"></a>15、单例模式</h1><h2 id="饿汉式单例模式"><a href="#饿汉式单例模式" class="headerlink" title="饿汉式单例模式"></a>饿汉式单例模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hungry</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Hungry HUNGRY = <span class="hljs-keyword">new</span> Hungry();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">byte</span>[] data1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">byte</span>[] data2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">byte</span>[] data3 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Hungry</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Hungry <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.HUNGRY;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>缺点：启动时就加载，可能会造成内存空间的浪费</p><h2 id="懒汉式单例模式"><a href="#懒汉式单例模式" class="headerlink" title="懒汉式单例模式"></a>懒汉式单例模式</h2><p>普通的饿汉模式在多线程的情况下会失效：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazyMan</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> LazyMan LAZYMAN;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">LazyMan</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(Thread.currentThread().getName());<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazyMan <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(LAZYMAN == <span class="hljs-keyword">null</span>)&#123;<br>            LAZYMAN = <span class="hljs-keyword">new</span> LazyMan();<br>        &#125;<br>        <span class="hljs-keyword">return</span> LAZYMAN;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一种解决方式就是对 <code>getInstance()</code> 加锁，即使用 双重检验+volatile实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// DCL实现</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazyMan</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> LazyMan LAZYMAN;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">LazyMan</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(Thread.currentThread().getName());<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazyMan <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(LAZYMAN == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span>(LazyMan.class)&#123;<br>                <span class="hljs-keyword">if</span>(LAZYMAN == <span class="hljs-keyword">null</span>)&#123;<br>                    LAZYMAN = <span class="hljs-keyword">new</span> LazyMan();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> LAZYMAN;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中使用 <code>synchronized</code> 来加锁同步整个类对象；</p><p>同时使用 <code>volatile</code> 保证在实例化过程中的指令不重排：实例化对象过程并不是原子操作，有很多指令实现，如：</p><ul><li>分配内存空间</li><li>执行构造方法，初始化对象</li><li>将对象指向内存空间</li></ul><p>如果进行指令重排，可能会出现先指向内存地址，在初始化的情况，此时如果在操作中间访问，对象是不为null的，直接返回的结果就是一个为初始化构造的对象</p><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><p>基于类加载机制的懒汉模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazyMan</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InnerClass</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> LazyMan LAZYMAN = <span class="hljs-keyword">new</span> LazyMan();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">LazyMan</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazyMan <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> InnerClass.LAZYMAN;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上几种对于反射机制不安全：<br><img src="https://img-blog.csdnimg.cn/20210424222408858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>可以使用枚举类来实现单例模式，保证不会被反射实例化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// enum:</span><br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">LazyMan</span></span>&#123;<br>    INSTANCE;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> LazyMan <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>原因：<br>反射类中实例化时会判断是否为枚举类的反射：<br><img src="https://img-blog.csdnimg.cn/20210424223951558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p><p><strong>注意</strong> 此处如要使用枚举类进行反射测试：<br><img src="https://img-blog.csdnimg.cn/20210424223629621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p><p>反射构造器的参数不能为空或null，必须为 <code>String.class, int.class</code>，否则此时异常为：<br><img src="https://img-blog.csdnimg.cn/2021042422374276.png" alt=""><br>而不是因为枚举类反射实例化所抛出的异常：<br><img src="https://img-blog.csdnimg.cn/20210424223813371.png" alt=""></p><p>因为enum实际会产生一个 <code>String.class, int.class</code> 为形参的构造器，而不是空的构造器，这里需要通过 jdx来查看反汇编后的代码</p><p><a href="https://www.bilibili.com/video/BV1B7411L7tE?p=33">更加具体的讲解强烈建议观看此视频：</a></p><h1 id="16、CAS"><a href="#16、CAS" class="headerlink" title="16、CAS"></a>16、CAS</h1><p>比较并交换：当所期望的值相同时才进行更新：<code>compareAndSet</code></p><p>底层是通过c++编写的更靠近底层的代码实现（具体到CPU指令，unsafe类）</p><p>例如 atomicInteger中的加一线程安全的加一操作的内部实现是通过 cas自旋实现（注意不同jdk源码可能不一致）：</p><p><img src="https://img-blog.csdnimg.cn/20210425165210230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""><br>其中while就是一种自旋操作，通过循环判断来实现一种比加锁效率更高的方式；字段解释：判断 o 对象中偏移值为 offset处的数据值是否为 v ，如果是就加 delta 。这种实现方式就是自旋锁。</p><p>总结：CAS是不断比较当前内存中的值和期望的值是否一致，如果一致，则进行set操作；如果不一致就通过循环实现自旋。</p><p>缺点：</p><ul><li>循环会有一定的耗时</li><li>一次仅能保证对一个共享变量的原子性</li><li>ABA问题</li></ul><h2 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h2><p>ABA问题就是指，多个线程对共享变量进行操作，其中A和B都读取到变量a=1，但是B线程做了两次操作：a=3，a=1，对于A线程来说，可能并不知道A在期间被修改过（狸猫换太子）</p><p><img src="https://img-blog.csdnimg.cn/20210425181058287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="解决方式：原子引用"><a href="#解决方式：原子引用" class="headerlink" title="解决方式：原子引用"></a>解决方式：原子引用</h2><p>通过使用一个带有时间戳（版本号）的原子引用即可以解决ABA问题，思想是 <em>乐观锁</em>  </p><p>原子引用： <code>AtomicStampedReference</code> 来实现，可以通过获取当前的stamp来保证不会出现ABA问题</p><h1 id="17、锁"><a href="#17、锁" class="headerlink" title="17、锁"></a>17、锁</h1><h2 id="公平锁、非公平锁"><a href="#公平锁、非公平锁" class="headerlink" title="公平锁、非公平锁"></a>公平锁、非公平锁</h2><ul><li>公平锁： 非常公平，不可以插队，即必须按照先来后到执行</li><li>非公平锁：非常不公平，可以插队（默认的锁是非公平锁）</li></ul><h2 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h2><p>可重入锁即当调用加锁的方法后，该方法又调用其他方法，相当于加锁多次，但不产生死锁；某个线程获取某个锁后，可以再次获取锁而不死锁。即可理解为一种递归锁，外层函数获取锁，内层函数自动获取，解决死锁。</p><p>对于 <code>synchronized</code> 的可重入锁直接使用即可，对于 <code>Lock</code> 的锁，需要保证前后加解锁次数一致，否则会出现死锁现象。</p><h2 id="自旋锁-spinlock"><a href="#自旋锁-spinlock" class="headerlink" title="自旋锁 spinlock"></a>自旋锁 spinlock</h2><p>就是通过一个循环CAS操作实现自旋，使用循环来代替加解锁的较低效操作。</p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p><strong>多线程下</strong>出现：</p><ul><li>互斥</li><li>循环等待</li><li>请求与保持</li><li>不可剥夺</li></ul><ul><li>（查看Java的进程可以使用 <code>jps</code> 命令）</li><li>使用 <code>jstack</code> 可以查看进程的堆栈信息，可以发现死锁等</li></ul><h1 id="18、AQS"><a href="#18、AQS" class="headerlink" title="18、AQS"></a>18、AQS</h1><p>这里我只是简单的学习了一下，具体的学习建议查看其它博主的学习笔记。</p><p>AQS 即 抽象 队列 同步器</p><p>是juc包中几乎所有类的基础，可以实现独占锁（lock）或者是共享锁（信号量、计数器等等）</p><p>他的内部结构主要有一个 state 状态、一个 CLH队列</p><p>原理：</p><p>当新增一个线程时，首先会尝试获取资源，如果可以获取到 state 会为1，当然因为可重入原因，同一个线程多次获取会增加</p><p>如果再来多个线程，此时会通过 封装为一个 node 节点，插入队列后，同时设定自身的状态，等待唤醒</p><p>当头节点的下一个节点（即头节点为空节点）使用完毕资源并释放后，他会从后往前找到最近的一个可以获取资源的线程，并唤醒，同时设置后继等待状态，如此循环下去，实现多线程对资源的操作。</p><p>所有操作都是CAS实现的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;script src=&quot;</summary>
      
    
    
    
    
    <category term="Java" scheme="http://blog.31415x.cf/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>笔记-从量化宽松到当今世界的金融游戏</title>
    <link href="http://blog.31415x.cf/2021/05/16/%E7%AC%94%E8%AE%B0-%E4%BB%8E%E9%87%8F%E5%8C%96%E5%AE%BD%E6%9D%BE%E5%88%B0%E5%BD%93%E4%BB%8A%E4%B8%96%E7%95%8C%E7%9A%84%E9%87%91%E8%9E%8D%E6%B8%B8%E6%88%8F/"/>
    <id>http://blog.31415x.cf/2021/05/16/%E7%AC%94%E8%AE%B0-%E4%BB%8E%E9%87%8F%E5%8C%96%E5%AE%BD%E6%9D%BE%E5%88%B0%E5%BD%93%E4%BB%8A%E4%B8%96%E7%95%8C%E7%9A%84%E9%87%91%E8%9E%8D%E6%B8%B8%E6%88%8F/</id>
    <published>2021-05-16T14:05:19.000Z</published>
    <updated>2021-05-16T14:06:17.382Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="58c11c1ea371ab02bf55c5dca2678e3a3e6ba033c8bae2499a6b12a11f11c7d8">351fea9dffbb0cf1ff6c6b27295278ba964573ac3f9c1c2b81d357804ee9a3b63deed544aea779b1f5f5fb347342e231ccb28751fedd70754c5bac472aaa11c836c8cf38fc8ba8be3ff6fa26d28b71c9c9d14279fc361045978362034fbcd869c9a268710118709d1ddba4d5096221d1ae7e6b34948534e47251dcf7a739905049f0cca2328add89b9c3e82d5cfb2563ca4e075a374879fcb3fff85468582881410e35f8c7341cc43d6383dbd8adfb15a591e80df994bf9e944a7b8de29e37c82ba6a7468345de04c98cb9559859fab4c1f52eb847dea06829a485a93916890a605ff79f12bfbeaabf2dbc8609574406ca53dc90589cd58ce5444ddd83a7d6260b6a758d9323c2102502f5a1d7337ed4fcb83c4e91472e09233527057faf024e9697baa9a974fc0b9bbdd427107762268383d99ed19031bedc60e855e2b8f586c5822ae31070d7a098f86aa583c8620b241df603575eb587fa6a2cc83d61610019a04379a41f36958952fea8b6b73b54d55fbcaaa144b58d7c78a5a1a042a45d6f938c44241e3bb084f46257a1c8dd8414f4e7661a35f2d3e95e67710279c9cc8a4efe6fe0f5c23dcb961d1c12bb612fd4810bc4db759ec2bb62e74229d5ccd9a7fd8a16b9539af0b55dcc35f9fe3ed48a5dc2c447e51402faba7570a60d1abd609ecbde3aa1360eed52c93174eda68f4384b22f238e768eec8959a15a0bf18ca03ecbfebec158312da71c061566867a4d695e2e915a150516a237ab20556a740531ef0890fa1739e3e8522b7270a2fa97fba2a663e4ef98476826b9fdefaf492609560d3a5ebb338e099e51283d5223c934344bed6194990683f5f734ef0bbbb1d19fc26d77a03dc6820fcd5bfae95ad78ffdefb1eb47a3a73236ca1f5f2bddd987e92a86ab4e0f462140d6b10e0b233ea119be5c5c1c079278a17dbe4a19bf9e4ec12787eec1952209ec674dfacc9b630fee50822c849b51538e4f37d7e479bb0bf3d47e363e3a394ebdf44305e322b250ee5ee35844a3df5e7415e3d36ab7428549ff8e6b8165859828c15a0bd5cfecd8c5c04bdfc5bc15b9806fc291f5130493089122bec2e8a349d38ecb884ecd2ff0d003de2e7daec18f06ab8e7698f1591799c2148d2ad222b049b8008699e60994d138419235d918322ab5a8d5dc7c9fc0a8c396683d54666bfe41a52e744d133d6afddb5a54e54a5ae92374af707ff33aac3f7f36384d918da299f546bdf5c9f6970b2e5c7ed173617f238c9b031d2cbc84d28988fdd2bcd84d9c8bb79605137314355fcd48209a6f87f04e63e1d45f35bf36e9809a1f7947be7349729ac4134d9a35b13162f9b8290085e0d9e2858cd73d8644858b647c6152bf9f8b333040670eded42afc4260f675955da6e1a75345bcd73e686117e6cc6c9ceb161cf36d39f5a0e03ab041fdf298f279c5c659a6f6e37a6cd13264b7c991a844755d092bbf72c2fa349ee2de8edd0268f82d34d4a534c1c11911b8b1323372821fb6d60336e6d7d3280fcab6a81a1590a4766e0f1416ee0d80ec05a34a3500397f4fbd1e0b71bf483d4313c7a9c7d906605a425961a9c79aa771d8adc5b22cd83e49f1446d430e003dba2ccd8f1864cbceec272a2a3ab58b8d7fa6f6b09f5f90bda0ba6ff08d634d11a2c13c6ab589adca3c12957d7a8b02dea2c84f9f0ca003cc14700dc4077272bd5385f0f3da6dd0db918d25f32164be6e0c3cebe245498d0ae5c4ad9fbf2fb2a865490800691c9fbdb2f60c7bb94ce10de07e5a72dd3ef564dcd0bdb9366626b148de359833517d5c0fd814f770277b8f157b59d39d61d795a34d2d4e3af9968ac40eeec2e1cb160998e6fbada59c9314d30c7ab72d511767e9362683d2ccfa8cb5e5491dced9e5d33463a649390a61fc6aad92c78ce734a8e79eafd2248b726225011a1edd0808b6071c70b2ef1fe7a682f86848e69396b4da4426c64751eb45658fe38a700455801f50900a8cc19f9b07a8e59aa51f85cd618bbb8eb32142b8f85b1bfd297494e201de30ccaddcaf7ddc6f7c10b996e9c0b536ae2f1ebefed3d20140430757749fde2c4a78ecf4274f02b0b55f7b1b8a77b7b4760eaad0e26ff6b6d4cb1b211b5440d2f5992ccd81f3ca55e05259ab50d9c66b15854b328efa354d03290909dc54a85883100596cf55f5a472a8fd8dfbe46fe3b3feccdac3fb8a6e8604f115dda0641d95c1ceb4db26907188095272b0fffd8eb2c76301cd4cfbed348857ae9164d42caff18532518da6c650a98b64f5ba23ab201bb6fee17f10522d3d17747d462b30d3f8ae1db65bca255b545df8dc9422f6aaca4b1a1a5274b0de28f9abb7d9b97caca4302fe3d5c2689004b668e60d226edab99a096c83cca539f4eb786b64a6ef3d0a873565005c92b324e98bea55b9677f236f0e5eebb6aee091b20fc8091b97c901313e6b34e9bbf2a44194b83d2ea9904321f9840aeedad0e666013f36a16e5f14d6664231b356e66ae21d84d3e16a2f35f75f15ade26c2fb137be5017bff01def4e82156b52644dafd8931626b3767e9bfcdb20d503d56dc62671753dc41341cd2a1536d96d93e7d02867363c63f4649cd5d21c5d07c011f2dce9a624087e0caaf291d5258e5f3eebfe226eb3259c7df77ed0c4deaa72c3e864e386f0a6b7c6db58e5547259c12b4a804bb9981555178aceac9fd6a7c65d6875d8deac1d80bc49bace8c6defd18401f313d0ff62ad7ba1965b139894b38509b5003672949ff823e40651598a705a8f8baa41468b566abb3565f6944f6d2dfbfde213a739036b175b9cd1c3fd0c09abba24b3321ac95bfe5b739f5198ac6c5c23f467c0172d2a544ec4a7304e16dd2eb33baee5bb8377e46cf59ce0f7a3a0a0ff9590a2d9e609b3ebe6a02e4b3e407d8c02ace05b6a32c7307ca5b75101eb020bb865155fc062ac914c9c70a73460f26f9dcfbff28f0626ef391b3f5ae7225a2670ec75037ac14ff924ffb3bb72fb625e700d95d2ab3d5e2a4649ce4c89a4c06ba8eb99ce035ebd5d41770b0b96110026c01dd8ac4f51f2348158c0956cc41aed875ae3d86ff3b29a5821c627439408d1ca72a173c5c0be7769f050f123caf38126845dd946d0534c56623a8d0fa43e14d890defdc4b7cf235e15917b9c62c4105ffd22c8f54545630151f895cfff80e1962076a3a72928842eb8d9765c8a1cee26e3cb7e75a8a0ffbb6bcd9606485610e509755de2d0e568e93527215680fc053a888513666286c0ebf325603b191d960f6d2104dd873df6cfae762396c73b491f57f6c91092ae10aea911c42093beae9d9e9bb91ca3cc3b5016bfd170308370cdb2cb347bb9658b64f97850740e0dbaec2c2c428b1110ef382751a80cdfad5db4d541bb61e469080a62060dcc4073a5495dc38cc778d37a4953acb8b918a12b99ba7782c380a577351ceb2efa6ca0093e6bbc4fff1514ff59de452dea733e8c4d69b2377e90a0a713df8205f2c62c9f5ca42c4d9d71ab6436824196a37aa67f324bda20de3661fb11d12bdfba16ec76ba5e267ca91759c4b3bad10fbd91afe7405baccf50f436500860a1127869ef7f908b1e2752f64f05ff122e5f92340299f12f65d86731813710aacc44b1d835da8e9a57cbb0e066eb3e5a1cc83a7164452e4bd1e777226dc8e828ea2071b4e254911ef173dadcf2e266b68ef3c562c0e88f7342a294930e878c1f6f9d76d137e2e41f50c64b42db2cf96e625ed4e100b40541c9d9ace57dd5ba872c253c6fc72eaf4722d4b57a891e60217fe174f83a856a58a59ba7467ae866b6d7e3014de0327b8b721cb221a3c0adf2b86052f2b27058f1dec892aad4d1dc2c7ed9be7a5ee22f95c22dbcec4b52c004f2e93b628b5b35e9584f28b1c5dc874d2730686cc17177baf88bfcaa4e3af0a8e6636ce754cd27b80be475543cf4908797f8ad64bd0b32559358ce88f1c7f4296257fb98b812465256d4f0d32ba9380e279c712abe6db2da4af283bd020078032560af3c51e12d8ee74f95afe6c49c7856618b5e9c9fe7985f0a6afcc756b5027e5c9309037af7be80c149a41bece6d423e979857d9b388db39a299b5e4e075f3c26670be7db41a1754c1a0d397584419f515028b171201478629accbf789af87a51d323cf48613bb281b4b623f9d9c7cd47bd16a63c6d0782c9825acb4c961a4817b161978dd8dd71343f39e118bf58871f933a112caf2f9c505c1e447704aac93e5c581bfaa2201dd974619b0cf16b9901ebffbcf587d01c9ea77848ec3008c82d3f9aea16fe5358aab94ce7108349b72e3c0951f1260a624ecfd9cb3a69228a4344560d9922b86ef2923e6c459becf7b4efc4d8169e11c45e40511e4bbefec068d192d405c2eddfb3f76936a529ca9f29db69ed589c4165bbf4147f05e6ff66b673c5793537db741b1279a49b6ad887fbd426ad6559a6b950c9c5ad5ac30d003cefc01e773394f2446067436b2a144fabe736fc3ad1d2827443660048f6974147afc239a0dbc99429d2f3167fb1edb8f4b84a9aefb8e56a34717e4adb1d0b70b123d05397b345aa73aa6f06722d0c4082a965f480240547a8c837b50d71a13c26b5b1bfa02504149344e8ce1ba90cf9668dadb464b5c7e5d7d65a44c7ea6420520454358ee619e673fdbd90ccf5c2a6850844eb99885b0769c461aca1fc4b2d1b7296ca34515bb1240f905aa1f959f30b29bb244f38cb259da9a1416bd6cbe3f5f9179a7f122d2bee24ef527207b629a6a369b3b90558ee5329321e421f4650cd8c12a5bd01d312d69dc35f885c2d0988e28d7df452069608d68e318ca74f620f256d1c731e19030412cccf11f64e1fa653a77e050d4a0895d743b3ae1258ba1cf575c8cf6efbe1b64ca8a685ce46e4cc59e91feb1be5eaa45e27278f814daeb42e9e8038629d012b01d667452604698e338801d0de02def8d5ade0908e8c02b39b3cb1acfd5c47cf86a2a0de70ac04ec995f9251899b4f236c2d678f4196601c4f3cac26ef848b46c4d187c4ed66c471f7a8cdcb9ccdddd1c1e4e52757f14e8c25af48843cc2548bbdb58de7786a09e4544bc7de9a870ccbd41de6f37b41fb333fe0810a0e7665fd00d822d6406c37555e778ba7c2232588a2d81ef413b43e9c913eb9ab65332f11042c89f3c9430a72f83dfe4c4cfdefbb6519a2784bee09364ee9711b1ca2e36dc22ac8a86c9bd19376a80bb6900840480b9c2c461943f8fbf1f5908379ed0702693acffaa2976cfa7b0b89ac0dc22b2903110f983fd500b6d12c356cb98eb781e93d72bd64e06419bacf4d02f33401e2a2dc5b8b183382ca11ecec8289bde5f591456ec9629b4000c3990b51b06ce195a12477b08f037db2984aed4b15346efa25764020506d420152b8b199841cbb5789922ff05d7e7c28dc9aee6baa340d3bb731885b8a842063cadc6e47954df3ae87e581d511a73ba344f686c01cdc5d2d35</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>随笔-对当前国际金融的“担忧”及个人看法</title>
    <link href="http://blog.31415x.cf/2021/05/11/%E9%9A%8F%E7%AC%94-%E5%AF%B9%E5%BD%93%E5%89%8D%E5%9B%BD%E9%99%85%E9%87%91%E8%9E%8D%E7%9A%84%E2%80%9C%E6%8B%85%E5%BF%A7%E2%80%9D%E5%8F%8A%E4%B8%AA%E4%BA%BA%E7%9C%8B%E6%B3%95/"/>
    <id>http://blog.31415x.cf/2021/05/11/%E9%9A%8F%E7%AC%94-%E5%AF%B9%E5%BD%93%E5%89%8D%E5%9B%BD%E9%99%85%E9%87%91%E8%9E%8D%E7%9A%84%E2%80%9C%E6%8B%85%E5%BF%A7%E2%80%9D%E5%8F%8A%E4%B8%AA%E4%BA%BA%E7%9C%8B%E6%B3%95/</id>
    <published>2021-05-11T12:09:40.000Z</published>
    <updated>2021-05-11T12:42:49.729Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="93c98b8dd8046bdc1cefb8a6778a2369e9057667ca8475125c45dcf5cf38c404">5dfd32f88e67af1fe04d89d16b439ff9a7d7b62a60e7a8824250962c12b41c55fd092a2480ff65d017c4293785d4edf162ef411d835957f9e51d8035664a3d18d13b5796aad48126b71b05668d8d9df9ac12e589a7601d64dc68414f8cf6608f028e55ac1bf2729b2a50c55c5ad3a69c637dfa296908da8683f69b4f60819ac005516a489444281690789ac65495f4073ecff343a25a5a1d05dccb22de5c4aeee66923734389fd5d975b5f8a9e05ee011b2583755c3fd140a196b748ae9ef9007bbaed9123a7288a9f0be03a1e3eeba2f6c6b8ef56971190d13e41067c965374442f442402175a46f924467830e967b928c276ecc025caf76083643380bb72d0778ae0c967a6171642dc705e4f8bb5e04b4e24b75f3311e434921ba795bc46d7d3435e4d84625d8c75e4dc59cc1af578748a05294fb15cb8dd683e2e4b75b97b643e731d511aa01dda7e1425bba559b037f13ce6d29ee6c9289166d11d227a642103bfa8285c38c03e5e657135a4896457962403e8d344a6c2732d54ea51ffc1f6526e5bfea16270f5ad5adda93ee1ac49afab63de3fae76553e285e0ebc4b60d3ca3fb2e7daa0884cadbfec0ac391cd8ecf92a87f096177eb6431e07c14bac15a178ce5c2408f7fcdd88f2cdc45650f14650c999c573083df0846dbf7895c3539935cb7b47c48ce8a4d65a8da45ad441a08215224bf4b76b62108770495fa2db0f481af564d51fc2d9430b151d5e97d290f55306f6a5397b98ceb01cad7fbf4217b95400fa809cd3dc813b2ade5cd13e195279472f6ac3854eb105e935df25a0d278fb70acea77359933b25b5cced749ac4b33aa5c15f89c537cac4bd9a3aa096bae3c34ec804ef0112637609a17c8a704feaafb0a302c71ae0d139f3609f6e772799c2427fc20c055381b6aeb984f7fbe07e25d508b995f6a5d18a4cf506a9c33ad34e5340e776a984aa66775782937d3963b39d8ff80b195d8c933fff3a37f2eacc5a6dd38bfbd5f760c92aff7d4dfd30803d661633c3dfa14f6e5484e5d7a887d3abfad168d64b79590935e8fe55ca272dee5e54e62c1a7c915d0694222ca69eaab8306f4ad6946190491cf27bc86d9d5f2f00bdd2791380ea52046bd3e9da2b9ed9c5f517c6a2713644c842dcc07e72157fd5a294117275c7119139bf281a77bc8406eda189764ccdad3ea016a78f4e87dc472e1e11ac1c20a3da11178b1d29d94b066c2f9cdfa31ca06670a99d274d1c8fb7e932169d82aac622d74e5e42cf6284cac4dbeff2ca77d2f236332250ae235fd7f29d96cde5608df6e80c346ad6f4e23dbea6f9f4c7d4389e7528372bb585c15b2d1dccffa27a5d738b6633bd2516d3299e9eae3d19ea762c769282b10741217e4a967a5250958ccff1dd6717c6b3fbb97fda9e672da18bfe0e7c1c7d88ae93ac1457a1bac10358c7e8fcfe815a35f9a6dbf2bfa7bf3b30a352b0f74a783c677219a3c435c36393c201eebbf272be6ef77239da360e6b91b2dc42a5f97f7baf352b621a9cad03c032ff83457fb35b2131ad9fa2fb0f3a489691c8fd122076e70d8dce9bd7f2a081b37f4f7f410a1bd4720f983bb5e00947a798748ebda53ce8791ab0f490b8e3d87a4d194ad69a5c090b8ab4903a46b73dc14d126b934fd5350c98ff2ace1704093be59774b64407315276775a748bb708518df18d13c4cea793c3fc8a41befd90a02c75da4e91c1193dbef41f38787bf184ad5f936097a5bb3b64f0826c122a421728f3d95c61383dae45fc6e95e53cf16dafad1803045a533704d5fa65b9656fdcf3945b29dda3ffdca1ee825cac04fbe73329ba1d74fa93f88c3a5c4155031c19c53fdb75af67d8be628d602eda78beb0f5df8f98278520b89ffae33828ae29dcbad1b82049ce8ddbacd45ce69506d049414658b29ad233fbcb6f10d1b42771f87952a158b34bee0d6ef2f8a4edeb8a75cd7b5f88144d9706162bccf79570eb80129d33b3d8adbc5400219a85b22b912011135b9ee93ff9594b00ae8bd6b393e6670e6e35dfa01a041c791dbcb45c75a62c8b9abab294dcf3cd257549079738f8fd661f0d3583f0d00517a1ec0fa4c0d930c525cb72d52f60ede267a241bd7f347fcaf2aa108d3734dc2bde0057462ea6aec4adf1d14fddb25bda4123433e512c16d52655e03e033e3c5ef7dac69c6f96fa9342a4f25950b323dce68834c85b8f3c7b6cad2cc69a2296feb131239db6dea19d9f4dc28d4d3a55118bfa759872d1e320e0293dd320da94fb75a994237cafe3563e404de2afd5390a33c52820191d807a15c100eceeb93ada2415bfc3a1c7b8914e38bdcc16e847ea1a70dfc54913becdb78ea42f2151c56c2d8b534f8072b5b2b8bcdafee32d3823ceff708ff606a815a273cbb8a40d6624ca4bb0d1345dd8e64d445892694c9314a6483ec56f9bbd7f7864d31a43b4eb183ef416f9e1589fb0c1245edd812be4a70abc1209acaaa2787b1e7a2b477b8aeade2c0087b1a0637bc2e3d8595d7e52cfced5cdcf57bbcebad713b66c874f70a44dd2bac45b8933a33808680af2035b66c91a5060a97590df895f70e7e53335754fdb28dc1737614bb5233ab9586949890cbe122191aec12efb85e8d6f6e62fc91f3e10df5c907d53916f05671a0236ba7e4f67d3a4cc4b9e156832812ae789fc17fb2ba36366885a8cdbc529d248b8ed03cd5c914fcf1152494751e434374d7fa43f4e46321b370ee6326644ddea3efac7b39457969d08dad5e38506d3edb4d155a6d8707647d62fa1ca79baf0abb31280b321bb35a79774ed041e356f2c0e012e00a7ff35b506eba9486ae2cb7cf567f32f7466f7664cd2e4ba5b5daa9499dd58411b9764ab72979456e18647ed5cd477886e0422e96e7c8e1d1c0195d498e766c3ba673e51bcd89cba4b2705c981181224abeec08e53c6d1964b4d96056dce5296ea87be26b92aa1211118b3dea82c7755cf375bae2a61b2280d4ed12ca29881527c3336bd05a9102091454fa89664a2f00d85633425117d9cca362138433897fcc36bc948b5862f7e64e023a5ebc83d443dc1bdf7ce0683f76479e1f2ccda69806f7a5a0f90654b0a9a739d8d32667cc04adb5fcd730bc712f6091fb81fefb5eeb710eb6c18f66a2e5e25a9d6b871c6fd9b6a1f2b2699dd77869b14ad98098f9e62220a20dd395c7cc0f3e6730fdde7debf76cd0188210f3ff864ebdb8d494db9e5eabf8cbadcee17a3094a0025776df7c0881782b76dedcd4efcea207ceb1e90737ec64614eaf299913c00253bce70844c4b7cd0e7c0efbf0a5b4f5c704258fcc0f6bdbb160adda5c817644ba57bdf4e92d1efb3373a47db1a52f984ef986900dabf87b078c0f388b062bb5efb410200436a6c67191592b845874d2d389582e0a15121f8370789a9ea199d2724af75826263897851c242e74cb23684f52e8bb74d7e45d4b33c283c85cb4cb28521791d96df53b482645392d9db9f420d21f4a0ffd5f46e751d1a54f1b731de87c8ce607b9262a89d0ccc7c3bfb5ae1591cfc8d7f4e94995525114f50aed0e183984f748f5955433cef9642886d0b808c3aad41be2b3d58536e1e8d4f899952bdc694aaea7a0c0cf15f572d8c2dd25157fd889997d38a99193b2c0111e07c495c09dbcc5a530ddaf951c6d6734cca81eae19529b67fc3c56ee9032ae0dc9cc8c72710eabdd7010ac1d535b4220bc70047857aa91fffe3a7667a30fa30eb2cc51a8801d19bdd416931cf22d333b42f8e5daa4bf78c9e9689b96c7cebb92af33111bdae14e8b1882f13791704622a860d0f2cbb2f37daf81ba5e924c33f46dbf709fa76d854d3362d1af9397bc11b3932be409316efa4652fc317234cc883a514ee1f910eb4153c4524d1c277ee82106f95b4156a14cbbf1f2d1fbd76f7306a7e0ecbd9e6d0dd00393f8129</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>2021-4-7随笔</title>
    <link href="http://blog.31415x.cf/2021/04/07/2021-4-7%E9%9A%8F%E7%AC%94/"/>
    <id>http://blog.31415x.cf/2021/04/07/2021-4-7%E9%9A%8F%E7%AC%94/</id>
    <published>2021-04-07T09:27:07.000Z</published>
    <updated>2021-04-07T10:29:48.065Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e4bb7f40ee5bbf20c21909b80fd08cbebfe9d55ba0d8530548817f9de0c1df99"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="diary" scheme="http://blog.31415x.cf/categories/diary/"/>
    
    
  </entry>
  
  <entry>
    <title>笔记-Java注解反射</title>
    <link href="http://blog.31415x.cf/2021/03/19/%E7%AC%94%E8%AE%B0-Java%E6%B3%A8%E8%A7%A3%E5%8F%8D%E5%B0%84/"/>
    <id>http://blog.31415x.cf/2021/03/19/%E7%AC%94%E8%AE%B0-Java%E6%B3%A8%E8%A7%A3%E5%8F%8D%E5%B0%84/</id>
    <published>2021-03-19T08:10:11.000Z</published>
    <updated>2021-05-19T13:00:13.066Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>本文为自学 Java注解和反射机制的个人学习笔记，因个人习惯和时间关系，仅记录了本人为曾了解和和认为重要的知识点，所以如要学习建议<a href="https://www.bilibili.com/video/BV1p4411P7V3">观看原视频学习</a></p><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>基础的注解概念的解释可以查看<a href="https://www.runoob.com/w3cnote/java-annotation.html">这里</a>：</p><p>一个简单的自实现的注解如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAnnotation1 &#123;<br><span class="hljs-function">String <span class="hljs-title">name</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，参数的格式是 <code>类型 名字()</code> 。</p><ul><li><p><code>@interface</code> 来定义一个注解</p></li><li><p><code>@Target</code> 描述了注解的使用范围</p></li><li><code>@Retention</code> 表述需要在什么级别保存该注释信息，用于描述注解的生命周期，其中 (<code>SOURCE&lt;CLASS&lt;RUNTIME</code>)</li><li><code>@Document</code> 说明该注解将包含在 javadoc中</li></ul><p>（具体注解实际使用方式可以看最后一节章关于 使用反射对象来获取所注解对象的注解信息的介绍。）</p><h1 id="反射-reflection"><a href="#反射-reflection" class="headerlink" title="反射 reflection"></a>反射 reflection</h1><h2 id="反射概述"><a href="#反射概述" class="headerlink" title="反射概述"></a>反射概述</h2><p>反射机制    允许程序执行期间借助 <code>Reflection API</code> 来获取任何类的内部属性和方法。</p><p>正常方式    ： 引入“包类”的名称-&gt;new实例化-&gt;获得实例化对象<br>反射方式： 实例化对象-&gt;getClass()方法-&gt;获得完整的“包类”名称</p><h2 id="获得反射对象"><a href="#获得反射对象" class="headerlink" title="获得反射对象"></a>获得反射对象</h2><h3 id="java反射机制提供的功能："><a href="#java反射机制提供的功能：" class="headerlink" title="java反射机制提供的功能："></a>java反射机制提供的功能：</h3><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>在运行时处理 <strong>注解</strong></li><li><strong>生成动态代理</strong> (AOP)</li></ul><h3 id="反射的优缺点"><a href="#反射的优缺点" class="headerlink" title="反射的优缺点:"></a>反射的优缺点:</h3><ul><li>优点： 可以实现动态创建对象和编译，灵活</li><li>缺点：对性能有影响。反射实际上是一种<em>解释操作</em>，需要告诉JVM需要做什么和要求，要慢于直接(new)执行相同的操作。</li></ul><h4 id="反射相关的API"><a href="#反射相关的API" class="headerlink" title="反射相关的API"></a>反射相关的API</h4><ul><li><code>java.lang.Class</code> 代表一个类</li><li><code>java.lang.reflect.Method</code> 代表类的方法</li><li><code>java.lang.reflect.Field</code> 代表类的成员变量</li><li><code>java.lang.reflect.Constructor</code> 代表类的构造器</li></ul><h4 id="获得反射对象-1"><a href="#获得反射对象-1" class="headerlink" title="获得反射对象"></a>获得反射对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> reflection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reflection0</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//  通过反射来获取类的class对象</span><br>        Class cl1 = Class.forName(<span class="hljs-string">&quot;reflection.User&quot;</span>);<br>        <span class="hljs-comment">// Class cl2 = Class.forName(&quot;reflection.Reflection0&quot;);</span><br>        Class cl2 = User.class;<br>        <span class="hljs-comment">// Class cl3 = Class.forName(&quot;reflection.Reflection0&quot;);</span><br>        Class cl3 = (<span class="hljs-keyword">new</span> User()).getClass();<br><br>        <span class="hljs-comment">// 一个类在内存中只有一个Class对象</span><br>        <span class="hljs-comment">// 一个类被加载后，类的整个结构都会被封装在Class对象中</span><br>        System.out.println(cl1.hashCode());<br>        System.out.println(cl2.hashCode());<br>        System.out.println(cl3.hashCode());<br><br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-comment">// pojo:</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    String name;<br>    <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">int</span> id;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age, <span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br><span class="hljs-comment">//    getter setter方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>一切类的父类 <code>Object</code> 中的 <code>getClass()</code> 方法返回值即为Java反射的源头，所以可以通过对象反射来求出类的名称。</p><p>任何一个对象都有一个自己的class对象，提供了该类的属性、方法、构造器、实现的接口。且对象仅能通过系统创建、在JVM中只有一个Class实例、一个Class对象对应一个加载到JVM中的.class文件、每个类的实例都记着自己是由那个Class对象生成、通过Class对象可以完整的获取到一个类被加载的结构、<strong>Class对象是Reflection的根源，获取相应的Class对象后才能动态加载和运行某个类</strong></p><p>Class类的常用方法：<br><img src="https://img-blog.csdnimg.cn/20210318153739618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpMzE0MTU5MjY1MzV4,size_16,color_FFFFFF,t_70" alt=""></p><h4 id="那些类型可以有Class对象："><a href="#那些类型可以有Class对象：" class="headerlink" title="那些类型可以有Class对象："></a>那些类型可以有Class对象：</h4><ul><li>class :外部类、成员、局部内部类、匿名内部类</li><li>interface：</li><li>[]</li><li>enum</li><li>annotation</li><li>primitive type: 基本数据类型</li><li>void</li></ul><p><strong>只要元素类型和维度一致，class就相同</strong></p><h3 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h3><p>只有在 <strong>类的主动引用</strong> 会发生类的初始化，如：</p><ul><li>main</li><li>new </li><li>调用非常量的静态资源</li><li>reflect包中的反射调用</li><li>当初始化一个类时，父类未被初始化会先初始化父类</li></ul><p><strong>类的被动引用</strong> 不会发生类的初始化， 如果：</p><ul><li>访问静态域，仅真正声明该域的类会初始化（通过子类调用父类的静态变量，子类不初始化）</li><li>数组引用</li><li>引用常量（常量在链接阶段就已存入到调用类的 常量池中了）</li></ul><h3 id="类加载器的作用"><a href="#类加载器的作用" class="headerlink" title="类加载器的作用"></a>类加载器的作用</h3><p>类加载的作用：将class文件字节码内容加载到内存中，并将这些静态数据转化为方法区的运行时的数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口</p><p>加载的类会进行类缓存</p><p>类加载器的类型：</p><ul><li>引导类加载器：C++编写，JVM自带加载器，<strong>负责Java平台核心库</strong> 用来装载核心类库。该加载器无法直接获取</li><li>扩展类加载器：负责jre/lib/ext下的jar包或者 <code>-D java.ext.dirs</code> 指定的jar包装入工作库</li><li>系统类加载器：负责 <code>java -classpath</code> 或 <code>-D java.class.path</code> 所指目录下的类与jar包装入工作，是最常用的加载器</li></ul><p>查看方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> reflection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassLoaderTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">// 获取 系统类加载器</span><br>        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();<br>        System.out.println(systemClassLoader);<br><br>        <span class="hljs-comment">// 获取 系统类加载器的父类加载器： 扩展类加载器</span><br>        ClassLoader parent = systemClassLoader.getParent();<br>        System.out.println(parent);<br><br>        <span class="hljs-comment">// 获取 扩展类的父类加载器：根加载器：引导类加载器（C/C++）</span><br>        ClassLoader parentParent = parent.getParent();<br>        System.out.println(parentParent);<br><br><br>        <span class="hljs-comment">// 测试当前类是哪个加载器加载的</span><br>        ClassLoader classLoader = Class.forName(<span class="hljs-string">&quot;reflection.ClassLoaderTest&quot;</span>).getClassLoader();<br>        System.out.println(classLoader);<br>        <span class="hljs-comment">// 显然，该类是用户自定义类，故为系统类加载器加载</span><br><br>        <span class="hljs-comment">// 测试JDK内置类是哪个加载器加载的</span><br>        ClassLoader classLoader1 = Class.forName(<span class="hljs-string">&quot;java.lang.Object&quot;</span>).getClassLoader();<br>        System.out.println(classLoader1);<br>        <span class="hljs-comment">// 显然是核心加载的</span><br><br>        <span class="hljs-comment">// 系统类加载器可以加载的路径：</span><br>        System.out.println(System.getProperty(<span class="hljs-string">&quot;java.class.path&quot;</span>));<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            D:\JavaDevelopmentKit8\jre\lib\charsets.jar;</span><br><span class="hljs-comment">            D:\JavaDevelopmentKit8\jre\lib\deploy.jar;</span><br><span class="hljs-comment">            ...</span><br><span class="hljs-comment">            D:\JavaDevelopmentKit8\jre\lib\rt.jar;</span><br><span class="hljs-comment">            G:\learning\spring\annotation&amp;reflection\target\classes;</span><br><span class="hljs-comment">            D:\JetBrains\IntelliJ IDEA 2020.1.3\lib\idea_rt.jar</span><br><span class="hljs-comment">         */</span><br>        <br>        <span class="hljs-comment">// 其次 双亲委派机制 可以保证类的加载的安全有效性</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sun</span>.misc.Launcher$AppClassLoader@<span class="hljs-number">18</span>b<span class="hljs-number">4</span>aac<span class="hljs-number">2</span><br><span class="hljs-attribute">sun</span>.misc.Launcher$ExtClassLoader@<span class="hljs-number">1</span>b<span class="hljs-number">6</span>d<span class="hljs-number">3586</span><br><span class="hljs-attribute">null</span><br><span class="hljs-attribute">sun</span>.misc.Launcher$AppClassLoader@<span class="hljs-number">18</span>b<span class="hljs-number">4</span>aac<span class="hljs-number">2</span><br><span class="hljs-attribute">null</span><br></code></pre></td></tr></table></figure><h3 id="通过反射来操作对象：（实例化、调用方法、访问属性等"><a href="#通过反射来操作对象：（实例化、调用方法、访问属性等" class="headerlink" title="通过反射来操作对象：（实例化、调用方法、访问属性等"></a>通过反射来操作对象：（实例化、调用方法、访问属性等</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> reflection;<br><br><span class="hljs-keyword">import</span> pojo.User;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * date: 2021/3/19 14:51</span><br><span class="hljs-comment"> * author: 31415926535x</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 动态创建对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DynamicInstance</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException </span>&#123;<br>        <span class="hljs-comment">// 通过包名路径获得Class对象</span><br>        Class cl = Class.forName(<span class="hljs-string">&quot;pojo.User&quot;</span>);<br><br>        <span class="hljs-comment">// 使用newInstance()构造对象</span><br>        <span class="hljs-comment">// 本质是调用类的无参构造器</span><br>        User user = (User)cl.newInstance();<br>        System.out.println(user);<br><br>        System.out.println(<span class="hljs-string">&quot;=================&quot;</span>);<br><br>        <span class="hljs-comment">// 通过构造器创建对象</span><br><br>        Constructor constructor = cl.getConstructor(String.class, <span class="hljs-keyword">int</span>.class, <span class="hljs-keyword">int</span>.class);<br>        user = (User)constructor.newInstance(<span class="hljs-string">&quot;2333&quot;</span>, <span class="hljs-number">233</span>, <span class="hljs-number">666</span>);<br>        System.out.println(user);<br><br>        System.out.println(<span class="hljs-string">&quot;=================&quot;</span>);<br><br>        <span class="hljs-comment">// 通过反射调用普通方法</span><br>        <span class="hljs-comment">// 即 method.invoke(对象， 方法的值) 调用普通方法</span><br>        User user2 = (User)cl.newInstance();<br>        cl.getDeclaredMethod(<span class="hljs-string">&quot;setName&quot;</span>, String.class).invoke(user2, <span class="hljs-string">&quot;emmmm&quot;</span>);<br>        System.out.println(user2);<br><br>        System.out.println(<span class="hljs-string">&quot;=================&quot;</span>);<br><br>        <span class="hljs-comment">// 通过反射操作属性</span><br>        <span class="hljs-comment">// private属性不能访问</span><br>        <span class="hljs-comment">// 可以通过设置setAccessible为true</span><br>        <span class="hljs-comment">// 参数值为true指示反射的对象在使用时应该取消Java语言访问检查，可以使得提高反射的效率，并能访问私有成员</span><br>        <br>        User user3 = (User)cl.newInstance();<br>        <span class="hljs-keyword">try</span> &#123;<br>            cl.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>).set(user3, <span class="hljs-string">&quot;user3&quot;</span>);<br>            System.out.println(user3);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;不能直接修改private属性&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;=================&quot;</span>);<br><br>        Field name = cl.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        name.setAccessible(<span class="hljs-keyword">true</span>);<br>        name.set(user3, <span class="hljs-string">&quot;user3&quot;</span>);<br>        System.out.println(user3);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">User&#123;name=<span class="hljs-emphasis">&#x27;null&#x27;</span>, age=0, id=0&#125;<br>=================<br>User&#123;name=<span class="hljs-emphasis">&#x27;2333&#x27;</span>, age=233, id=666&#125;<br>=================<br>User&#123;name=<span class="hljs-emphasis">&#x27;emmmm&#x27;</span>, age=0, id=0&#125;<br>=================<br>不能直接修改private属性<br>=================<br>User&#123;name=<span class="hljs-emphasis">&#x27;user3&#x27;</span>, age=0, id=0&#125;<br>java.lang.IllegalAccessException: Class reflection.DynamicInstance can not access a member of class pojo.User with modifiers &quot;&quot;<br><span class="hljs-code">at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:102)</span><br><span class="hljs-code">at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(AccessibleObject.java:296)</span><br><span class="hljs-code">at java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:288)</span><br><span class="hljs-code">at java.lang.reflect.Field.set(Field.java:761)</span><br><span class="hljs-code">at reflection.DynamicInstance.main(DynamicInstance.java:49)</span><br></code></pre></td></tr></table></figure><h4 id="效率分析"><a href="#效率分析" class="headerlink" title="效率分析"></a>效率分析</h4><p>理论上，直接new实例化 &gt; 关闭检测setAcessible(true) &gt; 不关闭的反射方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> reflection;<br><br><span class="hljs-keyword">import</span> pojo.User;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.sql.Time;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * date: 2021/3/19 15:18</span><br><span class="hljs-comment"> * author: 31415926535x</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SetAccessibleTest</span> </span>&#123;<br><br>    <span class="hljs-comment">// 普通方式调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        <span class="hljs-keyword">long</span> st = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000000</span>; i++) &#123;<br>            user.getName();<br>        &#125;<br>        <span class="hljs-keyword">long</span> et = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;普通方式调用: &quot;</span> + (et - st) + <span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-comment">// 反射方式调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        Class cl = Class.forName(<span class="hljs-string">&quot;pojo.User&quot;</span>);<br>        Method getName = cl.getDeclaredMethod(<span class="hljs-string">&quot;getName&quot;</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-keyword">long</span> st = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000000</span>; i++) &#123;<br>            getName.invoke(user, <span class="hljs-keyword">null</span>);<br>        &#125;<br>        <span class="hljs-keyword">long</span> et = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;反射方式调用: &quot;</span> + (et - st) + <span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 关闭检测</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        Class cl = Class.forName(<span class="hljs-string">&quot;pojo.User&quot;</span>);<br>        Method getName = cl.getDeclaredMethod(<span class="hljs-string">&quot;getName&quot;</span>, <span class="hljs-keyword">null</span>);<br>        getName.setAccessible(<span class="hljs-keyword">true</span>);<br><br>        <span class="hljs-keyword">long</span> st = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000000</span>; i++) &#123;<br>            getName.invoke(user, <span class="hljs-keyword">null</span>);<br>        &#125;<br>        <span class="hljs-keyword">long</span> et = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;反射方式调用: &quot;</span> + (et - st) + <span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException </span>&#123;<br>        test1();<br>        test2();<br>        test3();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">普通方式调用: 0ms</span><br><span class="hljs-section">反射方式调用: 171ms</span><br>反射方式调用 关闭检测: 125ms<br></code></pre></td></tr></table></figure><h3 id="获取泛型信息"><a href="#获取泛型信息" class="headerlink" title="获取泛型信息"></a>获取泛型信息</h3><p>对于反射获取到的一个方法method，可以通过 <code>getGenericParameterTypes</code>等方法来获取到参数、返回值等泛型数据的信息。（泛型数据信息会在编译器被丢弃，故可以通过此方法来重新获取到） </p><h2 id="通过反射对象来获取注解信息"><a href="#通过反射对象来获取注解信息" class="headerlink" title="通过反射对象来获取注解信息"></a>通过反射对象来获取注解信息</h2><p>通过反射获取的class对象可以获取其身上所标注的注解的值，通过此即可达到使用注解来设定某些对象的属性值，即各种框架中注解的执行机制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> reflection;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * date: 2021/3/19 15:34</span><br><span class="hljs-comment"> * author: 31415926535x</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 反射操作注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationAndReflection</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;<br>        Class cl = Class.forName(<span class="hljs-string">&quot;reflection.Student&quot;</span>);<br><br>        <span class="hljs-comment">// 通过反射的方式获取注解</span><br>        Annotation[] annotations = cl.getAnnotations();<br>        <span class="hljs-keyword">for</span> (Annotation annotation : annotations) &#123;<br>            System.out.println(annotation);<br>        &#125;<br><br>        <span class="hljs-comment">// 获取注解的值</span><br>        TableClassAnnotation tableClassAnnotation = (TableClassAnnotation) cl.getAnnotation(TableClassAnnotation.class);<br>        System.out.println(tableClassAnnotation.value());<br>        <span class="hljs-comment">// 这里的操作即可解释各种框架中的注解所设定的 value 值的作用机制了</span><br>        <span class="hljs-comment">// 即，通过设定注解的值，如 Controller(value=&quot;./static&quot;) 即制定了Controller这个注解对象的值</span><br>        <span class="hljs-comment">// 相关框架即可通过以上方式获取值，进而实现指定注解值来设置相关类的某个（类、属性）的值</span><br><br><br>        <span class="hljs-comment">// 获得类指定的注解</span><br>        Field name = cl.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        TableFieldAnnotation annotation = name.getAnnotation(TableFieldAnnotation.class);<br>        System.out.println(annotation.columnName());<br>        System.out.println(annotation.type());<br>        System.out.println(annotation.length());<br>    &#125;<br><br><br>&#125;<br><br><br><span class="hljs-comment">// 自定义注解</span><br><br><span class="hljs-comment">// 类名注解</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@interface</span> TableClassAnnotation&#123;<br>    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">// 属性的注解</span><br><span class="hljs-comment">// 可以理解为对应数据库中每个字段的属性</span><br><span class="hljs-meta">@Target(ElementType.FIELD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@interface</span> TableFieldAnnotation&#123;<br>    <span class="hljs-function">String <span class="hljs-title">columnName</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">String <span class="hljs-title">type</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-meta">@TableClassAnnotation(&quot;db_studnet&quot;)</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span></span>&#123;<br>    <span class="hljs-meta">@TableFieldAnnotation(columnName = &quot;db_name&quot;, type = &quot;varchar&quot;, length = 20)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@TableFieldAnnotation(columnName = &quot;db_age&quot;, type = &quot;int&quot;, length = 10)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-meta">@TableFieldAnnotation(columnName = &quot;db_id&quot;, type = &quot;int&quot;, length = 10)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age, <span class="hljs-keyword">int</span> id)</span> </span>&#123;<br><br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br><span class="hljs-comment">//     get set tostring方法：</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@reflection.<span class="hljs-constructor">TableClassAnnotation(<span class="hljs-params">value</span>=<span class="hljs-params">db_studnet</span>)</span><br>db_studnet<br>db_name<br>varchar<br><span class="hljs-number">20</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;script src=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>microsoft_refresh_token获取错误等导致的multi-factor authentication错误</title>
    <link href="http://blog.31415x.cf/2021/02/25/microsoft-refresh-token%E8%8E%B7%E5%8F%96%E9%94%99%E8%AF%AF%E7%AD%89%E5%AF%BC%E8%87%B4%E7%9A%84multi-factor-authentication%E9%94%99%E8%AF%AF/"/>
    <id>http://blog.31415x.cf/2021/02/25/microsoft-refresh-token%E8%8E%B7%E5%8F%96%E9%94%99%E8%AF%AF%E7%AD%89%E5%AF%BC%E8%87%B4%E7%9A%84multi-factor-authentication%E9%94%99%E8%AF%AF/</id>
    <published>2021-02-24T16:15:28.000Z</published>
    <updated>2021-02-24T16:47:10.558Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>前几天无聊申请了一个 Microsoft 的开发者账号，目的当然是尝试白嫖可以续订的5T OneDrive网盘，，然后，根据网上的一些教程，利用 cloudfare 搭建了一个网盘页面。这里需要用到 Microsoft graph 的一些服务，同时需要手动获取到 api 的一些 token 。本来搭建的好好的，可能是因为 多重验证的问题，导致出现 </p><span id="more"></span><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">Uncaught (in promise) getAccessToken error <span class="hljs-string">&quot;&#123;<span class="hljs-subst">\&quot;</span>error<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>invalid_grant<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>error_description<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>AADSTS50079: Due to a configuration change made by your administrator, or because you moved to a new location, you must enroll in multi-factor authentication to access &#x27;00000003-0000-0000-c000-000000000000&#x27;.<span class="hljs-subst">\\</span>r<span class="hljs-subst">\\</span>nTrace ID: xxxxxxxxxxxxxxx<span class="hljs-subst">\\</span>r<span class="hljs-subst">\\</span>nCorrelation ID: xxxxxxxxxxxxxxxxxxxxx<span class="hljs-subst">\\</span>r<span class="hljs-subst">\\</span>nTimestamp: 2021-02-24 15:47:18Z<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>error_codes<span class="hljs-subst">\&quot;</span>:[50079],<span class="hljs-subst">\&quot;</span>timestamp<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>2021-02-24 15:47:18Z<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>trace_id<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>xxxxxxxxxxxxxxxxxx<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>correlation_id<span class="hljs-subst">\&quot;</span>:\xxxxxxxxxxxxxxxxxxxxx<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>error_uri<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>https://login.microsoftonline.com/error?code=50079<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>suberror<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>basic_action<span class="hljs-subst">\&quot;</span>&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>的错误： <a href="https://github.com/microsoft/Partner-Center-PowerShell/issues/259">https://github.com/microsoft/Partner-Center-PowerShell/issues/259</a></p><p>然后就只能用 rclone 来重新获取一个 refresh_token ：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./rclone</span> authorize <span class="hljs-string">&quot;onedrive&quot;</span> <span class="hljs-string">&quot;应用程序(客户端)ID&quot;</span> <span class="hljs-string">&quot;应用程序密码&quot;</span><br></code></pre></td></tr></table></figure><p>或者： <a href="https://heymind.github.io/tools/microsoft-graph-api-auth">https://heymind.github.io/tools/microsoft-graph-api-auth</a></p><p>然后把 KV 中的 refresh_token 改了应该就行了。。</p><p>导致多重验证的原因，可能是因为之前设置了 authentication app ，，然后出现了这个问题，，也有可能是 mover.io 大批量搬文件的锅（应该无关），，或者 github 的自动调用续订脚本的问题等等。。。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前几天无聊申请了一个 Microsoft 的开发者账号，目的当然是尝试白嫖可以续订的5T OneDrive网盘，，然后，根据网上的一些教程，利用 cloudfare 搭建了一个网盘页面。这里需要用到 Microsoft graph 的一些服务，同时需要手动获取到 api 的一些 token 。本来搭建的好好的，可能是因为 多重验证的问题，导致出现 &lt;/p&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="http://blog.31415x.cf/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>[资源]一些电子书下载集合</title>
    <link href="http://blog.31415x.cf/2020/09/30/%E8%B5%84%E6%BA%90-%E4%B8%80%E4%BA%9B%E7%94%B5%E5%AD%90%E4%B9%A6%E4%B8%8B%E8%BD%BD%E9%9B%86%E5%90%88/"/>
    <id>http://blog.31415x.cf/2020/09/30/%E8%B5%84%E6%BA%90-%E4%B8%80%E4%BA%9B%E7%94%B5%E5%AD%90%E4%B9%A6%E4%B8%8B%E8%BD%BD%E9%9B%86%E5%90%88/</id>
    <published>2020-09-30T06:38:29.000Z</published>
    <updated>2021-01-22T06:32:12.139Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>(仅罗列资源，不代表任何立场）</p><ul><li><a href="https://github.com/sxcool1024/Machinery-Industry-Press">https://github.com/sxcool1024/Machinery-Industry-Press</a> 文件提取码：2014 文件解压密码：1024</li><li><a href="https://github.com/fuhmmin/it-ebooks-cn">https://github.com/fuhmmin/it-ebooks-cn</a> <a href="http://it-ebooks.flygon.net/">http://it-ebooks.flygon.net/</a></li><li><a href="https://github.com/programthink/books">https://github.com/programthink/books</a></li><li><a href="https://jikbook.com/">https://jikbook.com/</a> 缺点：百度云</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;script src=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>一个简单的爬取b站up下所有视频的所有评论信息的爬虫</title>
    <link href="http://blog.31415x.cf/2020/03/03/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E5%8F%96b%E7%AB%99up%E4%B8%8B%E6%89%80%E6%9C%89%E8%A7%86%E9%A2%91%E7%9A%84%E6%89%80%E6%9C%89%E8%AF%84%E8%AE%BA%E4%BF%A1%E6%81%AF%E7%9A%84%E7%88%AC%E8%99%AB/"/>
    <id>http://blog.31415x.cf/2020/03/03/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E5%8F%96b%E7%AB%99up%E4%B8%8B%E6%89%80%E6%9C%89%E8%A7%86%E9%A2%91%E7%9A%84%E6%89%80%E6%9C%89%E8%AF%84%E8%AE%BA%E4%BF%A1%E6%81%AF%E7%9A%84%E7%88%AC%E8%99%AB/</id>
    <published>2020-03-02T16:23:39.000Z</published>
    <updated>2020-03-02T16:41:12.898Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>心血来潮搞了一个简单的爬虫，主要是想知道某个人的b站账号，但是你知道，b站在搜索一个用户时，如果这个用户没有投过稿，是搜不到的，，，这时就只能想方法搞到对方的mid，，就是 <code>space.bilibili.com/9444976</code> 后面的那一串数字。偶然看到这个人关注了某个主播，，想到可能这个人会回复主播的视频，于是想着爬到所有up下的视频的评论对应的用户，这样我就可以在数据库里检索昵称得到mid，，，嘿嘿嘿（然而失败了，，不是所有人都像我这么无聊，，，，有些人真的看视频不会回复，，</p><p><a href="https://github.com/31415926535x/CollegeProjectBackup/tree/master/BilibiliSpiders">项目地址: https://github.com/31415926535x/CollegeProjectBackup/tree/master/BilibiliSpiders</a></p><span id="more"></span><p>这个爬虫的主要功能是爬取某个指定up主下的所有视频中的评论（不包括评论的回复，当然可以实现，但是感觉都差不多，就没考虑这块），最后将爬到的用户数据存到数据库里。<a href="https://www.zhihu.com/question/291554395"><strong>整个项目只是抱着学习相关内容的心态来完成，不要做大批量的爬取网站(DDOS)及其敏感数据的事，也不要用作商业用途，，（虽然写的很丑，，，）</strong></a></p><h1 id="简要说明"><a href="#简要说明" class="headerlink" title="简要说明"></a>简要说明</h1><p>整个项目的分为三个部分，首先是爬取指定mid up的所有视频的av号，即 <code>CrawlAllVideosOfAUP.py</code> 这个脚本，使用的api是 <code>https://api.bilibili.com/x/space/arc/search?mid=mid&amp;ps=30&amp;tid=0&amp;pn=pn&amp;keyword=&amp;order=pubdate&amp;jsonp=jsonp</code> 具体的说明见脚本内注释。</p><p>之后有了所有的av号，使用 <code>CrawlCommentUsersByVideo.py</code> 爬取指定av号下的所有评论，使用的api是 <code>https://api.bilibili.com/x/v2/reply?pn=**&amp;type=1&amp;oid=***&amp;sort=2</code> 爬取av号为 oid 下第 pn 页的评论的信息（sort对应的应该是评论的展示顺序用不到没管。可以爬取到很多的信息，根据自己需求来修改脚本计科。</p><p>最后将这两个整合，加一点点细节就行了，，大致是一个能用的脚本（虽然最后没有找到我想要的一个信息，，，，</p><p>具体看注释吧，，很简单的一些东西吧，，长见识为主，留印象。。。。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>之前很早就接触了Python爬虫，，但是只是用一下就扔了，没有自己完全的编写一个，，所以心血来擦写一个练练手，，说不定以后还会遇到这样类似的事，，，</p><p>这个脚本最后将爬取到的数据扔到了数据库里，，因为之前看别人的代码，他是获取一条写入一条，，数据量一大就很慢，，（尤其是用了线程一边获取一遍写入时，因为爬虫一次会获得很多的数据，但是如果保存数据库时一条一条的 <code>commit</code> 些磁盘的io瓶颈就会显露出来，，所以可以加一个 flag ，写入到1000或者某个值时再 <code>commit</code> 这样就很有效率了，，跑偏了）</p><p>大概了解了一下python下的线程的写法，思路都是那个思路，，算是简单的见识一下，，，</p><p>关于windows下的mysql数据库：我们通常会备份一个数据库的某些表的结构到一个文件中，例如 <code>233.sql</code> ，使用的命令可能是 <code>mysqldump -uroot -p databases &gt; 233.sql</code> 等等类似的，，但是这个命令在windows的 <code>PowerShell</code> 会有bug，，具体原因没有深究（猜测是编码的锅），导出的文件不能使用 <code>source 233.sql</code> 导入，，会爆什么 <code>&#39;\0&#39;</code> 等 ASCII错误，，这时的解决方法就是换 <code>cmd</code> ，，这个错误第一次见，，而且不好解决，，迷惑性太大，，容易带偏QAQ，，，太浪费时间了，，，</p><p>好像没啥了。。。(end)</p><p>哦对，加个参考。。。</p><p><a href="https://github.com/airingursb/bilibili-user/blob/master/bilibili_user.py">这是一个暴力爬所有用户信息的，思路差不多的</a></p><p><a href="https://github.com/zhang0peter/bilibili-user-information-spider/blob/master/spider.py">这个也是，简单些的</a></p><p><a href="https://github.com/airingursb/bilibili-user/blob/master/user_agents.txt">user-agents看到一个很全的ua，因为我的数据量不大，所以就没用，记录一下</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;心血来潮搞了一个简单的爬虫，主要是想知道某个人的b站账号，但是你知道，b站在搜索一个用户时，如果这个用户没有投过稿，是搜不到的，，，这时就只能想方法搞到对方的mid，，就是 &lt;code&gt;space.bilibili.com/9444976&lt;/code&gt; 后面的那一串数字。偶然看到这个人关注了某个主播，，想到可能这个人会回复主播的视频，于是想着爬到所有up下的视频的评论对应的用户，这样我就可以在数据库里检索昵称得到mid，，，嘿嘿嘿（然而失败了，，不是所有人都像我这么无聊，，，，有些人真的看视频不会回复，，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/31415926535x/CollegeProjectBackup/tree/master/BilibiliSpiders&quot;&gt;项目地址: https://github.com/31415926535x/CollegeProjectBackup/tree/master/BilibiliSpiders&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="http://blog.31415x.cf/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具使用" scheme="http://blog.31415x.cf/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>笔记-观视频-未曾设想的道路</title>
    <link href="http://blog.31415x.cf/2020/03/01/%E7%AC%94%E8%AE%B0-%E8%A7%82%E8%A7%86%E9%A2%91-%E6%9C%AA%E6%9B%BE%E8%AE%BE%E6%83%B3%E7%9A%84%E9%81%93%E8%B7%AF/"/>
    <id>http://blog.31415x.cf/2020/03/01/%E7%AC%94%E8%AE%B0-%E8%A7%82%E8%A7%86%E9%A2%91-%E6%9C%AA%E6%9B%BE%E8%AE%BE%E6%83%B3%E7%9A%84%E9%81%93%E8%B7%AF/</id>
    <published>2020-02-29T16:33:14.000Z</published>
    <updated>2020-02-29T16:34:55.439Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>观视频-未曾设想的道路-笔记<br><a href="https://www.bilibili.com/video/av92679623">https://www.bilibili.com/video/av92679623</a><br>制度变迁有两种道路：1. （传统的历史唯物主义，生产力的变化引致生产关系的变化）生产力决定生产关系，经济基础决定上层建筑，自下而上的进行制度的变迁，例如：封建领主向封建地主制的变化为何会发生在战国末期，发生在秦国？结合考古史料来看，就是秦国的农业生产出现了升级，主要是铁器和耕牛的使用，使得小农经济的出现成为可能，从而为商鞅变法等一系列改革提供了土壤。 2. 完全反过来，通过先改变生产关系，从而促进了生产力，自上而下的进行制度的变迁，也就是一条“未曾设想的道路”。但是这种道路是在偶然性和机遇之下才会形成的，比如，英国当年会走上资本主义，其实就是一条英国人“未曾设想的道路”</p><span id="more"></span><p>列宁在《论我国革命》提出两个问题：1.世界历史是由一般性和特殊性共同组成，所以第二国际的批评家片面的强调了一般性，而忽略了世界历史的特殊的原则。2.凭什么不能够先夺取上层建筑，然后在文化上或者在生产力上赶上先进国家的水平呢。（是对传统的历史唯物主义的一个创造性的解释。）</p><p>葛兰西讲 十月革命 是一场反对资本论的革命，是一场反对历史唯物主义的革命。</p><p>生产力水平的质的提高是 崭新的经济社会形态确立的前提。</p><p>铁器和牛耕的使用使一家一户的小农经济有可能存在，所以这是商鞅变法中采取 <strong>析户</strong> 政策的生产力基础。</p><p>美国UCLA的历史学家：罗伯特·保罗·布伦纳的研究：14世纪到16世纪欧洲三个不同地区的制度变迁的轨迹：英格兰、法国、易北河以东的东欧地区。14世纪时期，三个地区的生产力水平大体一致，并且农奴制都已经出现解体。而16世纪后，</p><ul><li>英格兰：黑死病造成农奴大量死亡，（8:06为阻止文艺蔓延至北方“鼠疫小镇”亚姆村民拒绝逃离）、封建君主间的兼并战争导致英国贵族数量大量减少，后果是 <em>大土地所有制</em> —圈地运动（兰开斯特家族和约克家族为了争夺王位而引发内战，又称“玫瑰战争”）。英格兰由农奴制转向农业的资本主义生产关系的雏形：贵族将土地租给善于重点的农奴，农奴之间为土地的租约进行竞争，拿到地的农奴雇佣其他的农奴—&gt; 马克思在资本论中研究过的一种阶级结构：土地所有者、租地的农场主、农业的雇佣工人。原因：特殊历史形势造成阶级斗争形势的变化。所有人为了利益的最大化，导致农业的技术进步也就是生产力的发展。布伦纳提出英国资本主义的农业起源的理论。</li><li>东欧：三十年战争和德国农民起义导致东欧工商业大量破坏，使农奴制得以复辟，绝对主义集权的君主制。</li><li>法国：法国资产阶级革命摧毁了旧的土地关系，将贵族和教会的土地分给农民，使得广泛建立起小生产者个体经济。传统的农奴关系向一种汪洋大海般的小农经济过渡</li></ul><p>布伦纳归结为三个地区阶级斗争的具体形势，不同阶级力量斗争关系对比的变化。属于第二条道路，变革的动力来自上层建筑</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;观视频-未曾设想的道路-笔记&lt;br&gt;&lt;a href=&quot;https://www.bilibili.com/video/av92679623&quot;&gt;https://www.bilibili.com/video/av92679623&lt;/a&gt;&lt;br&gt;制度变迁有两种道路：1. （传统的历史唯物主义，生产力的变化引致生产关系的变化）生产力决定生产关系，经济基础决定上层建筑，自下而上的进行制度的变迁，例如：封建领主向封建地主制的变化为何会发生在战国末期，发生在秦国？结合考古史料来看，就是秦国的农业生产出现了升级，主要是铁器和耕牛的使用，使得小农经济的出现成为可能，从而为商鞅变法等一系列改革提供了土壤。 2. 完全反过来，通过先改变生产关系，从而促进了生产力，自上而下的进行制度的变迁，也就是一条“未曾设想的道路”。但是这种道路是在偶然性和机遇之下才会形成的，比如，英国当年会走上资本主义，其实就是一条英国人“未曾设想的道路”&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="http://blog.31415x.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="思想记录" scheme="http://blog.31415x.cf/categories/%E7%AC%94%E8%AE%B0/%E6%80%9D%E6%83%B3%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="笔记" scheme="http://blog.31415x.cf/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="杂记" scheme="http://blog.31415x.cf/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>hexo更新域名以及配置</title>
    <link href="http://blog.31415x.cf/2020/02/21/hexo%E6%9B%B4%E6%96%B0%E5%9F%9F%E5%90%8D%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.31415x.cf/2020/02/21/hexo%E6%9B%B4%E6%96%B0%E5%9F%9F%E5%90%8D%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE/</id>
    <published>2020-02-21T02:01:00.000Z</published>
    <updated>2020-02-21T02:34:10.460Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>现在这个博客的域名是用的是 freenom 下的免费域名进行解析，所以每年都要进行更新一次域名，以及对应的 cloudflare 下的解析，这篇博客是用来记录这一过程，为了之后再重复这个操作做个记录。</p><span id="more"></span><ul><li>首先在 <a href="freenom.com">freenom</a> 上申请新的域名，貌似申请过的域名在一年后可以再次申请，2333</li><li>去 <a href="cloudflare.com">cloudflare</a> 上配置DNS解析：</li><li>Add Site, Select Plan, Add more DNS records:</li><li>添加一项A类型、域名为新域名、IP 为 <code>192.30.252.153</code> Auto TTL、 DNS ONLY(灰色)记录</li><li>添加一项A类型、域名为新域名、IP 为 <code>192.30.252.154</code> Auto TTL、 DNS ONLY(灰色)记录</li><li>添加一项CNAME类型、www、31415926535x.github.io、Proxied(黄色)记录</li><li>更改域名服务器：去 freenom 下的 nameservers，添加 <code>burt.ns.cloudflare.com</code> 和 <code>molly.ns.cloudflare.com</code> cdn域名</li><li>修改 <code>hexo\source\CNAME</code> </li><li>修改 <code>hexo\_config.yml</code> 中的 <code>url</code> </li><li>hexo 更新即可</li></ul><p>end</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;现在这个博客的域名是用的是 freenom 下的免费域名进行解析，所以每年都要进行更新一次域名，以及对应的 cloudflare 下的解析，这篇博客是用来记录这一过程，为了之后再重复这个操作做个记录。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>[工具使用]-新版正方教务系统导出课程表-油猴脚本</title>
    <link href="http://blog.31415x.cf/2020/01/31/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8-%E6%96%B0%E7%89%88%E6%AD%A3%E6%96%B9%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F%E5%AF%BC%E5%87%BA%E8%AF%BE%E7%A8%8B%E8%A1%A8-%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC/"/>
    <id>http://blog.31415x.cf/2020/01/31/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8-%E6%96%B0%E7%89%88%E6%AD%A3%E6%96%B9%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F%E5%AF%BC%E5%87%BA%E8%AF%BE%E7%A8%8B%E8%A1%A8-%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC/</id>
    <published>2020-01-30T16:02:32.000Z</published>
    <updated>2020-03-02T16:29:12.056Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://greasyfork.org/zh-CN/scripts/395847-%E6%96%B0%E7%89%88%E6%AD%A3%E6%96%B9%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F%E5%AF%BC%E5%87%BA%E8%AF%BE%E7%A8%8B%E8%A1%A8">这个油猴脚本</a>主要是针对新版的正方教务系统，实现将课程表转化为一个 <code>courses.ics</code> 文件，这样就可以 <strong>愉快</strong> 的使用 <code>Google Calendar</code> 来看课程表了，<del>（唉，我好像快毕业了哎，，，</del> ，</p><span id="more"></span><h1 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h1><p>安装油猴扩展，然后安装脚本</p><p>在使用前进入到要导出课程表的页面，<img src="https://raw.githubusercontent.com/31415926535x/CollegeProjectBackup/master/ZhengfangClassScheduleToICS/img/1.PNG" alt=""></p><p>然后确定这学期开学的第一周的周一的日期，<img src="https://raw.githubusercontent.com/31415926535x/CollegeProjectBackup/master/ZhengfangClassScheduleToICS/img/2.PNG" alt=""></p><p>点击 <code>生成课表</code> 然后就会提示导出成功，这时点击旁边的 <code>下载ics文件</code> 即可下载 <code>course.ics</code> 文件，<img src="https://raw.githubusercontent.com/31415926535x/CollegeProjectBackup/master/ZhengfangClassScheduleToICS/img/3.PNG" alt=""></p><p>之后怎么使用就看你了，，这样可以不再使用各种 **课程表 等看个课程表还要等半天，看半天广告，而且还占空间。。<del>（深受其害.jpg）</del></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>第一次写脚本，js用的也不熟练，这个脚本参照了一个学长之前根据旧版教务系统的课程表导出脚本写的，一直想自己写一个，一直拖到了新版教务系统，，，无聊时练下手，所以脚本的只是一个可以使用的状况，其中的一些处理没有考虑效率的问题<del>（数据量又不大，暴力就完事了嘛）</del> ，其中可能还存在一些bug每一处理，希望遇到的朋友可以提个issues，嘿嘿。</p><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>有时间将考试信息也加上。。。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://greasyfork.org/zh-CN/scripts/395847-%E6%96%B0%E7%89%88%E6%AD%A3%E6%96%B9%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F%E5%AF%BC%E5%87%BA%E8%AF%BE%E7%A8%8B%E8%A1%A8&quot;&gt;这个油猴脚本&lt;/a&gt;主要是针对新版的正方教务系统，实现将课程表转化为一个 &lt;code&gt;courses.ics&lt;/code&gt; 文件，这样就可以 &lt;strong&gt;愉快&lt;/strong&gt; 的使用 &lt;code&gt;Google Calendar&lt;/code&gt; 来看课程表了，&lt;del&gt;（唉，我好像快毕业了哎，，，&lt;/del&gt; ，&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="http://blog.31415x.cf/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具使用" scheme="http://blog.31415x.cf/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>[笔记]应用写作</title>
    <link href="http://blog.31415x.cf/2019/12/21/%E7%AC%94%E8%AE%B0-%E5%BA%94%E7%94%A8%E5%86%99%E4%BD%9C/"/>
    <id>http://blog.31415x.cf/2019/12/21/%E7%AC%94%E8%AE%B0-%E5%BA%94%E7%94%A8%E5%86%99%E4%BD%9C/</id>
    <published>2019-12-21T08:11:38.000Z</published>
    <updated>2020-01-30T16:27:05.780Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><ul><li>写作的分类： <strong>文学创作</strong> 艺术写作、 <strong>应用写作</strong> 实用写作；</li><li>应用写作的发展： <strong>萌芽期</strong> ： 上古至先秦时期（周易·系辞、尚书（典、谟、训、诰、誓、命）） <strong>初步形成时期</strong> ： 秦汉时期（李斯 《谏逐客书》 晁盖 《论贵粟书》 司马迁 《报任安书》）<strong>发展期</strong> ： 三国魏晋南北朝 （曹操 《求贤令》 诸葛亮《出师表》 <strong>成熟期</strong> ： 唐宋时期（苏轼《答刘巨济书》） <strong>完善期</strong> ：元明清 分上行、平行、下行文 <strong>改革期</strong> ： 辛亥革命至今</li><li>应用写作的特点： 功能实用性、内容的真实性、体式的规定性、表述的简约性、运作的时效性</li><li>学习应用写作的原因： 社会-需要杰出的表达者、个人-个人基本素质，技能之一、自身特点发展趋势</li></ul><span id="more"></span><h1 id="系统写作理论"><a href="#系统写作理论" class="headerlink" title="系统写作理论"></a>系统写作理论</h1><h2 id="系统写作理论-1"><a href="#系统写作理论-1" class="headerlink" title="系统写作理论"></a>系统写作理论</h2><ul><li>系统论的核心思想是 <strong>系统的整体观念</strong> ，分析系统的结构功能， 研究系统、要素、环境 三者的相互关系和变动规律</li><li>基本内容： 考察系统的 <strong>语境、功能、结构及其演化规律</strong></li><li><strong>文体分类</strong> ： 认知功能文体、行事功能文体、人际功能文体</li></ul><h2 id="文本语境"><a href="#文本语境" class="headerlink" title="文本语境"></a>文本语境</h2><ul><li>文本的非语言语境：指不以文本文字形式存在的语境因素，包括 <strong>情景语境</strong> 和 <strong>文化语境</strong></li><li>情景语境： 指构成说话和写作活动的现实条件，包括 <strong>语篇范围（写作对象）</strong> 、 <strong>语篇方式（写作方式）</strong> 、 <strong>语篇基调（写作主体）</strong> 、写作时间和场所</li><li>语篇基调（写作主体）： 作者、协作者、读者</li><li>语言语境： 指以语言文字形式存在的语境因素，包括 <strong>篇际语境</strong> 和 <strong>篇内语境</strong></li><li>篇际语境： 即生产的文本与 <strong>其他</strong> 文本之间的语境关系</li><li>篇内语境： 包括 <strong>篇 与 各部分的语境</strong> 和 **篇中各部分的语境（上下文关系）</li></ul><h2 id="文本功能与结构"><a href="#文本功能与结构" class="headerlink" title="文本功能与结构"></a>文本功能与结构</h2><ul><li>文本的三大功能： 知行功能（写作对象）、人际功能（写作主体）、语篇功能（写作方式）</li></ul><h2 id="文本生产过程"><a href="#文本生产过程" class="headerlink" title="文本生产过程"></a>文本生产过程</h2><ul><li>文本生产过程阶段划分： <strong>准备阶段</strong> 、 <strong>起草阶段</strong> 、 <strong>修改阶段</strong></li><li>文本生产策略： <strong>认知图式策略</strong> 、 <strong>主体互动策略</strong> 、 <strong>创新思维策略</strong> 、</li></ul><h1 id="新闻写作"><a href="#新闻写作" class="headerlink" title="新闻写作"></a>新闻写作</h1><h2 id="新闻文体"><a href="#新闻文体" class="headerlink" title="新闻文体"></a>新闻文体</h2><p>新闻的定义：</p><ul><li>反映说： 新闻是新近发生事实的反映；</li><li>功能说： 新闻是报道或评述重要事实以影响舆论的特殊手段；</li><li>事实说： 新闻是一种新的重要事实；</li><li><strong>公认定义</strong> ：新闻是 向社会成员传递具有新闻价值的真实信息；</li></ul><p>新闻的原则：追求真实的原则、公正报道的原则、准确报道的原则、客观报道的原则</p><p>消息一词最早出现在 《易经》</p><p>消息的特点： 短、快、新、真、社会价值</p><p>消息=事实+价值+传播</p><p>反映新闻价值的要素： 时间性、显著性、接近性、新奇性、重要性、人情味</p><h2 id="消息写作"><a href="#消息写作" class="headerlink" title="消息写作"></a>消息写作</h2><ul><li>消息的结构： 标题、<strong>消息头</strong> 、导语、主体、结尾</li><li>消息头是消息前面那段： <strong><em>出版社</em></strong>电（记者<em>*</em>） 作用：声明版权、发稿来源、时间等</li><li>消息的经典结构： 倒金字塔结构，其他结构： 悬念式结构（金字塔结构）、时间循序结构</li><li>倒金字塔结构： 标题、导语、主体</li></ul><h2 id="消息标题的写作"><a href="#消息标题的写作" class="headerlink" title="消息标题的写作"></a>消息标题的写作</h2><ul><li>多行标题： 引题/眉题、正题/主题、副题/辅题</li><li>双行标题、虚实结合： 引题+正题、正题+副题</li></ul><h2 id="消息导语、主体、背景的写作"><a href="#消息导语、主体、背景的写作" class="headerlink" title="消息导语、主体、背景的写作"></a>消息导语、主体、背景的写作</h2><p>消息的导语： </p><ul><li>位置： 消息的第一段</li><li>功能： 简短笔墨反映要点、为整篇报道定下基调、唤起读者的注意</li><li><strong>写法</strong> ：叙述式、描写式、引用式、评论式等</li></ul><p>消息的主体：</p><ul><li>位置： 导语之后展开的部分</li><li>功能： 对新闻事实做充分而具体的报道和说明，或对导语进行解释、深化，或补充新的事实</li><li>注意： 紧扣主题；具体充实；避免重复</li></ul><p>消息的背景：</p><ul><li>解释、烘托和深化主题，帮助读者理解新闻事实</li><li>代替记者发表议论，使报的现得客观</li><li>补充情况、介绍知识</li></ul><h1 id="调查报告"><a href="#调查报告" class="headerlink" title="调查报告"></a>调查报告</h1><h2 id="何为调查"><a href="#何为调查" class="headerlink" title="何为调查"></a>何为调查</h2><ul><li>调查的过程： 确立调查主题、设计调查方案、实施调查方案、统计分析调查资料、撰写并修改调查报告</li></ul><h2 id="调查的主要方法"><a href="#调查的主要方法" class="headerlink" title="调查的主要方法"></a>调查的主要方法</h2><ul><li>主要方法： 文件调查、实验研究、实地考察、文献查阅</li></ul><h2 id="调查的功能、分类、写作"><a href="#调查的功能、分类、写作" class="headerlink" title="调查的功能、分类、写作"></a>调查的功能、分类、写作</h2><ul><li>功能： 通过定量和定性的分析方法，获取真实的信息反映客观情况、经验、问题或者规律性的东西，满足读者的认知需求</li><li>类型： <strong>情况调查型、典型分析型、探讨研究型</strong></li><li>写作的结构： 标题、概要、正文、结尾、附件</li><li>写作过程： 确定选题并不断优化、科学分析、结构合理、论证充分、深化研究成果</li></ul><h1 id="演讲稿与求职信"><a href="#演讲稿与求职信" class="headerlink" title="演讲稿与求职信"></a>演讲稿与求职信</h1><h2 id="演讲与演讲稿"><a href="#演讲与演讲稿" class="headerlink" title="演讲与演讲稿"></a>演讲与演讲稿</h2><ul><li>演讲稿的特点： 使人信（记叙、描述）、使人知（修辞）、使人行（议论）</li><li>演讲稿的突出特点： 针对性、鲜明性、通俗性、鼓动性</li><li>写作特点： 因时而发、因事而发、因景而发、因情而发</li><li>演讲稿的结构： 标题、开头、主体、结尾</li><li>标题的分类： 概括式、设问式、鼓动式、比喻式</li><li>开头的分类： 开门见山式、提出问题式、引用名句式、实例导入式、现场引入式</li><li>主体的分类： 并列式、递进式、时间顺序式</li><li>结尾的分类： 发出号召、提出建议、展望未来、总结要点</li></ul><h2 id="求职信"><a href="#求职信" class="headerlink" title="求职信"></a>求职信</h2><ul><li>求职信的基本内容： 求职目标、求职缘起、求职条件</li><li>求职信的结构： 称呼、开头、主体、结尾、落款、附件</li></ul><h1 id="规章制度"><a href="#规章制度" class="headerlink" title="规章制度"></a>规章制度</h1><h1 id="党政机关公文"><a href="#党政机关公文" class="headerlink" title="党政机关公文"></a>党政机关公文</h1><h2 id="党政机关公文-1"><a href="#党政机关公文-1" class="headerlink" title="党政机关公文"></a>党政机关公文</h2><ul><li>党政机关公文的概念： 党政机关公文是 党政机关实施领导、履行职能、处理事务 的具有 <strong>特定效力</strong> 和 <strong>规范体式</strong> 的文书；</li><li>特点： 权威性、规范性</li><li>分类：按行文关系和行文方向： 下行文（11种）、平行文（4种）、上行文（3种），其中意见三个都有，通知是下行文和平行文都有</li><li>决议： 适用于 会议讨论通过的重大决策事项</li><li>决定： 适用于 对重要事项作出决策和部署、奖惩有关单位和人员、变更或者撤销下级机关不适当的决定</li><li>命令： 适用于 公布行政法规和规章、宣布实施重大强制性措施、批准授予和晋级衔级、嘉奖有关单位和人员</li><li>公报： 适用于 公布重要决议或重大事项</li><li>公告： 适用于 向国内外宣布重要事项或者法定事项</li><li>通告： 适用于 在一定范围内公布应当遵守或周知的事项</li><li>党政机关公文的格式： 项目和版式</li><li>格式类型： 文件格式、信函格式、命令格式、纪要格式</li><li>文件格式要素三部分： 版头、主体、版记</li></ul><h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><ul><li>通知的功能： 适用于发布、传达要求 <strong>下级</strong> 机关执行和有关单位周知或者执行的事项，批转、转发公文</li><li>通知的特征： 广泛性、指示性、知照性、时效性</li><li>通知的分类： 发布性通知（印发性通知、批转性通知、转发性通知）、 指示性通知（向下级机关安排工作）、 会议通知 、 知照性通知</li><li>发布性通知的结构： 被发布文件、发布根据、发布语、执行要求</li><li>指示性通知： 缘由（用过度语句引起下文）、事项、结尾</li><li>会议通知： 缘由、事项、结尾</li><li>知照性通知： 缘由、事项、结尾</li></ul><h2 id="通报"><a href="#通报" class="headerlink" title="通报"></a>通报</h2><ul><li>通报的文种特征： 实例的典型性、重要性，内容的知照性，教育的知晓性</li><li>通报的分类： 表彰性通报、批评性通报、传达性通报</li></ul><h1 id="报告"><a href="#报告" class="headerlink" title="报告"></a>报告</h1><ul><li>报告的功能： 适用于向上级汇报工作、反映情况、回复上级机关的询问</li><li>报告的特点： 陈述性</li><li>报告的分类： 工作报告、情况报告、答复报告、报送报告</li><li>工作报告的结构： 报告前言、报告主体、报告结语</li></ul><h1 id="请示与批复"><a href="#请示与批复" class="headerlink" title="请示与批复"></a>请示与批复</h1><ul><li>请示的功能： 向上级机关请求指示、批准； 祈请性</li><li>请示的分类： 请求指示性请示、请求批准性请示</li><li>批复的功能： 答复下级机关请示事项； 针对性、政策性</li><li>批复的分类： 指示性批复、审批性批复</li><li>批复的结构： 批复缘由、批复意见、结语</li></ul><h1 id="函"><a href="#函" class="headerlink" title="函"></a>函</h1><ul><li>函的分类： 两类六种： <strong>发函</strong> ：商洽性发函、询问性发函、审批性发函； <strong>复函</strong> ： 商洽性复函、答复性复函、审批性复函</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;绪论&quot;&gt;&lt;a href=&quot;#绪论&quot; class=&quot;headerlink&quot; title=&quot;绪论&quot;&gt;&lt;/a&gt;绪论&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;写作的分类： &lt;strong&gt;文学创作&lt;/strong&gt; 艺术写作、 &lt;strong&gt;应用写作&lt;/strong&gt; 实用写作；&lt;/li&gt;
&lt;li&gt;应用写作的发展： &lt;strong&gt;萌芽期&lt;/strong&gt; ： 上古至先秦时期（周易·系辞、尚书（典、谟、训、诰、誓、命）） &lt;strong&gt;初步形成时期&lt;/strong&gt; ： 秦汉时期（李斯 《谏逐客书》 晁盖 《论贵粟书》 司马迁 《报任安书》）&lt;strong&gt;发展期&lt;/strong&gt; ： 三国魏晋南北朝 （曹操 《求贤令》 诸葛亮《出师表》 &lt;strong&gt;成熟期&lt;/strong&gt; ： 唐宋时期（苏轼《答刘巨济书》） &lt;strong&gt;完善期&lt;/strong&gt; ：元明清 分上行、平行、下行文 &lt;strong&gt;改革期&lt;/strong&gt; ： 辛亥革命至今&lt;/li&gt;
&lt;li&gt;应用写作的特点： 功能实用性、内容的真实性、体式的规定性、表述的简约性、运作的时效性&lt;/li&gt;
&lt;li&gt;学习应用写作的原因： 社会-需要杰出的表达者、个人-个人基本素质，技能之一、自身特点发展趋势&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="笔记" scheme="http://blog.31415x.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="http://blog.31415x.cf/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>ACM-图论-同余最短路</title>
    <link href="http://blog.31415x.cf/2019/10/15/ACM-%E5%9B%BE%E8%AE%BA-%E5%90%8C%E4%BD%99%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    <id>http://blog.31415x.cf/2019/10/15/ACM-%E5%9B%BE%E8%AE%BA-%E5%90%8C%E4%BD%99%E6%9C%80%E7%9F%AD%E8%B7%AF/</id>
    <published>2019-10-15T12:23:07.000Z</published>
    <updated>2019-10-17T05:48:30.702Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>一种没见过的处理模型，，记录一下，，主要是用来处理一个多元一次方程的解的数量的问题，，数据量小时可以用看成背包处理，，数据很大时可以转换成最短路模型+一点数学来处理，，（体积模域下的最短路的问题，，求的一个最简的表示形式有模数来得到所有解</p><span id="more"></span><h1 id="墨墨的等式"><a href="#墨墨的等式" class="headerlink" title="墨墨的等式"></a>墨墨的等式</h1><p><a href="https://www.luogu.org/problem/P2371">题目</a></p><p>因为只是求满足的解的数量，，所以可以将方程转换成一个模方程组，，这样的方程组的解显然也是原来的解的子集，，同时可以利用模数来得到所有解，，</p><p>模数的选择是最小的那个系数，，因为如果任意选择，，会出现一些多考虑的情况</p><p>弄 mi 个点，表示从0到mi-1的所有数，，建边的方法是 <code>i-&gt;(i+a[j])%mi</code> 边权为 a[j] ，，表示从i这个点变成后面一个数的费用，，（因为两边都是取模的，，所以每一个数取几次后的和的余数就是那些经过的点，，也就是说一条路径就是得到一个右边为 i(mod mi) 的一个最小解，，这个最小的解就是费用和，，也就是一条最短路dis[i]</p><p>这样我们对于每一个取模的右边的B都计算一下区间里的数量，，，<del>（计算这玩意推错了一次，，emmm</del></p><p><a href="https://www.luogu.org/blog/0-00-0/solution-p2371">参考</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(TM(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">3e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br>ll n, l, r, a[maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt; ll w;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].w = w;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v; ll w;<br>    node()&#123;&#125;<br>    node(<span class="hljs-keyword">int</span> _v, ll _w):v(_v), w(_w)&#123;&#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;r)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> w &gt; r.w;<br>    &#125;<br>&#125;tmp;<br>ll dis[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, inf, <span class="hljs-keyword">sizeof</span> dis);<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-built_in">priority_queue</span>&lt;node&gt; q;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    q.push(node(s, <span class="hljs-number">0</span>));<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        tmp = q.top(); q.pop();<br>        <span class="hljs-keyword">if</span>(vis[tmp.v])<span class="hljs-keyword">continue</span>;<br>        vis[tmp.v] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[tmp.v]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(dis[v] &gt; dis[tmp.v] + edge[i].w)<br>            &#123;<br>                dis[v] = dis[tmp.v] + edge[i].w;<br>                q.push(node(v, dis[v]));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; l &gt;&gt; r;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>    sort(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n);<br>    <span class="hljs-keyword">int</span> mi = a[<span class="hljs-number">1</span>];<br>    init();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= mi - <span class="hljs-number">1</span>; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>            addedge(i, (i + a[j]) % mi, a[j]);<br>    dijkstra(<span class="hljs-number">0</span>);<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= mi - <span class="hljs-number">1</span>; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(dis[i] &lt;= r)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(dis[i] == <span class="hljs-number">0</span>)dis[i] = mi;<br>            ans += (r - dis[i]) / mi + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(l &gt; dis[i])ans -= (l - dis[i] - <span class="hljs-number">1</span>) / mi + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="P3403-跳楼机"><a href="#P3403-跳楼机" class="headerlink" title="P3403 跳楼机"></a>P3403 跳楼机</h1><p><a href="https://www.luogu.org/problem/P3403">题目</a></p><p>比上面那个简单些，，就是注意细节，，从1开始，，有一个是1那么值一定是h，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(TM(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">3e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br>ll n, l, r, a[maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt; ll w;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].w = w;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v; ll w;<br>    node()&#123;&#125;<br>    node(<span class="hljs-keyword">int</span> _v, ll _w):v(_v), w(_w)&#123;&#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;r)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> w &gt; r.w;<br>    &#125;<br>&#125;tmp;<br>ll dis[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, inf, <span class="hljs-keyword">sizeof</span> dis);<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-built_in">priority_queue</span>&lt;node&gt; q;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    q.push(node(s, <span class="hljs-number">0</span>));<br>    dis[s] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        tmp = q.top(); q.pop();<br>        <span class="hljs-keyword">if</span>(vis[tmp.v])<span class="hljs-keyword">continue</span>;<br>        vis[tmp.v] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[tmp.v]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(dis[v] &gt; dis[tmp.v] + edge[i].w)<br>            &#123;<br>                dis[v] = dis[tmp.v] + edge[i].w;<br>                q.push(node(v, dis[v]));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>    sort(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + <span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">1</span>] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    ll mi = a[<span class="hljs-number">1</span>];<br>    init();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= mi - <span class="hljs-number">1</span>; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>; j &lt;= <span class="hljs-number">3</span>; ++j) <br>            addedge(i, (i + a[j]) % mi, a[j]);<br>    dijkstra(<span class="hljs-number">1</span>);<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= mi - <span class="hljs-number">1</span>; ++i)<br>        <span class="hljs-keyword">if</span>(dis[i] &lt;= n)<br>            ans += (n - dis[i]) / mi + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="遥远的旅途"><a href="#遥远的旅途" class="headerlink" title="遥远的旅途"></a>遥远的旅途</h1><p><a href="http://www.51nod.com/Challenge/Problem.html#problemId=1326">题目</a></p><p>这题的大致思路是将dp问题用最短路来优化，，</p><p>设 <code>dp[i][j]</code> 表示从起点走到i时的长度为j的一条路是否存在，，但是空间都会爆掉，，</p><p>考虑第二维，假设是通过经过若干个环来达到T，，也就是 <code>len+kw==T</code> ，，这里的w即为环的长度的两倍，，如果取模w就是 <code>len%w==T%w</code> ，，这样子dp方程就变成了到达 i 点时路径长度取模等于j的一条路径的长度，，利用spfa来转移，，只要最后 <code>dp[n][T%w] &lt;= T</code> 就表示存在解，这样子利用模数来压缩了状态，，找等同的就行了，，，<a href="https://blog.csdn.net/crybymyself/article/details/54974562">参考</a> <a href="https://www.cnblogs.com/renjianshige/p/7588125.html">参考</a> </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(TM(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e2</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br>ll n, m, T, a[maxn], ww;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt; ll w;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].w = w;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br>ll dp[maxn][<span class="hljs-number">20005</span>];<br><span class="hljs-keyword">bool</span> vis[maxn][<span class="hljs-number">20005</span>];<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, ll&gt; &gt; q;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dp, inf, <span class="hljs-keyword">sizeof</span> dp);<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; vis[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;<br>    q.push(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front().first; ll w = q.front().second; q.pop(); <br>        vis[u][w] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to; ll vw = edge[i].w;<br>            <span class="hljs-keyword">if</span>(dp[v][(w + vw) % ww] &gt; dp[u][w] + vw)<br>            &#123;<br>                dp[v][(w + vw) % ww] = dp[u][w] + vw;<br>                <span class="hljs-keyword">if</span>(!vis[v][(w + vw) % ww])<br>                &#123;<br>                    vis[v][(w + vw) % ww] = <span class="hljs-literal">true</span>;<br>                    q.push(<span class="hljs-built_in">make_pair</span>(v, (w + vw) % ww));<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-keyword">int</span> t; <span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; T;<br>        <span class="hljs-keyword">int</span> u, v, w;<br>        init();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>            ++u, ++v;<br>            addedge(u, v, w);<br>            addedge(v, u, w);<br>        &#125;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[n]; ~i; i = edge[i].nxt)<br>        &#123;<br>            ww = edge[i].w &lt;&lt; <span class="hljs-number">1</span>;<br>            spfa();<br>            <span class="hljs-keyword">if</span>(dp[n][T % ww] &lt;= T)<br>            &#123;<br>                flag = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Possible&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Impossible&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>(end)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一种没见过的处理模型，，记录一下，，主要是用来处理一个多元一次方程的解的数量的问题，，数据量小时可以用看成背包处理，，数据很大时可以转换成最短路模型+一点数学来处理，，（体积模域下的最短路的问题，，求的一个最简的表示形式有模数来得到所有解&lt;/p&gt;</summary>
    
    
    
    <category term="ACM-最短路" scheme="http://blog.31415x.cf/categories/ACM-%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
    
    <category term="ACM" scheme="http://blog.31415x.cf/tags/ACM/"/>
    
    <category term="最短路" scheme="http://blog.31415x.cf/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>2017北京区域赛</title>
    <link href="http://blog.31415x.cf/2019/10/13/2017%E5%8C%97%E4%BA%AC%E5%8C%BA%E5%9F%9F%E8%B5%9B/"/>
    <id>http://blog.31415x.cf/2019/10/13/2017%E5%8C%97%E4%BA%AC%E5%8C%BA%E5%9F%9F%E8%B5%9B/</id>
    <published>2019-10-13T13:48:01.000Z</published>
    <updated>2019-10-29T13:32:46.674Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>模拟题场啊，，，，，</p><p><a href="https://vjudge.net/contest/200099">题目链接</a></p><span id="more"></span><h1 id="E-Cats-and-Fish"><a href="#E-Cats-and-Fish" class="headerlink" title="E - Cats and Fish"></a>E - Cats and Fish</h1><p>签到题吧，，读完题后感觉是模拟，，然后写完之后一测样例wa了，，这时队友说推出公式了，，于是我就放弃调去看别的题了，，，但是wa了几发后又用模拟过的，，，</p><p>直接模拟时间，，记录每只猫的状态，，每次判断一下就行了，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(TM(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e3</span>+ <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> a[maxn], n, m, x;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> TM[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; x)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)vis[i] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)TM[i] = <span class="hljs-number">0</span>;<br>        sort(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n);<br>        <span class="hljs-keyword">int</span> all = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t = <span class="hljs-number">1</span>; t &lt;= x; ++t)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>                <span class="hljs-keyword">if</span>(!vis[i] &amp;&amp; all &lt; m)<br>                &#123;<br>                    vis[i] = <span class="hljs-literal">true</span>;<br>                    ++all;<br>                &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-keyword">if</span>(vis[i])++TM[i];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>                <span class="hljs-keyword">if</span>(vis[i])<br>                &#123;<br>                    TM[i] %= a[i];<br>                    <span class="hljs-keyword">if</span>(TM[i] == <span class="hljs-number">0</span>)vis[i] = <span class="hljs-literal">false</span>;<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-keyword">if</span>(vis[i])++ans;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; m - all &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="F-Secret-Poems"><a href="#F-Secret-Poems" class="headerlink" title="F - Secret Poems"></a>F - Secret Poems</h1><p>小模拟</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(TM(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e3</span>+ <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">char</span> s[maxn][maxn];<br><span class="hljs-keyword">char</span> str[maxn * maxn];<br><span class="hljs-keyword">char</span> t[maxn][maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; s[i] + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; s[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">1</span>, tot = <span class="hljs-number">1</span>;<br>        str[tot++] = s[i][j];<br>        <span class="hljs-keyword">while</span>(i &lt;= n &amp;&amp; j &lt;= n)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(j == n)<br>            &#123;<br>                ++i;<br>                str[tot++] = s[i][j];<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ++j; <br>                str[tot++] = s[i][j];<br>            &#125;<br>            <br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>            &#123;<br>                ++i; --j;<br>                str[tot++] = s[i][j];<br>                <span class="hljs-keyword">if</span>(j == <span class="hljs-number">1</span> || i == n)<span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(j == <span class="hljs-number">1</span> &amp;&amp; i != n)<br>            &#123;<br>                ++i;<br>                str[tot++] = s[i][j];<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i == n)<br>            &#123;<br>                ++j;<br>                str[tot++] = s[i][j];<br>            &#125;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>            &#123;<br>                --i; ++j;<br>                str[tot++] = s[i][j];<br>                <span class="hljs-keyword">if</span>(i == <span class="hljs-number">1</span> || j == n)<span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// for(int i = 1; i &lt;= tot; ++i)cout &lt;&lt; str[i];cout &lt;&lt; endl;</span><br>        <span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>, r = n, up = <span class="hljs-number">1</span>, dn = n;<br>        tot = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(l &lt;= r &amp;&amp; up &lt;= dn)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = l; i &lt;= r; ++i)t[up][i] = str[tot++];<br>            ++up;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = up; i &lt;= dn; ++i)t[i][r] = str[tot++];<br>            --r;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = r; i &gt;= l; --i)t[dn][i] = str[tot++];<br>            --dn;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = dn; i &gt;= up; --i)t[i][l] = str[tot++];<br>            ++l;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j)<br>                <span class="hljs-built_in">cout</span> &lt;&lt; t[i][j];<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="G-Liaoning-Ship’s-Voyage"><a href="#G-Liaoning-Ship’s-Voyage" class="headerlink" title="G - Liaoning Ship’s Voyage"></a>G - Liaoning Ship’s Voyage</h1><p>啊，，，计算几何+bfs，，</p><p>判断一下每一个点之间合不合法，，连边bfs即可，，</p><p>判断就是看这两个点在不在三角形里，，三角形里的点一定是没有边的，有相交的也不行，，，但是因为边上点可以走，，所以要判断一下在边上的情况，，尤其是：</p><p><img src="https://img-blog.csdn.net/20180830233455689?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2MjE1MjU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p><p>这样的情况我以为中间判了，，但是实际没判，，，疯狂wa，，，自闭，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(TM(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-comment">// .......</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sgn</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(x) &lt; eps)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Point</span>&#123;</span><br>    <span class="hljs-keyword">double</span> x, y;<br>    Point()&#123;&#125;<br>    Point(<span class="hljs-keyword">double</span> _x, <span class="hljs-keyword">double</span> _y)&#123;<br>        x = _x; y = _y;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">input</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// scanf(&quot;%lf%lf&quot;, &amp;x, &amp;y);</span><br>        <span class="hljs-built_in">cin</span> &gt;&gt; x &gt;&gt; y;<br>    &#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>==(Point b)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> sgn(x - b.x) == <span class="hljs-number">0</span> &amp;&amp; sgn(y - b.y) == <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(Point b)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> sgn(x - b.x) == <span class="hljs-number">0</span> ? sgn(y - b.y) &lt; <span class="hljs-number">0</span> : x &lt; b.x;<br>    &#125;<br>    Point <span class="hljs-keyword">operator</span>-(<span class="hljs-keyword">const</span> Point &amp;b)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> Point(x - b.x, y - b.y);<br>    &#125;<br>    <span class="hljs-keyword">double</span> <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">const</span> Point &amp;b)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> x * b.x + y * b.y;<br>    &#125;<br>    <span class="hljs-keyword">double</span> <span class="hljs-keyword">operator</span>^(<span class="hljs-keyword">const</span> Point &amp;b)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> x * b.y - y * b.x;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">distance</span><span class="hljs-params">(Point p)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> hypot(x - p.x, y - p.y);<br>    &#125;<br>&#125;p1, p2, p3;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Line</span>&#123;</span><br>    Point s, e;<br>    Line()&#123;&#125;<br>    Line(Point _s, Point _e)&#123;<br>        s = _s;<br>        e = _e;<br>    &#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>==(Line v)&#123;<br>        <span class="hljs-keyword">return</span> (s == v.s) &amp;&amp; (e == v.e);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(Point a, Point b)</span></span>&#123;<br>        s = a;<br>        e = b;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">length</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> s.distance(e);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">dispointtoline</span><span class="hljs-params">(Point p)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">fabs</span>((p - s) ^ (e - s)) / length();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">dispointtoseg</span><span class="hljs-params">(Point p)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(sgn((p - s) * (e - s)) &lt; <span class="hljs-number">0</span> || sgn((p - e) * (s - e)) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> min(p.distance(s), p.distance(e));<br>        <span class="hljs-keyword">return</span> dispointtoline(p);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">segcrosseg</span><span class="hljs-params">(Line v)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> d1 = sgn((e - s) ^ (v.s - s));<br>        <span class="hljs-keyword">int</span> d2 = sgn((e - s) ^ (v.e - s));<br>        <span class="hljs-keyword">int</span> d3 = sgn((v.e - v.s) ^ (s - v.s));<br>        <span class="hljs-keyword">int</span> d4 = sgn((v.e - v.s) ^ (e - v.s));<br>        <span class="hljs-keyword">if</span>((d1 ^ d2) == <span class="hljs-number">-2</span> &amp;&amp; (d3 ^ d4) == <span class="hljs-number">-2</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">return</span> (d1 == <span class="hljs-number">0</span> &amp;&amp; sgn((v.s - s) * (v.s - e)) &lt;= <span class="hljs-number">0</span>) ||<br>            (d2 == <span class="hljs-number">0</span> &amp;&amp; sgn((v.e - s) * (v.e - e)) &lt;= <span class="hljs-number">0</span>) ||<br>            (d3 == <span class="hljs-number">0</span> &amp;&amp; sgn((s - v.s) * (s - v.e)) &lt;= <span class="hljs-number">0</span>) ||<br>            (d4 == <span class="hljs-number">0</span> &amp;&amp; sgn((e - v.s) * (e - v.e)) &lt;= <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">pointonseg</span><span class="hljs-params">(Point p)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> sgn((p - s) ^ (e - s)) == <span class="hljs-number">0</span> &amp;&amp; sgn((p - s) * (p - e)) &lt;= <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getarea</span><span class="hljs-params">(Point p)</span></span>&#123;<br>        <span class="hljs-keyword">double</span> area = dispointtoline(p) * length() / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">return</span> area;<br>    &#125;<br>&#125;l1, l2, l3;<br><br><span class="hljs-comment">// ........</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">egde</span>&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span>&#123;<br>    <span class="hljs-comment">// if(!(tot &amp; 1))cout &lt;&lt; u &lt;&lt; &quot;-&gt;&quot; &lt;&lt; v &lt;&lt; endl;</span><br>    edge[tot].to = v;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> dis[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-built_in">memset</span>(dis, inf, <span class="hljs-keyword">sizeof</span> dis);<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    q.push(s);<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front(); q.pop();<br>        <span class="hljs-keyword">if</span>(vis[u])<span class="hljs-keyword">continue</span>;<br>        vis[u] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(dis[v] &gt; dis[u] + <span class="hljs-number">1</span>)<br>            &#123;<br>                dis[v] = dis[u] + <span class="hljs-number">1</span>;<br>                q.push(v);<br>            &#125;<br>        &#125;<br>    &#125;   <br>&#125;<br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">char</span> mp[<span class="hljs-number">25</span>][<span class="hljs-number">25</span>];<br><span class="hljs-built_in">map</span>&lt;Point, <span class="hljs-keyword">bool</span>&gt; mp1, mp2, mp3, p;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getidx</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> x * n + y;&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(Point a, Point b)</span></span><br><span class="hljs-function"></span>&#123;<br>    Line l = Line(a, b);<br>    <span class="hljs-comment">// if(a.x == 0 &amp;&amp; a.y == 1)&#123;</span><br>    <span class="hljs-comment">//     cout &lt;&lt; a.x &lt;&lt; &quot; &quot; &lt;&lt; a.y &lt;&lt; &quot;; &quot; &lt;&lt; b.x &lt;&lt; &quot; &quot; &lt;&lt; b.y &lt;&lt; endl;</span><br>    <span class="hljs-comment">//     cout &lt;&lt; l.segcrosseg(l1) &lt;&lt; endl;</span><br>    <span class="hljs-comment">//     cout &lt;&lt; l.segcrosseg(l2) &lt;&lt; endl;</span><br>    <span class="hljs-comment">//     cout &lt;&lt; l.segcrosseg(l3) &lt;&lt; endl;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-keyword">if</span>(l.segcrosseg(l1) == <span class="hljs-number">2</span> || l.segcrosseg(l2) == <span class="hljs-number">2</span> || l.segcrosseg(l3) == <span class="hljs-number">2</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(mp1[a] &amp;&amp; mp1[b])<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(mp2[a] &amp;&amp; mp2[b])<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(mp3[a] &amp;&amp; mp3[b])<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span>(!p[a] || !p[b])<br>    &#123;<br>        <span class="hljs-keyword">if</span>((mp1[a] &amp;&amp; mp2[b]) || (mp1[a] &amp;&amp; mp3[b]) || (mp2[a] &amp;&amp; mp1[b]) || (mp2[a] &amp;&amp; mp3[b]) || (mp3[a] &amp;&amp; mp1[b]) || (mp3[a] &amp;&amp; mp2[b]))<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(l.segcrosseg(l1) == <span class="hljs-number">1</span> &amp;&amp; l.segcrosseg(l2) == <span class="hljs-number">1</span> &amp;&amp; l.segcrosseg(l3) == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(l.segcrosseg(l1) == <span class="hljs-number">1</span> || l.segcrosseg(l2) == <span class="hljs-number">1</span> || l.segcrosseg(l3) == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <br>    <span class="hljs-comment">// if(l.segcrosseg(l1) == 1 || l.segcrosseg(l2) == 1 || l.segcrosseg(l3) == 1)return false;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; n)<br>    &#123;<br>        p1.input(); p2.input(); p3.input();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i)<span class="hljs-built_in">cin</span> &gt;&gt; mp[i];<br>        mp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>        l1.init(p1, p2); l2.init(p1, p3); l3.init(p2, p3);<br>        <span class="hljs-keyword">double</span> area = l1.getarea(p3);<br>        mp1.clear(); mp2.clear(); mp3.clear(); p.clear();<br>        p[p1] = <span class="hljs-literal">true</span>; p[p2] = <span class="hljs-literal">true</span>; p[p3] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n - <span class="hljs-number">1</span>; ++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= n - <span class="hljs-number">1</span>; ++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(mp[i][j] == <span class="hljs-string">&#x27;#&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>                Point p = Point(j, i);<br>                <span class="hljs-keyword">double</span> area1 = l1.getarea(p);<br>                <span class="hljs-keyword">double</span> area2 = l2.getarea(p);<br>                <span class="hljs-keyword">double</span> area3 = l3.getarea(p);<br>                <span class="hljs-keyword">if</span>(l1.pointonseg(p))mp1[p] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">if</span>(l2.pointonseg(p))mp2[p] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">if</span>(l3.pointonseg(p))mp3[p] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">if</span>(sgn(area1 + area2 + area3 - area) == <span class="hljs-number">0</span>)mp[i][j] = <span class="hljs-string">&#x27;#&#x27;</span>;<br>                <span class="hljs-keyword">if</span>(mp1[p] || mp2[p] || mp3[p])mp[i][j] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> dx[] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;;<br>        <span class="hljs-keyword">int</span> dy[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;;<br>        Point p, q;<br>        init();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n - <span class="hljs-number">1</span>; ++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= n - <span class="hljs-number">1</span>; ++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(mp[i][j] == <span class="hljs-string">&#x27;#&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>                p = Point((<span class="hljs-keyword">double</span>)j, (<span class="hljs-keyword">double</span>)i);<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-number">7</span>; ++k)<br>                &#123;<br>                    <span class="hljs-keyword">int</span> x = j + dx[k];<br>                    <span class="hljs-keyword">int</span> y = i + dy[k];<br>                    <span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">0</span> || x &gt;= n || y &lt; <span class="hljs-number">0</span> || y &gt;= n)<span class="hljs-keyword">continue</span>;<br>                    <span class="hljs-keyword">if</span>(mp[y][x] == <span class="hljs-string">&#x27;#&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>                    q = Point((<span class="hljs-keyword">double</span>)x, (<span class="hljs-keyword">double</span>)y);<br>                    <span class="hljs-keyword">if</span>(check(p, q))<br>                        addedge(getidx(j, i), getidx(x, y)), addedge(getidx(x, y), getidx(j, i));<br>                &#125;<br>            &#125;<br>        &#125;<br>        dijkstra(n * n, <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// for(int i = 0; i &lt;= n * n; ++i)cout &lt;&lt; i &lt;&lt; &quot;: &quot; &lt;&lt; dis[i] &lt;&lt; endl;</span><br>        <span class="hljs-keyword">if</span>(dis[getidx(n - <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>)] == inf)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; dis[getidx(n - <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>)] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>(end)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;模拟题场啊，，，，，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://vjudge.net/contest/200099&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="ACM-比赛补题" scheme="http://blog.31415x.cf/categories/ACM-%E6%AF%94%E8%B5%9B%E8%A1%A5%E9%A2%98/"/>
    
    <category term="ACM-题解" scheme="http://blog.31415x.cf/categories/ACM-%E6%AF%94%E8%B5%9B%E8%A1%A5%E9%A2%98/ACM-%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="ACM" scheme="http://blog.31415x.cf/tags/ACM/"/>
    
    <category term="题解" scheme="http://blog.31415x.cf/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>ACM-简单图论刷题</title>
    <link href="http://blog.31415x.cf/2019/10/07/ACM-%E7%AE%80%E5%8D%95%E5%9B%BE%E8%AE%BA%E5%88%B7%E9%A2%98/"/>
    <id>http://blog.31415x.cf/2019/10/07/ACM-%E7%AE%80%E5%8D%95%E5%9B%BE%E8%AE%BA%E5%88%B7%E9%A2%98/</id>
    <published>2019-10-07T09:58:20.000Z</published>
    <updated>2019-10-15T12:32:05.488Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>做一些简单图论题，， <a href="https://codeforces.com/problemset?order=BY_RATING_ASC&amp;tags=graphs%2C2000-">list</a></p><span id="more"></span><h1 id="463D-Gargari-and-Permutations-多个串的LCS"><a href="#463D-Gargari-and-Permutations-多个串的LCS" class="headerlink" title="463D    Gargari and Permutations 多个串的LCS"></a>463D    Gargari and Permutations 多个串的LCS</h1><p>对于每一对数： <code>&lt;i, j&gt;</code> ，，如果每一个串的j都在i前面的话连一条边 <code>i-&gt;j</code> ，，然后跑找一个最长路，，<a href="https://codeforces.com/problemset/submission/463/62052575">code</a></p><h1 id="449B-Jzzhu-and-Cities-最短路判必经边"><a href="#449B-Jzzhu-and-Cities-最短路判必经边" class="headerlink" title="449B    Jzzhu and Cities 最短路判必经边"></a>449B    Jzzhu and Cities 最短路判必经边</h1><p>直接跑最短路并记录每个点的路径数，最后可删边对的点v如果路径数大于1或者是这条边的权值小于最短路的值就说明这边可删 （路径数很多以单模），，，记得前面去重就行了，，或者跑完最短路抠出的新图判这个点的入度大于1否，，</p><p>本来是道乱搞题，，最开始的想法错了些就全否了，，不断的写假算法，，，<del>（失去理智</del> <a href="https://codeforces.com/contest/449/submission/62090227">code</a></p><h1 id="558C-Amr-and-Chemistry-暴力？？"><a href="#558C-Amr-and-Chemistry-暴力？？" class="headerlink" title="558C    Amr and Chemistry 暴力？？"></a>558C    Amr and Chemistry 暴力？？</h1><p>一开始看到tag有一个shortest path 以为是根据一些关系来建张图，，然后跑最短路得到答案，，，但是发现不管怎么建边，，最短路都是求得的，，，和最短路没啥关系，，妥妥的暴力，，最后看了官方题解，，才发现将求每个数的情况的搜索看成了最短路，，我,,,emmmmmmm <a href="https://codeforces.com/contest/558/submission/62109249">code</a></p><h1 id="739B-Alyona-and-a-tree-dfs-路径二分"><a href="#739B-Alyona-and-a-tree-dfs-路径二分" class="headerlink" title="739B    Alyona and a tree dfs+路径二分"></a>739B    Alyona and a tree dfs+路径二分</h1><p>这题不错，，</p><p>假定 $dep[u]$ 表示从根节点到点 <code>u</code> 的一条链的前缀路径长度，，这样这条链上的任意一条路径长度就知道了，，然后对于当前访问的一个点 <code>v</code> ，先考虑这个点对上面的某些满足条件的点的贡献：上面的点中存在这样的点 <code>u</code> ，使得 $dep[v] - dep[u] &lt;= a[v]$ 也就是说 <code>v</code> 在 <code>u</code> 的子树中并且路径长度是不大于点权的，，这样的话 <code>u</code> 的个数加一，，</p><p>同样，，这段路径间的点的也满足这样的条件，，因为路径长度是单调的，，所以，，我们只要找到一个满足条件的最远的一个点 <code>u</code> 的上一个，</p><p>（寻找的方法是：将上面的条件转换以下，， $dep[v] - a[v] &lt;= dep[u]$ 又因为dep是单调递增的，，所以找这个 <code>u</code> 就是找一个刚好 $dep[u]$ 是大于等于 $dep[v] - a[v]$ 的点即可），，，，</p><p>将其的答案减一，，然后利用他更新他的上面的点（看成都不算这个点的贡献，，而 <code>u</code> 到 <code>v</code> 的点都会加上一个1），，，对于每一个点考虑dfs中的所有儿子节点的贡献和即可，，<a href="https://codeforces.com/contest/739/submission/62394729">code</a></p><h1 id="1217D-Coloring-Edges-判环-染色"><a href="#1217D-Coloring-Edges-判环-染色" class="headerlink" title="1217D    Coloring Edges 判环+染色"></a>1217D    Coloring Edges 判环+染色</h1><p><a href="https://codeforces.com/contest/1217/submission/61395907">直接拓扑排序判环染色</a>，，<a href="https://codeforces.com/contest/1217/submission/61365723">或者利用dfs的性质来染色判环</a></p><h1 id="842C-Ilya-And-The-Tree-dfs-优化"><a href="#842C-Ilya-And-The-Tree-dfs-优化" class="headerlink" title="842C    Ilya And The Tree dfs+优化"></a>842C    Ilya And The Tree dfs+优化</h1><p>一道搜索题，，刚开始我直接将搜索到的每一条路径的所有数的因数扔到了map中，，然后遍历尝试找一个最大的因数并且其数量是大于等于n-1的，，，但是这样会随着路径的长度map的大小不断地增加，，即使控制反向遍历也会爆栈等等，，可以先假设每一条路径都去掉根节点，这样每一个点的答案就是 $ans[v]=__gcd(ans[u], a[v])$ ，，，然后如果一定加上根节点的话，答案一定是根节点的一个因数，，所以map直接保存的就是根节点的因数，，再像上面那样遍历一遍和第一次得到的答案取最大就行了，，<a href="https://codeforces.com/contest/842/submission/62238501">code</a></p><h1 id="1213G-Path-Queries-并查集"><a href="#1213G-Path-Queries-并查集" class="headerlink" title="1213G    Path Queries 并查集"></a>1213G    Path Queries 并查集</h1><p>离线询问，然后利用并查集将符合当前询问的所有两个点放到一堆集合中，，此时的答案就是每一个集合的边数 $m$ 的 $m(m + 1)/2$ ，，，询问排序后之前加的边也是满足条件的，，，这样就可以利用前一个答案来获得当前的询问的答案，，更新的方式是，，，将这条边的两个点所在的集合的大小 $a, b$ 清空，，然后答案 $ans = ans - (a <em> (a + 1) / 2) - (b </em> (b + 1) / 2) + ((a + b + 1) * (a + b + 2) / 2))$  ，，最后合并集合即可，，刚开始我是用并查集维护边，，，因为要建图，，一直T，，，emmm <a href="https://codeforces.com/contest/1213/submission/62347660">code</a></p><h1 id="776D-The-Door-Problem-2sat"><a href="#776D-The-Door-Problem-2sat" class="headerlink" title="776D    The Door Problem 2sat"></a>776D    The Door Problem 2sat</h1><p>2sat板子题吧，，直接按题意找出限制关系建图判以下就行了，，之前写过，，<a href="https://codeforces.com/contest/776/submission/52218310">code</a></p><h1 id="767C-Garland-dfs-贪心"><a href="#767C-Garland-dfs-贪心" class="headerlink" title="767C    Garland dfs+贪心"></a>767C    Garland dfs+贪心</h1><p>dfs搜出所有的 $sum/3$ 和 $2*sum/3$ 的子树，，记前者为1，后面的为2，，</p><p>记录搜的过程中的1的出现位置，如果出现一个2，并且它的子树中有一个1，那么这就是一个答案，，直接输出后退出程序就行了，，没有跳过</p><p>如果找到一个1的同时他的子树中有一个1，，那么这个1不要，，继续搜，，，最后如果搜到的1超过两个输出就行了，，没有的话就是无解，，，<a href="https://codeforces.com/contest/767/submission/62419845">code</a></p><p><del>（很简单的一道题，，思路很早就通了，，就是实现的时候因为一些细节疯狂wa，，emmmmm</del></p><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;做一些简单图论题，， &lt;a href=&quot;https://codeforces.com/problemset?order=BY_RATING_ASC&amp;amp;tags=graphs%2C2000-&quot;&gt;list&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Codeforces" scheme="http://blog.31415x.cf/categories/Codeforces/"/>
    
    
    <category term="ACM" scheme="http://blog.31415x.cf/tags/ACM/"/>
    
    <category term="刷题" scheme="http://blog.31415x.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>2019-ccpc秦皇岛现场赛</title>
    <link href="http://blog.31415x.cf/2019/10/05/2019-ccpc%E7%A7%A6%E7%9A%87%E5%B2%9B%E7%8E%B0%E5%9C%BA%E8%B5%9B/"/>
    <id>http://blog.31415x.cf/2019/10/05/2019-ccpc%E7%A7%A6%E7%9A%87%E5%B2%9B%E7%8E%B0%E5%9C%BA%E8%B5%9B/</id>
    <published>2019-10-05T10:08:28.000Z</published>
    <updated>2019-10-05T11:14:30.066Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>昨天和队友模拟了下今年秦皇岛的区域赛，，，<del>（我全程在演</del></p><p><a href="https://codeforces.com/gym/102361">题目链接</a></p><span id="more"></span><h1 id="D-Decimal"><a href="#D-Decimal" class="headerlink" title="D - Decimal"></a>D - Decimal</h1><p>签到题，，，<del>（感觉在cf上做过，，</del></p><p><del>（然后写反输出白白wa一发,,,,,emmmmmmmm</del></p><h1 id="F-Forest-Program"><a href="#F-Forest-Program" class="headerlink" title="F - Forest Program"></a>F - Forest Program</h1><p>这题我感觉是第二道签到题，，，很简单，，但是我一个人读完题后就想着怎么写代码，，，然后wa了无数发才反应过来还要考虑树边的情况，，，<del>丧失理智</del> ，，，，</p><p>题意就是给一个 <strong>仙人掌图</strong> ，，仙人掌图就是对于每一条边都最多属于一个简单环中，，，然后问你删去一些边使得最后的图是一片森林的方案数，，，显然答案就是每一个环至少删去一个边，，这样每一个环的贡献就是 $2^i-1$ ，，累乘每一个环便是环的情况，，，然后还要考虑剩余边的情况，，然后我就是忘记这个wa的怀疑人生，，，</p><p>找图的环直接dfs就可以个了，，用一个dis数组记录一下到最初的点的距离，，碰到一个环就直接相减就能得到到环的长度，，，<del>(刚好前几天见过这样的dfs判环和求环大小的问题</del></p><p><del>（为什么弧优化后还慢了啊，，，emmmmm</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">4e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">6e5</span> + <span class="hljs-number">233</span>;<br><span class="hljs-comment">// const int mod = 1e9 + 7;</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">998244353</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt;<br>    <span class="hljs-keyword">bool</span> flag;<br>&#125;edge[maxm &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxm &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].flag = <span class="hljs-literal">false</span>;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;ll&gt; ans;<br><span class="hljs-keyword">int</span> vis[maxn];<br>ll dis[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, ll len)</span></span><br><span class="hljs-function"></span>&#123;<br>    vis[u] = <span class="hljs-number">1</span>; dis[u] = len;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> &amp;i = head[u]; ~i; i = edge[i].nxt)<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(edge[i].flag)<span class="hljs-keyword">continue</span>;<br>        edge[i].flag = edge[i ^ <span class="hljs-number">1</span>].flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(vis[v] == <span class="hljs-number">1</span>)<br>        &#123;<br>            ans.push_back(len - dis[v] + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        dfs(v, len + <span class="hljs-number">1</span>);<br>    &#125;<br>    vis[u] = <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">pow_</span><span class="hljs-params">(ll a, ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ret = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b &amp; <span class="hljs-number">1</span>)ret = (ret * a) % mod;<br>        a = (a * a) % mod;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">int</span> n, m; <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    init();<br>    <span class="hljs-keyword">int</span> u, v;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;<br>        addedge(u, v);<br>        addedge(v, u);<br>    &#125;<br>    ans.clear();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)vis[i] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">if</span>(vis[i] != <span class="hljs-number">2</span>)<br>            dfs(i, <span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-comment">// for(auto i: ans)cout &lt;&lt; i &lt;&lt; &quot; &quot;;cout &lt;&lt; endl;</span><br><br>    ll ret = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ans.size(); ++i)<br>        ret = ret * ((pow_(<span class="hljs-number">2</span>, ans[i]) - <span class="hljs-number">1</span>) + mod) % mod;<br>    ll sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ans.size(); ++i)sum += ans[i];<br>    sum = pow_(<span class="hljs-number">2</span>, m - sum) % mod;<br>    <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">0</span>)ret = sum;<br>    <span class="hljs-keyword">else</span> ret = (ret * sum) % mod;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ret &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="I-Invoker"><a href="#I-Invoker" class="headerlink" title="I - Invoker"></a>I - Invoker</h1><p><del>（在我自闭的时候</del> ，，队友过了这题，，这题的题目很像 <del>（基本完全一致</del> 我们的新生赛，，只是求得东西反了过来，，，队友想了暴力+dp过的，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">3e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">5e5</span> + <span class="hljs-number">233</span>;<br><span class="hljs-comment">// const int mod = 1e9 + 7;</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; mp;<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">char</span>, <span class="hljs-keyword">int</span>&gt; special;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> skill[] = &#123;<span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>&#125;;<br><span class="hljs-keyword">int</span> dis[<span class="hljs-number">30</span>][<span class="hljs-number">30</span>];<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; g[<span class="hljs-number">15</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">3</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">3</span>; j++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>; k&lt;<span class="hljs-number">3</span>; k++)<br>            &#123;<br>                <span class="hljs-built_in">string</span> tmp = <span class="hljs-string">&quot;&quot;</span>;<br>                tmp += skill[i];<br>                tmp += skill[j];<br>                tmp += skill[k];<br>                mp[tmp] = i*<span class="hljs-number">9</span> + j*<span class="hljs-number">3</span> + k;<br>            &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> a=<span class="hljs-number">0</span>; a&lt;<span class="hljs-number">27</span>; a++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> b=<span class="hljs-number">0</span>; b&lt;<span class="hljs-number">27</span>; b++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> i = a, j = b;<br>            <span class="hljs-built_in">string</span> tmpi = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-built_in">string</span> tmpj = <span class="hljs-string">&quot;&quot;</span>;<br>            tmpi += skill[i/<span class="hljs-number">9</span>];<br>            i %= <span class="hljs-number">9</span>;<br>            tmpi += skill[i/<span class="hljs-number">3</span>];<br>            i %= <span class="hljs-number">3</span>;<br>            tmpi += skill[i];<br>            tmpj += skill[j/<span class="hljs-number">9</span>];<br>            j %= <span class="hljs-number">9</span>;<br>            tmpj += skill[j/<span class="hljs-number">3</span>];<br>            j %= <span class="hljs-number">3</span>;<br>            tmpj += skill[j];<br>            <span class="hljs-keyword">if</span>(tmpi == tmpj)<br>                dis[a][b] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tmpi[<span class="hljs-number">1</span>] == tmpj[<span class="hljs-number">0</span>] &amp;&amp; tmpi[<span class="hljs-number">2</span>] == tmpj[<span class="hljs-number">1</span>])<br>                dis[a][b] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tmpi[<span class="hljs-number">2</span>] == tmpj[<span class="hljs-number">0</span>])<br>                dis[a][b] = <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">else</span><br>                dis[a][b] = <span class="hljs-number">3</span>;<br>        &#125;<br>    &#125;<br>    special[<span class="hljs-string">&#x27;Y&#x27;</span>] = <span class="hljs-number">0</span>;<br>    special[<span class="hljs-string">&#x27;V&#x27;</span>] = <span class="hljs-number">1</span>;<br>    special[<span class="hljs-string">&#x27;G&#x27;</span>] = <span class="hljs-number">2</span>;<br>    special[<span class="hljs-string">&#x27;C&#x27;</span>] = <span class="hljs-number">3</span>;<br>    special[<span class="hljs-string">&#x27;X&#x27;</span>] = <span class="hljs-number">4</span>;<br>    special[<span class="hljs-string">&#x27;Z&#x27;</span>] = <span class="hljs-number">5</span>;<br>    special[<span class="hljs-string">&#x27;T&#x27;</span>] = <span class="hljs-number">6</span>;<br>    special[<span class="hljs-string">&#x27;F&#x27;</span>] = <span class="hljs-number">7</span>;<br>    special[<span class="hljs-string">&#x27;D&#x27;</span>] = <span class="hljs-number">8</span>;<br>    special[<span class="hljs-string">&#x27;B&#x27;</span>] = <span class="hljs-number">9</span>;<br>    g[<span class="hljs-number">0</span>].push_back(mp[<span class="hljs-string">&quot;QQQ&quot;</span>]);<br>    g[<span class="hljs-number">1</span>].push_back(mp[<span class="hljs-string">&quot;QQW&quot;</span>]);<br>    g[<span class="hljs-number">1</span>].push_back(mp[<span class="hljs-string">&quot;QWQ&quot;</span>]);<br>    g[<span class="hljs-number">1</span>].push_back(mp[<span class="hljs-string">&quot;WQQ&quot;</span>]);<br>    g[<span class="hljs-number">2</span>].push_back(mp[<span class="hljs-string">&quot;QQE&quot;</span>]);<br>    g[<span class="hljs-number">2</span>].push_back(mp[<span class="hljs-string">&quot;QEQ&quot;</span>]);<br>    g[<span class="hljs-number">2</span>].push_back(mp[<span class="hljs-string">&quot;EQQ&quot;</span>]);<br>    g[<span class="hljs-number">3</span>].push_back(mp[<span class="hljs-string">&quot;WWW&quot;</span>]);<br>    g[<span class="hljs-number">4</span>].push_back(mp[<span class="hljs-string">&quot;QWW&quot;</span>]);<br>    g[<span class="hljs-number">4</span>].push_back(mp[<span class="hljs-string">&quot;WQW&quot;</span>]);<br>    g[<span class="hljs-number">4</span>].push_back(mp[<span class="hljs-string">&quot;WWQ&quot;</span>]);<br>    g[<span class="hljs-number">5</span>].push_back(mp[<span class="hljs-string">&quot;WWE&quot;</span>]);<br>    g[<span class="hljs-number">5</span>].push_back(mp[<span class="hljs-string">&quot;WEW&quot;</span>]);<br>    g[<span class="hljs-number">5</span>].push_back(mp[<span class="hljs-string">&quot;EWW&quot;</span>]);<br>    g[<span class="hljs-number">6</span>].push_back(mp[<span class="hljs-string">&quot;EEE&quot;</span>]);<br>    g[<span class="hljs-number">7</span>].push_back(mp[<span class="hljs-string">&quot;QEE&quot;</span>]);<br>    g[<span class="hljs-number">7</span>].push_back(mp[<span class="hljs-string">&quot;EQE&quot;</span>]);<br>    g[<span class="hljs-number">7</span>].push_back(mp[<span class="hljs-string">&quot;EEQ&quot;</span>]);<br>    g[<span class="hljs-number">8</span>].push_back(mp[<span class="hljs-string">&quot;WEE&quot;</span>]);<br>    g[<span class="hljs-number">8</span>].push_back(mp[<span class="hljs-string">&quot;EWE&quot;</span>]);<br>    g[<span class="hljs-number">8</span>].push_back(mp[<span class="hljs-string">&quot;EEW&quot;</span>]);<br>    g[<span class="hljs-number">9</span>].push_back(mp[<span class="hljs-string">&quot;QWE&quot;</span>]);<br>    g[<span class="hljs-number">9</span>].push_back(mp[<span class="hljs-string">&quot;QEW&quot;</span>]);<br>    g[<span class="hljs-number">9</span>].push_back(mp[<span class="hljs-string">&quot;WQE&quot;</span>]);<br>    g[<span class="hljs-number">9</span>].push_back(mp[<span class="hljs-string">&quot;WEQ&quot;</span>]);<br>    g[<span class="hljs-number">9</span>].push_back(mp[<span class="hljs-string">&quot;EWQ&quot;</span>]);<br>    g[<span class="hljs-number">9</span>].push_back(mp[<span class="hljs-string">&quot;EQW&quot;</span>]);<br>&#125;<br><br><span class="hljs-keyword">char</span> s[maxn];<br><span class="hljs-keyword">int</span> dp[maxn][<span class="hljs-number">6</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    init();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(s);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;len; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">6</span>; j++)<br>            dp[i][j] = inf;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;g[special[s[<span class="hljs-number">0</span>]]].size(); i++)<br>        dp[<span class="hljs-number">0</span>][i] = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;len; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>; j&lt;g[special[s[i<span class="hljs-number">-1</span>]]].size(); j++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>; k&lt;g[special[s[i]]].size(); k++)<br>            &#123;<br>                <span class="hljs-keyword">int</span> tmpj = g[special[s[i<span class="hljs-number">-1</span>]]][j];<br>                <span class="hljs-keyword">int</span> tmpk = g[special[s[i]]][k];<br>                dp[i][k] = min(dp[i][k], dp[i<span class="hljs-number">-1</span>][j] + dis[tmpj][tmpk]);<br>            &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> ans = inf;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">6</span>; i++)<br>        ans = min(ans, dp[len<span class="hljs-number">-1</span>][i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans+len);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="J-MUV-LUV-EXTRA"><a href="#J-MUV-LUV-EXTRA" class="headerlink" title="J - MUV LUV EXTRA"></a>J - MUV LUV EXTRA</h1><p>这题我读完题之后感觉是字符串的题，，不知道怎么搞，，最后队友弄出来的，，</p><p>枚举+kmp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LL long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br>LL a, b;<br><span class="hljs-keyword">const</span> LL inf=<span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> LL maxn=<span class="hljs-number">1e7</span>+<span class="hljs-number">7</span>;<br><span class="hljs-built_in">string</span> tem,s=<span class="hljs-string">&quot;&quot;</span>;<br>LL nex[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;tem;<br>    <span class="hljs-keyword">for</span>(LL i=tem.size()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(tem[i]!=<span class="hljs-string">&#x27;.&#x27;</span>) s+=tem[i];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    &#125;<br>    nex[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(LL i=<span class="hljs-number">1</span>;i&lt;=s.size();i++)<br>    &#123;<br>        nex[i]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> k=nex[i<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">while</span>(k!=<span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s[i<span class="hljs-number">-1</span>]==s[k]) &#123;nex[i]=k+<span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;&#125;<br>            <span class="hljs-keyword">else</span> k=nex[k];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;s.size();i++) nex[i]=nex[i+<span class="hljs-number">1</span>];<br>    <span class="hljs-comment">//for(int i =0;i&lt;s.size();i++) cout&lt;&lt;nex[i]&lt;&lt;&#x27; &#x27;;</span><br>    LL ans=-inf;<br>    <span class="hljs-keyword">for</span>(LL i=<span class="hljs-number">0</span>;i&lt;s.size();i++)<br>    &#123;<br>        LL tem=a*(i+<span class="hljs-number">1</span>)-b*(i+<span class="hljs-number">1</span>-nex[i]);<br>        ans=ans&gt;tem?ans:tem;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ans==-inf) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="E-Escape"><a href="#E-Escape" class="headerlink" title="E - Escape"></a>E - Escape</h1><p>晚上看的这题，，网络流简单题，，主要是建图的方式，，，</p><p>题意就是一个矩形的迷宫（或者地图），，有些障碍，，而其他的地方可以放置一个转向器，，这个转向器有4中类型，，然后地图的上方有a个机器人，，下方有b个出口，，问你在随意添加一些转向器后的地图中，，机器人能否全部进入出口，，</p><p><a href="https://blog.csdn.net/weixin_43826249/article/details/101616967">以下内容参考自</a></p><p>首先，，任意两个机器人如果在某一段的路线一致，，那么一定会进入同一个出口，，而且如果两个机器人的路线相反一定会去到对方的起点，，</p><p>于是，，可以看出如果一个机器人经过一个转向器，，其他的机器人是不会经过这个转向器的，，</p><p>因为一开始的机器人都是先下走的，，如果两个进入同一个转向器A，，那么其中一个一定之前经过一个转向器B，，而且这个转向器B会在A的一端的那个方向，，这样子的话前面那个机器人又到不了转向器A了，，，所以是矛盾的，，因此一个转向器上只会经过一个机器人，，，也就是说这个点只能经过一次，，，也就是说如果将这个点看成一个转向器的话，，他只能经过一次，，就是流量是1，，</p><p>再考虑某个点不是转向器的情况: 显然不是转向器的话，，这个点可以经过两次： 一次横的一次竖的，，，也就是说将这点看成两个边： 竖的一条边和横着一条边，，他们的流量都是1，，，</p><p>但是有了竖边和横边怎么表示转向呢，，直接将连起来不就行了，，，</p><p>这样，，如果一条流是经过竖边表示从这个点经过，，然后想着竖直方向走下去，，同理横边，，，而如果是经过竖边-&gt;中间边-&gt;横边，，或者反过来就表示是这个点是一个转向器，，而且，，，这样的网络也会保证每个点只可能是一个转向器或者不是，，</p><p>最后将机器人连向对应的最上面的点，，表示机器人只能竖直向下走，，同理出口，，加上源汇点跑最大流，，如果流量等于机器人数就是说有一种方案使得每一个机器人进入出口，，，</p><p>然后我第一次写的建图方式会访问到第0行和第n+1行，，只想了第0行不会产生影响，，忘记了后面的那行会被多组数据覆盖，，wa到怀疑板子抄错-&gt;建图有锅，，，</p><p><del>话说isap为什么会跑出 <code>998ms</code> ，，这个可怕，，，那现场赛不是会有一堆人T穿，，，hlpp 就是友好的 <code>233ms</code> ,, 好吧，，是数组开大了，，，，</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">2e6</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt, cap, flow;<br>&#125;edge[maxm];<br><span class="hljs-keyword">int</span> tot, head[maxm];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> rw = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// cout &lt;&lt; u &lt;&lt; &quot; &quot; &lt;&lt; v &lt;&lt; endl;</span><br>    edge[tot].to = v; edge[tot].cap = w; edge[tot].nxt = head[u];<br>    edge[tot].flow = <span class="hljs-number">0</span>; head[u] = tot++;<br>    edge[tot].to = u; edge[tot].cap = rw; edge[tot].nxt = head[v];<br>    edge[tot].flow = <span class="hljs-number">0</span>; head[v] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> gap[maxm], dep[maxm], pre[maxm], cur[maxm];<br><span class="hljs-keyword">int</span> que[maxm];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dep, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> dep);<br>    <span class="hljs-built_in">memset</span>(gap, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> gap);<br>    gap[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> front = <span class="hljs-number">0</span>, rear = <span class="hljs-number">0</span>;<br>    dep[t] = <span class="hljs-number">0</span>;<br>    que[rear++] = t;<br>    <span class="hljs-keyword">while</span>(front != rear)<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = que[front++];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(dep[v] != <span class="hljs-number">-1</span>)<span class="hljs-keyword">continue</span>;<br>            que[rear++] = v;<br>            dep[v] = dep[u] + <span class="hljs-number">1</span>;<br>            ++gap[dep[v]];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> sta[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">isap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    bfs(s, t);<br>    <span class="hljs-built_in">memcpy</span>(cur, head, <span class="hljs-keyword">sizeof</span> head);<br>    <span class="hljs-keyword">int</span> u = s;<br>    <span class="hljs-keyword">int</span> top = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> maxflow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(dep[s] &lt; n)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(u == t)<br>        &#123;<br>            <span class="hljs-keyword">int</span> mi = inf;<br>            <span class="hljs-keyword">int</span> inser;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(mi &gt; edge[sta[i]].cap - edge[sta[i]].flow)<br>                &#123;<br>                    mi = edge[sta[i]].cap - edge[sta[i]].flow;<br>                    inser = i;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; top; ++i)<br>            &#123;<br>                edge[sta[i]].flow += mi;<br>                edge[sta[i] ^ <span class="hljs-number">1</span>].flow -= mi;<br>            &#125;<br>            maxflow += mi;<br>            top = inser;<br>            u = edge[sta[top] ^ <span class="hljs-number">1</span>].to;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">int</span> v;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = cur[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dep[v] + <span class="hljs-number">1</span> == dep[u])<br>            &#123;<br>                flag = <span class="hljs-literal">true</span>;<br>                cur[u] = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)<br>        &#123;<br>            sta[top++] = cur[u];<br>            u = v;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mi = n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(edge[i].cap - edge[i].flow &amp;&amp; dep[edge[i].to] &lt; mi)<br>            &#123;<br>                mi = dep[edge[i].to];<br>                cur[u] = i;<br>            &#125;<br>        &#125;<br>        --gap[dep[u]];<br>        <span class="hljs-keyword">if</span>(!gap[dep[u]])<span class="hljs-keyword">return</span> maxflow;<br>        dep[u] = mi + <span class="hljs-number">1</span>;<br>        ++gap[dep[u]];<br>        <span class="hljs-keyword">if</span>(u != s)u = edge[sta[--top] ^ <span class="hljs-number">1</span>].to;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxflow;<br>&#125;<br><span class="hljs-keyword">int</span> n, m, a, b;<br><span class="hljs-keyword">char</span> mp[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];<br><span class="hljs-keyword">int</span> bots[<span class="hljs-number">105</span>], exits[<span class="hljs-number">105</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-title">getidx</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> x * m + y;&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">int</span> ca; <span class="hljs-built_in">cin</span> &gt;&gt; ca;<br>    <span class="hljs-keyword">while</span>(ca--)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; a &gt;&gt; b;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; mp[i] + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= a; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; bots[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= b; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; exits[i];<br>        init();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)mp[n + <span class="hljs-number">1</span>][i] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">int</span> sum = (n + <span class="hljs-number">2</span>) * m;<br>        <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>, t = sum * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= a; ++i)addedge(s, bots[i], <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>                <span class="hljs-keyword">if</span>(mp[i][j] != <span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; mp[i + <span class="hljs-number">1</span>][j] != <span class="hljs-string">&#x27;1&#x27;</span>)<br>                    addedge(getidx(i, j), getidx(i + <span class="hljs-number">1</span>, j), <span class="hljs-number">1</span>),<br>                    addedge(getidx(i + <span class="hljs-number">1</span>, j), getidx(i, j), <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m - <span class="hljs-number">1</span>; ++j)<br>                <span class="hljs-keyword">if</span>(mp[i][j] != <span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; mp[i][j + <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;1&#x27;</span>)<br>                    addedge(getidx(i, j) + sum, getidx(i, j + <span class="hljs-number">1</span>) + sum, <span class="hljs-number">1</span>),<br>                    addedge(getidx(i, j + <span class="hljs-number">1</span>) + sum, getidx(i, j) + sum, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j)<br>                <span class="hljs-keyword">if</span>(mp[i][j] != <span class="hljs-string">&#x27;1&#x27;</span>)<br>                    addedge(getidx(i, j), getidx(i, j) + sum, <span class="hljs-number">1</span>),<br>                    addedge(getidx(i, j) + sum, getidx(i, j), <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= b; ++i)addedge(getidx(n + <span class="hljs-number">1</span>, exits[i]), t, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(isap(s, t, t + <span class="hljs-number">1</span>) == a)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;No&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个拆点的方式很不错，，，</p><p>(end)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天和队友模拟了下今年秦皇岛的区域赛，，，&lt;del&gt;（我全程在演&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/gym/102361&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Codeforces" scheme="http://blog.31415x.cf/categories/Codeforces/"/>
    
    
    <category term="ACM" scheme="http://blog.31415x.cf/tags/ACM/"/>
    
    <category term="刷题" scheme="http://blog.31415x.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>ACM-图论刷题</title>
    <link href="http://blog.31415x.cf/2019/10/01/ACM-%E5%9B%BE%E8%AE%BA%E5%88%B7%E9%A2%98/"/>
    <id>http://blog.31415x.cf/2019/10/01/ACM-%E5%9B%BE%E8%AE%BA%E5%88%B7%E9%A2%98/</id>
    <published>2019-10-01T12:43:00.000Z</published>
    <updated>2019-10-17T07:46:36.665Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>自称是一个图论选手，，<del>（但是到头来只是一个板子王</del>，，，稍微变一变的图论题就不怎么会解决了，，，所以决定刷一段时间的图论题，，</p><span id="more"></span><p><a href="https://codeforces.com/problemset?order=BY_RATING_ASC&amp;tags=graphs%2C2600-">ProblemsList</a></p><h1 id="786B-Legacy-区间图最短路"><a href="#786B-Legacy-区间图最短路" class="headerlink" title="786B Legacy 区间图最短路"></a>786B Legacy 区间图最短路</h1><p>区间图最短路板子题，，关于什么是区间图最短路上一篇博客有写，，，</p><h1 id="741C-Arpa’s-overnight-party-and-Mehrdad’s-silent-entering-构造-二分图染色"><a href="#741C-Arpa’s-overnight-party-and-Mehrdad’s-silent-entering-构造-二分图染色" class="headerlink" title="741C    Arpa’s overnight party and Mehrdad’s silent entering 构造+二分图染色"></a>741C    Arpa’s overnight party and Mehrdad’s silent entering 构造+二分图染色</h1><p>二分图染色吧，，二分图，，一个似懂非懂的知识点，，每次看到像二分图的题就想着那几个经典的解法，，然后发现不是就乱想其他的模型，，，就是不会利用到二分图这个东西的一些知识点，，然后搜就完事了，，，</p><p>这题的题意就是2*n个点，，给出n对关系，，然后要保证这n对关系的点以及相邻的三个点中至少两个是 不同的，，，类似染色，，染成两种颜色，，，</p><p>每次看到二分图的题总是局限到左右两边n个点，，然后求一些匹配等等的东西，，，总是忘记最基本的那些，，</p><p>这题要保证一些点间是不同的，，可以看成不断的染色，，一层1，一层2，，这样子，，，</p><p>对于第二个限制条件，，直接保证相邻的两个点不同就行了，，，</p><p>一条边的两端不同就是解，，</p><p><img src="https://img-blog.csdn.net/20161214222817695?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcnpPX0tRUF9Pcno=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p>同时这样子建图可以保证形成的环是简单环，，因为显然每一个点只有题目给出的一条边，，还有我们自己建的一条边，，所以度数都是2，，，因此一定是一个二分图，，，也就是一定有解，，</p><p><strong>不存在奇环的图（也就是环都是偶数）一定是二分图</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">4e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> col[maxn];<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(!q.empty())q.pop();<br>    col[s] = <span class="hljs-number">0</span>;<br>    q.push(s);<br>    <span class="hljs-keyword">while</span>(!q.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = q.front(); q.pop();<br>        <span class="hljs-keyword">if</span>(vis[u])<span class="hljs-keyword">continue</span>;<br>        vis[u] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(vis[v])<span class="hljs-keyword">continue</span>;<br>            col[v] = col[u] ^ <span class="hljs-number">1</span>;<br>            q.push(v);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; p[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">int</span> n; <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">int</span> u, v;<br>    init();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;<br>        p[i].first = u; p[i].second = v;<br>        addedge(u, v);<br>        addedge(v, u);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; ++i)<br>    &#123;<br>        addedge(i &lt;&lt; <span class="hljs-number">1</span>, i &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>);<br>        addedge(i &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, i &lt;&lt; <span class="hljs-number">1</span>);<br>    &#125;<br>    addedge(n &lt;&lt; <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    addedge(<span class="hljs-number">1</span>, n &lt;&lt; <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-built_in">memset</span>(col, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> col);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n; ++i)<span class="hljs-keyword">if</span>(!vis[i])bfs(i);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cout</span> &lt;&lt; col[p[i].first] + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; col[p[i].second] + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="567E-President-and-Roads-最短路-DAG必经路"><a href="#567E-President-and-Roads-最短路-DAG必经路" class="headerlink" title="567E    President and Roads 最短路+DAG必经路"></a>567E    President and Roads 最短路+DAG必经路</h1><p><a href="https://codeforces.com/contest/567/problem/E">题目</a></p><p>这题用到的知识点是 <strong>最短路+DAG必经路</strong> ，，，</p><p>必经路是什么呢，，首先单源最短路中有些点是到不了终点的，，有一些点（边）是必须要走的，，而另一些就是多条最短路中不同的分支，，，这些边是可以任意选择一条路径的，，</p><p>求最短路中必经边我找到两种方法，一种是在跑dijkstra时增加一个信息：当前点的最短路的数量，，另一种是将图转为无向图找桥，，</p><h2 id="最短路径数量解法"><a href="#最短路径数量解法" class="headerlink" title="最短路径数量解法"></a>最短路径数量解法</h2><p>我们假设正着求一边最短路的dis为 <code>dis[0][i]</code> ，，而它的反图的dis是 <code>dis[1][i]</code> ，， 利用这两个信息我们可以简单的判断一条边 <code>u-&gt;v</code> 是不是某一个最短路径中的一条边，，判断方法是： <code>dis[0][u] + w + dis[1][v] == dis[0][t]</code> 这里的w即为边权，，满足这个条件就说明这条边是最短路的一条路，，但是，，这并不能也说明他是最短路的一条必经边，，，</p><p>所以我们需要另一个信息： 最短路径数量，，用 <code>num[0][u]</code> 表示正图中从源点到 <code>u</code> 这个点的最短路的路径数量，，，同理对于返图用 <code>num[1][v]</code> 表示</p><p>我们在跑最短路的时候如果当前遍历的边 <code>u-&gt;v</code> 是可以缩小到这个点 <code>v</code> 的最短路的大小的，，那么到这个点 <code>v</code> 的最短路的数量就等于到 <code>u</code> 这个点的最短路的数量，，而对于那些从不同 <code>u</code> 到 <code>v</code> 的路径且最短路大小相同的情况，，累加即可，，，</p><p>当得到这些信息后，，对于任意一条边 <code>u-&gt;v</code> ，，当他满足第一个条件时，，即他是众多最短路方案中的一条边时，，如果满足到 <code>u</code> 的路径数 乘上 到 <code>v</code> 的路径数 敲好等于从原点到终点的最短路的数量时，，，说明这条边一定是必经路，，</p><p>注意： 最短路的路径数可能很多，，爆ll情况，，，所以可以取个模，，但是只取一次模可能 <del>（一定）</del> 被卡掉，，可以换一个不常见的模数，，或者直接双模即可，，</p><h2 id="判桥"><a href="#判桥" class="headerlink" title="判桥"></a>判桥</h2><p>从上面的分析也可以看出，，我们选择出的必经路一定是 <strong>最短路径</strong> 中的桥，，，删去某一座桥，，原点一定不可达终点，，（注意是最短路路径中的边组成的新的无向图中的桥，，用上面的第一个条件判断即可，，</p><p>所以我们可以在跑完正反图的最短路之后，，挑出最短路的边组成一个新图（最短路DAG），，跑一边 tarjan 来求出所有的桥即可，，</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>这道题的题意就是一个有向图，，首先判断一条边是不是最短路上的边，，然后对于一定要走的边输出YES，，而不一定非得走的输出一个减少的值，，使得这条边的边权减小后的最短路经过这条边，，，</p><h3 id="最短路路径数解法"><a href="#最短路路径数解法" class="headerlink" title="最短路路径数解法"></a>最短路路径数解法</h3><p>模数是 <code>1e9+7</code> 会冲突，，，换一个或者双模数，，</p><h4 id="单模"><a href="#单模" class="headerlink" title="单模"></a>单模</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-comment">// const int mod = 1e9 + 7;</span><br><span class="hljs-keyword">const</span> ll mod = <span class="hljs-number">258280327</span>;<br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt; ll w;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].w = w;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">e</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> u, v; ll w;<br>&#125;e[maxn];<br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v;<br>    ll w;<br>    node()&#123;&#125;;<br>    node(<span class="hljs-keyword">int</span> _v, ll _w):v(_v), w(_w)&#123;&#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;r)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> w &gt; r.w;<br>    &#125;<br>&#125;tmp;<br>ll dis[<span class="hljs-number">2</span>][maxn];<br><span class="hljs-keyword">bool</span> vis[<span class="hljs-number">2</span>][maxn];<br>ll num[<span class="hljs-number">2</span>][maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">bool</span> flag)</span></span><br><span class="hljs-function"></span>&#123;<br>    init();<br>    <span class="hljs-keyword">int</span> u, v; ll w;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        u = e[i].u; v = e[i].v; w = e[i].w;<br>        <span class="hljs-keyword">if</span>(flag)swap(u, v);<br>        addedge(u, v, w);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dis[flag][i] = linf;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)vis[flag][i] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)num[flag][i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">priority_queue</span>&lt;node&gt; p;<br>    <span class="hljs-keyword">while</span>(!p.empty())p.pop();<br>    dis[flag][s] = <span class="hljs-number">0</span>;<br>    num[flag][s] = <span class="hljs-number">1</span>;<br>    p.push(node(s, <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">while</span>(!p.empty())<br>    &#123;<br>        tmp = p.top(); p.pop();<br>        <span class="hljs-keyword">if</span>(vis[flag][tmp.v])<span class="hljs-keyword">continue</span>;<br>        vis[flag][tmp.v] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[tmp.v]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(vis[flag][edge[i].to])<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(dis[flag][edge[i].to] &gt; dis[flag][tmp.v] + edge[i].w)<br>            &#123;<br>                dis[flag][edge[i].to] = dis[flag][tmp.v] + edge[i].w;<br>                num[flag][edge[i].to] = num[flag][tmp.v];<br>                p.push(node(edge[i].to, dis[flag][edge[i].to]));<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dis[flag][edge[i].to] == dis[flag][tmp.v] + edge[i].w)<br>            &#123;<br>                num[flag][edge[i].to] = (num[flag][edge[i].to] + num[flag][tmp.v]) % mod;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br> <br>    <span class="hljs-keyword">int</span> n, m, s, t;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].w;<br>    dijkstra(t, n, m, <span class="hljs-literal">true</span>);<br>    dijkstra(s, n, m, <span class="hljs-literal">false</span>);<br>    ll mi = dis[<span class="hljs-number">0</span>][t];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(dis[<span class="hljs-number">0</span>][e[i].u] + e[i].w + dis[<span class="hljs-number">1</span>][e[i].v] == dis[<span class="hljs-number">0</span>][t] &amp;&amp; (num[<span class="hljs-number">0</span>][e[i].u] * num[<span class="hljs-number">1</span>][e[i].v]) % mod == num[<span class="hljs-number">0</span>][t])<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dis[<span class="hljs-number">0</span>][t] - dis[<span class="hljs-number">0</span>][e[i].u] - dis[<span class="hljs-number">1</span>][e[i].v] - <span class="hljs-number">1</span> &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;CAN &quot;</span> &lt;&lt; e[i].w - (dis[<span class="hljs-number">0</span>][t] - dis[<span class="hljs-number">0</span>][e[i].u] - dis[<span class="hljs-number">1</span>][e[i].v] - <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br> <br> <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="双模"><a href="#双模" class="headerlink" title="双模"></a>双模</h3><p>双模比单模都快，，什么情况，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-comment">// const int mod = 1e9 + 7;</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod1 = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod2 = <span class="hljs-number">1e9</span> + <span class="hljs-number">9</span>;<br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt; ll w;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].w = w;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">e</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> u, v; ll w;<br>&#125;e[maxn];<br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v;<br>    ll w;<br>    node()&#123;&#125;;<br>    node(<span class="hljs-keyword">int</span> _v, ll _w):v(_v), w(_w)&#123;&#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;r)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> w &gt; r.w;<br>    &#125;<br>&#125;tmp;<br>ll dis[<span class="hljs-number">2</span>][maxn];<br><span class="hljs-keyword">bool</span> vis[<span class="hljs-number">2</span>][maxn];<br>ll num1[<span class="hljs-number">2</span>][maxn];<br>ll num2[<span class="hljs-number">2</span>][maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">bool</span> flag)</span></span><br><span class="hljs-function"></span>&#123;<br>    init();<br>    <span class="hljs-keyword">int</span> u, v; ll w;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        u = e[i].u; v = e[i].v; w = e[i].w;<br>        <span class="hljs-keyword">if</span>(flag)swap(u, v);<br>        addedge(u, v, w);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dis[flag][i] = linf;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)vis[flag][i] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)num1[flag][i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)num2[flag][i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">priority_queue</span>&lt;node&gt; p;<br>    <span class="hljs-keyword">while</span>(!p.empty())p.pop();<br>    dis[flag][s] = <span class="hljs-number">0</span>;<br>    num1[flag][s] = num2[flag][s] = <span class="hljs-number">1</span>;<br>    p.push(node(s, <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">while</span>(!p.empty())<br>    &#123;<br>        tmp = p.top(); p.pop();<br>        <span class="hljs-keyword">if</span>(vis[flag][tmp.v])<span class="hljs-keyword">continue</span>;<br>        vis[flag][tmp.v] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[tmp.v]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(vis[flag][edge[i].to])<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(dis[flag][edge[i].to] &gt; dis[flag][tmp.v] + edge[i].w)<br>            &#123;<br>                dis[flag][edge[i].to] = dis[flag][tmp.v] + edge[i].w;<br>                num1[flag][edge[i].to] = num1[flag][tmp.v];<br>                num2[flag][edge[i].to] = num2[flag][tmp.v];<br>                p.push(node(edge[i].to, dis[flag][edge[i].to]));<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dis[flag][edge[i].to] == dis[flag][tmp.v] + edge[i].w)<br>            &#123;<br>                num1[flag][edge[i].to] = (num1[flag][edge[i].to] + num1[flag][tmp.v]) % mod1;<br>                num2[flag][edge[i].to] = (num2[flag][edge[i].to] + num2[flag][tmp.v]) % mod2;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br> <br>    <span class="hljs-keyword">int</span> n, m, s, t;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].w;<br>    dijkstra(t, n, m, <span class="hljs-literal">true</span>);<br>    dijkstra(s, n, m, <span class="hljs-literal">false</span>);<br>    ll mi = dis[<span class="hljs-number">0</span>][t];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(dis[<span class="hljs-number">0</span>][e[i].u] + e[i].w + dis[<span class="hljs-number">1</span>][e[i].v] == dis[<span class="hljs-number">0</span>][t] &amp;&amp;<br>         (num1[<span class="hljs-number">0</span>][e[i].u] * num1[<span class="hljs-number">1</span>][e[i].v]) % mod1 == num1[<span class="hljs-number">0</span>][t] &amp;&amp;<br>         (num2[<span class="hljs-number">0</span>][e[i].u] * num2[<span class="hljs-number">1</span>][e[i].v]) % mod2 == num2[<span class="hljs-number">0</span>][t])<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dis[<span class="hljs-number">0</span>][t] - dis[<span class="hljs-number">0</span>][e[i].u] - dis[<span class="hljs-number">1</span>][e[i].v] - <span class="hljs-number">1</span> &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;CAN &quot;</span> &lt;&lt; e[i].w - (dis[<span class="hljs-number">0</span>][t] - dis[<span class="hljs-number">0</span>][e[i].u] - dis[<span class="hljs-number">1</span>][e[i].v] - <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br> <br> <br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="求桥"><a href="#求桥" class="headerlink" title="求桥"></a>求桥</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt; ll w;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].w = w;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">e</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> u, v; ll w;<br>&#125;e[maxn];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v;<br>    ll w;<br>    node()&#123;&#125;;<br>    node(<span class="hljs-keyword">int</span> _v, ll _w):v(_v), w(_w)&#123;&#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;r)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> w &gt; r.w;<br>    &#125;<br>&#125;tmp;<br>ll dis[<span class="hljs-number">2</span>][maxn];<br><span class="hljs-keyword">bool</span> vis[<span class="hljs-number">2</span>][maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">bool</span> flag)</span></span><br><span class="hljs-function"></span>&#123;<br>    init();<br>    <span class="hljs-keyword">int</span> u, v; ll w;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        u = e[i].u; v = e[i].v; w = e[i].w;<br>        <span class="hljs-keyword">if</span>(flag)swap(u, v);<br>        addedge(u, v, w);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dis[flag][i] = linf;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)vis[flag][i] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">priority_queue</span>&lt;node&gt; p;<br>    <span class="hljs-keyword">while</span>(!p.empty())p.pop();<br>    dis[flag][s] = <span class="hljs-number">0</span>;<br>    p.push(node(s, <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">while</span>(!p.empty())<br>    &#123;<br>        tmp = p.top(); p.pop();<br>        <span class="hljs-keyword">if</span>(vis[flag][tmp.v])<span class="hljs-keyword">continue</span>;<br>        vis[flag][tmp.v] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[tmp.v]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(vis[flag][edge[i].to])<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(dis[flag][edge[i].to] &gt; dis[flag][tmp.v] + edge[i].w)<br>            &#123;<br>                dis[flag][edge[i].to] = dis[flag][tmp.v] + edge[i].w;<br>                p.push(node(edge[i].to, dis[flag][edge[i].to]));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// get bridges</span><br><span class="hljs-built_in">map</span>&lt;ll, <span class="hljs-keyword">bool</span>&gt; bridges;<br><br><span class="hljs-comment">// 无向图求桥</span><br><span class="hljs-keyword">bool</span> vist[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> low[maxn], dfn[maxn], idx;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    low[u] = dfn[u] = ++idx;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(vist[i])<span class="hljs-keyword">continue</span>;        <span class="hljs-comment">// 走过的边不再走</span><br>        vist[i] = vist[i ^ <span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;   <span class="hljs-comment">// 标记边已走过</span><br>        <span class="hljs-keyword">if</span>(!dfn[v])<br>        &#123;<br>            tarjan(v);<br>            low[u] = min(low[u], low[v]);<br>            <span class="hljs-keyword">if</span>(dfn[u] &lt; low[v])bridges[u * maxn + v] = <span class="hljs-literal">true</span>;    <span class="hljs-comment">// 桥</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(low[u] &gt; dfn[v])<br>            low[u] = dfn[v];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">int</span> n, m, s, t;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].w;<br>    dijkstra(t, n, m, <span class="hljs-literal">true</span>);<br>    dijkstra(s, n, m, <span class="hljs-literal">false</span>);<br>    <span class="hljs-comment">// for(int i = 1; i &lt;= m; ++i)addedge(e[i].v, e[i].u, e[i].w);</span><br>    init();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>        <span class="hljs-keyword">if</span>(dis[<span class="hljs-number">0</span>][e[i].u] + e[i].w + dis[<span class="hljs-number">1</span>][e[i].v] == dis[<span class="hljs-number">0</span>][t])<br>            addedge(e[i].u, e[i].v, i), addedge(e[i].v, e[i].u, i);<br>    <span class="hljs-built_in">memset</span>(low, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> low);<br>    <span class="hljs-built_in">memset</span>(dfn, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dfn);<br>    <span class="hljs-built_in">memset</span>(vist, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vist);<br>    idx = <span class="hljs-number">0</span>; bridges.clear();<br>    tarjan(s);<br>    ll mi = dis[<span class="hljs-number">0</span>][t];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(dis[<span class="hljs-number">0</span>][e[i].u] + e[i].w + dis[<span class="hljs-number">1</span>][e[i].v] == dis[<span class="hljs-number">0</span>][t] &amp;&amp; bridges[e[i].u * maxn + e[i].v])<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dis[<span class="hljs-number">0</span>][t] - dis[<span class="hljs-number">0</span>][e[i].u] - dis[<span class="hljs-number">1</span>][e[i].v] - <span class="hljs-number">1</span> &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;CAN &quot;</span> &lt;&lt; e[i].w - (dis[<span class="hljs-number">0</span>][t] - dis[<span class="hljs-number">0</span>][e[i].u] - dis[<span class="hljs-number">1</span>][e[i].v] - <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://codeforces.com/gym/101986/attachments">这道题也是这个类型的</a></p><p><a href="https://blog.csdn.net/u010372095/article/details/47346035">tarjan求桥的写法部分参考这个</a> kuangbin的求得东西多，，对于这道题有点繁琐，，</p><p><a href="https://blog.csdn.net/qq_41848675/article/details/100583051">在理解最短路径数时参考了这个</a></p><h1 id="527E-Data-Center-Drama-欧拉回路-弧优化"><a href="#527E-Data-Center-Drama-欧拉回路-弧优化" class="headerlink" title="527E Data Center Drama 欧拉回路+弧优化"></a>527E Data Center Drama 欧拉回路+弧优化</h1><p><del>（哇，，被这题搞得失去理智好久，，（主要是那个弧优化</del></p><p>题意就是预先给你一个无向图，，增加最少的边，，然后对每一条边指定一个方向 <del>（就是变成有向边）</del> 使得每一个点的出度和入度都是偶数，，</p><p>如果一个图是欧拉回路的话，，我们只要一奇一偶的确定方向就行了，，而如何加边就是两两的将奇度的点连起来，，对于最后如果剩下一个奇度点的话就加一个自环，，（也就是边数为奇数的情况，，</p><p>最后跑一边dfs，，找出所有的回路即可，，</p><p>但是这题边数很多，，直接dfs的话会有多次回溯访问重复边，，所以要删边，，也就是没走过一条边就使后面不会再访问： <code>for(int &amp;i = head[u]; ~i; i = edge[i].nxt)</code> ，，但是这样会有一问题，，如果某个点 <code>u</code> 经过好多次后不能再走，，这个点的所有边的 <code>edge[i].nxt</code> 都为-1了也就是说 <code>head[u] == -1</code> 了，，也就是说此时的 <code>i</code> 的值在dfs完后被修改成了 <code>-1</code> ，，这个时候进行 <code>i</code> 值的更新就成了 <code>i=edge[i == -1].nxt</code> ，，如果edge数组和编译器友好的话这时也不会报错，，也能正常的取上界溢出的值，，可能是0，，然后 <code>i==0</code> 就从这点访问第一条边去了，，，但实际上这个点是不能再走的（因为前面的dfs已经保证都走完了不能再走了，，），，应该是回退到上一层dfs的，，这样子就成了 跳到第一条边dfs，，，这样子如果在dfs中记录访问的边的话就会出错，，，<code>u-&gt;v</code> 中的 <code>v</code> 被改变了，，</p><p>我的解决的方法是每一次从上一层的dfs跳出的时候判断一下i是否为-1，，，是的话表示这个点是无边可走的跳出即可，，，</p><p>看到很多人没有管这个问题，，都是记录的回路的编号，，这样虽然可以保证不管dfs中的变化而结果是对的，，但是总感觉发现问题不解决以后会出大事，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt;<br>    <span class="hljs-keyword">bool</span> flag;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].flag = <span class="hljs-literal">false</span>;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; &gt; ans;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> &amp;i = head[u]; ~i; i = edge[i].nxt)<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(edge[i].flag)<span class="hljs-keyword">continue</span>;<br>        edge[i].flag = edge[i ^ <span class="hljs-number">1</span>].flag = <span class="hljs-literal">true</span>;<br>        dfs(v);<br>        ans.push_back(<span class="hljs-built_in">make_pair</span>(u, v));<br>        <span class="hljs-keyword">if</span>(!~i)<span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> du[maxn];<br><br><span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-keyword">int</span>&gt; p;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">int</span> n, m; <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    init();<br>    <span class="hljs-built_in">memset</span>(du, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> du);<br>    <span class="hljs-keyword">int</span> u, v;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;<br>        ++du[u]; ++du[v];<br>        addedge(u, v);<br>        addedge(v, u);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!p.empty())p.pop();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-keyword">if</span>(du[i] &amp; <span class="hljs-number">1</span>)p.push(i);<br>    <span class="hljs-keyword">while</span>(!p.empty())<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = p.top(); p.pop();<br>        <span class="hljs-keyword">if</span>(p.empty())<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">int</span> v = p.top(); p.pop();<br>        addedge(u, v); addedge(v, u);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(tot &gt;&gt; <span class="hljs-number">1</span> &amp; <span class="hljs-number">1</span>)addedge(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), addedge(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    ans.clear();<br>    dfs(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ans.size(); ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(i &amp; <span class="hljs-number">1</span>)<span class="hljs-built_in">cout</span> &lt;&lt; ans[i].second &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ans[i].first &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; ans[i].first &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ans[i].second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="1147D-Palindrome-XOR-限制关系建图找方案数"><a href="#1147D-Palindrome-XOR-限制关系建图找方案数" class="headerlink" title="1147D Palindrome XOR 限制关系建图找方案数"></a>1147D Palindrome XOR 限制关系建图找方案数</h1><p>这题有点差分约束和2sat的感觉，，但是又不像那两个模型的解决方法，，</p><p>首先b二进制表示一定是和s一样长的，长度为n，，然后我们对a的长度m进行枚举，，建图进行判断是否有解，并累加解的数量，，</p><p>建 <code>n + m + 2</code> 个点，，前面两个表示对应每一位的情况，，后面俩个一个是 <code>0点</code> , 另一个是 <code>1点</code> ，，，并且规定又两种边，，<code>0边</code> 表示 <code>u-&gt;v</code> 的两点是相同的，，反之，， <code>1边</code> 表示是不同的，，这样子建图就能保证 <code>0边</code> 的两点异或一定是0，，后者是1，，，显然对于a的m位用对应的s来判断以下连边就行了，，，这是一种限制关系，，</p><p>另一种是一些确定的限制关系，，比如说对于a、b来说首位一定是1，，和a对应时有一些空出位的情况也一定是确定的，，这种情况我们对应连 <code>0点</code> 和 <code>1点</code> ，，，</p><p>这样建图可以看出一旦一个点的取值确定，，那么与之相连的一个联通块的取值情况也是确定的（根据当前点的情况和边的类型），，也就是一个联通块的取值情况只有两种，，，根据乘法原理就可以知道m的一种取值是的方案数是 $2^C$ ，，但是因为和 <code>0点</code> 和 <code>1点</code> 的取值是确定的，，所以这些连通块是不算的，，最后的答案就是 $2^{C-1}$ ，，，同时，，如果一个联通块根据边的限制关系约束下是不满足的，，说明这种取值下的m是无解的，为零，，，</p><p>整个过程就是一个根据边的限制关系来染色，，并判断是否有解，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-comment">// const int mod = 1e9 + 7;</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">998244353</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt, w;<br>&#125;edge[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].w = w;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br><br>    edge[tot].to = u;<br>    edge[tot].w = w;<br>    edge[tot].nxt = head[v];<br>    head[v] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> col[maxn];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    col[u] = w;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>    &#123;<br>        <span class="hljs-keyword">int</span> v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(col[v] != <span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(col[v] != (edge[i].w ^ w))<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!dfs(v, edge[i].w ^ w))<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">pow_</span><span class="hljs-params">(ll a, ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ret = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b &amp; <span class="hljs-number">1</span>)ret = ret * a % mod;<br>        a = a * a % mod;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-keyword">char</span> s[<span class="hljs-number">1005</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-built_in">cin</span> &gt;&gt; (s + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);reverse(s + <span class="hljs-number">1</span>, s + <span class="hljs-number">1</span> + n);<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> m = <span class="hljs-number">1</span>; m &lt;= n - <span class="hljs-number">1</span>; ++m)<br>    &#123;<br>        init();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n / <span class="hljs-number">2</span>; ++i)addedge(i, n - i + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m / <span class="hljs-number">2</span>; ++i)addedge(n + i, n + m - i + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        addedge(n + <span class="hljs-number">1</span>, n + n + <span class="hljs-number">2</span>, <span class="hljs-number">0</span>); addedge(n + <span class="hljs-number">1</span>, n + m + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        addedge(n + m, n + n + <span class="hljs-number">2</span>, <span class="hljs-number">0</span>); addedge(n + m, n + m + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>            <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;1&#x27;</span>)addedge(i, n + i, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;0&#x27;</span>)addedge(i, n + i, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = m + <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;1&#x27;</span>)addedge(i, n + m + <span class="hljs-number">2</span>, <span class="hljs-number">0</span>), addedge(i, n + m + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;0&#x27;</span>)addedge(i, n + m + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>), addedge(i, n + m + <span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">memset</span>(col, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> col);<br>        <span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + m + <span class="hljs-number">2</span>; ++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(col[i] == <span class="hljs-number">-1</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(dfs(i, <span class="hljs-number">0</span>))++c;<br>                <span class="hljs-keyword">else</span> <br>                &#123;<br>                    c = <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(c)ans = (ans + pow_(<span class="hljs-number">2</span>, c - <span class="hljs-number">1</span>)) % mod;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;自称是一个图论选手，，&lt;del&gt;（但是到头来只是一个板子王&lt;/del&gt;，，，稍微变一变的图论题就不怎么会解决了，，，所以决定刷一段时间的图论题，，&lt;/p&gt;</summary>
    
    
    
    <category term="Codeforces" scheme="http://blog.31415x.cf/categories/Codeforces/"/>
    
    
    <category term="ACM" scheme="http://blog.31415x.cf/tags/ACM/"/>
    
    <category term="刷题" scheme="http://blog.31415x.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>cf-786B区间图最短路</title>
    <link href="http://blog.31415x.cf/2019/09/29/cf-786B%E5%8C%BA%E9%97%B4%E5%9B%BE%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    <id>http://blog.31415x.cf/2019/09/29/cf-786B%E5%8C%BA%E9%97%B4%E5%9B%BE%E6%9C%80%E7%9F%AD%E8%B7%AF/</id>
    <published>2019-09-29T07:54:30.000Z</published>
    <updated>2019-10-25T11:33:20.743Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>偶然看到的这个东西，可以说是第一次见到图论+数据结构的题了，，<a href="https://codeforces.com/problemset/problem/786/B">这题</a>代码很简单，细节处理一下就没啥了，，，主要是一步一步的思路的推导很不错，，</p><span id="more"></span><h1 id="cf-786-Legacy"><a href="#cf-786-Legacy" class="headerlink" title="cf-786 Legacy"></a><a href="https://codeforces.com/problemset/problem/786/B">cf-786 Legacy</a></h1><p><a href="https://codeforces.com/problemset/problem/786/B">cf-786 Legacy</a></p><p>以前做过的图论题就只是图论题，从来没想过和数据结构-线段树扯上关系，，</p><p>这题也算是一个经典的例题了吧，，应该就是那种知道的做过的就会做出来的类型，，</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>题意很简单，就是一个简单的图，，给出一些建图的方式，，但是，和以往不同的是，以前的边的关系给的都是点与点间的关系，，这种题给的方式是区间，，比如说 <code>u-&gt;[l, r]</code> 表示的就是u和这个区间的所有点间都有一条边，，因为一个点也可以看成一个只有自己的区间，，所以我们可以将这类关系统一看成 $[l_1, r_1]-&gt;[l_2, r_2]$ ，，</p><p>容易想到的方法就是直接两个 for 上去，，建出每一条边，，数据很小的时候没问题，，，但是当n 很大时，，显然建图的复杂度可能就是 $O(n^2m)$ 这样不管求最短路就炸了，，，</p><p>一种优化的方法是我们在这两个区间之间加一个点，，这样前面的区间（成为出区间）和后面的一个区间（称为入区间）都和这个点 $p$ 连，，也就是 $\forall u \in [l_1, r_1]: addedge(u, p, w)$ 而 $\forall v \in [l_2, r_2]: addedge(p, v, 0)$ （ $[l_1, r_1]-_u&gt;p-_0&gt;[l_2, r_2]$ ） 这样子就可以降一维的建图，，复杂度就是 $O(2nm)$ ，，但是这样还是很高，，</p><p>这时的建图是线性的建图方式，，线性+区间==线段树？？！！，，这是我做这道题学习到的最有价值的一个处理方式，，在降了一维之后，虽然是线性的建图，，但是点还是很多，，而线段树恰好可以用很少的子区间来表示原来的区间，，，如果将线段树中的每一个表示的区间看成一个点，，那么我们就可以用很少的点来建图，，，这样就可以将上面的n次的建图降下去，，，</p><p>那么这时的问题就变成了该如何利用线段树来处理，，</p><p>我们需要两棵线段树，，一棵看成 <strong>入树</strong> 另一棵看成 <strong>出树</strong> ，，</p><p><img src="https://img-blog.csdn.net/20170723135435553" alt=""></p><p>首先我们的目的是用少量的区间来表示原来的很大的区间，以达到用很少的点来表示原来的所有点，，优化的问题用线段树解决了，，但是，如何正确的表示原来的所有点呢，，，</p><p>线段树的每一个节点表示一个区间，，这个节点可以表示他下面的所有点，，也就是说，，我们可以从上向下的看，，定义选择了一个节点，，就选择了下面的所有点，，，按照这个思想，入树中的一个节点要向其儿子连一条指向儿子的有向边，，也就是说，，入树中所有的边指向下，，用 <code>down</code> 表示</p><p>同理，，对于出树，，我们要保证在一个节点要能表示所有的点，，于是就是一个节点下的所有节点都要指向它，，，这样看这棵树就是一个向上的树，，用 <code>up</code> 表示，，</p><p>这个样子的：</p><p><img src="https://img-blog.csdn.net/20170723140149120" alt=""></p><p>这样最后在这样初始图加上题目给的一些条件的边跑一边最短路就可以了，，</p><p>加上题目的边后的图大致是这样的：</p><p><img src="https://img-blog.csdn.net/20170723141642088" alt=""></p><p>实际上，，这里的线段树的作用只是一个建树和查询其子区间的作用，，这个思想有点像是分块，，，只要能找到一个合理的区间分块，，用一些合理的、数量少的区间表示原来的区间，，就能达到减少点数的作用，，，，而线段树恰好是一个熟悉的、好操作的区间划分模型，，所以很多人都对于 区间图的最短路问题都是套一个线段树的板子，，</p><p>回到这道题，，题目的加边方式只有 点对区间 和 区间对点 两种，，所以我们可以先预留出那n个点，，可以想象成放在这两棵树之间的一排点（不用再将两棵树的叶子节点相连，，），，，</p><p>然后再处理出出树、入树的边后，，对于 <code>u-&gt;[l, r]</code> 和 <code>u-&gt;v</code> 的边，，从点 <code>u</code> 向入树的符合条件的节点连边即可，，因为之前说的入树保证了每一个节点是可以到其下面的叶子节点的，，所以我们这样连边就相当于是点 <code>u</code> 向区间的每一个点连边，，，</p><p>同理对于 <code>[l, r]-&gt;u</code> 这样的边，，我们将入树的对应的节点和点 <code>u</code> 相连，，这样就保证入树中这个区间下的叶子节点可以通过这些区间到点 <code>u</code> ，，这样也满足了题意的同时减少的连边的复杂度，，，</p><p>最后跑最短路，，前n个点的 <code>dis[i]</code> 即为源图的那些点的最短路，，，</p><p>于是我们通过加点减边的方式减小了建图的时间复杂度，，</p><p>关于处理出树、入树的操作，，也就是线段树的建树过程，，其实线段树并不维护任何信息，，我们只是用它自己每个节点表示一个区间这个自身的性质，，所以为了建图，，，我们需要对每一个节点连一些边，，，也就是用一个 <code>id[rt]</code> 标记一下每一个节点的标号即可，，，</p><h2 id="最后的代码："><a href="#最后的代码：" class="headerlink" title="最后的代码："></a>最后的代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Dijkstra</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">    &#123;</span><br>        <span class="hljs-keyword">int</span> to, nxt; ll w;<br>    &#125;edge[maxm];<br>    <span class="hljs-keyword">int</span> tot, head[maxm];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        tot = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll w)</span></span><br><span class="hljs-function">    </span>&#123;<br>        edge[tot].to = v;<br>        edge[tot].w = w;<br>        edge[tot].nxt = head[u];<br>        head[u] = tot++;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">    &#123;</span><br>        <span class="hljs-keyword">int</span> v; ll w;<br>        node()&#123;&#125;<br>        node(<span class="hljs-keyword">int</span> _v, ll _w):v(_v), w(_w)&#123;&#125;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;r)<span class="hljs-keyword">const</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> w &gt; r.w;<br>        &#125;        <br>    &#125;;<br>    <span class="hljs-keyword">bool</span> vis[maxn];<br>    ll dis[maxn];<br>    <span class="hljs-built_in">priority_queue</span>&lt;node&gt; pq;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>        <span class="hljs-built_in">memset</span>(dis, inf, <span class="hljs-keyword">sizeof</span> dis);<br>        <span class="hljs-keyword">while</span>(!pq.empty())pq.pop();<br>        pq.push(node(s, <span class="hljs-number">0</span>));<br>        dis[s] = <span class="hljs-number">0</span>;<br>        node t;<br>        <span class="hljs-keyword">int</span> u;<br>        <span class="hljs-keyword">while</span>(!pq.empty())<br>        &#123;<br>            t = pq.top(); pq.pop();<br>            u = t.v;<br>            <span class="hljs-keyword">if</span>(vis[u])<span class="hljs-keyword">continue</span>;<br>            vis[u] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>            &#123;<br>                <span class="hljs-keyword">int</span> v = edge[i].to;<br>                ll w = edge[i].w;<br>                <span class="hljs-keyword">if</span>(dis[v] &gt; t.w + w)<br>                &#123;<br>                    dis[v] = t.w + w;<br>                    pq.push(node(v, dis[v]));<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cout</span> &lt;&lt; (dis[i] == linf ? <span class="hljs-number">-1</span> : dis[i]) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;dijkstra;<br><br><span class="hljs-keyword">int</span> cnt;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">segmentTree</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> id[maxn];           <span class="hljs-comment">// 节点标记数组，，记录线段树中每一个节点的标号，，从 n+1 开始，，前面的n个是原来的点</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">bool</span> flag)</span>     <span class="hljs-comment">// 建树（建图，，flag == false 表示是一棵入树，边向下，节点指向儿子</span></span><br><span class="hljs-function">    </span>&#123;<br>        id[rt] = ++cnt;<br>        <span class="hljs-keyword">if</span>(l == r)<br>        &#123;<br>            <span class="hljs-keyword">int</span> u = id[rt];<br>            <span class="hljs-keyword">int</span> v = l;<br>            <span class="hljs-keyword">if</span>(flag)swap(u, v);<br>            dijkstra.addedge(u, v, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        build(rt &lt;&lt; <span class="hljs-number">1</span>, l, mid, flag);<br>        build(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, flag);<br>        <span class="hljs-comment">// pushup</span><br>        <span class="hljs-keyword">int</span> u = id[rt];<br>        <span class="hljs-keyword">int</span> v = id[rt &lt;&lt; <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span>(flag)swap(u, v);<br>        dijkstra.addedge(u, v, <span class="hljs-number">0</span>);<br>        u = id[rt];<br>        v = id[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span>(flag)swap(u, v);<br>        dijkstra.addedge(u, v, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> U, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R, ll w, <span class="hljs-keyword">bool</span> flag)</span>    <span class="hljs-comment">// flag == false 表示 u-&gt;[l, r] ，，</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(l &gt; R || L &gt; r)<span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)<br>        &#123;<br>            <span class="hljs-keyword">int</span> u = U;<br>            <span class="hljs-keyword">int</span> v = id[rt];<br>            <span class="hljs-keyword">if</span>(flag)swap(u, v);<br>            dijkstra.addedge(u, v, w);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(L &lt;= mid)addedge(rt &lt;&lt; <span class="hljs-number">1</span>, l, mid, U, L, R, w, flag);<br>        <span class="hljs-keyword">if</span>(R &gt;  mid)addedge(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, U, L, R, w, flag);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;down, up;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">int</span> n, q, s;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; q &gt;&gt; s;<br>    cnt = n;                <span class="hljs-comment">// 出树、入树等的辅助点的标记从n+1开始</span><br>    dijkstra.init();<br>    down.build(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, <span class="hljs-literal">false</span>);<br>    up.build(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, <span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">int</span> t, u, v, w, l, r;<br>    <span class="hljs-keyword">while</span>(q--)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; t;<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>            l = r = v;<br>            t = <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <br>            <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; l &gt;&gt; r &gt;&gt; w;<br>        <br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">2</span>)<br>            down.addedge(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, u, l, r, w, <span class="hljs-literal">false</span>);   <span class="hljs-comment">// u -&gt; [l, r]</span><br>        <span class="hljs-keyword">else</span><br>            up.addedge(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, u, l, r, w, <span class="hljs-literal">true</span>);      <span class="hljs-comment">// [l, r] -&gt; u</span><br>    &#125;<br>    dijkstra.dijkstra(s, cnt);<br>    dijkstra.print(n);<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/linkfqy/article/details/75907444">以上的一些内容和图片参考这个dalao的博客</a></p><p><a href="https://github.com/4thcalabash/ACM-Code-Library/blob/master/Graph/Dijkstra_interval_graph.cpp">最后的AC代码的大致思路是参考葫芦爷大佬的板子</a></p><h1 id="hdu-5361In-Touch"><a href="#hdu-5361In-Touch" class="headerlink" title="hdu-5361In Touch"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5361">hdu-5361In Touch</a></h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5361">hdu-5361In Touch</a></p><p>差不多的题，，貌似解法有很多，，如果用这种方法来解的话，，只用一棵入树就行了，，，还有可能得改一改写的姿势，，，<del>（重载w爆int一晚上没看出来的怕不是只有我一个了吧，，，emmmm</del></p><h2 id="AC-1"><a href="#AC-1" class="headerlink" title="AC_1"></a>AC_1</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;iostream&gt;</span><br><span class="hljs-comment">// #include &lt;queue&gt;</span><br><span class="hljs-comment">// #include &lt;cstring&gt;</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span>   <span class="hljs-comment">//快读</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))<br>        ch=getchar();<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))<br>        ans=(ans&lt;&lt;<span class="hljs-number">3</span>)+(ans&lt;&lt;<span class="hljs-number">1</span>)+(ch^<span class="hljs-number">48</span>),ch=getchar();<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> to, nxt;<br>    ll w;<br>&#125;edge[maxm];<br><span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">3</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)head[i] = <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ADDEDGE</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[tot].to = v;<br>    edge[tot].w = w;<br>    edge[tot].nxt = head[u];<br>    head[u] = tot++;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v; <br>    ll w;<br>    node()&#123;&#125;;<br>    node(<span class="hljs-keyword">int</span> _v, ll _w): v(_v), w(_w)&#123;&#125;;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;r)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> w &gt; r.w;<br>    &#125;<br>&#125;tmp;<br><span class="hljs-keyword">bool</span> vis[maxn &lt;&lt; <span class="hljs-number">3</span>];<br>ll dis[maxn &lt;&lt; <span class="hljs-number">3</span>];<br><span class="hljs-built_in">priority_queue</span>&lt;node&gt; pq;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dis[i] = linf;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)vis[i] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">while</span>(!pq.empty())pq.pop();<br>    pq.push(node(s, <span class="hljs-number">0</span>));<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!pq.empty())<br>    &#123;<br>        tmp = pq.top(); pq.pop();<br>        <span class="hljs-keyword">if</span>(vis[tmp.v])<span class="hljs-keyword">continue</span>;<br>        vis[tmp.v] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[tmp.v]; ~i; i = edge[i].nxt)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(dis[v] &gt; dis[tmp.v] + edge[i].w)<br>            &#123;<br>                dis[v] = dis[tmp.v] + edge[i].w;<br>                pq.push(node(v, dis[v]));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">int</span> cnt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l == r)<br>    &#123;<br>        cnt = max(cnt, rt + n);<br>        ADDEDGE(rt + n, l, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    build(rt &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    build(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    ADDEDGE(rt + n, (rt &lt;&lt; <span class="hljs-number">1</span>) + n, <span class="hljs-number">0</span>);<br>    ADDEDGE(rt + n, (rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>) + n, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">int</span> L, R, W, U;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(L &gt; r || l &gt; R)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)<br>    &#123;<br>        ADDEDGE(U, rt + n, W);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(L &lt;= mid)addedge(rt &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    <span class="hljs-keyword">if</span>(R &gt;  mid)addedge(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>&#125;<br><span class="hljs-keyword">int</span> l[maxn], r[maxn], c[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br><br>    <span class="hljs-comment">// int t; cin &gt;&gt; t;</span><br>    <span class="hljs-comment">// int t; scanf(&quot;%d&quot;, &amp;t);</span><br>    <span class="hljs-keyword">int</span> t; t = read();<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-comment">// cin &gt;&gt; n;</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)l[i] = read();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)r[i] = read();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)c[i] = read();<br>        init(n &lt;&lt; <span class="hljs-number">3</span>);<br>        cnt = <span class="hljs-number">0</span>;<br>        build(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            U = i;<br>            L = i + l[i]; R = i + r[i]; W = c[i];<br>            addedge(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>            L = i - r[i]; R = i - l[i];<br>            addedge(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>        &#125;<br>        dijkstra(<span class="hljs-number">1</span>, cnt);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %lld&quot;</span>, (dis[i] == linf ? <span class="hljs-number">-1</span> : dis[i]));<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AC-2"><a href="#AC-2" class="headerlink" title="AC_2"></a>AC_2</h2><p><del>（不加快读也没事，，，就是不能memset，，，卡memset好恶心，，，，</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e7</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span>   <span class="hljs-comment">//快读</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> ch=getchar();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch))<br>        ch=getchar();<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch))<br>        ans=(ans&lt;&lt;<span class="hljs-number">3</span>)+(ans&lt;&lt;<span class="hljs-number">1</span>)+(ch^<span class="hljs-number">48</span>),ch=getchar();<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Dijkstra</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span><br><span class="hljs-class">    &#123;</span><br>        <span class="hljs-keyword">int</span> to, nxt;<br>        ll w;<br>    &#125;edge[maxm];<br>    <span class="hljs-keyword">int</span> tot, head[maxn &lt;&lt; <span class="hljs-number">3</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        tot = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// memset(head, -1, sizeof head);</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)head[i] = <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, ll w)</span></span><br><span class="hljs-function">    </span>&#123;<br>        edge[tot].to = v;<br>        edge[tot].w = w;<br>        edge[tot].nxt = head[u];<br>        head[u] = tot++;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">    &#123;</span><br>        <span class="hljs-keyword">int</span> v; ll w;<br>        node()&#123;&#125;<br>        node(<span class="hljs-keyword">int</span> _v, ll _w):v(_v), w(_w)&#123;&#125;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node &amp;r)<span class="hljs-keyword">const</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> w &gt; r.w;<br>        &#125;<br>    &#125;;<br>    <span class="hljs-keyword">bool</span> vis[maxn &lt;&lt; <span class="hljs-number">3</span>];<br>    ll dis[maxn &lt;&lt; <span class="hljs-number">3</span>];<br>    <span class="hljs-built_in">priority_queue</span>&lt;node&gt; pq;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// memset(vis, false, sizeof vis);</span><br>        <span class="hljs-comment">// memset(dis, inf, sizeof dis);</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)vis[i] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i)dis[i] = linf;<br>        <span class="hljs-keyword">while</span>(!pq.empty())pq.pop();<br>        pq.push(node(s, <span class="hljs-number">0</span>));<br>        dis[s] = <span class="hljs-number">0</span>;<br>        node t; <span class="hljs-keyword">int</span> u;<br>        <span class="hljs-keyword">while</span>(!pq.empty())<br>        &#123;<br>            t = pq.top(); pq.pop();<br>            u = t.v;<br>            <span class="hljs-keyword">if</span>(vis[u])<span class="hljs-keyword">continue</span>;<br>            vis[u] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; ~i; i = edge[i].nxt)<br>            &#123;<br>                <span class="hljs-keyword">int</span> v = edge[i].to;<br>                ll w = edge[i].w;<br>                <span class="hljs-keyword">if</span>(dis[v] &gt; t.w + w)<br>                &#123;<br>                    dis[v] = t.w + w;<br>                    pq.push(node(v, dis[v]));<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %lld&quot;</span>, (dis[i] == linf ? <span class="hljs-number">-1</span> : dis[i]));<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;dijkstra;<br><br><span class="hljs-keyword">int</span> cnt;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">segmentTree</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> id[maxn &lt;&lt; <span class="hljs-number">3</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">bool</span> flag)</span></span><br><span class="hljs-function">    </span>&#123;<br>        id[rt] = ++cnt;<br>        <span class="hljs-keyword">if</span>(l == r)<br>        &#123;<br>            <span class="hljs-keyword">int</span> u = id[rt];<br>            <span class="hljs-keyword">int</span> v = l; <br>            <span class="hljs-keyword">if</span>(flag)swap(u, v);<br>            dijkstra.addedge(u, v, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        build(rt &lt;&lt; <span class="hljs-number">1</span>, l, mid, flag);<br>        build(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, flag);<br>        <span class="hljs-keyword">int</span> u = id[rt];<br>        <span class="hljs-keyword">int</span> v = id[rt &lt;&lt; <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span>(flag)swap(u, v);<br>        dijkstra.addedge(u, v, <span class="hljs-number">0</span>);<br>        u = id[rt];<br>        v = id[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span>(flag)swap(u, v);<br>        dijkstra.addedge(u, v, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> U, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R, ll w, <span class="hljs-keyword">bool</span> flag)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(L &gt; r || R &lt; l)<span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)<br>        &#123;<br>            <span class="hljs-keyword">int</span> u = U;<br>            <span class="hljs-keyword">int</span> v = id[rt];<br>            <span class="hljs-keyword">if</span>(flag)swap(u, v);<br>            dijkstra.addedge(u, v, w);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(L &lt;= mid)addedge(rt &lt;&lt; <span class="hljs-number">1</span>, l, mid, U, L, R, w, flag);<br>        <span class="hljs-keyword">if</span>(R &gt;  mid)addedge(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, U, L, R, w, flag);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;down; <span class="hljs-comment">//, up;</span><br><br><span class="hljs-keyword">int</span> l[maxn], r[maxn], c[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    <span class="hljs-comment">// ios_base::sync_with_stdio(0);</span><br>    <span class="hljs-comment">// cin.tie(0);cout.tie(0);</span><br><br>    <span class="hljs-keyword">int</span> t; t = read();<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-keyword">int</span> n; n = read();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)l[i] = read();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)r[i] = read();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)c[i] = read();<br>        cnt = n;<br>        dijkstra.init(n &lt;&lt; <span class="hljs-number">3</span>);<br>        down.build(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, <span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">// up.build(1, 1, n, true);</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        &#123;<br>            down.addedge(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, i, l[i] + i, r[i] + i, c[i], <span class="hljs-literal">false</span>);<br>            down.addedge(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, i, max(<span class="hljs-number">1</span>, i - r[i]), max(<span class="hljs-number">1</span>, i - l[i]), c[i], <span class="hljs-literal">false</span>);<br>        &#125;<br>        dijkstra.dijkstra(<span class="hljs-number">1</span>, cnt);<br>        dijkstra.print(n);<br>    &#125;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>(end)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;偶然看到的这个东西，可以说是第一次见到图论+数据结构的题了，，&lt;a href=&quot;https://codeforces.com/problemset/problem/786/B&quot;&gt;这题&lt;/a&gt;代码很简单，细节处理一下就没啥了，，，主要是一步一步的思路的推导很不错，，&lt;/p&gt;</summary>
    
    
    
    <category term="ACM-最短路" scheme="http://blog.31415x.cf/categories/ACM-%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
    
    <category term="ACM" scheme="http://blog.31415x.cf/tags/ACM/"/>
    
    <category term="刷题" scheme="http://blog.31415x.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
    <category term="最短路" scheme="http://blog.31415x.cf/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
    <category term="线段树" scheme="http://blog.31415x.cf/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>2017icpc西安区域赛</title>
    <link href="http://blog.31415x.cf/2019/09/28/2017icpc%E8%A5%BF%E5%AE%89%E5%8C%BA%E5%9F%9F%E8%B5%9B/"/>
    <id>http://blog.31415x.cf/2019/09/28/2017icpc%E8%A5%BF%E5%AE%89%E5%8C%BA%E5%9F%9F%E8%B5%9B/</id>
    <published>2019-09-28T11:59:58.000Z</published>
    <updated>2019-09-28T12:08:04.567Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>线段树专场，，，emmmm</p><p>作完签到就自闭了，，数据出锅2333</p><span id="more"></span><h1 id="A-XOR"><a href="#A-XOR" class="headerlink" title="A. XOR"></a>A. XOR</h1><p>之前就知道看到这个线性基+线段树的板子题，，一直想补，，拖到现在</p><p>题意很简单，，就是问一个区间某些数的异或和与K的或的最大值，，，</p><p>如果没有K，，这道题显然是签到题，，，但是多了一个K，，</p><p>其实K也很好处理，，，</p><p>因为要求两个数的或的最大值，，K又是给定的，，所以我们可以贪心的选择一个二进制位是1的但是对应在K中是0的数，，，这样显然最后求得或值最大，，</p><p>所以这题就变成了不考虑K中是1的那几位的数，，也就是对于 $a_i$ 只考虑K对应位是0的那些数，，将1删去，，，删去的操作就是对于每一个数都和K的取反的结果相与，，这样留下的就是在K中是0的那些位，，，最后对于这个处理后的新的数组快乐的用线性基+线段树暴力合并询问就行了，，，</p><p>线性基的合并要使用不是高斯消元的那种，，<del>（忘记关同步T了一发</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> aaa cout&lt;&lt;233&lt;&lt;endl;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> ld;<br><span class="hljs-comment">// mt19937 rnd(time(0));</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//1061109567 &gt; 1e9</span><br><span class="hljs-keyword">const</span> ll linf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">4e5</span> + <span class="hljs-number">233</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br>ll n, q, k;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">linerbasis</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxbase = <span class="hljs-number">33</span>;<br>    <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>    ll a[maxbase + <span class="hljs-number">1</span>];<br>    linerbasis()<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> a);<br>    &#125;<br>    linerbasis(ll *x, <span class="hljs-keyword">int</span> n)<br>    &#123;<br>        linerbasis();<br>        build(x, n);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(ll *x, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            insert(x[i]);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> a);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">insert</span><span class="hljs-params">(ll t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t &amp; (<span class="hljs-number">1ll</span> &lt;&lt; i))<br>            &#123;<br>                <span class="hljs-keyword">if</span>(!a[i])<br>                &#123;<br>                    a[i] = t;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                t ^= a[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">0</span>)flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>    <span class="hljs-function">linerbasis <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">const</span> linerbasis &amp;l1, <span class="hljs-keyword">const</span> linerbasis &amp;l2)</span></span><br><span class="hljs-function">    </span>&#123;<br>        linerbasis ret = l1;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-keyword">if</span>(l2.a[i])<br>                ret.insert(l2.a[i]);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">const</span> linerbasis &amp;l)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-keyword">if</span>(l.a[i])<br>                insert(l.a[i]);<br>    &#125;<br>    <span class="hljs-function">ll <span class="hljs-title">queryMax</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        ll ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = maxbase; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-keyword">if</span>((ret ^ a[i]) &gt; ret)<br>                ret ^= a[i];<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;lb[maxn &lt;&lt; <span class="hljs-number">2</span>];<br>ll a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt)</span></span><br><span class="hljs-function"></span>&#123;<br>    lb[rt] = lb[rt].merge(lb[rt &lt;&lt; <span class="hljs-number">1</span>], lb[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    lb[rt].clear();<br>    <span class="hljs-keyword">if</span>(l == r)<br>    &#123;<br>        lb[rt].insert(a[l]);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    build(rt &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    build(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    pushup(rt);<br>&#125;<br><span class="hljs-function">linerbasis <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)<br>    &#123;<br>        <span class="hljs-keyword">return</span> lb[rt];<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    linerbasis ret;<br>    <span class="hljs-keyword">if</span>(L &lt;= mid)ret.merge(query(rt &lt;&lt; <span class="hljs-number">1</span>, l, mid, L, R));<br>    <span class="hljs-keyword">if</span>(R &gt;  mid)ret.merge(query(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, L, R));<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// double pp = clock();</span><br>    <span class="hljs-comment">// freopen(&quot;233.in&quot;, &quot;r&quot;, stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;233.out&quot;, &quot;w&quot;, stdout);</span><br>    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">int</span> t; <span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; q &gt;&gt; k;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>        k = ~k;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)a[i] &amp;= k;<br>        k = ~k;<br>        build(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>        <span class="hljs-keyword">int</span> l, r;<br>        <span class="hljs-keyword">while</span>(q--)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; l &gt;&gt; r;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; (k | query(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r).queryMax()) &lt;&lt; <span class="hljs-built_in">endl</span>;        <br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; (clock() - pp) / CLOCKS_PER_SEC &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;线段树专场，，，emmmm&lt;/p&gt;
&lt;p&gt;作完签到就自闭了，，数据出锅2333&lt;/p&gt;</summary>
    
    
    
    
    <category term="ACM" scheme="http://blog.31415x.cf/tags/ACM/"/>
    
    <category term="刷题" scheme="http://blog.31415x.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
</feed>
