<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>31415926535x</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.31415.cf/"/>
  <updated>2018-12-13T08:38:40.734Z</updated>
  <id>http://www.31415.cf/</id>
  
  <author>
    <name>31415926535x</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Codeforces-1084C</title>
    <link href="http://www.31415.cf/2018/12/13/Codeforces-1084C/"/>
    <id>http://www.31415.cf/2018/12/13/Codeforces-1084C/</id>
    <published>2018-12-13T08:02:04.000Z</published>
    <updated>2018-12-13T08:38:40.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p>好久没写博客了，，，最近的事太多了，，几乎没有专门看一个知识点，，，一直在做各种的简单题QAQ。。。</p><h1 id="题意">题意</h1><p><a href="https://codeforces.com/contest/1084/problem/C" target="_blank" rel="noopener">这道题大概的题意就是</a>给你一个串，，，然后找出所有开头结尾都是a的并且中间有b的子串的个数，，，单一的a也算，，，</p><p>一开始看了好几遍都没看懂题意，，，不知道在求啥，，，</p><p><a href="https://www.cnblogs.com/wa007/p/10103272.html" target="_blank" rel="noopener">然后看了一个人的题解</a>，，然后没看懂QAQ,,,,,</p><p>看了官方题解下的一个评论看懂了，，，，，emmmm</p><blockquote><p>It doesn't depend at all if there exists any letter other than a or b in the given string. You can for sure ignore those letters, so the editorial says to erase them. Now, what you have is a string consisting only of a and b's. Also two consecutive b's can be merged as one. So your final string will look something like (a...a)b(a...a)b(a...)...</p></blockquote><blockquote><p>You can now consider this problem as sum of all possible product of subsets of a given set, where each element in the set is the number of a's delimited by b.</p></blockquote><blockquote><p>For example: In the string &quot;aaabaabaaab&quot;, set formed will be {3,2,3,0} (0 can be ignored). Now if you have a set {a1,a2,...,aN}, then sum of all possible products of this set is equal to (1+a1)<em>(1+a2)</em>...*(1+aN)-1.</p></blockquote><blockquote><p>Proof: Write the required answer as follows: S = Sum of products of subset with (size=1)+(size=2)+...(size=N) <span class="math inline">\(S = (a_1+a_2+...a_N)+(a_1*a_2+a_1*a_3......+a_{N-1}*a_N)+...+(a_1*a_2.....a_N)\)</span> After factorization, S = (1+a1)(1+a2)...(1+aN)-1</p></blockquote><p>大致意思就是处理所给的字符串，，，就变成了一堆a一个b一堆a一个b....这样的，，， 也就是一堆a的集合 题目所要的就是调两个个a的集合里调一个a作为子串的首尾，，，这样的就是所要的串，，， 于是总共的个数就是<span class="math inline">\(a_1*a_2*a_3.....a_{n-1}*a_{n}\)</span>,,,对了每个集合还要加一，，表示这个集合选一个或者都不选，，，最后的答案再减一就行了（全不选的情况不符合题意），，，</p><p>他上面那段话的思路是在计算所有的子川的情况时，，长度为1+长度为2+。。。长度为m。。。 这样的话 <span class="math inline">\(sum = (a_1 + a_2+....+a_{n-1} + a_n) + (a_1 * a_2 + a_1 * a_3 + ...+ a_1 * a_m + a_2 * a_3 + ......+ a_{n-1} * a_n) + (a_1 * a_2 * a_3 + ....) + ...\)</span> 然后这个求和可以转化成<span class="math inline">\(sum = (1 + a_1) * (a_2 + 1) * (a_3 + 1) + (a_4 + 1) * .... * (a_n + 1) - 1\)</span></p><blockquote><p>因为：</p></blockquote><blockquote><p><span class="math inline">\(a + b + ab = (a + 1) * (b + 1) - 1\)</span></p></blockquote><blockquote><p><span class="math inline">\(a + b + c + ab + ac + bc + abc = (a + 1) * (b + 1) * (c + 1) - 1\)</span></p></blockquote><h1 id="代码">代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">ll a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("233.txt" , "r" , stdin);</span></span><br><span class="line"><span class="comment">//    freopen("233.out" , "w" , stdout);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> s;<span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    <span class="keyword">int</span> a[maxn];</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = s.length();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">'a'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; len; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[j] == <span class="string">'a'</span>)</span><br><span class="line">                    ++cnt;</span><br><span class="line">                <span class="keyword">if</span>(s[j] == <span class="string">'b'</span> || j == len - <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    a[tot++] = cnt + <span class="number">1</span>;</span><br><span class="line">                    i = j;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">        ans = (ans * a[i]) % mod;</span><br><span class="line">    --ans;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>太水了，，，，QAQ</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;
&lt;p&gt;好久没写博客了，，，最近的事太多了，，几乎没有专门看一个知识点，，，一直在做各种的简单题QAQ。。。&lt;/p&gt;
&lt;h1 id=&quot;题意&quot;&gt;题意&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/cont
      
    
    </summary>
    
      <category term="Codeforces" scheme="http://www.31415.cf/categories/Codeforces/"/>
    
    
      <category term="acm" scheme="http://www.31415.cf/tags/acm/"/>
    
      <category term="刷题" scheme="http://www.31415.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>codeforces-1080C</title>
    <link href="http://www.31415.cf/2018/11/25/codeforces-1080C/"/>
    <id>http://www.31415.cf/2018/11/25/codeforces-1080C/</id>
    <published>2018-11-25T06:23:53.000Z</published>
    <updated>2018-11-25T08:36:14.857Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p><a href="https://codeforces.com/problemset/problem/1080/C" target="_blank" rel="noopener">昨天正好有时间，做了自己第一场的cf</a></p><p>做完AB之后被C卡到最后，，，从来没做过坐标平面上两个矩形的面积和，，，因为存在相交的可能，，，所以要单独的处理矩形面积交，，然后自己就写懵了，，，当时写了几十行的if判断，，，，到最后都没弄完，，QAQ</p><a id="more"></a><h1 id="题意与分析">题意与分析</h1><h2 id="题意">题意</h2><p>这道题的题意就是给你一个n * m大的方格板子，，类似国际象棋那样，，黑白相间，，然后再给你两个矩形，，第一个矩形内的所有格子涂为白色，，第二个涂为黑色，，，问你最后白格子和黑格子的数量，，棋盘的大小可能是1e9 * 1e9的，，，</p><h2 id="思路">思路</h2><h3 id="我的思路">我的思路</h3><ul><li>一开始我的思路是算出所有的白格子，黑格子的数量(wsum ,bsum)，，，然后wsum加上第一个矩形里的所有黑格子数量，，之后wsum减去第二个矩形里白格子的数量，，，最后再考虑是有面积的相交，，，有的话再计算相交矩形内的，，但是中间的一些细节，，，比如说如何计算不同左下角坐标的矩形内格子数，，如何判是否有相交的矩形，，如何计算相交的矩形内的格子数量以及怎么调整等等，，，以前从来没写过没考虑过，，，只能硬头皮的去一路if下去，，，到最后自己的写懵了，，，</li><li>中途想着直接模拟算了，，，维护一个大矩阵，，1表示白色0表示黑色，，然后对相应的矩形全部置一置零，，，最后求01的数量，，，然后发现根本开不了那么大的数组，，，，QAQ</li></ul><h3 id="最后今天看了出题人的题解"><a href="https://codeforces.com/blog/entry/63436#comment-473595" target="_blank" rel="noopener">最后今天看了出题人的题解，，，</a></h3><h4 id="矩形1-1-x-y内白格子的数量的计算"><strong>矩形(1 , 1 , x , y)内白格子的数量的计算</strong></h4><p><span class="math inline">\(设函数w(x , y)返回值为左下角(1 , 1)与(x , y)的矩形内的白格子的数量\)</span></p><h4 id="矩形内白格子数量的计算"><strong>矩形内白格子数量的计算</strong>：</h4><p><span class="math inline">\(任意一个矩形(x_1 , y_1 , x_2 , y_2)内的白格子数量=矩形(1 , 1 , x_2 , y_2)内白格子的数量-矩形(1 , 1 , x_1 , y_2)内白格子的数量-矩形(1 , 1 , x_2 , y_1)内白格子的数量+矩形(1 , 1 , x_1 - 1 , y_1 - 1)内白格子的数量，所以：\)</span></p><p><span class="math display">\[W(x_1 , y_1 , x_2 , y_2) = w(x_1 , y_1) - w(x_1 - 1 , y_2) - w(x_2 , y_1 - 1) + w(x_1 - 1 , y_1 - 1)\]</span></p><h4 id="矩形内黑格子数量的计算"><strong>矩形内黑格子数量的计算</strong></h4><p><span class="math display">\[B(x_1 , y_1 , x_2 , y_2) = (x_2 - x_1 + 1) * (y_2 - y_1 + 1) - W(x_1 , y_1 , x_2 , y_2)\]</span></p><h4 id="相交部分的判断和处理"><strong>相交部分的判断和处理</strong></h4><p>出题人说<strong>显然</strong>（我(／‵Д′)／~ ╧╧）如果不存在相交矩形，，那么一定满足</p><p><span class="math display">\[max(x_1 , x_3)&gt;min(x_2 , x_4) \ \ or\ \  max(y_1,y_3)&gt;min(y_2,y_4)\]</span></p><p>所以反命题就是如果存在相交举证即使上面那个判断取反，，同时相交矩形的坐标是 <span class="math display">\[(max(x_1 , x_3) \ , \ max(y_1 , y_3)\ ,\ min(x_2,x_4)\ ,\ min(y2 , y_4))\]</span></p><p>有了这些，，我们就可以算出相交矩形内原来的白色、黑色的格子了（就是不考虑第一个第二个矩形影响时的数量），，</p><p>因为在第一个矩形里将相交矩形内的黑格子变成了白色，，现在又要变成黑色，，所以wsum（白色格子的数量）要减去黑色的数量（白色的数量已经在计算第二个矩形时减去了，，所以对于wsum是减去了相交矩形的所有格子数量），，同时黑色格子的数量bsum要加上黑色的数量，，而计算第二个矩形时相交矩形里的白色已经加上了，，，相当于加上了整个相交矩形的格子数量，，（拿笔画一下这个步骤就更清楚了）</p><h4 id="wx-y的实现"><strong>w(x , y)的实现</strong></h4><p>首先我们定义这样排列的黑白格子为<strong>类型1</strong></p><p><img src="https://codeforces.com/predownloaded/d8/6e/d86e87a66d47ec694dd7dfe9b27c72c68ce27d9d.png"> 而这样的是<strong>类型2</strong> <img src="https://codeforces.com/predownloaded/5e/f8/5ef88f2dba40d4f7f22774404f8c502bd950a68e.png"> + 行数n为<strong>偶数</strong>时，类型1类型2的数量是对半的，即<span class="math inline">\(\frac n2\)</span>,</p><ul><li>行数n为<strong>奇数</strong>时，<strong>类型1</strong>的数量是<span class="math inline">\(\lfloor{\frac n2}\rfloor\)</span> （向下取整，直接除就行），，<strong>类型2</strong>的数量是<span class="math inline">\(\lceil{\frac n2}\rceil\)</span>（向上取整，有余数时加一个）</li></ul><p>因为行数n为偶数时类型1的数量和类型2数量相等，也就是说<span class="math inline">\(\lfloor{\frac n2}\rfloor\)</span>=<span class="math inline">\(\lceil{\frac n2}\rceil\)</span>，，所以，，我们就不管行数是不是偶数奇数了，，，直接<strong>类型1</strong>数量=<span class="math inline">\(\lfloor{\frac n2}\rfloor\)</span>，<strong>类型2</strong>数量=<span class="math inline">\(\lceil{\frac n2}\rceil\)</span>，，，（数学真好玩.jpg，，，想想我当时为了判断行数的奇偶分情况讨论，，写吐ed，，(#`Д´)ﾉ）</p><p>按照这个思路，，，同样列数m也就可以这样计算了，，， 即<strong>类型1</strong>的数量=<span class="math inline">\(\lfloor{\frac m2}\rfloor\)</span>，，<strong>类型2</strong>的数量=<span class="math inline">\(\lceil{\frac m2}\rceil\)</span>..</p><p>有了这两个，，我们就可以计算矩形(x , y)内了白色格子的数量了，，， <span class="math display">\[w(x , y) = \lceil{\frac n2}\rceil \cdot \lceil{\frac m2}\rceil + \lfloor{\frac n2}\rfloor \cdot \lfloor{\frac m2}\rfloor\]</span></p><h4 id="向上取整的实现"><strong>向上取整的实现</strong></h4><p>这道题除了让我知道矩形交的处理，，，还有一个从好几个大佬的代码中我看到了几个好的求向上取整的代码，，，不像我那样傻傻的if判断(╬☉д⊙)</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">cdiv</span><span class="params">(ll a , llb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a / b + (a % b &gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="function">ll <span class="title">cdiv</span><span class="params">(ll a , ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a + b - <span class="number">1</span>) / b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="代码">代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="comment">//ceiling div</span></span><br><span class="line"><span class="function">ll <span class="title">cdiv</span><span class="params">(ll a , ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a / b + (a % b &gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ccdiv</span><span class="params">(ll a , ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a + b - <span class="number">1</span>) / b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">w</span><span class="params">(ll x , ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cdiv(x , <span class="number">2</span>) * cdiv(y , <span class="number">2</span>) + (x / <span class="number">2</span>) * (y / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">wsum</span><span class="params">(ll x1 , ll y1 , ll x2 , ll y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> w(x2 , y2) - w(x1 - <span class="number">1</span> , y2) - w(x2 , y1 - <span class="number">1</span>) + w(x1 - <span class="number">1</span> , y1 - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">bsum</span><span class="params">(ll x1 , ll y1 , ll x2 , ll y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x2 - x1 + <span class="number">1</span>) * (y2 - y1 + <span class="number">1</span>) - wsum(x1 , y1 , x2 , y2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("233.txt" , "r" , stdin);</span></span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll n , m;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        ll x1 , x2 , x3 , x4 , y1 , y2 , y3 , y4;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x3 &gt;&gt; y3 &gt;&gt; x4 &gt;&gt; y4;</span><br><span class="line">        ll w = wsum(<span class="number">1</span> , <span class="number">1</span> , m , n);</span><br><span class="line">        ll b = bsum(<span class="number">1</span> , <span class="number">1</span> , m , n);</span><br><span class="line">        <span class="comment">//first rec</span></span><br><span class="line">        w = w + bsum(x1 , y1 , x2 , y2);</span><br><span class="line">        b = b - bsum(x1 , y1 , x2 , y2);</span><br><span class="line">        <span class="comment">//second rec(dont consider the itersection</span></span><br><span class="line">        w = w - wsum(x3 , y3 , x4 , y4);</span><br><span class="line">        b = b + wsum(x3 , y3 , x4 , y4);</span><br><span class="line">        <span class="comment">//consider the itersection</span></span><br><span class="line">        <span class="keyword">if</span>(max(x1 , x3) &lt;= min(x2 , x4) &amp;&amp; max(y1 , y3) &lt;= min(y2 , y4))</span><br><span class="line">        &#123;</span><br><span class="line">            w = w - bsum(max(x1 , x3) , max(y1 , y3) , min(x2 , x4) , min(y2 , y4));</span><br><span class="line">            b = b + bsum(max(x1 , x3) , max(y1 , y3) , min(x2 , x4) , min(y2 , y4));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; w &lt;&lt; <span class="string">" "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小结">小结</h1><ul><li>一直不怎么会的向上取整、矩形面积交等等问题算是了解了，，，至少不会在出现的时候啥都不知道，，只能从头分析，，，一个劲的堆if了(-`ェ´-╬)</li><li>cf真好玩.jpg，，，以为会第一发只能灰名，，没想到青了，，，就是深夜场太多，，，不然能天天打，，，，</li><li>这种代码不多的题锻炼锻炼思维很不错啊，，，毕竟现在纯套板子的题在各种比赛中是越来越少了，，，，</li></ul><p>(end)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/1080/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;昨天正好有时间，做了自己第一场的cf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;做完AB之后被C卡到最后，，，从来没做过坐标平面上两个矩形的面积和，，，因为存在相交的可能，，，所以要单独的处理矩形面积交，，然后自己就写懵了，，，当时写了几十行的if判断，，，，到最后都没弄完，，QAQ&lt;/p&gt;
    
    </summary>
    
      <category term="Codeforces" scheme="http://www.31415.cf/categories/Codeforces/"/>
    
    
      <category term="acm" scheme="http://www.31415.cf/tags/acm/"/>
    
      <category term="刷题" scheme="http://www.31415.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces-1077C</title>
    <link href="http://www.31415.cf/2018/11/24/Codeforces-1077C/"/>
    <id>http://www.31415.cf/2018/11/24/Codeforces-1077C/</id>
    <published>2018-11-24T07:22:31.000Z</published>
    <updated>2018-11-24T07:36:25.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题意">题意</h1><p><a href="https://codeforces.com/problemset/problem/1077/C" target="_blank" rel="noopener"><strong>题目链接</strong></a></p><p>给你一个数组，如果存在一个数等于剩余的数的和的话，，，就称这样array是good array，，</p><p>然后题目问你对于给定的数组去掉一个数之后时候是一个good array，，，输出所有的去掉的数的位置pos</p><a id="more"></a><h1 id="分析">分析</h1><p>一开始我想这直接暴力去求，，，外循环遍历整个数组枚举可能是去掉的数，，，内循环遍历去掉那个数之后的数列寻找时候存在一个使得剩余数的和等于内循环遍历的那个数，，，</p><p>复杂度应该是<span class="math inline">\(O(n^2)\)</span>，，，果不其然的tle了，，，，</p><p>然后去看标程题解，，，看不懂QAQ，，，</p><p>看了别人的思路后才弄出来，，，</p><p>对于这样一个good array，，，数<span class="math inline">\(a_i = sum - a_i\)</span>，，那么<span class="math inline">\(a_i\)</span>一定是这个数组的最大值，，，</p><p>所以先可以对整个数组排序一下，，，然后看最大<span class="math inline">\(max\)</span>值是否等于<span class="math inline">\(sum - max\)</span>，，，</p><p>注意如果要是去掉第一个数，，最大值就为第二大的数了，，，，</p><h1 id="代码">代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll num;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;r) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> r.num &lt; num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;node[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n;<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    ll sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; node[i].num;</span><br><span class="line">        node[i].pos = i;</span><br><span class="line">        sum += node[i].num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(node , node + n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> max = (i == <span class="number">0</span>) ? node[<span class="number">1</span>].num : node[<span class="number">0</span>].num;</span><br><span class="line">        <span class="keyword">if</span>(sum - node[i].num - max == max)</span><br><span class="line">            ans.push_back(node[i].pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = ans.begin(); it != ans.end(); ++it)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it + <span class="number">1</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(end)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题意&quot;&gt;题意&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/1077/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;题目链接&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个数组，如果存在一个数等于剩余的数的和的话，，，就称这样array是good array，，&lt;/p&gt;
&lt;p&gt;然后题目问你对于给定的数组去掉一个数之后时候是一个good array，，，输出所有的去掉的数的位置pos&lt;/p&gt;
    
    </summary>
    
      <category term="Codeforces" scheme="http://www.31415.cf/categories/Codeforces/"/>
    
    
      <category term="acm" scheme="http://www.31415.cf/tags/acm/"/>
    
      <category term="刷题" scheme="http://www.31415.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>poj-1459-最大流dinic+链式前向星</title>
    <link href="http://www.31415.cf/2018/11/22/poj-1459-%E6%9C%80%E5%A4%A7%E6%B5%81dinic+%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F-isap+bfs+stack/"/>
    <id>http://www.31415.cf/2018/11/22/poj-1459-最大流dinic+链式前向星-isap+bfs+stack/</id>
    <published>2018-11-22T12:57:54.000Z</published>
    <updated>2018-12-08T05:27:26.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p><a href="http://poj.org/problem?id=1459" target="_blank" rel="noopener">这道是一道网络流里最大流的板子题</a>,,,</p><p>暑期集训网络流草草水过，，连基本的算法都不知道有哪些，，，更别提怎么实现了，，，只知道网络流的大致的概念，，</p><p>今天花了一天的时间重新学习了一波，，，本以为这东西很简单，，，没想到不仅算法的实现一大堆的东西，，就连题目都有时候看不懂，，，，感受就是网络流的题不仅算法实现起来不好懂，，，每一道题的建图也很关键，，，几乎看到的每一道题的图都是得自己去建，，完全不像最短路那些题花里胡哨的东西都只改一改贪心时的方程就行，，，</p><a id="more"></a><h1 id="分析思路">分析思路</h1><h2 id="最短路的一些基本概念">最短路的一些基本概念</h2><p>这一段 <em>算法导论</em> 上讲的很好，，，不过我感觉还是在基本弄懂那几个算法再看一遍比较好QAQ</p><p><a href="https://blog.andrewei.info/2016/04/11/network-flows/" target="_blank" rel="noopener">这里就直接摘抄别人写过的东西了</a></p><h2 id="容量网络和网络最大流">容量网络和网络最大流</h2><h1 id="容量网络">容量网络:</h1><p><span class="math inline">\(设 G(V, E)是一个有向网络, 在 V 中指定了一个顶点, 称为源点(记为 Vs ), 以及另一个顶点, 称为汇点(记为 Vt); 对于每一条弧 &lt;u, v&gt;∈E, 对应有一个权值 c(u, v)&gt;0, 称为弧的容量, 通常把这样的有向网络 G 称为容量网络。\)</span></p><p>把它想象成 <strong>自来水厂</strong> 、 <strong>自来水管网</strong> 和 <strong>用户</strong> 那种图就行了，，，</p><h2 id="弧的流量">弧的流量:</h2><p>通过容量网络 G 中每条弧 &lt;u, v&gt; 上的实际流量(简称流量), 记为 <span class="math inline">\(f(u, v)\)</span>。 ### <strong>网络流</strong>: 所有弧上流量的集合 f = { f(u, v) },称为该容量网络 G 的一个网络流。 ### <strong>可行流</strong>: 在容量网络 G(V, E) 中, 满足以下条件的网络流 f, 称为可行流:</p><h2 id="弧流量限制条件-0fuvcuv">弧流量限制条件: <span class="math inline">\(0≤f(u,v)≤c(u,v)\)</span></h2><h3 id="平衡条件"><strong>平衡条件</strong>:</h3><p>除了 Vs, Vt 外, 其余的点流入的流量总和等于流出的流量总和, 其中 <strong>Vs 流出的流量总和 - 流出的流量总和 = f</strong>, <strong>Vt 流入的流量总和 - 流出的流量总和 = f</strong>, 并且称 f 为可性流的流量</p><p>也就是指: <span class="math inline">\(在图中有一条从 Vs 到 Vt 的路径, 这条路径上起点 fo−fi=f, 终点 fi−fo=f， 其他的点 fi==fo, 并且所有的边的当前流量小于等于最大流量.(其中 fi 代表流入流量, fo 代表流出流量)\)</span></p><h3 id="伪流"><strong>伪流</strong>:</h3><p>如果一个网络流只满足弧流量限制条件, 不满足平衡条件, 则这种网络流称为伪流, 或称为容量可行流。</p><h3 id="最大流"><strong>最大流</strong>:</h3><p>在容量网络 G(V, E) 中, 满足弧流量限制条件和平衡条件、且具有最大流量的可行流, 称为网络最大流, 简称最大流。</p><h2 id="链与增广路">链与增广路</h2><p>在容量网络 G(V, E) 中, 设有一可行流 f = { f(u, v) }, 根据每条弧上流量的多少、以及流量和容量的关系,可将弧分四种类型:</p><p>饱和弧, 即 f(u,v)=c(u,v); 非饱和弧,即 f(u,v)&lt;c(u,v); 零流弧, 即 f(u,v)=0; 非零流弧, 即 f(u,v)&gt;0。</p><h3 id="链"><strong>链</strong>:</h3><p>在容量网络中,称顶点序列(u,u1,u2,…,un,v)为一条链,要求相邻两个顶点之间有一条弧, 如 &lt;u, u1&gt; 或 &lt;u1, u&gt; 为容量网络中一条弧。沿着 Vs 到 Vt 的一条链, 各弧可分为两类:</p><ul><li><strong>前向弧</strong>: 方向与链的正方向一致的弧, 其集合记为 P+;</li><li><strong>后向弧</strong>: 方向与链的正方向相反的弧, 其集合记为 P-; ### <strong>增广路</strong>:</li></ul><p>设 f 是一个容量网络 G 中的一个可行流, P 是从 Vs 到 Vt 的一条链, 若 P 满足下列条件:</p><p>在 P 的所有<strong>前向弧</strong> &lt;u, v&gt; 上, 0≤f(u,v)&lt;c(u,v), 即 P+ 中每一条弧都是非饱和弧; 在 P 的所有<strong>后向弧</strong> &lt;u, v&gt; 上, 0&lt;f(u,v)≤c(u,v), 即 P– 中每一条弧是非零流弧。 则称 P 为关于可行流 f 的一条增广路, 简称为 <strong>增广路(或称为增广链、可改进路)</strong> 。<strong>沿着增广路改进可行流的操作称为增广</strong>。</p><h2 id="残留容量与残留网络">残留容量与残留网络</h2><h3 id="残留容量"><strong>残留容量</strong>:</h3><p>给定容量网络 G(V, E) 及可行流 f, 弧 &lt;u, v&gt; 上的残留容量记为 c′(u,v)=c(u,v)–f(u,v)。每条弧的残留容量表示该弧上可以增加的流量。因为从顶点 u 到顶点 v 流量的减少, 等效于顶点 v 到顶点 u 流量增加, 所以每条弧 &lt;u, v&gt; 上还有一个反方向的残留容量 c′(v,u)=–f(u,v)。</p><ul><li>一个容量网络中还可以压入的流量称为残留容量</li></ul><h3 id="残留网络"><strong>残留网络</strong>:</h3><p><span class="math inline">\(设有容量网络 G(V, E) 及其上的网络流 f,G 关于 f 的残留网络(简称残留网络)记为 G&#39;(V&#39;, E&#39;), 其中 G’的顶点集 V’和 G 的顶点集 V 相同,即 V’=V, 对于 G 中的任何一条弧 &lt;u, v&gt;, 如果 f(u,v)&lt;c(u,v), 那么在 G’中有一条弧 &lt;u, v&gt;∈E&#39;, 其容量为 c′(u,v)=c(u,v)–f(u,v), 如果 f(u,v)&gt;0,则在 G’中有一条弧 &lt;v, u&gt;∈E&#39;, 其容量为 c′(v,u)=f(u,v), 残留网络也称为剩余网络.\)</span></p><ul><li>由残留的容量以及源点汇点构成的网络。</li></ul><h3 id="割与最小割"><strong>割与最小割</strong></h3><p><strong>割</strong>: <span class="math inline">\(在容量网络 G(V, E) 中, 设 E&#39;⊆E, 如果在 G 的基图中删去 E’ 后不再连通, 则称 E’ 是 G 的割。割将 G 的顶点集 V 划分成两个子集 S 和 T = V - S。将割记为(S, T)。 s-t 割: 更进一步, 如果割所划分的两个顶点子集满足源点 Vs ∈ S,汇点 Vt ∈ T, 则称该割为 s-t 割。 s-t 割(S, T)中的弧 &lt;u, v&gt;(u∈S, v∈T) 称为割的前向弧, 弧 &lt;u, v&gt;( u∈T, v∈S) 称为割的反向弧。\)</span></p><p><strong>割的容量</strong>: <span class="math inline">\(设 (S, T) 为容量网络 G(V, E) 的一个割, 其容量定义为所有前向弧的容量总和, 用 c(S, T) 表示。\)</span></p><p><strong>最小割</strong>: <span class="math inline">\(容量网络 G(V, E) 的最小割是指容量最小的割。\)</span></p><h2 id="相关定理"><strong>相关定理</strong></h2><h3 id="残留网络与原网络的关系">残留网络与原网络的关系</h3><p><span class="math inline">\(设 f 是容量网络 G(V, E) 的可行流, f’ 是残留网络 G’ 的可行流, 则 f + f’ 仍是容量网络 G 的一个可行流。(f + f’ 表示对应弧上的流量相加)\)</span></p><h3 id="网络流流量与割的净流量之间的关系">网络流流量与割的净流量之间的关系</h3><p><span class="math inline">\(在一个容量网络 G(V, E) 中, 设其任意一个流为 f, 关于 f 的任意一个割为(S, T), 则有 f(S,T)=|f|,即网络流的流量等于任何割的净流量。\)</span></p><h3 id="网络流流量与割的容量之间的关系">网络流流量与割的容量之间的关系</h3><p><span class="math inline">\(在一个容量网络 G(V, E) 中, 设其任意一个流为 f, 任意一个割为(S, T), 则必有 f(S,T)≤c(S,T),即网络流的流量小于或等于任何割的容量。\)</span></p><h3 id="最大流最小割定理">最大流最小割定理</h3><p><span class="math inline">\(对容量网络 G(V, E), 其最大流的流量等于最小割的容量。\)</span></p><h3 id="增广路定理">增广路定理</h3><p><span class="math inline">\(设容量网络 G(V, E) 的一个可行流为 f, f 为最大流的充要条件是在容量网络中不存在增广路。\)</span></p><h3 id="几个等价命题">几个等价命题</h3><p><span class="math inline">\(设容量网络 G(V, E)的一个可行流为 f 则:\)</span></p><p><span class="math inline">\(1) f 是容量网络 G 的最大流;\)</span></p><p><span class="math inline">\(2) | f |等于容量网络最小割的容量;\)</span></p><p><span class="math inline">\(3) 容量网络中不存在增广路;\)</span></p><p><span class="math inline">\(4) 残留网络 G’中不存在从源点到汇点的路径。\)</span></p><h2 id="最大流-1"><strong>最大流</strong></h2><p>最大流相关算法有两种解决思想, 一种是<strong>增广路算法思想</strong>, 另一种是<strong>预流推进</strong>算法思想。</p><h1 id="增广路算法"><strong>增广路算法</strong></h1><h2 id="基本思想">基本思想</h2><p>根据增广路定理, 为了得到最大流, 可以从任何一个可行流开始, 沿着增广路对网络流进行增广, 直到网络中不存在增广路为止,这样的算法称为增广路算法。问题的关键在于如何有效地找到增广路, 并保证算法在有限次增广后一定终止。 增广路算法的基本流程是 :</p><ul><li><ol type="1"><li>取一个可行流 f 作为初始流(如果没有给定初始流,则取零流 f= { 0 }作为初始流);</li></ol></li><li><ol start="2" type="1"><li>寻找关于 f 的增广路 P,如果找到,则沿着这条增广路 P 将 f 改进成一个更大的流, 并建立相应的反向弧;</li></ol></li><li><ol start="3" type="1"><li>重复第(2)步直到 f 不存在增广路为止。</li></ol></li></ul><p>图示如下: <img src="https://blog.andrewei.info/images/network-flows/FFalgo1.png"></p><p><img src="https://blog.andrewei.info/images/network-flows/FFalgo2.png"></p><p>增广路算法的关键是 <strong>寻找增广路</strong> 和 <strong>改进网络流</strong>.</p><h2 id="创建反向弧的作用">创建反向弧的作用：</h2><p><strong>为程序提供一次返回的机会</strong></p><p>在图中如果程序找到了一条增广路 1 -&gt; 2 -&gt; 4 -&gt; 6, 此时得到一个流量为 2 的流并且无法继续进行增广, 但是如果在更新可行流的同时建立反向弧的话, 就可以找到 1 -&gt; 3 -&gt; 4 -&gt; 2 -&gt; 5 -&gt; 6 的可行流, 流量为1, 这样就可以得到最大流为 3.</p><p><img src="https://blog.andrewei.info/images/network-flows/FFalgo7.jpg"></p><h2 id="dinic模板程序">dinic模板程序</h2><p>因为ek算法的效率没有dinic的高，，所以本着先追求实用主义就先看了dinic算法，，，算法实现的模板时kaungbin的，，，dinic+链式前向星。。。</p><h3 id="算法思想">算法思想</h3><p>DINIC 在找增广路的时候也是找的最短增广路, 与 EK 算法不同的是 DINIC 算法并不是每次 bfs 只找一个增广路, 他会首先通过一次 bfs 为所有点添加一个标号, 构成一个层次图， 然后在层次图中寻找增广路进行更新。</p><h3 id="实现流程">实现流程</h3><ul><li><p>1.利用 BFS 对原来的图进行分层，即对每个结点进行标号，这个标号的含义是当前结点距离源点的最短距离(假设每条边的距离都为1)，注意：构建层次图的时候所走的边的残余流量必须大于0</p></li><li><p>2.用 DFS 寻找一条从源点到汇点的增广路, 注意: 此处寻找增广路的时候要按照层次图的顺序, 即如果将边(u, v)纳入这条增广路的话必须满足dis[u]=dis[v]−1, 其中 dis[i]为结点 i的编号。找到一条路后要根据这条增广路径上的所有边的残余流量的最小值l更新所有边的残余流量(即正向弧 - l, 反向弧 + l).</p></li><li><p>3。重复步骤 2, 当找不到一条增广路的时候, 重复步骤 1, 重新建立层次图, 直到从源点不能到达汇点为止。</p></li></ul><p><img src="https://blog.andrewei.info/images/network-flows/FFalgo8.jpg"></p><h3 id="思路">思路</h3><p>这道题的题意是给你n个源点（发电站）、np个中间路径点（中转站）、nc个汇点（用户）以及m个通路。。求最大送到用户的效率也就是图的最大流。。</p><p>多个源点和汇点所以要弄一个<strong>超级源点s</strong>和<strong>超级汇点t</strong>，，，s,t连源点，汇点然后跑dinic就行了，，</p><p>具体的代码的细节都注释在里面了，，，都是自己的理解可能有误，，，看的头疼.jpg</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dinic求网络流的最大流</span></span><br><span class="line"><span class="comment">//bfs求一次层次图</span></span><br><span class="line"><span class="comment">//dfs求源点到汇点的一条增广路</span></span><br><span class="line"><span class="comment">//然后根据这条增广路中残余流量的最小值tp来更新所有边的残余流量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , np , nc , m;</span><br><span class="line"><span class="keyword">int</span> u , v , z;</span><br><span class="line"><span class="comment">//前向星存图</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">    <span class="keyword">int</span> cap;        <span class="comment">//容量</span></span><br><span class="line">    <span class="keyword">int</span> flow;       <span class="comment">//流量</span></span><br><span class="line">&#125;edge[maxm];        <span class="comment">//注意边数为所给边数的两倍多</span></span><br><span class="line"><span class="keyword">int</span> tol;</span><br><span class="line"><span class="keyword">int</span> head[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tol = <span class="number">2</span>;        <span class="comment">//???</span></span><br><span class="line">    <span class="built_in">memset</span>(head , <span class="number">-1</span> , <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u , <span class="keyword">int</span> v , <span class="keyword">int</span> w , <span class="keyword">int</span> rw = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//前向星加边，反向弧容量为rw一般为0</span></span><br><span class="line">    <span class="comment">//正反弧相邻存储，直接异或就能找到</span></span><br><span class="line">    <span class="comment">//正向弧的编号要比反向弧的编号小</span></span><br><span class="line">    edge[tol].to = v;edge[tol].cap = w;edge[tol].flow = <span class="number">0</span>;</span><br><span class="line">    edge[tol].next = head[u];head[u] = tol++;</span><br><span class="line">    edge[tol].to = u; edge[tol].cap = rw;edge[tol].flow = <span class="number">0</span>;</span><br><span class="line">    edge[tol].next = head[v];head[v] = tol++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> q[maxn];        <span class="comment">//双向队列，bfs使用</span></span><br><span class="line"><span class="keyword">int</span> dep[maxn] , cur[maxn] , sta[maxn];<span class="comment">//sta保存增广路的边</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s , <span class="keyword">int</span> t , <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//bfs搜索网络的层次</span></span><br><span class="line">    <span class="keyword">int</span> front = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> tail = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dep , <span class="number">-1</span> , <span class="keyword">sizeof</span>(dep[<span class="number">0</span>]) * (n + <span class="number">1</span>));</span><br><span class="line">    dep[s] = <span class="number">0</span>;</span><br><span class="line">    q[tail++] = s;</span><br><span class="line">    <span class="keyword">while</span>(front &lt; tail)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q[front++];</span><br><span class="line">        <span class="comment">//前向星图的遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span>(edge[i].cap &gt; edge[i].flow &amp;&amp; !(~dep[v]))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//(u,v)这条边的容量大于流量时即残余流量大于0并且这个点没有被分层时</span></span><br><span class="line">                dep[v] = dep[u] + <span class="number">1</span>;    <span class="comment">//分层</span></span><br><span class="line">                <span class="keyword">if</span>(v == t)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                q[tail++] = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> s , <span class="keyword">int</span> t , <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxflow = <span class="number">0</span>;            <span class="comment">//待求的最大流</span></span><br><span class="line">    <span class="keyword">while</span>(bfs(s , t , n))       <span class="comment">//当层次图存在时进行dfs寻找增广路</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)cur[i] = head[i]; <span class="comment">//当前所有可以利用链式前向星遍历的边的编号</span></span><br><span class="line">        <span class="keyword">int</span> u = s , tail = <span class="number">0</span>;   <span class="comment">//tail表示找到的增广路的点的数量</span></span><br><span class="line">        <span class="keyword">while</span>(~cur[s])          <span class="comment">//边合法时</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(u == t)          <span class="comment">//找到汇点时，即找到一条增广路时</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> tp = inf;   <span class="comment">//tp为该增广路中最小的残余流量</span></span><br><span class="line">                <span class="comment">//找到最小值</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = tail - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">                    tp = min(tp , edge[sta[i]].cap - edge[sta[i]].flow);</span><br><span class="line">                maxflow += tp;  <span class="comment">//最大流增加</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = tail - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//用最小的残余流量更新参与网络</span></span><br><span class="line">                    <span class="comment">//这里是倒着遍历每一条增广路中的边，，</span></span><br><span class="line">                    <span class="comment">//所以编号是由大到小，sta[i]是(u,v)那条弧的编号，sta[i] ^ 1是其反向弧的编号</span></span><br><span class="line">                    <span class="comment">//正向弧的流入流量加上tp</span></span><br><span class="line">                    <span class="comment">//反向弧的流入流量就是减去tp</span></span><br><span class="line">                    edge[sta[i]].flow += tp;</span><br><span class="line">                    edge[sta[i] ^ <span class="number">1</span>].flow -= tp;</span><br><span class="line">                    <span class="comment">//这条路的残余流量为零，经过这条路径的增广路不再存在</span></span><br><span class="line">                    <span class="comment">//增广路的尾边缩回到这个点</span></span><br><span class="line">                    <span class="comment">//并尝试寻找经过这个点的其他的增广路</span></span><br><span class="line">                    <span class="keyword">if</span>(edge[sta[i]].cap - edge[sta[i]].flow == <span class="number">0</span>)</span><br><span class="line">                        tail = i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//当前增广路的尾边回退到上一个点，，继续搜索其他的增广路</span></span><br><span class="line">                u = edge[sta[tail] ^ <span class="number">1</span>].to;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(~cur[u] &amp;&amp;</span><br><span class="line">                    edge[cur[u]].cap &gt; edge[cur[u]].flow &amp;&amp;</span><br><span class="line">                    dep[u] + <span class="number">1</span> == dep[edge[cur[u]].to])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//当这条边能到达、残余流量为正值并且u是v的上一层的点时</span></span><br><span class="line">                sta[tail++] = cur[u];   <span class="comment">//增广路的点数tail++，并保存这条边到sta</span></span><br><span class="line">                u = edge[cur[u]].to;    <span class="comment">//更新u</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//回退？？</span></span><br><span class="line">                <span class="comment">//while(u != s &amp;&amp; cur[u] == -1)</span></span><br><span class="line">                <span class="keyword">while</span>(u != s &amp;&amp; !(~cur[u]))</span><br><span class="line">                    u = edge[sta[--tail] ^ <span class="number">1</span>].to;</span><br><span class="line">                cur[u] = edge[cur[u]].next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxflow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d "</span> , &amp;n , &amp;np , &amp;nc , &amp;m) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">" (%d,%d)%d"</span> , &amp;u , &amp;v , &amp;z); <span class="comment">//输入前面有空格</span></span><br><span class="line">            ++u;++v;</span><br><span class="line">            addedge(u , v , z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(np--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">" (%d)%d"</span> , &amp;u , &amp;z);</span><br><span class="line">            ++u;</span><br><span class="line">            addedge(<span class="number">0</span> , u , z);                 <span class="comment">//超级源点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(nc--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">" (%d)%d"</span> , &amp;u , &amp;z);</span><br><span class="line">            ++u;</span><br><span class="line">            addedge(u , n + <span class="number">1</span> , z);             <span class="comment">//超级汇点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span> , dinic(<span class="number">0</span> , n + <span class="number">1</span> , n + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下一个就是sap,isap了吧，，，头疼ing</p><p>(end)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=1459&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这道是一道网络流里最大流的板子题&lt;/a&gt;,,,&lt;/p&gt;
&lt;p&gt;暑期集训网络流草草水过，，连基本的算法都不知道有哪些，，，更别提怎么实现了，，，只知道网络流的大致的概念，，&lt;/p&gt;
&lt;p&gt;今天花了一天的时间重新学习了一波，，，本以为这东西很简单，，，没想到不仅算法的实现一大堆的东西，，就连题目都有时候看不懂，，，，感受就是网络流的题不仅算法实现起来不好懂，，，每一道题的建图也很关键，，，几乎看到的每一道题的图都是得自己去建，，完全不像最短路那些题花里胡哨的东西都只改一改贪心时的方程就行，，，&lt;/p&gt;
    
    </summary>
    
      <category term="ACM-网络流-最大流" scheme="http://www.31415.cf/categories/ACM-%E7%BD%91%E7%BB%9C%E6%B5%81-%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
    
      <category term="acm" scheme="http://www.31415.cf/tags/acm/"/>
    
      <category term="刷题" scheme="http://www.31415.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>poj-2421-最小生成树刷题</title>
    <link href="http://www.31415.cf/2018/11/20/poj-2421-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E5%88%B7%E9%A2%98/"/>
    <id>http://www.31415.cf/2018/11/20/poj-2421-最小生成树刷题/</id>
    <published>2018-11-20T12:30:29.000Z</published>
    <updated>2018-11-20T12:42:10.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p>做了几道最小生成树的题，，，都是些板子题，，，直接套板子就能过，，，有一些是在输入数据做文章，，处理一下再建图就行了，，，</p><p><a href="http://poj.org/problem?id=2421" target="_blank" rel="noopener">这道最小生成树的题稍微需要处理一下，，不过之后也就是套板子了，，，</a></p><a id="more"></a><h1 id="题意分析">题意分析</h1><p>大致的题意就是给出n个村庄之间的距离，，，然后再给出几个村庄之间已经存在的路径，，，然后让你再添加几条路径使得所有的路径的和最小，，，问你添加的这个值是多少，，，</p><p>之前做的那几道题都是图已经弄好，，，路径是给定的问你最小的权重之和，，，这道题相当于给你部分图问你最小的权重和，，，</p><p>其实只要在加边建图的时候把给的边的权重置为0当作这条边可以走，但我们不算权重，，这样跑一遍最小生成树就能得到答案，，，</p><h1 id="代码">代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> father[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> n , m;</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u , v , w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> edge &amp;r) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; r.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;edge[maxm];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> _u , <span class="keyword">int</span> _v , <span class="keyword">int</span> _w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].u = _u;</span><br><span class="line">    edge[tot].v = _v;</span><br><span class="line">    edge[tot++].w = _w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == father[x])  <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> father[x] = find(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        father[i] = i;</span><br><span class="line">    sort(edge , edge + tot);</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; tot; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t1 = find(edge[i].u);</span><br><span class="line">        <span class="keyword">int</span> t2 = find(edge[i].v);</span><br><span class="line">        <span class="keyword">if</span>(t1 != t2)</span><br><span class="line">        &#123;</span><br><span class="line">            father[t1] = t2;</span><br><span class="line">            sum += edge[i].w;</span><br><span class="line">            ++cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt == n - <span class="number">1</span>)    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; n - <span class="number">1</span>)   <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span>            <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;n) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u , v , w;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;w);</span><br><span class="line">                addedge(i , j , w);</span><br><span class="line">                addedge(j , i , w);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span> , &amp;u , &amp;v);</span><br><span class="line">            addedge(u , v , <span class="number">0</span>);</span><br><span class="line">            addedge(v , u , <span class="number">0</span>);</span><br><span class="line">            <span class="comment">//无向图记得正反都要加边，，，少加了一个wa了一发，，，，QAQ</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span> , kruskal());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(end)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;
&lt;p&gt;做了几道最小生成树的题，，，都是些板子题，，，直接套板子就能过，，，有一些是在输入数据做文章，，处理一下再建图就行了，，，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2421&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这道最小生成树的题稍微需要处理一下，，不过之后也就是套板子了，，，&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM-最小生成树" scheme="http://www.31415.cf/categories/ACM-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
    
      <category term="acm" scheme="http://www.31415.cf/tags/acm/"/>
    
      <category term="刷题" scheme="http://www.31415.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>poj-1251-最小生成树</title>
    <link href="http://www.31415.cf/2018/11/20/poj-1251-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <id>http://www.31415.cf/2018/11/20/poj-1251-最小生成树/</id>
    <published>2018-11-20T08:38:14.000Z</published>
    <updated>2018-11-20T09:09:16.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p>前段时间数据结构的课上提到了了<strong>最小生成树</strong>，，暑假的集训虽然再学并查集的时候看过一些，，但是之后好久没再用过，，早就忘记了，，，今天抽时间看了看，，把最小生成树的两个主要算法 <strong>prim</strong> 和 <strong>kruskal</strong>了解了一下，，，做几道题，，把自己的模板弄出来</p><a id="more"></a><h1 id="分析">分析</h1><p>这两个算法很简单，，，看几遍就可以去敲去了，，，</p><p><a href="https://blog.csdn.net/mgsky1/article/details/77840286" target="_blank" rel="noopener">放几个别人的博客，，防止以后忘记了能快速回想起来</a> <a href="https://blog.csdn.net/m0_37345402/article/details/76474311" target="_blank" rel="noopener">还有一个</a></p><p>prim算法主要的思路是将最小生成树慢慢的变大，，， kruskal算法主要是利用并查集将多个树也就是森林慢慢的合并成最后的树</p><h1 id="模板代码">模板代码</h1><p><a href="http://poj.org/problem?id=1251" target="_blank" rel="noopener">做了一道模板题</a>，，题意就是对给定的一个图，，去掉一些边，，求花费最小的方案，，，其实就是权值和最小的那一种，，</p><p>prim方法： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mp[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">int</span> n , m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis , <span class="literal">false</span> , <span class="keyword">sizeof</span> vis);</span><br><span class="line">    vis[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        dis[i] = mp[<span class="number">1</span>][i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> m = inf;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">//从所有的为加入最小生成树集合的点集里找到一个边权最小的</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            <span class="keyword">if</span>(!vis[j] &amp;&amp; dis[j] &lt; m)</span><br><span class="line">            &#123;</span><br><span class="line">                m = dis[j];</span><br><span class="line">                p = j;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(m == inf)    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        sum += m;</span><br><span class="line">        vis[p] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//更新加入这个点之后能够到达其他点的值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            <span class="keyword">if</span>(!vis[j] &amp;&amp; dis[j] &gt; mp[p][j])</span><br><span class="line">                dis[j] = mp[p][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;n) &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> c1 , c2;</span><br><span class="line">        <span class="keyword">int</span> m1 , m2;</span><br><span class="line">        <span class="built_in">memset</span>(mp , inf , <span class="keyword">sizeof</span> mp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            mp[i][i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">" %c%d"</span> , &amp;c1 , &amp;m1);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m1; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">" %c%d"</span> , &amp;c2 , &amp;m2);</span><br><span class="line">                mp[c1 - <span class="string">'A'</span> + <span class="number">1</span>][c2 - <span class="string">'A'</span> + <span class="number">1</span>] = m2;</span><br><span class="line">                mp[c2 - <span class="string">'A'</span> + <span class="number">1</span>][c1 - <span class="string">'A'</span> + <span class="number">1</span>] = m2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span> , prim());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>kruskal方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> father[maxn];</span><br><span class="line"><span class="keyword">int</span> n , m;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u , v , w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> edge &amp;r) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; r.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;edge[maxn];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> _u , <span class="keyword">int</span> _v , <span class="keyword">int</span> _w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[tot].u = _u;</span><br><span class="line">    edge[tot].v = _v;</span><br><span class="line">    edge[tot++].w = _w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == father[x])  <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> father[x] = find(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        father[i] = i;</span><br><span class="line">    sort(edge , edge + tot);</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t1 = find(edge[i].u);</span><br><span class="line">        <span class="keyword">int</span> t2 = find(edge[i].v);</span><br><span class="line">        <span class="comment">//u , v如果不在一个森林中就合并</span></span><br><span class="line">        <span class="keyword">if</span>(t1 != t2)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += edge[i].w;</span><br><span class="line">            father[t1] = t2;</span><br><span class="line">            ++cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt == n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt &lt; n - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span>            <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;n) &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> c1 , c2;</span><br><span class="line">        <span class="keyword">int</span> m1 , m2;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">" %c%d"</span> , &amp;c1 , &amp;m1);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m1; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">" %c%d"</span> , &amp;c2 , &amp;m2);</span><br><span class="line">                addedge(c1 - <span class="string">'A'</span> + <span class="number">1</span> , c2 - <span class="string">'A'</span> + <span class="number">1</span> , m2);</span><br><span class="line">                addedge(c2 - <span class="string">'A'</span> + <span class="number">1</span> , c1 - <span class="string">'A'</span> + <span class="number">1</span> , m2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span> , kruskal());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(end)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;
&lt;p&gt;前段时间数据结构的课上提到了了&lt;strong&gt;最小生成树&lt;/strong&gt;，，暑假的集训虽然再学并查集的时候看过一些，，但是之后好久没再用过，，早就忘记了，，，今天抽时间看了看，，把最小生成树的两个主要算法 &lt;strong&gt;prim&lt;/strong&gt; 和 &lt;strong&gt;kruskal&lt;/strong&gt;了解了一下，，，做几道题，，把自己的模板弄出来&lt;/p&gt;
    
    </summary>
    
      <category term="ACM-最小生成树" scheme="http://www.31415.cf/categories/ACM-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
    
      <category term="acm" scheme="http://www.31415.cf/tags/acm/"/>
    
      <category term="刷题" scheme="http://www.31415.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>poj-2253-poj-1797_最短路练习</title>
    <link href="http://www.31415.cf/2018/11/17/poj-2253-%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%BB%83%E4%B9%A0/"/>
    <id>http://www.31415.cf/2018/11/17/poj-2253-最短路练习/</id>
    <published>2018-11-17T03:48:51.000Z</published>
    <updated>2018-11-17T09:08:49.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p><a href="http://poj.org/problem?id=2253" target="_blank" rel="noopener">一道最短路的变形题</a>，，虽然说解法不止这一种，，</p><p>这道题看了好久都没看懂题意，，不知到在求什么，，，最后迫不得已去看了别人的思路，，理清思路之后，，代码就好写了，，，只需在原来的dijkstra板子上改一改就行了，，</p><p>补：第二道题和第一道题类似，，再改一改就行了，，</p><a id="more"></a><h1 id="分析与思路">分析与思路</h1><p>这道题的大致题意就是：给你n块石头的坐标，，然后问你从第一块石头到第二块石头的所有可到的m条路径中，，那m条最长的路中的最小的，，</p><p>所以分两步计算，，，</p><ul><li><p>先求 i-&gt;j m条路径中每条路径中的最大值，，</p></li><li><p>然后求这m个最大值中的最小值，，，</p></li></ul><p>按照这个思路，，dijkstra中的松弛条件就要改成</p><p><span class="math inline">\(dis[v] = min(dis[v] , max(dis[u] , w[u][v]))\)</span></p><ul><li>dis[v]表示原点1到v的最大路中的最小值，，同理dis[u]也一样</li><li>w[u][v]表示u-&gt;v的权值</li><li>求1-&gt;v的最大路中的最小值就等于 <strong>之前从别的路径到v中求得的最大路中的最小值</strong> 与 <strong>1-&gt;u-&gt;v这条路径中的最大路中的最小值，，（也就是 1-&gt;u 中最大路的最小值 和 u-&gt;v的权值相比较取最大的）</strong> 的最小值</li></ul><p>对了，，网上看到的别人的博客大多都是用邻接矩阵实现的，，，然后我尝试用邻接表实现的，，，注意对数据的处理，，，因为是给的点的坐标而不是点的编号，，，所以是每个点之间都有路径，，，最后，，用邻接表是实现记得处理完一组数据要把邻接表清空，，， 还有输出在poj上g++用%.3f</p><p><a href="http://poj.org/problem?id=1797" target="_blank" rel="noopener">第二道题就是前一道的反过来，，，求所有路径中最小值的最大值，，，</a></p><h1 id="代码">代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//poj-2253</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">double</span> c;</span><br><span class="line">    node()&#123;&#125;</span><br><span class="line">    node(<span class="keyword">int</span> _v , <span class="keyword">double</span> _c):v(_v) , c(_c)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;r) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> c &gt; r.c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">double</span> w;</span><br><span class="line">    edge(<span class="keyword">int</span> _v = <span class="number">0</span> , <span class="keyword">double</span> _w = <span class="number">0</span>):v(_v) , w(_w)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; e[maxn];</span><br><span class="line"><span class="keyword">double</span> dis[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u , <span class="keyword">int</span> v , <span class="keyword">double</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[u].push_back(edge(v , w));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis , <span class="literal">false</span> , <span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        dis[i] = inf;</span><br><span class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;node&gt; q;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())   q.pop();</span><br><span class="line">    q.push(node(<span class="number">1</span> , <span class="number">0</span>));</span><br><span class="line">    node t;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        t = q.top();q.pop();</span><br><span class="line">        <span class="keyword">int</span> u = t.v;</span><br><span class="line">        <span class="keyword">if</span>(vis[u])  <span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; e[u].size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = e[t.v][i].v;</span><br><span class="line">            <span class="keyword">double</span> w = e[u][i].w;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!vis[v])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = min(dis[v] , max(dis[u] , w));</span><br><span class="line">                q.push(node(v , dis[v]));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;n) != EOF &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> x[maxn] , y[maxn];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i  &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span> , &amp;x[i] , &amp;y[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">double</span> w = <span class="built_in">sqrt</span>((x[i] - x[j]) * (x[i] - x[j]) + (y[i] - y[j]) * (y[i] - y[j]));</span><br><span class="line">                addedge(i , j , w);</span><br><span class="line">                addedge(j , i , w);</span><br><span class="line">            &#125;</span><br><span class="line">        dijkstra();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Scenario #%d\nFrog Distance = %.3lf\n\n"</span> , q++ , dis[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; ++i)</span><br><span class="line">            e[i].clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1797</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    node()&#123;&#125;</span><br><span class="line">    node(<span class="keyword">int</span> _v , <span class="keyword">int</span> _c):v(_v) , c(_c)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;r) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> c &lt; r.c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    edge(<span class="keyword">int</span> _v = <span class="number">0</span> , <span class="keyword">int</span> _w = <span class="number">0</span>):v(_v) , w(_w)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; e[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> n , m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u , <span class="keyword">int</span> v , <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[u].push_back(edge(v , w));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis , <span class="literal">false</span> , <span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; ++i)</span><br><span class="line">        dis[i] = <span class="number">0</span>;</span><br><span class="line">    dis[<span class="number">1</span>] = inf;</span><br><span class="line">    priority_queue&lt;node&gt; q;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())   q.pop();</span><br><span class="line">    q.push(node(<span class="number">1</span> , inf));</span><br><span class="line">    node t;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        t = q.top();q.pop();</span><br><span class="line">        <span class="keyword">int</span> u = t.v;</span><br><span class="line">        <span class="keyword">if</span>(vis[u])  <span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; e[u].size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = e[t.v][i].v;</span><br><span class="line">            <span class="keyword">int</span> w = e[u][i].w;</span><br><span class="line">            <span class="keyword">if</span>(!vis[v])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = max(dis[v] , min(dis[u] , w));</span><br><span class="line">                q.push(node(v , dis[v]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q = <span class="number">1</span>;<span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span> , &amp;n , &amp;m);</span><br><span class="line">        <span class="keyword">int</span> u , v , w;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span> , &amp;u , &amp;v , &amp;w);</span><br><span class="line">            addedge(u , v , w);</span><br><span class="line">            addedge(v , u , w);</span><br><span class="line">        &#125;</span><br><span class="line">        dijkstra();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Scenario #%d:\n%d\n\n"</span> , q++ , dis[n]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; ++i)</span><br><span class="line">            e[i].clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">第二道题思路是对的，，，最后的输出忘记加:wa了<span class="number">4</span>次，，，一直以为是自己的邻接表+优先队列写的有问题，，，emmmmm ，，，坑</span><br></pre></td></tr></table></figure><h1 id="小结">小结</h1><p>因为期中考试等等各种事，，，好久没弄acm的这些东西了，，大概有三周或则一个月了吧，，，</p><p>后果就是之前学的，记得东西又快忘记了，，，板子也不能自己的默写下来了QAQ，，</p><p>接下来这一个半月得好好的努力一把了，，，，，（逃</p><p>(end)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2253&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;一道最短路的变形题&lt;/a&gt;，，虽然说解法不止这一种，，&lt;/p&gt;
&lt;p&gt;这道题看了好久都没看懂题意，，不知到在求什么，，，最后迫不得已去看了别人的思路，，理清思路之后，，代码就好写了，，，只需在原来的dijkstra板子上改一改就行了，，&lt;/p&gt;
&lt;p&gt;补：第二道题和第一道题类似，，再改一改就行了，，&lt;/p&gt;
    
    </summary>
    
      <category term="ACM-最短路" scheme="http://www.31415.cf/categories/ACM-%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
    
      <category term="acm" scheme="http://www.31415.cf/tags/acm/"/>
    
      <category term="刷题" scheme="http://www.31415.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>poj-1151矩形面积并-线段树</title>
    <link href="http://www.31415.cf/2018/10/30/poj-1151%E7%9F%A9%E5%BD%A2%E9%9D%A2%E7%A7%AF%E5%B9%B6-%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <id>http://www.31415.cf/2018/10/30/poj-1151矩形面积并-线段树/</id>
    <published>2018-10-30T14:35:11.000Z</published>
    <updated>2018-10-30T14:58:51.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p>线段树问题里的另一个问题，，，矩形面积并，，，，</p><p>之前看lazy更新时看到下面这个的讲解，，，一大堆文字还有一大堆的图，，，，当时果断跳过，，，</p><p>今天花了一下午加一晚上的时间看了看这块知识，，，然后尝试自己写出代码，，，算是简单的了解一下这块，，，</p><a id="more"></a><h1 id="题意">题意</h1><p><a href="http://poj.org/problem?id=1151" target="_blank" rel="noopener">这道矩形面积并</a>问题的大意是给很多个矩形，，矩形之间可能有交集，，，然后问你这一大片的图形面积是多少，，，，</p><p>数据量不大，，看到有很多人是暴力过的，，，</p><p>但是用线段树来当作练习题锻炼锻炼思维还是很好的QAQ</p><h1 id="思路">思路</h1><p><a href="http://www.cppblog.com/menjitianya/archive/2016/02/25/212891.html" target="_blank" rel="noopener">一开始我是看这篇博客有关矩形面积并的知识</a>，，， 这篇博客讲解的思路很不错，，，一遍之后大致了解了整个解决问题的思路，，，，但是它没有相应的练习题以及代码，，，，我完全不知道该从哪里下手，，，线段树的具体如何实现一脸懵逼，，，，还有，，，一般这种题都是要将一个方向的坐标 <strong>离散化</strong>，，，，嗯，，又是这个东西，，，，更是一脸的懵逼，，，，</p><p><a href="https://blog.csdn.net/riba2534/article/details/76851233" target="_blank" rel="noopener">然后看了这篇博客，，</a>对着代码，，，然后顺着思路写出来了，，，</p><p>主要的几点：</p><ul><li>前面两个博客的图很形象的把思路理了一遍，，，，就是枚举一个方向，，比如y方向，，然后，，将x方向的坐标离散化，，分成若干个 <strong>单位线段</strong>，，，，线段树维护这个单位线段，，，还是那个博客形象一些</li><li>整个图形的面积可以分成若干个小的矩形，，，然后加起来就行，，，，</li></ul><h1 id="代码">代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa  cout &lt;&lt; x[r + 1] &lt;&lt; <span class="meta-string">"----"</span> &lt;&lt; x[l] &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">205</span>;</span><br><span class="line"><span class="keyword">double</span> x[maxn &lt;&lt; <span class="number">2</span>];           <span class="comment">//所有的x的数据</span></span><br><span class="line"><span class="comment">//每一条线段</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> y;</span><br><span class="line">    <span class="keyword">double</span> l;</span><br><span class="line">    <span class="keyword">double</span> r;</span><br><span class="line">    <span class="keyword">int</span> flag;       <span class="comment">//1 or -1: 入边or出边</span></span><br><span class="line">    segment()&#123;&#125;</span><br><span class="line">    segment(<span class="keyword">double</span> y, <span class="keyword">double</span> l , <span class="keyword">double</span> r , <span class="keyword">int</span> flag):y(y) , l(l) , r(r) , flag(flag)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> segment &amp;res)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> y &lt; res.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;seg[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//线段树维护所有的单位线段（离散后的）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> cov;</span><br><span class="line">    <span class="keyword">double</span> len;</span><br><span class="line">&#125;node[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt , <span class="keyword">int</span> l , <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node[rt].cov)</span><br><span class="line">        node[rt].len = x[r + <span class="number">1</span>] - x[l];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l == r)</span><br><span class="line">        node[rt].len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        node[rt].len = node[rt &lt;&lt; <span class="number">1</span>].len + node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt , <span class="keyword">int</span> l , <span class="keyword">int</span> r , <span class="keyword">int</span> L , <span class="keyword">int</span> R , <span class="keyword">int</span> cov)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line">    &#123;</span><br><span class="line">        node[rt].cov += cov;</span><br><span class="line">        pushdown(rt , l , r);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)    update(rt &lt;&lt; <span class="number">1</span> , l , mid , L , R , cov);</span><br><span class="line">    <span class="keyword">if</span>(R &gt;  mid)    update(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span> , mid + <span class="number">1</span> , r , L , R , cov);</span><br><span class="line">    <span class="comment">//pushdown</span></span><br><span class="line">    pushdown(rt , l , r);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> q = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;n) &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(x , <span class="number">0</span> , <span class="keyword">sizeof</span> x);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> x1 , y1 , x2 , y2;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span> , &amp;x1 , &amp;y1 , &amp;x2 , &amp;y2);</span><br><span class="line">            seg[count]=segment(y1 , x1 , x2 , <span class="number">1</span>);</span><br><span class="line">            x[count++] = x1;</span><br><span class="line">            seg[count]=segment(y2 , x1 , x2 , <span class="number">-1</span>);</span><br><span class="line">            <span class="comment">//segment[i].y = y1;segment[i].l = x1;segment[i].r = x2;segment[i].flag = 1;</span></span><br><span class="line">            <span class="comment">//segment[i + 1].y = y2;segment[i + n].l = x1;segment[i + n].r = x2;segment[i + n].flag = -1;</span></span><br><span class="line"></span><br><span class="line">            x[count++] = x2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//离散</span></span><br><span class="line">        sort(seg , seg + count);</span><br><span class="line">        sort(x , x + count);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sz = unique(x , x + count) - x;</span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> l = lower_bound(x , x + sz , seg[i].l) - x;</span><br><span class="line">            <span class="keyword">int</span> r = lower_bound(x , x + sz , seg[i].r) - x - <span class="number">1</span>;</span><br><span class="line">            update(<span class="number">1</span> , <span class="number">0</span> , sz , l , r , seg[i].flag);</span><br><span class="line">            ans += node[<span class="number">1</span>].len * (seg[i + <span class="number">1</span>].y - seg[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Test case #%d\nTotal explored area: %.2f\n\n"</span>,q++,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结">总结</h1><p>算了，，，先鸽了，，，细节那天再补一下，，，， (loading,,,,)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;
&lt;p&gt;线段树问题里的另一个问题，，，矩形面积并，，，，&lt;/p&gt;
&lt;p&gt;之前看lazy更新时看到下面这个的讲解，，，一大堆文字还有一大堆的图，，，，当时果断跳过，，，&lt;/p&gt;
&lt;p&gt;今天花了一下午加一晚上的时间看了看这块知识，，，然后尝试自己写出代码，，，算是简单的了解一下这块，，，&lt;/p&gt;
    
    </summary>
    
    
      <category term="acm" scheme="http://www.31415.cf/tags/acm/"/>
    
      <category term="刷题" scheme="http://www.31415.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>hdu-3790最短路刷题</title>
    <link href="http://www.31415.cf/2018/10/20/hdu-3790%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%88%B7%E9%A2%98/"/>
    <id>http://www.31415.cf/2018/10/20/hdu-3790最短路刷题/</id>
    <published>2018-10-20T06:50:31.000Z</published>
    <updated>2018-10-20T06:57:08.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3790" target="_blank" rel="noopener">一道最短路的水题</a>，，，尽量不看以前的代码打出来，，，熟悉一下dijkstra的格式和链式前向星的写法，，，，</p><p>虽然是水题，，，但是一开始没考虑取费用最短的wa了一发，，，，QAQ</p><a id="more"></a><h1 id="分析">分析</h1><p>链式前向星存图，，再加一个数组保存源点到每个点的费用cst[maxm]，，，注意取最少的费用</p><h1 id="代码">代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxm &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxm];</span><br><span class="line"><span class="keyword">int</span> cst[maxm];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> n , m;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">int</span> last;</span><br><span class="line">&#125;edge[maxm &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u , <span class="keyword">int</span> v , <span class="keyword">int</span> w , <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].to = v;</span><br><span class="line">    edge[cnt].w = w;</span><br><span class="line">    edge[cnt].c = c;</span><br><span class="line">    edge[cnt].last = head[u];</span><br><span class="line">    head[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    node(<span class="keyword">int</span> _u , <span class="keyword">int</span> _w):u(_u) , w(_w)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;res) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> w &gt; res.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> n , <span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        dis[i] = (i == s) ? <span class="number">0</span> : inf;</span><br><span class="line">    <span class="built_in">memset</span>(cst , inf , <span class="keyword">sizeof</span> cst);cst[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis , <span class="literal">false</span> , <span class="keyword">sizeof</span> vis);</span><br><span class="line"></span><br><span class="line">    priority_queue&lt;node&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!q.empty())   q.pop();</span><br><span class="line"></span><br><span class="line">    q.push(node(s , <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        node x = q.top();q.pop();</span><br><span class="line">        <span class="keyword">int</span> u = x.u;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(vis[u])  <span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u] ; ~i; i = edge[i].last)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> to = edge[i].to;</span><br><span class="line">            <span class="keyword">int</span> w = edge[i].w;</span><br><span class="line">            <span class="keyword">int</span> c = edge[i].c;</span><br><span class="line">            <span class="keyword">if</span>(!vis[to] &amp;&amp; dis[u] + w &lt;= dis[to])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[to] = dis[u] + w;</span><br><span class="line">                <span class="comment">//if(cst[u] + c &lt; cst[to])</span></span><br><span class="line">                    cst[to] = cst[u] + c;</span><br><span class="line">                q.push(node(to , dis[to]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span> , &amp;n , &amp;m) &amp;&amp; n &amp;&amp; m)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(head , <span class="number">-1</span> , <span class="keyword">sizeof</span> head);</span><br><span class="line">        <span class="keyword">int</span> u , v , w , c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span> , &amp;u , &amp;v , &amp;w , &amp;c);</span><br><span class="line">            addedge(u , v , w , c);</span><br><span class="line">            addedge(v , u , w , c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> s , t;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span> , &amp;s , &amp;t);</span><br><span class="line"></span><br><span class="line">        dijkstra(n , s);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span> , dis[t] , cst[t]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最短路相等时注意取费用最短的</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//5 7</span></span><br><span class="line"><span class="comment">//1 2 5 5</span></span><br><span class="line"><span class="comment">//2 3 4 5</span></span><br><span class="line"><span class="comment">//1 3 4 6</span></span><br><span class="line"><span class="comment">//3 4 2 2</span></span><br><span class="line"><span class="comment">//3 5 4 7</span></span><br><span class="line"><span class="comment">//4 5 2 4</span></span><br><span class="line"><span class="comment">//1 3 4 4</span></span><br><span class="line"><span class="comment">//1 5</span></span><br><span class="line"><span class="comment">//8 10</span></span><br></pre></td></tr></table></figure><p>差不多记住了的dijkatra的代码，，，继续继续</p><p>(end)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=3790&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;一道最短路的水题&lt;/a&gt;，，，尽量不看以前的代码打出来，，，熟悉一下dijkstra的格式和链式前向星的写法，，，，&lt;/p&gt;
&lt;p&gt;虽然是水题，，，但是一开始没考虑取费用最短的wa了一发，，，，QAQ&lt;/p&gt;
    
    </summary>
    
      <category term="ACM-最短路" scheme="http://www.31415.cf/categories/ACM-%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
    
      <category term="acm" scheme="http://www.31415.cf/tags/acm/"/>
    
      <category term="刷题" scheme="http://www.31415.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>hdu-1540线段树刷题</title>
    <link href="http://www.31415.cf/2018/10/18/hdu-1540%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%88%B7%E9%A2%98/"/>
    <id>http://www.31415.cf/2018/10/18/hdu-1540线段树刷题/</id>
    <published>2018-10-18T11:55:21.000Z</published>
    <updated>2018-10-18T12:54:02.645Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1540" target="_blank" rel="noopener">哇，，，这道线段树的题可以说是到目前为止我所做过的最难的一道了吧QAQ，，，</a>，，，</p><p>一开始读完题就是一脸懵逼，，，，完全不知道该从哪里下手，，，就是知道这是一道线段树的题也不知道该怎么下手啊啊啊，，，，</p><p>最后还是看了kaungbin大佬的代码，，，QAQ</p><p>光是读代码就花了一两个小时，，，（不过也有可能和今天贼困有关，，，脑袋不怎么转啊</p><a id="more"></a><h1 id="分析思路">分析思路</h1><h2 id="题意">题意</h2><p>大概的题意就是一串在一条线上的村庄，，或者说是点，，，一开始都为1，，，然后有三种不同的操作，，，</p><ul><li>d a: 意味着将a这个点置为0，，，</li><li>q a: 意味着询问a周围有多少的1，，，只要碰到零就不算了，，，例如110111110,,(q 5) = 5</li><li>r: 意味着将上一个被置为零的点置为1</li></ul><h2 id="分析">分析</h2><h3 id="我的想法">我的想法</h3><p>一开始我看到有需要上一次操作的情况，，就想着要将这些d操作保存下来，，适合这道题的就是栈，，，</p><p>然后就是询问了，，，我那时想着既然要求a周围这些1的个数，，那我就找到两端的0不就行了，，，然后从这里就彻底的脑抽了，，，又想着用线段树去求这段区间的和，，，，然后结果显而易见，，，，t了，，，</p><p>因为，，这种想法线段树根本没有用啊！！！！都找出那两端的0所在的位置直接减不就行了，，，这不就是裸暴力吗，，，，，哇，，，被自己蠢哭(๐॔˃̶ᗜ˂̶๐॓)，，，，</p><h3 id="斌神的做法">斌神的做法</h3><p>首先将这段线划分成多个区段，，，每个区段保存的信息有：<strong>从这去区段的左端点开始最长的连续1的个数ll</strong> 、 <strong>从这个区段右端点开始的最长的连续1的个数rl</strong> 、 还有<strong>这个区段最大的连续点的个数ml</strong>。。。</p><p><strong>建树</strong>：ll = rl = ml = 区间长</p><p><strong>更新</strong>：</p><blockquote><p>叶子节点置一置零，，，</p></blockquote><blockquote><p>左右递归更新</p></blockquote><blockquote><p>其他区间：(pushup()) 父节点.ll = 左节点.ll 父节点.rl = 右节点.rl 父节点.ml取左右节点的最大的一个ml 若左节点的rl + 右节点的ll &gt; 父节点的ml，，，，就更新为前者</p></blockquote><blockquote><p>对于父节点的ll,rl 如果左节点的ll为左节点的长度，，，就说明左节点从左端点开始的连续1的最大的个数就为左节点包含的点的个数，，，所以此时的父节点的ll就要和<strong>右节点的ll合并</strong> 同理，，，父节点的rl也要进行这样的判断</p></blockquote><p><strong>查询</strong>：</p><p>对于一些特殊的区间直接返回该区间的最大的连续1的个数也就是ml</p><blockquote><p>当loc在中点左时，，，就要从左节点来判断，，，判断的条件是loc是否超出了rl的最左端（画图更容易理解一些），，，超出的话就说明loc所在的连续的1一部分是在左节点的rl里另一部分是在右节点的ll里，，，就分成两个点查询，，，一个是在左节点的loc，，，另一个时在右节点的mid+1那个点 同理，，若在中点的右时也有类似的判断，，， 大体上说就是不断地判断要找到那个点相对ll,rl的位置，，，最后把递归查询到的结果合并就行了，，，</p></blockquote><p>字丑见谅，，，，（不过应该没人看把，，，，</p><p><img src="https://img2018.cnblogs.com/blog/1028485/201810/1028485-20181018204849235-921393699.jpg"></p><h1 id="代码">代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">int</span> ml;</span><br><span class="line">    <span class="keyword">int</span> ll;</span><br><span class="line">    <span class="keyword">int</span> rl;</span><br><span class="line">&#125;node[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt , <span class="keyword">int</span> l , <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[rt].l = l;</span><br><span class="line">    node[rt].r = r;</span><br><span class="line">    node[rt].ml = node[rt].ll = node[rt].rl = r - l + <span class="number">1</span>;    <span class="comment">//刚开始肯定是区间的长度</span></span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(rt &lt;&lt; <span class="number">1</span> , l , mid);</span><br><span class="line">    build(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span> , mid + <span class="number">1</span> , r);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt , <span class="keyword">int</span> loc , <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node[rt].l == node[rt].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(val) node[rt].ml = node[rt].ll = node[rt].rl = <span class="number">1</span>;    <span class="comment">//摧毁和重建两种</span></span><br><span class="line">        <span class="keyword">else</span>    node[rt].ml = node[rt].ll = node[rt].rl = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (node[rt].l + node[rt].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(loc &lt;= mid)  update(rt &lt;&lt; <span class="number">1</span> , loc , val);</span><br><span class="line">    <span class="keyword">else</span>            update(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span> , loc , val);</span><br><span class="line">    <span class="comment">//递归更新</span></span><br><span class="line">    <span class="comment">//先更新父节点的两个，ll,rl</span></span><br><span class="line">    node[rt].ll = node[rt &lt;&lt; <span class="number">1</span>].ll;</span><br><span class="line">    node[rt].rl = node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].rl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//然后是父节点的ml</span></span><br><span class="line">    node[rt].ml = max(node[rt &lt;&lt; <span class="number">1</span>].ml , node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].ml);</span><br><span class="line">    node[rt].ml = max(node[rt].ml , node[rt &lt;&lt; <span class="number">1</span>].rl + node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].ll);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//父节点的ll,rl可能就是左右节点的ll,,rl,,,,当刚好是子节点的全部时还要加上另一个区间的一部分</span></span><br><span class="line">    <span class="keyword">if</span>(node[rt &lt;&lt; <span class="number">1</span>].ll == node[rt &lt;&lt; <span class="number">1</span>].r - node[rt &lt;&lt; <span class="number">1</span>].l + <span class="number">1</span>)</span><br><span class="line">        node[rt].ll += node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].ll;</span><br><span class="line">    <span class="keyword">if</span>(node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].rl == node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].r - node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].l + <span class="number">1</span>)</span><br><span class="line">        node[rt].rl += node[rt &lt;&lt; <span class="number">1</span>].rl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt , <span class="keyword">int</span> loc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//特殊情况直接返回ml</span></span><br><span class="line">    <span class="keyword">if</span>(node[rt].l == node[rt].r || node[rt].ml == <span class="number">0</span> || node[rt].ml == node[rt].r - node[rt].l + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> node[rt].ml;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = (node[rt].l + node[rt].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(loc &lt;= mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(loc &gt;= node[rt &lt;&lt; <span class="number">1</span>].r - node[rt &lt;&lt; <span class="number">1</span>].rl + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> query(rt &lt;&lt; <span class="number">1</span> , loc) + query(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span> , mid + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> query(rt &lt;&lt; <span class="number">1</span> , loc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(loc &lt;= node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].l + node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].ll - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> query(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span> , loc) + query(rt &lt;&lt; <span class="number">1</span> , mid);</span><br><span class="line">        <span class="keyword">return</span> query(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span> , loc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n , m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span> , &amp;n , &amp;m) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        build(<span class="number">1</span> , <span class="number">1</span> , n);</span><br><span class="line">        <span class="keyword">int</span> q[maxn];</span><br><span class="line">        <span class="keyword">int</span> toc = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> c;<span class="built_in">scanf</span>(<span class="string">" %c"</span> , &amp;c);</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">'D'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;t);</span><br><span class="line">                q[toc++] = t;   <span class="comment">//把摧毁操作保存</span></span><br><span class="line">                update(<span class="number">1</span> , t , <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'Q'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;t);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span> , query(<span class="number">1</span> , t));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(t)</span><br><span class="line">                &#123;</span><br><span class="line">                    t = q[--toc];</span><br><span class="line">                    update(<span class="number">1</span> , t , <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//kaungbin</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1540&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;哇，，，这道线段树的题可以说是到目前为止我所做过的最难的一道了吧QAQ，，，&lt;/a&gt;，，，&lt;/p&gt;
&lt;p&gt;一开始读完题就是一脸懵逼，，，，完全不知道该从哪里下手，，，就是知道这是一道线段树的题也不知道该怎么下手啊啊啊，，，，&lt;/p&gt;
&lt;p&gt;最后还是看了kaungbin大佬的代码，，，QAQ&lt;/p&gt;
&lt;p&gt;光是读代码就花了一两个小时，，，（不过也有可能和今天贼困有关，，，脑袋不怎么转啊&lt;/p&gt;
    
    </summary>
    
      <category term="ACM-线段树" scheme="http://www.31415.cf/categories/ACM-%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="acm" scheme="http://www.31415.cf/tags/acm/"/>
    
      <category term="刷题" scheme="http://www.31415.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>hdu-5023线段树刷题</title>
    <link href="http://www.31415.cf/2018/10/18/hdu-5023%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%88%B7%E9%A2%98/"/>
    <id>http://www.31415.cf/2018/10/18/hdu-5023线段树刷题/</id>
    <published>2018-10-18T05:32:13.000Z</published>
    <updated>2018-10-18T12:51:10.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p>这道题和上次做的那道染色问题一样，，，这次主要是看看我再过去两三天之后，，大概凭借以前的记忆敲出来得多长的时间，，，，</p><p>结果是，，，大体的框架没问题了，，，，一遍下来编译也没问题，，，但是，，细节问题有两个，，， + 数组写成了1e6而不是1e6+10虽然对本题没什么影响，， + 建树中的初始化操作时染色初始化为2，，，所以应该是从右往左数的第二个bit记为1，，，然后我就少算了一位，，，因为bitset可以看作是一个从右向左并且从0开始的数组，，所以是col[1] = 1，，，这样wa了一发 + 最后一个，，，，输出格式错误，，，，噗噗噗噗</p><a id="more"></a><h1 id="代码">代码</h1><p>思路与poj那一道一模一样，，直接扔代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">int</span> laz;</span><br><span class="line">    <span class="built_in">bitset</span>&lt;30&gt; col;</span><br><span class="line">&#125;node[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout &lt;&lt; node[rt].col &lt;&lt; endl;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt , <span class="keyword">int</span> l , <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[rt].l = l;</span><br><span class="line">    node[rt].r = r;</span><br><span class="line">    node[rt].laz = <span class="number">0</span>;</span><br><span class="line">    node[rt].col = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(node[rt].l == node[rt].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">bitset</span>&lt;30&gt; t;</span><br><span class="line">        t.<span class="built_in">set</span>(<span class="number">1</span>);</span><br><span class="line">        node[rt].col = t;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (node[rt].l + node[rt].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    build(rt &lt;&lt; <span class="number">1</span> , l , mid);</span><br><span class="line">    build(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span> , mid + <span class="number">1</span> , r);</span><br><span class="line">    node[rt].col = node[rt &lt;&lt; <span class="number">1</span>].col | node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].col;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node[rt].laz)</span><br><span class="line">    &#123;</span><br><span class="line">        node[rt &lt;&lt; <span class="number">1</span>].col = node[rt].col;</span><br><span class="line">        node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].col = node[rt].col;</span><br><span class="line"></span><br><span class="line">        node[rt &lt;&lt; <span class="number">1</span>].laz = node[rt].laz;</span><br><span class="line">        node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].laz = node[rt].laz;</span><br><span class="line"></span><br><span class="line">        node[rt].laz = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt , <span class="keyword">int</span> L , <span class="keyword">int</span> R , <span class="keyword">int</span> C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= node[rt].l &amp;&amp; node[rt].r &lt;= R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">bitset</span>&lt;30&gt; t;</span><br><span class="line">        t.<span class="built_in">set</span>(C - <span class="number">1</span>);</span><br><span class="line">        node[rt].col = t;</span><br><span class="line">        node[rt].laz = C;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(rt);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = (node[rt].l + node[rt].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)    update(rt &lt;&lt; <span class="number">1</span> , L , R , C);</span><br><span class="line">    <span class="keyword">if</span>(R &gt;  mid)    update(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span> , L , R , C);</span><br><span class="line">    node[rt].col = node[rt &lt;&lt; <span class="number">1</span>].col | node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].col;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">bitset</span>&lt;30&gt; query(<span class="keyword">int</span> rt , <span class="keyword">int</span> L , <span class="keyword">int</span> R)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= node[rt].l &amp;&amp; node[rt].r &lt;= R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> node[rt].col;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pushdown(rt);</span><br><span class="line">    <span class="built_in">bitset</span>&lt;30&gt; ans(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> mid = (node[rt].l + node[rt].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)    ans |= query(rt &lt;&lt; <span class="number">1</span> , L , R);</span><br><span class="line">    <span class="keyword">if</span>(R &gt;  mid)    ans |= query(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span> , L , R);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n , m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span> , &amp;n , &amp;m) &amp;&amp; n &amp;&amp; m)</span><br><span class="line">    &#123;</span><br><span class="line">        build(<span class="number">1</span> , <span class="number">1</span> , n);</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> c;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">" %c"</span> , &amp;c);</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">'P'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> l , r , v;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span> , &amp;l , &amp;r , &amp;v);</span><br><span class="line">                update(<span class="number">1</span> , l , r , v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> l , r;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span> , &amp;l , &amp;r);</span><br><span class="line">                <span class="built_in">bitset</span>&lt;30&gt; ans = query(<span class="number">1</span> , l , r);</span><br><span class="line">                <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">30</span>; ++i , ans&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">if</span>(ans[<span class="number">0</span>] == <span class="number">1</span>)</span><br><span class="line">                        <span class="keyword">if</span>(flag)</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%d"</span> , i) , flag = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">" %d"</span> , i);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先水一题，，，下午继续QAQ</p><p>(end)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;
&lt;p&gt;这道题和上次做的那道染色问题一样，，，这次主要是看看我再过去两三天之后，，大概凭借以前的记忆敲出来得多长的时间，，，，&lt;/p&gt;
&lt;p&gt;结果是，，，大体的框架没问题了，，，，一遍下来编译也没问题，，，但是，，细节问题有两个，，， + 数组写成了1e6而不是1e6+10虽然对本题没什么影响，， + 建树中的初始化操作时染色初始化为2，，，所以应该是从右往左数的第二个bit记为1，，，然后我就少算了一位，，，因为bitset可以看作是一个从右向左并且从0开始的数组，，所以是col[1] = 1，，，这样wa了一发 + 最后一个，，，，输出格式错误，，，，噗噗噗噗&lt;/p&gt;
    
    </summary>
    
      <category term="ACM-线段树" scheme="http://www.31415.cf/categories/ACM-%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="acm" scheme="http://www.31415.cf/tags/acm/"/>
    
      <category term="刷题" scheme="http://www.31415.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>poj-2777线段树刷题</title>
    <link href="http://www.31415.cf/2018/10/16/poj-2777%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%88%B7%E9%A2%98/"/>
    <id>http://www.31415.cf/2018/10/16/poj-2777线段树刷题/</id>
    <published>2018-10-16T12:01:07.000Z</published>
    <updated>2018-10-16T13:00:09.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p><a href="http://poj.org/problem?id=2777" target="_blank" rel="noopener">这道题是一道线段树的染色问题,,,,</a></p><p>做了几道染色的问题，，好像渐渐的熟悉的染色问题的大概的解体思路，，，不再像刚开始做的时候那样一脸懵逼，，，只能去翻博客去看别人的思路，，，好歹这次没有看别人博客自己写出来，，，（除了一些细节没考虑到wa的一发，，，，逃</p><a id="more"></a><h1 id="分析与思路">分析与思路</h1><h2 id="题面">题面</h2><p>大概的意思就是给一个区间1~n，，，然后最多有30种颜色，，，q次操作对[l,r]这个区间染色，，，中间有一些询问区间[l , r]内一共有几种颜色，，，</p><h2 id="分析">分析</h2><ul><li><p>首先考虑线段树所维护的东西，，，染色问题大多是维护每个区间的颜色，，，对于这道题就是维护该区间的颜色的种类，，，然后对于每两个子区间都要向上合并颜色的种类，，，，相同的忽略一边的不同的就加一，，，求出父区间的种类数，，，，也就是更新操作，，，询问呢就是再询问的区间[L , R]里的话直接返沪这个区间的种类数，，，跨区间的递归继续向下查找，，，</p></li><li><p>然后考虑颜色，，，最多一共有30种，，，如果每个区间都用一个30长的数组col[30]去存放每种颜色的种类，，col[i] == 1表示这个区间有第i种颜色反之没有的话，，，空间消耗较大，，，而且相关的操作也不好表达，，，因为每个区间的每种颜色只有两种情况，，，有或没有，，，所以选择状态压缩来实现比较好，，，这里我想到前段时间看到的一个很好的状压stl--bitset，，，优点有很多，，，比如说：他就像bool数组一样但是每一位只占1bit，，，而且有很多成员函数很方便，，，具体的食用方法<a href="https://www.cnblogs.com/RabbitHu/p/bitset.html" target="_blank" rel="noopener">戳这里</a></p></li><li><p>另一个需要注意的是，，，线段树要选择lazy的，，，还有一些细节： &gt;区间的合并需要<strong>或</strong>操作，，，包括更新和询问 &gt;初始时所有区间都为1 &gt;当整个区间都染色时是将该区间的node[rt].col<strong>改</strong>为c,,,而不是或 &gt;还有一个最坑人的，，，，题目不保证l &lt;= r，，，（poj上的题都这样的吗，，噗噗噗噗</p></li></ul><h1 id="代码">代码</h1><p>这次又写成node结构体实现的了，，，还是因为这个理解起来很容易，，，，</p><p>但是缺点是占用的空间比较大，，，，</p><p>下次再写这道题的时候要换用另一种裸的了QAQ</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson rt&lt;&lt;1,l,mid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson rt&lt;&lt;1|1,mid+1,r</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout &lt;&lt; node[rt].col &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">int</span> laz;</span><br><span class="line">    <span class="built_in">bitset</span>&lt;30&gt; col;         <span class="comment">//bitset,,表示该区间的颜色的种类</span></span><br><span class="line">&#125;node[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt , <span class="keyword">int</span> l , <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[rt].l = l;</span><br><span class="line">    node[rt].r = r;</span><br><span class="line">    node[rt].laz = <span class="number">0</span>;</span><br><span class="line">    node[rt].col = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(node[rt].l == node[rt].r)</span><br><span class="line">    &#123;</span><br><span class="line">        node[rt].col = <span class="number">1</span>;   <span class="comment">//初始化为1</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (node[rt].l + node[rt].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    node[rt].col = node[rt &lt;&lt; <span class="number">1</span>].col | node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].col; <span class="comment">//记得更新，，用或</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node[rt].laz)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">bitset</span>&lt;30&gt; t;</span><br><span class="line">        t.<span class="built_in">set</span>(node[rt].laz - <span class="number">1</span>);    <span class="comment">//标记为laz那一个颜色</span></span><br><span class="line">        node[rt &lt;&lt; <span class="number">1</span>].col = t;      <span class="comment">//不是或操作</span></span><br><span class="line">        node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].col = t;</span><br><span class="line"></span><br><span class="line">        node[rt &lt;&lt; <span class="number">1</span>].laz = node[rt].laz;</span><br><span class="line">        node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].laz = node[rt].laz;</span><br><span class="line"></span><br><span class="line">        node[rt].laz = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt , <span class="keyword">int</span> L , <span class="keyword">int</span> R , <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= node[rt].l &amp;&amp; node[rt].r &lt;= R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">bitset</span>&lt;30&gt; t;</span><br><span class="line">        t.<span class="built_in">set</span>(c - <span class="number">1</span>);</span><br><span class="line">        node[rt].col = t;       <span class="comment">//同上</span></span><br><span class="line">        node[rt].laz = c;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(rt);</span><br><span class="line">    <span class="keyword">int</span> mid = (node[rt].l + node[rt].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)    update(rt &lt;&lt; <span class="number">1</span> , L , R , c);</span><br><span class="line">    <span class="keyword">if</span>(R &gt;  mid)    update(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span> , L , R , c);</span><br><span class="line">    node[rt].col = node[rt &lt;&lt; <span class="number">1</span>].col | node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].col;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">bitset</span>&lt;30&gt; query(<span class="keyword">int</span> rt , <span class="keyword">int</span> L , <span class="keyword">int</span> R)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//对每两个子区间合并，，，同样是或操作，，，所以函数返回值类型为bitset&lt;30&gt;</span></span><br><span class="line">    <span class="comment">//最后的答案为 返回值.count()</span></span><br><span class="line">    <span class="keyword">if</span>(L &lt;= node[rt].l &amp;&amp; node[rt].r &lt;= R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> node[rt].col;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(rt);</span><br><span class="line">    <span class="keyword">int</span> mid = (node[rt].l + node[rt].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bitset</span>&lt;30&gt; ans (<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)    ans |= query(rt &lt;&lt; <span class="number">1</span> , L , R);      <span class="comment">//用或合并</span></span><br><span class="line">    <span class="keyword">if</span>(R &gt;  mid)    ans |= query(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span> , L , R);</span><br><span class="line">    <span class="comment">//cout &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n , t , m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span> , &amp;n , &amp;t , &amp;m) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        build(<span class="number">1</span> , <span class="number">1</span> , n);</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> q;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">" %c"</span> , &amp;q);</span><br><span class="line">            <span class="keyword">if</span>(q == <span class="string">'C'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> l , r , c;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;l , &amp;r , &amp;c);</span><br><span class="line">                <span class="keyword">if</span>(l &gt; r)   swap(l , r);        <span class="comment">//巨坑！！！！</span></span><br><span class="line">                update(<span class="number">1</span> , l , r , c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> l , r;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span> , &amp;l , &amp;r);</span><br><span class="line">                <span class="keyword">if</span>(l &gt; r)   swap(l , r);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span> , query(<span class="number">1</span> , l , r).count());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="感想">感想</h1><p>算了不说了QAQ</p><p>(end)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2777&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这道题是一道线段树的染色问题,,,,&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;做了几道染色的问题，，好像渐渐的熟悉的染色问题的大概的解体思路，，，不再像刚开始做的时候那样一脸懵逼，，，只能去翻博客去看别人的思路，，，好歹这次没有看别人博客自己写出来，，，（除了一些细节没考虑到wa的一发，，，，逃&lt;/p&gt;
    
    </summary>
    
      <category term="ACM-线段树" scheme="http://www.31415.cf/categories/ACM-%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="acm" scheme="http://www.31415.cf/tags/acm/"/>
    
      <category term="刷题" scheme="http://www.31415.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>zoj-1610线段树刷题</title>
    <link href="http://www.31415.cf/2018/10/16/zoj-1610%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%88%B7%E9%A2%98/"/>
    <id>http://www.31415.cf/2018/10/16/zoj-1610线段树刷题/</id>
    <published>2018-10-16T08:49:47.000Z</published>
    <updated>2018-10-16T13:00:26.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p><a href="https://vjudge.net/contest/259382#problem/F" target="_blank" rel="noopener">这道题是一道简单的线段树区间染色问题，，，</a></p><p>但是，，，，刚学lazy更新没多久的我看到这样的题心里还是发怵，，，</p><p>本来是一道简单的题一开始就是不知道怎么用线段树维护染色的区间，，，还有一个老毛病，，，还是不知道怎么把题目里的信息抽象出来，，，</p><p>明确线段树所要维护的信息以及如何对这些信息如何更新和查询，，，</p><a id="more"></a><h1 id="思路分析">思路分析</h1><ul><li><p>这道题和前几天做的那道贴海报的题很像，，，都是在一个很大的区间里进行连续的<strong>区间覆盖</strong>操作，，，</p></li><li><p>然后问你最后露出来的颜色、海报有几种，，，只不过这道题是要列出每种颜色出现了几个区间，，，</p></li><li><p>首先，，，这道题染色是区间之间的染色，，，就是说&quot;1 2 1&quot;是指在1 ， 2这个长度只有1的区间里染色成颜色1，，，而那道海报的题是指1 ， 2这两个块贴上海报，，，，这就意味着我们用线段树来维护染色操作时要将所给的左端点加一，，</p></li><li><p>全部染色完了(更新)之后，，，就是对整个区域查询，，，然后把有颜色覆盖的区域都保存到另一个数组里，，，也就是最后染色后的区域，，，然后遍历这个区域，，，数出对应的颜色的个数就行了，，，</p></li><li><p>更新时用到了lazy操作</p></li></ul><p><a href="https://blog.csdn.net/shuangde800/article/details/8186332" target="_blank" rel="noopener">参考</a></p><h1 id="代码">代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson rt&lt;&lt;1,l,mid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson rt&lt;&lt;1|1,mid+1,r</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> aaa cout&lt;&lt;<span class="meta-string">"2333"</span>&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">8005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> col[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> vis[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> ans[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(~col[rt])</span><br><span class="line">    &#123;</span><br><span class="line">        col[rt &lt;&lt; <span class="number">1</span>] = col[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = col[rt];</span><br><span class="line">        col[rt] = <span class="number">-1</span>;<span class="comment">//父节点有多种染色标记为-1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt , <span class="keyword">int</span> l , <span class="keyword">int</span> r , <span class="keyword">int</span> L , <span class="keyword">int</span> R , <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//当该区间在所要染色的区间里时染色</span></span><br><span class="line">        col[rt] = val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(col[rt] == val)  <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(~col[rt])        <span class="comment">//染过色又要染其他颜色时下推</span></span><br><span class="line">        pushdown(rt);</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)    update(lson , L , R , val);</span><br><span class="line">    <span class="keyword">if</span>(R &gt;  mid)    update(rson , L , R , val);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt , <span class="keyword">int</span> l , <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(col[rt] &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//把存在的颜色保存到vis数组里</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; ++i)</span><br><span class="line">            vis[i] = col[rt];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(col[rt] == <span class="number">-1</span> &amp;&amp; l != r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//已经保存的区间就不再查询了</span></span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        query(lson);</span><br><span class="line">        query(rson);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;n) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//初始化操作，，，无需再建树</span></span><br><span class="line">        <span class="built_in">memset</span>(col , <span class="number">-1</span> , <span class="keyword">sizeof</span>(col));</span><br><span class="line">        <span class="built_in">memset</span>(vis , <span class="number">-1</span> , <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">memset</span>(ans , <span class="number">0</span> , <span class="keyword">sizeof</span>(ans));</span><br><span class="line">        <span class="keyword">int</span> a , b , c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span> , &amp;a , &amp;b , &amp;c);</span><br><span class="line">            update(<span class="number">1</span> , <span class="number">1</span> , <span class="number">8000</span> , a + <span class="number">1</span> , b , c);<span class="comment">//左端点++</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        query(<span class="number">1</span> , <span class="number">1</span> , <span class="number">8000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数出每个颜色的个数</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; maxn)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> color = vis[i];</span><br><span class="line">            <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(color == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ++i;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(~vis[j] &amp;&amp; vis[j] == color &amp;&amp; j &lt; maxn)   ++j;</span><br><span class="line">            ++ans[color];</span><br><span class="line">            i = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ans[i])  <span class="comment">//颜色存在输出</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span> , i , ans[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结">总结</h1><ul><li>还是不能找不出维护的信息以及如何查询</li><li>染色问题是线段树的区间覆盖问题，，，节点一般保存颜色信息</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://vjudge.net/contest/259382#problem/F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这道题是一道简单的线段树区间染色问题，，，&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但是，，，，刚学lazy更新没多久的我看到这样的题心里还是发怵，，，&lt;/p&gt;
&lt;p&gt;本来是一道简单的题一开始就是不知道怎么用线段树维护染色的区间，，，还有一个老毛病，，，还是不知道怎么把题目里的信息抽象出来，，，&lt;/p&gt;
&lt;p&gt;明确线段树所要维护的信息以及如何对这些信息如何更新和查询，，，&lt;/p&gt;
    
    </summary>
    
      <category term="ACM-线段树" scheme="http://www.31415.cf/categories/ACM-%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="acm" scheme="http://www.31415.cf/tags/acm/"/>
    
      <category term="刷题" scheme="http://www.31415.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>poj-3268最短路</title>
    <link href="http://www.31415.cf/2018/10/13/poj-3268%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    <id>http://www.31415.cf/2018/10/13/poj-3268最短路/</id>
    <published>2018-10-13T07:54:34.000Z</published>
    <updated>2018-10-13T08:19:54.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p>这是一道最短路的模板题，，，不过虽然是模板题，，，还是有一些细节的，，，，QAQ</p><p>刚开始我的思路是建立一个汇点，，，然后求这个点为起点到终点x的最短路，，，再求终点到汇点的最短路，，，最后找一个和最大的，，，，这么想是因为和之前做的一道题很像，，，但像归像，，，终究不一样的，，，，这样还是求不出最后的结果，，，因为即使求出汇点到终点的最短路，，，但并不是每个点到终点的最短路，，，QAQ</p><a id="more"></a><h1 id="分析思路">分析思路</h1><p>首先确定是单元最短路有关的题，，，而且题目保证正边，，，所以选择dijkstra解决，，，</p><p>其次，，，我之前好像还是单源最短路的理解不够清楚，，，</p><p><strong>单源最短路一个最主要的性质就是所选起点到任意一点的最短路都可以求出来</strong></p><p>这道题分成两部分，，一部分是所有点到终点x的最短路，，，另一个是终点到所有点的最短路，，，</p><p>显然后一部分可以直接调用一次dijkstra便可以求出，，，</p><p>而前者可以考虑反方向，，，所有点到终点的最短路就相当于<strong>沿相同的最短路从 终点x 到 每个点 的最短路</strong>，，，这个相同的最短路就是指：假如1到3的最短路是1-&gt;4-&gt;3那么他就等同于3-&gt;4-&gt;1，，，所以再求前一部分就可以将图中的每一条路的方向都取反方向，，，也就是逆图，，，这样一终点x为起点到各点的最短路就等于各点到终点x的最短路，，，</p><p>所以为了实现逆图选择 <strong>邻接矩阵</strong> 要比其他方式的存图要好一些，，，</p><h1 id="实现">实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="comment">//const int maxm = 1e5 + 10;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cost[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> dis1[maxn];</span><br><span class="line"><span class="keyword">int</span> dis2[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> n , m , x;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> n , <span class="keyword">int</span> s , <span class="keyword">int</span> dis[] , <span class="keyword">int</span> cost[][maxn])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//init</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        dis[i] = (i == s) ? <span class="number">0</span> : inf;</span><br><span class="line">    <span class="built_in">memset</span>(vis , <span class="literal">false</span> , <span class="keyword">sizeof</span>(vis));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> m = inf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[j] &amp;&amp; dis[j] &lt; m)</span><br><span class="line">            &#123;</span><br><span class="line">                m = dis[j];</span><br><span class="line">                k = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        vis[k] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            <span class="keyword">if</span>(!vis[j] &amp;&amp; dis[k] + cost[k][j] &lt; dis[j])</span><br><span class="line">                dis[j] = dis[k] + cost[k][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u , v , w;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span> , &amp;n , &amp;m , &amp;x) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i == j)  cost[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span>        cost[i][j] = inf;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span> , &amp;u , &amp;v , &amp;w);</span><br><span class="line">            cost[u][v] = min(cost[u][v] , w);</span><br><span class="line">        &#125;</span><br><span class="line">        dijkstra(n , x , dis1 , cost);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j)</span><br><span class="line">                swap(cost[i][j] , cost[j][i]);</span><br><span class="line">        dijkstra(n , x , dis2 , cost);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            ans = max(ans , dis1[i] + dis2[i]);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span> , ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(end)</p><p>什么时候才能真正的感觉这才是水题啊，，，QAQ</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;
&lt;p&gt;这是一道最短路的模板题，，，不过虽然是模板题，，，还是有一些细节的，，，，QAQ&lt;/p&gt;
&lt;p&gt;刚开始我的思路是建立一个汇点，，，然后求这个点为起点到终点x的最短路，，，再求终点到汇点的最短路，，，最后找一个和最大的，，，，这么想是因为和之前做的一道题很像，，，但像归像，，，终究不一样的，，，，这样还是求不出最后的结果，，，因为即使求出汇点到终点的最短路，，，但并不是每个点到终点的最短路，，，QAQ&lt;/p&gt;
    
    </summary>
    
      <category term="ACM-最短路" scheme="http://www.31415.cf/categories/ACM-%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
    
      <category term="acm" scheme="http://www.31415.cf/tags/acm/"/>
    
      <category term="刷题" scheme="http://www.31415.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>poj-2528线段树练习</title>
    <link href="http://www.31415.cf/2018/10/13/poj-2528%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%BB%83%E4%B9%A0/"/>
    <id>http://www.31415.cf/2018/10/13/poj-2528线段树练习/</id>
    <published>2018-10-13T05:45:09.000Z</published>
    <updated>2018-10-13T06:21:29.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p><a href="http://poj.org/problem?id=2528" target="_blank" rel="noopener">这道题坑了我好久啊啊啊啊，，，，</a></p><p>到现在也只是理解了kaungbin的代码，，，知道每一步做什么，，，但感觉就是哪里有些不对劲的样子，，，，</p><p>这道题有两个点是我感觉很重要的，，，一个是数据的离散化，，，另一个是线段树的变形，，，也就是它所维护的东西和之前见过的不一样了，，，，</p><a id="more"></a><h1 id="分析思路">分析思路</h1><p>题意是这样的，，，在一个很大的区间里，，，不停的给每一个区间覆盖海报，，，每个覆盖的海报是不一样的，，然后问你最后一共有几个海报是露出来的，，，</p><p>大体上的思路是与所给贴海报相反的顺序贴海报，，，这样的话第一张（也就是原来顺序的最后一张）一定是全露出来的，，然后第二张（也就是原来顺序的倒数第二张）<strong>如果是在第一张的区间里说明它就被完全覆盖了，，如果是在第一张以外的其他地方，，，就说明这张也一定是露出来的，，，以此类推</strong>，，对于每一次判断出是露出来的++ans，，，最终全处理了就得到了答案，，，数据要离散后再用，，，</p><p>可以看出这样的写法中线段树只是用来判断每一次的贴海报，，，也就是说，，，线段树只是用来维护每一个区间是否被覆盖（更新），，，同时返回所要覆盖的区间是否有露出来的（查询），，，所以更新和查询的操作可以合并在一起，，，，</p><h1 id="实现">实现</h1><h2 id="数据的离散化">数据的离散化</h2><p>先说一下离散怎么实现:</p><p>首先原数据保存到x[maxn]数组，，，</p><p>然后把所有的数据复制到另一个数组a[maxn]，，，</p><p>对其排序，，，</p><p>去重，，，</p><p>然后对去重的数组a[maxn]遍历进行离散，，，</p><p>这样想要知道知道原来数据中x所对应离散后的位置就为hash[x]，，，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sort(a , a + count);</span><br><span class="line">count = unique(a , a + count) - a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i)</span><br><span class="line">    hash[a[i]] = i;</span><br></pre></td></tr></table></figure><h2 id="最后的代码">最后的代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson rt&lt;&lt;1,l,mid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson rt&lt;&lt;1|1,mid+1,r</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">bool</span> cov;       <span class="comment">//表示这个节点所代表的区间是否被覆盖</span></span><br><span class="line">&#125;node[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poster</span>       //表示海报的结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">&#125;poster[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt , <span class="keyword">int</span> l , <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[rt].l = l;</span><br><span class="line">    node[rt].r = r;</span><br><span class="line">    node[rt].cov = <span class="literal">false</span>;   <span class="comment">//每一个区间初始化为未覆盖</span></span><br><span class="line">    <span class="keyword">if</span>(l == r)  <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">post</span><span class="params">(<span class="keyword">int</span> rt , <span class="keyword">int</span> l , <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//当前节点，所要覆盖的额区间[l , r]</span></span><br><span class="line">    <span class="keyword">if</span>(node[rt].cov)    <span class="keyword">return</span> <span class="literal">false</span>;                   <span class="comment">//若这个区间已经被覆盖直接返回</span></span><br><span class="line">    <span class="keyword">if</span>(node[rt].l == l &amp;&amp; node[rt].r == r)</span><br><span class="line">    &#123;</span><br><span class="line">        node[rt].cov = <span class="literal">true</span>;                            <span class="comment">//未覆盖的前提下找到整个区间时</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> res;</span><br><span class="line">    <span class="keyword">int</span> mid = (node[rt].l + node[rt].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(r &lt;= mid)    res = post(rt &lt;&lt; <span class="number">1</span> , l , r);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l &gt; mid)res = post(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span> , l , r);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">bool</span> r1 = post(rt &lt;&lt; <span class="number">1</span> , l , mid);</span><br><span class="line">        <span class="keyword">bool</span> r2 = post(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span> , mid + <span class="number">1</span> , r);</span><br><span class="line">        res = r1 || r2;                                 <span class="comment">//当跨两个区间时，，，要分别判断是否都是被覆盖的，，有一个没覆盖即露出就说明这个区间有露出的</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(node[rt &lt;&lt; <span class="number">1</span>].cov &amp;&amp; node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].cov)      <span class="comment">//两个子区间都露出父节点也是露出</span></span><br><span class="line">        node[rt].cov = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> hash[<span class="number">10000010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;<span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;n);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span> , &amp;poster[i].l , &amp;poster[i].r);</span><br><span class="line">            a[count++] = poster[i].l;</span><br><span class="line">            a[count++] = poster[i].r;</span><br><span class="line">            <span class="comment">//相邻存点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//离散</span></span><br><span class="line">        sort(a , a + count);</span><br><span class="line">        count = unique(a , a + count) - a;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i)</span><br><span class="line">            hash[a[i]] = i;</span><br><span class="line"></span><br><span class="line">        build(<span class="number">1</span> , <span class="number">0</span> , count - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)             <span class="comment">//反着遍历，，有露出的就增一</span></span><br><span class="line">            <span class="keyword">if</span>(post(<span class="number">1</span> , hash[poster[i].l] , hash[poster[i].r]))</span><br><span class="line">                ++ans;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span> , ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个缺点，，，这样单纯的离散数据会出错，，，像这一组，，，</span></span><br><span class="line"><span class="comment">//但是poj上没有考虑这种情况，，，，应该是标程的离散也是这样把，，，，，，</span></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">//1 10</span></span><br><span class="line"><span class="comment">//1 3</span></span><br><span class="line"><span class="comment">//6 10</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//应该是3</span></span><br></pre></td></tr></table></figure><h1 id="总结">总结</h1><ul><li><p>暑假时接触过一次数据的离散化，，，但是当时只是会用就行，，，最终还是忘记了，，，只知道这样一个名词，，，这次花了点时间记忆了一下，，，但是还是没有仔细深入的看看，，，因为以前看到的离散化时用的lower_bound()，，，，而且操作更加的复杂，，，过一段时间再看看把，，，，</p></li><li><p>看到网上好多人用的线段树的结构和之前写的那样一样，，，build(),update(),query()，，，但就是理解不了，，，QAQ，，，看了kuangbin的写法反到理解了，，，虽然基本是照搬过来的，，，，再过几天要重写一遍，，，</p></li></ul><p>(end)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2528&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这道题坑了我好久啊啊啊啊，，，，&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;到现在也只是理解了kaungbin的代码，，，知道每一步做什么，，，但感觉就是哪里有些不对劲的样子，，，，&lt;/p&gt;
&lt;p&gt;这道题有两个点是我感觉很重要的，，，一个是数据的离散化，，，另一个是线段树的变形，，，也就是它所维护的东西和之前见过的不一样了，，，，&lt;/p&gt;
    
    </summary>
    
      <category term="ACM-线段树" scheme="http://www.31415.cf/categories/ACM-%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="acm" scheme="http://www.31415.cf/tags/acm/"/>
    
      <category term="刷题" scheme="http://www.31415.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>线段树-最小逆序数</title>
    <link href="http://www.31415.cf/2018/10/12/%E7%BA%BF%E6%AE%B5%E6%A0%91-%E6%9C%80%E5%B0%8F%E9%80%86%E5%BA%8F%E6%95%B0/"/>
    <id>http://www.31415.cf/2018/10/12/线段树-最小逆序数/</id>
    <published>2018-10-12T09:19:16.000Z</published>
    <updated>2018-10-12T11:57:18.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p>这是一道简单的线段树的题，，，当然还有很多其他的做法，，，甚至时暴力都可以，，，</p><p>用线段树主要是为了在练一练线段树的使用，，，而且这次，，我换了一种写线段树的方法，，，</p><p>貌似也是很多大佬都在用的一种写法，，，</p><p>之前一直用的入门时为了好理解的一种写法：节点用结构体node表示，，，并且为了理解还添了每一个节点所对应的左右边界，，，</p><p>但实际上，，这些信息是没有用的，，，或者说是多余的，，，直接在使用时计算或者直接作为函数的形参传递就行了，，，，</p><p>这样的写法代码量更加的少而写写起来也方便，，，占用的空间也少了些，，，</p><a id="more"></a><h1 id="题目的分析">题目的分析</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1394" target="_blank" rel="noopener">这道题不像之前做的线段树的题那样所维护的值就是最终要求的答案，，，而是中间的某一过程量，，，</a></p><p>首先，，题目的意思就是对于一个给定的数列 <span class="math inline">\(a_0 , a_1 , a_2 , ,,, ,a_{n-1}\)</span>,,,每次将第一个数移动到后面，，，这样一共有n种序列，，，然后对于每一种序列都有一个 <strong>逆序数</strong> ，，问你在这些逆序数中最小的那个是多小，，，，</p><ul><li><p>这道题只要知道其中一个序列的逆序数，，它的相邻一个逆序数也就可以推出来，，，具体是这样的：</p><p><span class="math inline">\(当已知第i个序列的逆序数sum_i时，，\)</span></p><p><span class="math inline">\(第i+1个序列的逆序数为sum_{i+1}=sum_i + n - a[i] - 1 - a[i],,,,\)</span></p><p><span class="math inline">\(就是说当将第一个数移到最后前，，，\)</span></p><p><span class="math inline">\(它以前的逆序数有 a[i] 个所以要减去这些，，\)</span></p><p><span class="math inline">\(而当它被移到最后时，，，\)</span></p><p><span class="math inline">\(前面又多了 n - a[i] - 1 个，，，\)</span></p><p><span class="math inline">\(最后的sum就求出来了，，，\)</span></p></li><li>当知道上面这个递推式后，，，我们的任务就是求出所输入出的数列的逆序数，，，然后再根据递推式找出最小的那一个输出就行了，，，</li><li><p>对于求这个数列的逆序数用线段树的方法是，，，先建一个空的数，，，然后每输入一个数，，标记一下，，不过标记在最后的更新完成，，，先求出它之前所输入的所有数中比它大的数(也就是看这个数到n-1一共有几个出现在之前的输入中，，，也就是看标记的和)，，，也就是以它构成的逆序列，，，然后把它加(标记)到这个树里（更新），，，可以看出如果把标记改为存放这个数，，纳闷这棵树的叶子节点就是排序好的1~n-1数列，，，，这一段画个图就好理解了，，，</p></li></ul><h1 id="实现">实现</h1><p>code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson rt&lt;&lt;1,l,mid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson rt&lt;&lt;1|1,mid+1,r</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5005</span>;</span><br><span class="line"><span class="keyword">int</span> sum[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[rt] = sum[rt &lt;&lt; <span class="number">1</span>] + sum[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt , <span class="keyword">int</span> l , <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[rt] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt , <span class="keyword">int</span> l , <span class="keyword">int</span> r , <span class="keyword">int</span> loc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        ++sum[rt];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(loc &lt;= mid)  update(lson , loc);</span><br><span class="line">    <span class="keyword">else</span>            update(rson , loc);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt , <span class="keyword">int</span> l , <span class="keyword">int</span> r , <span class="keyword">int</span> L , <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line">        <span class="keyword">return</span> sum[rt];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)    ans += query(lson , L , R);</span><br><span class="line">    <span class="keyword">if</span>(R &gt;  mid)    ans += query(rson , L , R);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;n) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        build(<span class="number">1</span> , <span class="number">0</span> , n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sm = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;a[i]);</span><br><span class="line">            sm += query(<span class="number">1</span> , <span class="number">0</span> , n - <span class="number">1</span> , a[i] , n - <span class="number">1</span>);</span><br><span class="line">            update(<span class="number">1</span> , <span class="number">0</span> , n - <span class="number">1</span> , a[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ret = sm;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            sm += n - a[i] - <span class="number">1</span> - a[i];</span><br><span class="line">            ret = min(sm , ret);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span> , ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;
&lt;p&gt;这是一道简单的线段树的题，，，当然还有很多其他的做法，，，甚至时暴力都可以，，，&lt;/p&gt;
&lt;p&gt;用线段树主要是为了在练一练线段树的使用，，，而且这次，，我换了一种写线段树的方法，，，&lt;/p&gt;
&lt;p&gt;貌似也是很多大佬都在用的一种写法，，，&lt;/p&gt;
&lt;p&gt;之前一直用的入门时为了好理解的一种写法：节点用结构体node表示，，，并且为了理解还添了每一个节点所对应的左右边界，，，&lt;/p&gt;
&lt;p&gt;但实际上，，这些信息是没有用的，，，或者说是多余的，，，直接在使用时计算或者直接作为函数的形参传递就行了，，，，&lt;/p&gt;
&lt;p&gt;这样的写法代码量更加的少而写写起来也方便，，，占用的空间也少了些，，，&lt;/p&gt;
    
    </summary>
    
      <category term="ACM-线段树" scheme="http://www.31415.cf/categories/ACM-%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="acm" scheme="http://www.31415.cf/tags/acm/"/>
    
      <category term="算法" scheme="http://www.31415.cf/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="刷题" scheme="http://www.31415.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>线段树延迟更新</title>
    <link href="http://www.31415.cf/2018/10/10/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%BB%B6%E8%BF%9F%E6%9B%B4%E6%96%B0/"/>
    <id>http://www.31415.cf/2018/10/10/线段树延迟更新/</id>
    <published>2018-10-10T10:50:49.000Z</published>
    <updated>2018-10-10T11:34:54.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p>暑假集训的时候好多东西只学了个皮毛，，，对付模板题还能试试，，，但是一看一些稍难的一些题时，，，肯定单纯的套模板是不行得了，，，那样多没意思啊，，，</p><p>延迟更新之前就看到过，，，当初的映像就是在普通的线段树里加一个lazy，，，然后可以延迟更新区间，，，这在对区间整段的更新很有用，，，因为不用对更新区间的每一个点更新，，这样就能省下很多时间，，，</p><p>但是，，那时没时间也看不懂，，，跟别提怎么操作了，，，，</p><a id="more"></a><p>国庆的时候专门看看了看这块知识，，，大概了解了lazy的作用以及该怎么使用他，，</p><p><a href="https://www.cnblogs.com/AC-King/p/7789013.html" target="_blank" rel="noopener">当时是看这篇博客的</a></p><h1 id="分析">分析</h1><p>单纯的线段树主要是 <strong>单点修改，区间查询</strong> ，，，</p><p>若是不更改进行区间的修改时，，，只能对区间里的每一个数进行单点修改，，，当数据量很大时，，这样的操作很费时间，，，</p><p>所以可以对每一个节点都加一个lazy标记，，，当这一段要更新时，，父节点的lazy更新，，然后区间所维护的sum加上相应的几倍的lazy，，，，这样该节点对上时更新后的值，，向上正确，，，而对于它的两个子节点，，，只将lazy更新表明这里需要更新，，，但是并没有继续向下更新，，，这一段的操作由pushdown()函数完成，，，</p><h1 id="实现和练习">实现和练习</h1><p>看个具体的例子:<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1698" target="_blank" rel="noopener">题目链接</a>，，，</p><p>题目意思很简单，，，就是初始长度为n的一个数列值全为1，，</p><p>然后对某些区间进行赋为1 , 2 , 3的操作，，，最后问你在这些操作之后这一段的和是多少，，，</p><p>具体的实现如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="comment">//因为初始值全为一所以没有a[maxn]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    ll sum;</span><br><span class="line">    ll lazy;        <span class="comment">//lazy标记</span></span><br><span class="line">&#125;node[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[rt].sum = node[rt &lt;&lt; <span class="number">1</span>].sum + node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt , <span class="keyword">int</span> nl , <span class="keyword">int</span> nr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//rt指当前节点，，，</span></span><br><span class="line">    <span class="comment">//nl指左节点有nl个需要被赋值为lazy</span></span><br><span class="line">    <span class="comment">//同理，，nr指右节点有nr个需要被赋值为lazy</span></span><br><span class="line">    <span class="keyword">if</span>(node[rt].lazy)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//当这节点lazy不为0时，，要向下更新一下</span></span><br><span class="line">        node[rt &lt;&lt; <span class="number">1</span>].sum = node[rt].lazy * nl; <span class="comment">//修改sum</span></span><br><span class="line">        node[rt &lt;&lt; <span class="number">1</span>].lazy = node[rt].lazy; <span class="comment">//下推lazy</span></span><br><span class="line"></span><br><span class="line">        node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum = node[rt].lazy * nr;</span><br><span class="line">        node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lazy = node[rt].lazy;</span><br><span class="line"></span><br><span class="line">        node[rt].lazy = <span class="number">0</span>;      <span class="comment">//标记清除</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt , <span class="keyword">int</span> l , <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[rt].l = l;</span><br><span class="line">    node[rt].r = r;</span><br><span class="line">    node[rt].sum = <span class="number">0</span>;</span><br><span class="line">    node[rt].lazy = <span class="number">0</span>;      <span class="comment">//不要忘了</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        node[rt].sum = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = node[rt].l + ((node[rt].r - node[rt].l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    build(rt &lt;&lt; <span class="number">1</span> , l , mid);</span><br><span class="line">    build(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span> , mid + <span class="number">1</span> , r);</span><br><span class="line"></span><br><span class="line">    pushup(rt);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt , <span class="keyword">int</span> L , <span class="keyword">int</span> R , <span class="keyword">int</span> C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= node[rt].l &amp;&amp; node[rt].r &lt;= R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//当该节点对应的区间在所要操作的区间里时更新</span></span><br><span class="line">        node[rt].sum = (node[rt].r - node[rt].l + <span class="number">1</span>) * C;</span><br><span class="line">        node[rt].lazy = C;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = node[rt].l + ((node[rt].r - node[rt].l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//下推lazy标记，，想上保证正确</span></span><br><span class="line">    pushdown(rt , mid - node[rt].l + <span class="number">1</span> , node[rt].r - mid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)    update(rt &lt;&lt; <span class="number">1</span> , L , R , C);</span><br><span class="line">    <span class="keyword">if</span>(R &gt;  mid)    update(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span> , L , R , C);</span><br><span class="line">    pushup(rt);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt , <span class="keyword">int</span> L , <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= node[rt].l &amp;&amp; node[rt].r &lt;= R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> node[rt].sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = node[rt].l + ((node[rt].r - node[rt].l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    pushdown(rt , mid - node[rt].l + <span class="number">1</span> , node[rt].r - mid);</span><br><span class="line"></span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid)    ans += query(rt &lt;&lt; <span class="number">1</span> , L , R);</span><br><span class="line">    <span class="keyword">if</span>(R &gt;  mid)    ans += query(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span> , L , R);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;<span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= T; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n , q;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span> , &amp;n , &amp;q);</span><br><span class="line"></span><br><span class="line">        build(<span class="number">1</span> , <span class="number">1</span> , n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(q--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a , b , c;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span> , &amp;a , &amp;b , &amp;c);</span><br><span class="line"></span><br><span class="line">            update(<span class="number">1</span> , a , b , c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: The total value of the hook is %lld.\n"</span> , i , query(<span class="number">1</span> , <span class="number">1</span> , n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概就是这么多，，，只要理解了lazy的作用，，，以及下推的意思，，，基本就ok了，，，，</p><p>(end)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;
&lt;p&gt;暑假集训的时候好多东西只学了个皮毛，，，对付模板题还能试试，，，但是一看一些稍难的一些题时，，，肯定单纯的套模板是不行得了，，，那样多没意思啊，，，&lt;/p&gt;
&lt;p&gt;延迟更新之前就看到过，，，当初的映像就是在普通的线段树里加一个lazy，，，然后可以延迟更新区间，，，这在对区间整段的更新很有用，，，因为不用对更新区间的每一个点更新，，这样就能省下很多时间，，，&lt;/p&gt;
&lt;p&gt;但是，，那时没时间也看不懂，，，跟别提怎么操作了，，，，&lt;/p&gt;
    
    </summary>
    
      <category term="ACM-线段树" scheme="http://www.31415.cf/categories/ACM-%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="acm" scheme="http://www.31415.cf/tags/acm/"/>
    
      <category term="算法" scheme="http://www.31415.cf/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>hdu-4027线段树练习</title>
    <link href="http://www.31415.cf/2018/10/10/hdu-4027%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%BB%83%E4%B9%A0/"/>
    <id>http://www.31415.cf/2018/10/10/hdu-4027线段树练习/</id>
    <published>2018-10-10T10:07:11.000Z</published>
    <updated>2018-10-10T11:08:39.440Z</updated>
    
    <content type="html"><![CDATA[<p># 概述 <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4027" target="_blank" rel="noopener">这道线段树的题</a>可以说是我这一段时间复习线段树后第一次认认真真的做的第一道线段树的题了吧，，，，</p><p>然后，，，看似很简单的题翻车了，，，，QAQ</p><p><a id="more"></a></p><p># 题意和分析</p><p>题意大概就是给你一些数，，然后对[l , r]这个区间里的所有数进行开平方根运算，，，其中还有一些询问[l , r]的区间和，，，</p><p>看到一排数列的区间和还有更新询问操作的题型铁定是要用线段树来维护这个数列了，，，</p><p>一开始我想着结点保存两个区间和，，一个是现在未更新的区间和，，另一个是每个开方后的区间和，，，然后用lazy来延迟更新，，，然后貌似在更新时这样会少更新，，，最后的答案肯定就不对了，，</p><p>最后，，，坑了两个多小时的我还是去找别人的做法了，，，</p><p>这道题首先一点就是即使数字很大，，，<strong>但是 <span class="math inline">\(2^{63} - 1\)</span> 也就最多开8次平方根</strong>，，，<strong>而且开到1时再开平方根还是1</strong>，，，，</p><p>所以再开到区间所有数都为1时就不再对这个区间更新，，，也就是当 node[rt].sum == node[rt].r - node[rt].l + 1 时就返回上一层，，，这样就减小了更新时的操作，，，</p><p># 最终的代码，，，</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line">ll a[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    ll sum;</span><br><span class="line">&#125;node[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[rt].sum = node[rt &lt;&lt; <span class="number">1</span>].sum + node[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt , <span class="keyword">int</span> l , <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[rt].l = l;</span><br><span class="line">    node[rt].r = r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        node[rt].sum = a[l];</span><br><span class="line">        <span class="keyword">return</span>;                 <span class="comment">//要记得return，，，最近写这个总是忘记写</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    build(rt &lt;&lt; <span class="number">1</span> , l , mid);</span><br><span class="line">    build(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span> , mid + <span class="number">1</span> , r);</span><br><span class="line">    pushup(rt);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt , <span class="keyword">int</span> L , <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node[rt].sum == node[rt].r - node[rt].l + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>;                 <span class="comment">//区间全为1时返回，，，不然会tle</span></span><br><span class="line">    <span class="keyword">if</span> (node[rt].l == node[rt].r)</span><br><span class="line">    &#123;</span><br><span class="line">        node[rt].sum = (ll)(<span class="built_in">sqrt</span>(node[rt].sum));    <span class="comment">//直接开方就行了</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = (node[rt].l + node[rt].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= mid)   update(rt &lt;&lt; <span class="number">1</span> , L , R);</span><br><span class="line">    <span class="keyword">if</span> (R &gt;  mid)   update(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span> , L , R);</span><br><span class="line">    pushup(rt);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt , <span class="keyword">int</span> L , <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (L &lt;= node[rt].l &amp;&amp; node[rt].r &lt;= R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> node[rt].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> mid = (node[rt].l + node[rt].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= mid)    ans += query(rt &lt;&lt; <span class="number">1</span> , L , R);</span><br><span class="line">    <span class="keyword">if</span> (R &gt;  mid)    ans += query(rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span> , L , R);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;n) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span> , ++i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span> , &amp;a[i]);</span><br><span class="line"></span><br><span class="line">        build(<span class="number">1</span> , <span class="number">1</span> , n);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;q);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(q--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> t , l , r;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span> , &amp;t , &amp;l , &amp;r);</span><br><span class="line">            <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">                swap(l , r);        <span class="comment">//l , r不一定保证 l &lt;= r 所以要判断</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (t)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span> , query(<span class="number">1</span> , l , r));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                update(<span class="number">1</span> , l , r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);               <span class="comment">//每组测试样例之间加空行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p># 总结</p><ul><li>没看出来一个数最多开方8次啊，，，</li><li>还是不能仔细的读题，，，比如那个输入的l , r比如那个每一组测试样例之间加空行</li><li>想的太多了，，，而且最主要的是还是想着套模板解题，，，而不是就题而选择怎么写</li><li>，，，，</li></ul><p>还是做的题太少了，，还是有点像暑假时见到线段树就套板子，，套板子，，已经好几次套板子是没用的情况了，，，而且除了入门的线段树的题，，，都不是之套板子就能出结果的，，，都要在某些地方加一些判断，，，或者对数据的处理，，，线段树只是众多工具之一啊，，不是万能的呐，，，，</p><p>(end)</p><p>动手总比只想所得到的多一些，，即使结果不尽人意呐~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;# 概述 &lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=4027&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这道线段树的题&lt;/a&gt;可以说是我这一段时间复习线段树后第一次认认真真的做的第一道线段树的题了吧，，，，&lt;/p&gt;
&lt;p&gt;然后，，，看似很简单的题翻车了，，，，QAQ&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="ACM-线段树" scheme="http://www.31415.cf/categories/ACM-%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="acm" scheme="http://www.31415.cf/tags/acm/"/>
    
      <category term="算法" scheme="http://www.31415.cf/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="刷题" scheme="http://www.31415.cf/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>RMQ_第一弹_Sparse Table</title>
    <link href="http://www.31415.cf/2018/09/21/RMQ-%E7%AC%AC%E4%B8%80%E5%BC%B9/"/>
    <id>http://www.31415.cf/2018/09/21/RMQ-第一弹/</id>
    <published>2018-09-21T13:33:45.000Z</published>
    <updated>2018-10-10T10:51:33.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p><strong>RMQ (Range Minimum/Maximum Query)</strong></p><p>从英文便可以看出这个算法的主要是询问一个区间内的最值问题，，，</p><p>暑假集训的时候学习了 <strong>线段树</strong> ，，，</p><p>也可以对给定数组查询任意区间的最值问题，，，，</p><p>这两个主要的区别就是 线段树 可以进行单点的修改操作，，，而 <strong>Sparse Table</strong> 算法不能进行点修改，，</p><p>或者说这样修改一次重预处理一次不划算，，，</p><p>所以说，，要是题目只是单纯的多次查询任意区间的最值，，，Sparse Table 首选，，毕竟，，毕竟写起来比线段树简单得多了，，，</p><a id="more"></a><h1 id="预处理">预处理</h1><h2 id="算法原理">算法原理</h2><p>基本思想是dp,,,,</p><p><strong>dp的状态</strong> : 对于数组 <span class="math inline">\(a[1-n]\)</span> , <span class="math inline">\(F[i , j]\)</span>表示从第 <span class="math inline">\(i\)</span> 个位置开始 ， <strong>长度</strong> 为<span class="math inline">\(2^j\)</span> 个数这个区间中的最值，，，;</p><p><strong>dp的初始值</strong> : <span class="math inline">\(F[i , 0] = a[i]\)</span>;</p><p><strong>状态转移方程</strong> : <span class="math inline">\(F[i , j] = max (F[i , j - 1] , F[i + 2^{j - 1} , j - 1])\)</span>;</p><p><strong>思想</strong> : <span class="math inline">\(F[i , j]\)</span> 就是不断取他的左右这两段的最值，，这两段的长度相等，都为 <span class="math inline">\(2^{j - 1}\)</span> 个元素，，</p><h2 id="实现">实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n , q;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> mx[maxn][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> mi[maxn][<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rmq</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">mx[i][<span class="number">0</span>] = mi[i][<span class="number">0</span>] = a[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= n; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">mx[i][j] = max(mx[i][j - <span class="number">1</span>] , mx[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">mi[i][j] = min(mi[i][j - <span class="number">1</span>] , mi[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们需要注意的是循环的顺序，我们发现外层是j，内层所i，这是为什么呢？可以是i在外，j在内吗？ 答案是不可以。因为我们需要理解这个状态转移方程的意义。</p><p>状态转移方程的含义是：先更新所有长度为F[i,0]即1个元素，然后通过2个1个元素的最值，获得所有长度为F[i,1]即2个元素的最值，然后再通过2个2个元素的最值，获得所有长度为F[i,2]即4个元素的最值，以此类推更新所有长度的最值。</p><p>而如果是i在外，j在内的话，我们更新的顺序就是F[1,0],F[1,1],F[1,2],F[1,3],表示更新从1开始1个元素，2个元素，4个元素，8个元素（A[0],A[1],....A[7]）的最值，这里F[1,3] = max(max(A[0],A[1],A[2],A[3]),max(A[4],A[5],A[6],A[7]))的值，但是我们根本没有计算max(A[0],A[1],A[2],A[3])和max(A[4],A[5],A[6],A[7])，所以这样的方法肯定是错误的。</p><p><a href="https://blog.csdn.net/niushuai666/article/details/6624672?utm_source=copy" target="_blank" rel="noopener">本段来自某大佬博客</a></p><hr><h1 id="查询">查询</h1><h2 id="思想">思想</h2><p>假如我们需要查询的区间为(i,j)，那么我们需要找到覆盖这个闭区间(左边界取i，右边界取j)的最小幂（可以重复，比如查询5，6，7，8，9，我们可以查询5678和6789）。</p><p>因为这个区间的长度为 <span class="math inline">\(j - i + 1\)</span> ,所以我们可以取 <span class="math inline">\(k=log2( j - i + 1)\)</span> ，则有：<span class="math inline">\(RMQ(A, i, j)=max(F[i , k], F[ j - 2 ^ k + 1, k])\)</span>。</p><p>举例说明，要求区间[2，8]的最大值，<span class="math inline">\(k = log_2（8 - 2 + 1）= 2\)</span>，即求 <span class="math inline">\(max(F[2, 2]，F[8 - 2 ^ 2 + 1, 2]) = max(F[2, 2]，F[5, 2])\)</span>；</p><h2 id="实现-1">实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ans</span><span class="params">(<span class="keyword">int</span> l , <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = r - l + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; (k + <span class="number">1</span>)) &lt;= len)</span><br><span class="line">++k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> max (mx[l][k] , mx[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]) - min (mi[l][k] , mi[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实战">实战</h1><p><a href="http://poj.org/problem?id=3264" target="_blank" rel="noopener">题目链接</a></p><p>题目大意: 给定的数列a[1 - n] , 求出[l , r]这个区间内的极差 ， 即最大值与最小值的差</p><p>直接套板子，，，，</p><p>ac代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n , q;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> mx[maxn][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> mi[maxn][<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rmq</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">mx[i][<span class="number">0</span>] = mi[i][<span class="number">0</span>] = a[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= n; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">mx[i][j] = max(mx[i][j - <span class="number">1</span>] , mx[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">mi[i][j] = min(mi[i][j - <span class="number">1</span>] , mi[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ans</span><span class="params">(<span class="keyword">int</span> l , <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = r - l + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; (k + <span class="number">1</span>)) &lt;= len)</span><br><span class="line">++k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> max (mx[l][k] , mx[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]) - min (mi[l][k] , mi[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123; </span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span> , &amp;n , &amp;q) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;a[i]);</span><br><span class="line"></span><br><span class="line">rmq();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (q--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> l , r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span> , &amp;l , &amp;r);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span> , ans(l , r));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="kuangbin的板子">kuangbin的板子:</h1><p>一维:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">50010</span>;</span><br><span class="line"><span class="keyword">int</span> dp[MAXN][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> mm[MAXN];</span><br><span class="line"><span class="comment">//初始化 RMQ, b 数组下标从 1 开始，从 0 开始简单修改</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initRMQ</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mm[<span class="number">0</span>] = −<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mm[i] = ((i&amp;(i−<span class="number">1</span>)) == <span class="number">0</span>)?mm[i−<span class="number">1</span>]+<span class="number">1</span>:mm[i−<span class="number">1</span>];</span><br><span class="line">        dp[i][<span class="number">0</span>] = b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= mm[n]; j++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span>&lt;&lt;j) −<span class="number">1</span> &lt;= n; i++)</span><br><span class="line">            dp[i][j] = max(dp[i][j−<span class="number">1</span>],dp[i+(<span class="number">1</span>&lt;&lt;(j−<span class="number">1</span>))][j−<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//查询最大值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rmq</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = mm[y−x+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> max(dp[x][k],dp[y−(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;RMQ (Range Minimum/Maximum Query)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从英文便可以看出这个算法的主要是询问一个区间内的最值问题，，，&lt;/p&gt;
&lt;p&gt;暑假集训的时候学习了 &lt;strong&gt;线段树&lt;/strong&gt; ，，，&lt;/p&gt;
&lt;p&gt;也可以对给定数组查询任意区间的最值问题，，，，&lt;/p&gt;
&lt;p&gt;这两个主要的区别就是 线段树 可以进行单点的修改操作，，，而 &lt;strong&gt;Sparse Table&lt;/strong&gt; 算法不能进行点修改，，&lt;/p&gt;
&lt;p&gt;或者说这样修改一次重预处理一次不划算，，，&lt;/p&gt;
&lt;p&gt;所以说，，要是题目只是单纯的多次查询任意区间的最值，，，Sparse Table 首选，，毕竟，，毕竟写起来比线段树简单得多了，，，&lt;/p&gt;
    
    </summary>
    
      <category term="ACM-RMQ" scheme="http://www.31415.cf/categories/ACM-RMQ/"/>
    
    
      <category term="acm" scheme="http://www.31415.cf/tags/acm/"/>
    
      <category term="RMQ" scheme="http://www.31415.cf/tags/RMQ/"/>
    
      <category term="ST" scheme="http://www.31415.cf/tags/ST/"/>
    
      <category term="dp" scheme="http://www.31415.cf/tags/dp/"/>
    
      <category term="数据结构" scheme="http://www.31415.cf/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://www.31415.cf/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>acm-STL</title>
    <link href="http://www.31415.cf/2018/09/18/acm-STL/"/>
    <id>http://www.31415.cf/2018/09/18/acm-STL/</id>
    <published>2018-09-18T12:05:52.000Z</published>
    <updated>2018-09-21T15:19:01.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p>c++中有很多stl模板，，在解决一些问题时使用它们可以在较小的时间复杂度里完成题目，，，</p><p>本篇博客主要是对一些常用的stl的总结，，，</p><p>大部分内容来自大佬的 <a href="https://blog.csdn.net/f_zyj/article/details/51594851" target="_blank" rel="noopener">博客</a>;</p><p>主要内容有: <strong>pair</strong> , <strong>set</strong> , <strong>vector</strong> , <strong>string</strong> , <strong>stack</strong> , <strong>queue</strong> , <strong>map</strong> , <strong>bitset</strong> , <strong>iterator</strong> , <strong>algorithm</strong>.</p><a id="more"></a><h1 id="pair">pair</h1><p><strong>头文件</strong>: <figure class="highlight plain"><figcaption><span><utility>```</utility></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**作用**: 用来表示一个 **二元组** 或 **元素对** ， （相当于平面里的一个点） ， 并提供了按照字典序对元素进行大小比较运算符模板函数，，，</span><br><span class="line"></span><br><span class="line">**使用**: </span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line">pair&lt;int , int&gt; p;</span><br><span class="line">cin &gt;&gt; p.first &gt;&gt; p.second;</span><br><span class="line">cout &lt;&lt; p.first &lt;&lt; p.second;</span><br></pre></td></tr></table></figure></p><p>pair需要两个参数，首尾元素的数据类型。</p><p>pair有两个对象成员，<strong>first</strong> , <strong>second</strong>;</p><p>在&lt;utility&gt;中已经定义了pair上的六个比较运算符：&lt;、&gt;、&lt;=、&gt;=、==、!=，其规则是先比较first，first相等时再比较second，这符合大多数应用的逻辑。当然，也可以通过重载这几个运算符来重新指定自己的比较逻辑。 除了直接定义一个pair对象外，如果需要即时生成一个pair对象，也可以调用在&lt;utility&gt;中定义的一个模版函数：make_pair。make_pair需要两个参数，分别为元素对的首元素和尾元素。</p><h1 id="set">set</h1><h2 id="set-1">set</h2><p><strong>头文件</strong>: <figure class="highlight plain"><figcaption><span><set>```</set></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**作用**: set是与 **集合** 相关的容器，STL为我们提供了set的实现，在编程题中遇见集合问题直接调用是十分方便的。</span><br><span class="line"></span><br><span class="line">**使用**: </span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line">set&lt;int&gt; s;</span><br><span class="line">set&lt;double&gt; ss;</span><br></pre></td></tr></table></figure></p><p><strong>基本操作</strong>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">s.begin()       <span class="comment">//  返回指向第一个元素的迭代器</span></span><br><span class="line">s.clear()       <span class="comment">//  清除所有元素</span></span><br><span class="line">s.count()       <span class="comment">//  返回某个值元素的个数</span></span><br><span class="line">s.empty()       <span class="comment">//  如果集合为空，返回true(真）</span></span><br><span class="line">s.end()         <span class="comment">//  返回指向最后一个元素之后的迭代器，不是最后一个元素</span></span><br><span class="line">s.equal_range() <span class="comment">//  返回集合中与给定值相等的上下限的两个迭代器</span></span><br><span class="line">s.erase()       <span class="comment">//  删除集合中的元素</span></span><br><span class="line">s.find()        <span class="comment">//  返回一个指向被查找到元素的迭代器</span></span><br><span class="line">s.get_allocator()   <span class="comment">//  返回集合的分配器</span></span><br><span class="line">s.insert()      <span class="comment">//  在集合中插入元素</span></span><br><span class="line">s.lower_bound() <span class="comment">//  返回指向大于（或等于）某值的第一个元素的迭代器</span></span><br><span class="line">s.key_comp()    <span class="comment">//  返回一个用于元素间值比较的函数</span></span><br><span class="line">s.max_size()    <span class="comment">//  返回集合能容纳的元素的最大限值</span></span><br><span class="line">s.rbegin()      <span class="comment">//  返回指向集合中最后一个元素的反向迭代器</span></span><br><span class="line">s.rend()        <span class="comment">//  返回指向集合中第一个元素的反向迭代器</span></span><br><span class="line">s.size()        <span class="comment">//  集合中元素的数目</span></span><br><span class="line">s.swap()        <span class="comment">//  交换两个集合变量</span></span><br><span class="line">s.upper_bound() <span class="comment">//  返回大于某个值元素的迭代器</span></span><br><span class="line">s.value_comp()  <span class="comment">//  返回一个用于比较元素间的值的函数</span></span><br></pre></td></tr></table></figure><h2 id="multiset">multiset</h2><p>multiset（多重集合）</p><p><strong>与set的区别</strong>: + 多重集合与集合的区别在于集合中 <strong>不能</strong> 存在相同元素，而多重集合中可以存在。 + multiset和set的基本操作相似，需要注意的是，集合的count()能返回0（无）或者1（有），而多重集合是有多少个返回多少个。</p><p><strong>使用</strong>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">double</span>&gt; ss;</span><br></pre></td></tr></table></figure><h1 id="vector">vector</h1><p><strong>头文件</strong>: <figure class="highlight plain"><figcaption><span><vector>```</vector></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**作用**: vector(向量容器模板类) ， 以连续数组的方式储存元素序列 ， 一般作为动态数组来用，，动态增长储存空间，</span><br><span class="line"></span><br><span class="line">**使用**:</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line">vector&lt;int&gt; s;      </span><br><span class="line">//  定义一个空的vector对象，存储的是int类型的元素</span><br><span class="line">vector&lt;int&gt; s(n);   </span><br><span class="line">//  定义一个含有n个int元素的vector对象</span><br><span class="line">vector&lt;int&gt; s(first, last); </span><br><span class="line">//  定义一个vector对象，并从由迭代器first和last定义的序列[first, last)中复制初值</span><br></pre></td></tr></table></figure></p><p>vector模版类需要两个模版参数，第一个参数是存储元素的数据类型，第二个参数是存储分配器的类型，其中第二个参数是可选的，如果不给出第二个参数，将使用默认的分配器。</p><p><strong>vector的基本操作</strong>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">s[i]                <span class="comment">//  直接以下标方式访问容器中的元素</span></span><br><span class="line">s.front()           <span class="comment">//  返回首元素</span></span><br><span class="line">s.back()            <span class="comment">//  返回尾元素</span></span><br><span class="line">s.push_back(x)      <span class="comment">//  向表尾插入元素x</span></span><br><span class="line">s.size()            <span class="comment">//  返回表长</span></span><br><span class="line">s.empty()           <span class="comment">//  表为空时，返回真，否则返回假</span></span><br><span class="line">s.pop_back()        <span class="comment">//  删除表尾元素</span></span><br><span class="line">s.begin()           <span class="comment">//  返回指向首元素的随机存取迭代器</span></span><br><span class="line">s.end()             <span class="comment">//  返回指向尾元素的下一个位置的随机存取迭代器</span></span><br><span class="line">s.insert(it, val)   <span class="comment">//  向迭代器it指向的元素前插入新元素val</span></span><br><span class="line">s.insert(it, n, val)<span class="comment">//  向迭代器it指向的元素前插入n个新元素val</span></span><br><span class="line">s.insert(it, first, last)   </span><br><span class="line"><span class="comment">//  将由迭代器first和last所指定的序列[first, last)插入到迭代器it指向的元素前面</span></span><br><span class="line">s.erase(it)         <span class="comment">//  删除由迭代器it所指向的元素</span></span><br><span class="line">s.erase(first, last)<span class="comment">//  删除由迭代器first和last所指定的序列[first, last)</span></span><br><span class="line">s.reserve(n)        <span class="comment">//  预分配缓冲空间，使存储空间至少可容纳n个元素</span></span><br><span class="line">s.resize(n)         <span class="comment">//  改变序列长度，超出的元素将会全部被删除，如果序列需要扩展（原空间小于n），元素默认值将填满扩展出的空间</span></span><br><span class="line">s.resize(n, val)    <span class="comment">//  改变序列长度，超出的元素将会全部被删除，如果序列需要扩展（原空间小于n），val将填满扩展出的空间</span></span><br><span class="line">s.clear()           <span class="comment">//  删除容器中的所有元素</span></span><br><span class="line">s.swap(v)           <span class="comment">//  将s与另一个vector对象进行交换</span></span><br><span class="line">s.assign(first, last)</span><br><span class="line"><span class="comment">//  将序列替换成由迭代器first和last所指定的序列[first, last)，[first, last)不能是原序列中的一部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  要注意的是，resize操作和clear操作都是对表的有效元素进行的操作，但并不一定会改变缓冲空间的大小</span></span><br><span class="line"><span class="comment">//  另外，vector还有其他的一些操作，如反转、取反等，不再一一列举</span></span><br><span class="line"><span class="comment">//  vector上还定义了序列之间的比较操作运算符（&gt;、&lt;、&gt;=、&lt;=、==、!=），可以按照字典序比较两个序列。</span></span><br></pre></td></tr></table></figure><h1 id="string">string</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;
&lt;p&gt;c++中有很多stl模板，，在解决一些问题时使用它们可以在较小的时间复杂度里完成题目，，，&lt;/p&gt;
&lt;p&gt;本篇博客主要是对一些常用的stl的总结，，，&lt;/p&gt;
&lt;p&gt;大部分内容来自大佬的 &lt;a href=&quot;https://blog.csdn.net/f_zyj/article/details/51594851&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;博客&lt;/a&gt;;&lt;/p&gt;
&lt;p&gt;主要内容有: &lt;strong&gt;pair&lt;/strong&gt; , &lt;strong&gt;set&lt;/strong&gt; , &lt;strong&gt;vector&lt;/strong&gt; , &lt;strong&gt;string&lt;/strong&gt; , &lt;strong&gt;stack&lt;/strong&gt; , &lt;strong&gt;queue&lt;/strong&gt; , &lt;strong&gt;map&lt;/strong&gt; , &lt;strong&gt;bitset&lt;/strong&gt; , &lt;strong&gt;iterator&lt;/strong&gt; , &lt;strong&gt;algorithm&lt;/strong&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="acm" scheme="http://www.31415.cf/categories/acm/"/>
    
    
      <category term="acm" scheme="http://www.31415.cf/tags/acm/"/>
    
      <category term="c++" scheme="http://www.31415.cf/tags/c/"/>
    
  </entry>
  
</feed>
